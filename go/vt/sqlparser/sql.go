// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	execsubquery         *ExecSubquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	execVarDef           ExecVarDef
	execVarDefOpt        *ExecVarDef
	execVarDefs          []ExecVarDef
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688
const AUTH = 57689
const INTERACTIVE = 57690
const LOGIN = 57691
const REVOKE = 57692
const SA = 57693
const SERVICEACCOUNT = 57694
const SLEEP = 57695
const EXEC = 57696
const INFRAQL = 57697

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"AUTH",
	"INTERACTIVE",
	"LOGIN",
	"REVOKE",
	"SA",
	"SERVICEACCOUNT",
	"SLEEP",
	"EXEC",
	"INFRAQL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	364, 86,
	-2, 31,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	169, 337,
	170, 337,
	230, 325,
	234, 325,
	235, 325,
	236, 325,
	-2, 323,
	-1, 50,
	134, 347,
	-2, 345,
	-1, 53,
	6, 353,
	8, 353,
	9, 353,
	10, 353,
	57, 353,
	262, 353,
	-2, 325,
	-1, 77,
	38, 383,
	-2, 391,
	-1, 401,
	120, 719,
	-2, 715,
	-1, 402,
	120, 720,
	-2, 716,
	-1, 419,
	38, 384,
	-2, 396,
	-1, 420,
	38, 385,
	-2, 397,
	-1, 443,
	88, 988,
	-2, 77,
	-1, 444,
	88, 898,
	-2, 78,
	-1, 449,
	88, 865,
	-2, 681,
	-1, 451,
	88, 932,
	-2, 683,
	-1, 775,
	56, 59,
	58, 59,
	-2, 63,
	-1, 956,
	120, 722,
	-2, 718,
	-1, 1040,
	22, 885,
	45, 885,
	46, 885,
	47, 885,
	48, 885,
	49, 885,
	51, 885,
	52, 885,
	53, 885,
	54, 885,
	58, 885,
	59, 885,
	64, 885,
	120, 885,
	135, 885,
	-2, 376,
	-1, 1416,
	5, 640,
	17, 640,
	19, 640,
	31, 640,
	59, 640,
	-2, 423,
}

const yyPrivate = 57344

const yyLast = 18092

var yyAct = [...]int{
	401, 1662, 1652, 1455, 1619, 1335, 345, 1240, 1533, 1569,
	1069, 1396, 1042, 1261, 360, 1429, 1466, 412, 374, 1241,
	1397, 1393, 1402, 1065, 343, 604, 615, 636, 1078, 700,
	1408, 76, 3, 993, 1112, 331, 742, 448, 1228, 943,
	96, 1358, 749, 1068, 296, 896, 1169, 296, 774, 1303,
	1312, 1082, 96, 788, 874, 950, 1037, 1044, 1026, 752,
	769, 421, 747, 406, 976, 347, 920, 1098, 764, 442,
	768, 1108, 787, 74, 30, 573, 437, 72, 759, 434,
	1019, 404, 777, 296, 96, 887, 71, 574, 296, 336,
	296, 332, 294, 906, 335, 1208, 714, 403, 1210, 1209,
	736, 737, 7, 593, 330, 1655, 6, 5, 713, 306,
	445, 1639, 1650, 1627, 77, 79, 80, 81, 82, 83,
	1647, 1456, 1638, 1626, 1375, 1489, 578, 1424, 1425, 1423,
	32, 436, 64, 35, 36, 789, 575, 790, 577, 427,
	300, 1059, 292, 288, 289, 290, 334, 407, 284, 303,
	317, 282, 635, 286, 1060, 1061, 333, 310, 1595, 662,
	661, 671, 672, 664, 665, 666, 667, 668, 669, 670,
	663, 1091, 386, 673, 392, 393, 390, 391, 389, 388,
	387, 63, 1294, 1337, 613, 1523, 1099, 1092, 394, 395,
	1275, 308, 1480, 1274, 630, 1478, 1276, 315, 631, 628,
	629, 324, 98, 99, 100, 32, 33, 64, 35, 36,
	320, 904, 326, 322, 634, 623, 624, 633, 1339, 863,
	860, 1649, 1646, 1620, 68, 862, 1334, 301, 1020, 37,
	56, 57, 1613, 59, 1083, 98, 99, 100, 1670, 1338,
	1577, 594, 907, 908, 909, 1666, 580, 1570, 286, 953,
	285, 1340, 46, 867, 312, 304, 63, 313, 314, 320,
	864, 861, 1572, 305, 307, 317, 291, 302, 319, 318,
	1331, 638, 283, 1262, 1264, 1085, 1333, 851, 1419, 1418,
	1085, 1417, 576, 296, 585, 586, 583, 299, 296, 287,
	595, 1188, 1602, 1143, 296, 590, 1142, 685, 686, 1185,
	296, 602, 1504, 1463, 608, 96, 610, 617, 612, 96,
	1271, 96, 98, 99, 100, 1233, 1198, 637, 1177, 1066,
	1148, 783, 39, 40, 42, 41, 44, 96, 58, 763,
	698, 584, 673, 1571, 600, 1596, 592, 329, 1055, 999,
	609, 611, 599, 1099, 1625, 98, 99, 100, 601, 1578,
	1576, 45, 67, 66, 606, 1263, 54, 55, 43, 1322,
	642, 1664, 901, 587, 1665, 588, 1663, 86, 589, 647,
	648, 1492, 47, 48, 653, 49, 50, 51, 52, 1084,
	1332, 650, 1330, 1611, 1084, 663, 65, 1586, 673, 1406,
	316, 1318, 1319, 1320, 596, 597, 598, 653, 977, 1442,
	1385, 685, 686, 1216, 981, 296, 87, 897, 683, 685,
	686, 791, 662, 661, 671, 672, 664, 665, 666, 667,
	668, 669, 670, 663, 888, 1359, 673, 646, 1377, 607,
	96, 645, 296, 296, 296, 643, 644, 640, 605, 1088,
	740, 96, 977, 1085, 1195, 853, 1089, 96, 1292, 739,
	701, 1615, 63, 738, 666, 667, 668, 669, 670, 663,
	1671, 65, 673, 1321, 923, 1630, 1361, 445, 1326, 1323,
	1314, 1324, 1317, 756, 1313, 98, 99, 100, 1315, 1316,
	766, 415, 775, 753, 717, 719, 1529, 723, 725, 767,
	728, 741, 1325, 622, 898, 625, 716, 718, 720, 722,
	724, 726, 727, 1363, 1672, 1367, 927, 1362, 1528, 1360,
	786, 889, 1307, 776, 1365, 888, 606, 1306, 781, 1295,
	925, 926, 924, 1364, 662, 661, 671, 672, 664, 665,
	666, 667, 668, 669, 670, 663, 1366, 1368, 673, 664,
	665, 666, 667, 668, 669, 670, 663, 1084, 405, 673,
	652, 650, 1081, 1079, 1632, 1080, 1612, 1549, 651, 652,
	650, 1526, 1077, 1083, 1004, 1005, 1379, 653, 995, 62,
	61, 69, 579, 296, 1493, 1383, 653, 849, 96, 73,
	852, 1170, 854, 296, 296, 96, 96, 96, 915, 917,
	918, 296, 1304, 1156, 296, 916, 879, 296, 872, 873,
	605, 296, 889, 96, 416, 1183, 416, 1182, 96, 96,
	96, 296, 96, 96, 1184, 1539, 1648, 651, 652, 650,
	281, 799, 1634, 416, 96, 96, 651, 652, 650, 878,
	1211, 855, 856, 416, 1215, 653, 1539, 1623, 876, 865,
	1583, 296, 436, 891, 653, 871, 662, 661, 671, 672,
	664, 665, 666, 667, 668, 669, 670, 663, 32, 884,
	673, 1405, 98, 99, 100, 581, 582, 1582, 751, 651,
	652, 650, 1438, 868, 944, 921, 651, 652, 650, 1086,
	618, 1539, 416, 946, 1539, 1603, 1001, 653, 1556, 905,
	1162, 1163, 1164, 1022, 653, 1539, 1574, 96, 572, 75,
	892, 431, 432, 890, 1229, 620, 98, 99, 100, 63,
	947, 948, 1394, 965, 968, 1405, 98, 99, 100, 978,
	945, 1023, 922, 1539, 1538, 954, 1000, 1519, 1518, 1013,
	96, 96, 98, 99, 100, 1500, 956, 637, 637, 98,
	99, 100, 1012, 1278, 960, 651, 652, 650, 1506, 416,
	1023, 96, 649, 955, 1503, 416, 1585, 996, 296, 701,
	1446, 96, 850, 653, 990, 991, 296, 1006, 1023, 857,
	858, 859, 1448, 1447, 296, 296, 1012, 957, 296, 296,
	1444, 1445, 296, 296, 296, 96, 779, 877, 986, 987,
	954, 1229, 881, 882, 883, 1279, 885, 886, 96, 574,
	1058, 956, 1444, 1443, 619, 1039, 1015, 1201, 893, 894,
	1200, 445, 1012, 416, 1021, 1014, 621, 1012, 1018, 1023,
	416, 876, 649, 416, 1070, 798, 797, 1051, 779, 778,
	1049, 780, 778, 782, 1050, 409, 32, 1405, 1052, 1016,
	363, 362, 365, 366, 367, 368, 1002, 866, 784, 364,
	369, 32, 296, 96, 1056, 96, 1048, 1135, 1057, 1053,
	1235, 296, 296, 296, 296, 296, 1236, 296, 296, 63,
	1640, 296, 96, 780, 1073, 778, 1535, 1093, 1511, 1113,
	1100, 1101, 1102, 1114, 1434, 402, 63, 63, 296, 1409,
	1410, 296, 1346, 296, 1282, 1109, 296, 1104, 296, 296,
	1117, 1103, 63, 296, 96, 1336, 96, 1536, 1116, 1137,
	1138, 1139, 1140, 1141, 1657, 1144, 1145, 1110, 1111, 1146,
	1653, 1436, 1153, 1412, 1394, 97, 1308, 902, 870, 297,
	1252, 1415, 297, 311, 1414, 1253, 1149, 97, 1249, 1150,
	1250, 766, 1248, 921, 1152, 1251, 1644, 1637, 1387, 422,
	1218, 1157, 961, 962, 750, 1642, 967, 970, 971, 1227,
	1226, 1151, 1254, 423, 1032, 1033, 973, 743, 297, 97,
	754, 755, 425, 297, 424, 297, 1299, 796, 1179, 744,
	974, 985, 603, 1617, 988, 989, 1291, 327, 1616, 1554,
	922, 1165, 1289, 1284, 1498, 1094, 1095, 1096, 1097, 1028,
	1031, 1032, 1033, 1029, 1531, 1030, 1034, 1119, 869, 1409,
	1410, 1105, 1106, 1107, 296, 1036, 1028, 1031, 1032, 1033,
	1029, 1178, 1030, 1034, 296, 296, 296, 296, 296, 1242,
	410, 411, 407, 1217, 75, 413, 296, 1118, 422, 1120,
	1194, 1225, 296, 1222, 1497, 414, 296, 1229, 1496, 1224,
	296, 1237, 423, 1390, 632, 1189, 1147, 1659, 1658, 419,
	420, 425, 1186, 424, 895, 1221, 757, 1277, 1659, 96,
	1231, 1600, 1230, 1260, 1524, 998, 1232, 409, 1283, 1280,
	73, 78, 637, 637, 70, 1244, 1245, 1267, 1247, 1269,
	1, 1270, 992, 1255, 1243, 1070, 1212, 1246, 1038, 28,
	1213, 1651, 1214, 1266, 958, 959, 1268, 994, 1457, 1287,
	1288, 1532, 1272, 1125, 1618, 1568, 1428, 96, 96, 1076,
	1067, 85, 1298, 571, 1300, 1301, 1302, 84, 1610, 616,
	1075, 1074, 1285, 1286, 671, 672, 664, 665, 666, 667,
	668, 669, 670, 663, 1575, 997, 673, 96, 1522, 296,
	1087, 1293, 1090, 1435, 1305, 1290, 1614, 1311, 804, 802,
	803, 801, 1296, 1297, 806, 805, 800, 309, 297, 440,
	903, 323, 1035, 297, 1327, 792, 1344, 1115, 96, 297,
	758, 88, 1329, 1328, 944, 297, 876, 1121, 900, 626,
	97, 627, 681, 1223, 97, 1343, 97, 1273, 1347, 446,
	439, 1174, 1175, 1342, 1355, 1345, 1400, 1003, 746, 1495,
	1389, 1193, 97, 1348, 710, 975, 1357, 772, 346, 914,
	361, 1356, 1192, 1369, 296, 1380, 1370, 358, 359, 1007,
	1234, 655, 1354, 344, 96, 1376, 956, 338, 771, 96,
	96, 1386, 1242, 1395, 1027, 1384, 1025, 1024, 435, 1411,
	1407, 770, 1011, 955, 418, 1398, 1207, 1488, 1594, 417,
	1355, 972, 53, 1159, 328, 34, 96, 426, 60, 29,
	27, 22, 1388, 21, 20, 19, 18, 1413, 24, 1404,
	96, 17, 96, 96, 16, 15, 637, 637, 1420, 591,
	297, 38, 1427, 26, 25, 14, 13, 12, 11, 10,
	1441, 9, 1310, 8, 4, 641, 1070, 1422, 1070, 296,
	1421, 23, 1431, 1432, 1433, 97, 699, 297, 297, 297,
	1439, 1440, 2, 1426, 0, 0, 97, 0, 0, 296,
	0, 1341, 97, 0, 0, 96, 0, 1458, 96, 96,
	96, 296, 0, 0, 0, 0, 0, 96, 1450, 0,
	0, 1172, 0, 0, 429, 1173, 0, 1449, 0, 0,
	0, 0, 0, 1451, 0, 1453, 1180, 1181, 0, 1464,
	0, 1465, 1187, 1468, 1471, 1190, 1191, 1452, 0, 0,
	0, 0, 0, 1197, 0, 0, 0, 1199, 0, 1462,
	1202, 1203, 1204, 1205, 1206, 0, 0, 0, 1476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 1242, 0, 337, 0, 0, 1499, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 1280, 0, 1517,
	0, 0, 1257, 1258, 1259, 0, 0, 1507, 0, 0,
	96, 1521, 0, 1070, 0, 0, 0, 96, 297, 0,
	0, 0, 0, 97, 296, 0, 0, 0, 297, 297,
	97, 97, 97, 0, 0, 1542, 297, 0, 0, 297,
	0, 0, 297, 1534, 0, 0, 297, 0, 97, 0,
	0, 375, 31, 97, 97, 97, 297, 97, 97, 0,
	0, 876, 0, 0, 96, 96, 1548, 96, 1540, 97,
	97, 1525, 96, 1527, 96, 96, 96, 296, 1537, 1398,
	96, 1555, 0, 31, 0, 1561, 297, 1553, 1562, 1567,
	1563, 1565, 1566, 0, 1557, 1573, 96, 296, 0, 1579,
	96, 0, 1541, 0, 0, 0, 0, 1473, 1474, 1580,
	1475, 1581, 1587, 1477, 0, 1479, 0, 0, 0, 0,
	0, 0, 0, 0, 408, 0, 0, 0, 1601, 0,
	0, 1609, 0, 0, 0, 1398, 0, 0, 1608, 1352,
	1353, 1607, 97, 0, 0, 1588, 96, 96, 0, 0,
	0, 0, 0, 0, 1621, 0, 0, 1622, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 1242, 1628, 0,
	0, 0, 1534, 1070, 296, 97, 97, 0, 1520, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 1636,
	0, 0, 0, 0, 1530, 0, 97, 0, 0, 1641,
	1643, 96, 0, 297, 0, 0, 97, 0, 0, 0,
	0, 297, 0, 0, 1656, 0, 0, 1645, 0, 297,
	297, 1667, 1631, 297, 297, 1416, 0, 297, 297, 297,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 97, 0, 0, 0, 657, 0, 660,
	0, 0, 0, 0, 654, 674, 675, 676, 677, 678,
	679, 680, 0, 658, 659, 656, 662, 661, 671, 672,
	664, 665, 666, 667, 668, 669, 670, 663, 0, 0,
	673, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 0, 0, 325, 0, 0, 0, 297, 97, 711,
	97, 0, 0, 0, 0, 0, 297, 297, 297, 297,
	297, 0, 297, 297, 0, 0, 297, 97, 0, 1470,
	0, 0, 0, 1472, 0, 447, 0, 1491, 745, 748,
	0, 1486, 0, 297, 1481, 1482, 297, 0, 297, 0,
	0, 297, 0, 297, 297, 0, 0, 0, 297, 97,
	0, 97, 1131, 0, 0, 0, 614, 0, 0, 0,
	614, 0, 614, 0, 1501, 1502, 1130, 1505, 662, 661,
	671, 672, 664, 665, 666, 667, 668, 669, 670, 663,
	31, 0, 673, 0, 0, 1516, 0, 0, 0, 0,
	0, 0, 0, 682, 684, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 1129, 0,
	0, 662, 661, 671, 672, 664, 665, 666, 667, 668,
	669, 670, 663, 0, 697, 673, 0, 0, 702, 703,
	704, 705, 706, 707, 708, 709, 0, 712, 715, 715,
	715, 721, 715, 715, 721, 715, 729, 730, 731, 732,
	733, 734, 735, 0, 0, 340, 0, 0, 0, 297,
	31, 1126, 1123, 1124, 0, 1122, 0, 0, 0, 297,
	297, 297, 297, 297, 0, 0, 0, 0, 1564, 0,
	0, 297, 0, 0, 773, 0, 0, 297, 0, 0,
	1485, 297, 0, 0, 0, 297, 0, 0, 1133, 1136,
	0, 0, 0, 0, 0, 0, 0, 0, 1590, 1591,
	1592, 1593, 0, 1597, 97, 1598, 1599, 0, 0, 0,
	0, 880, 1484, 0, 0, 0, 0, 0, 1604, 0,
	1605, 1606, 0, 0, 0, 0, 0, 0, 1128, 0,
	0, 0, 0, 0, 0, 0, 447, 899, 0, 0,
	447, 0, 447, 0, 0, 0, 0, 0, 0, 1624,
	1127, 1483, 97, 97, 910, 911, 912, 913, 639, 0,
	662, 661, 671, 672, 664, 665, 666, 667, 668, 669,
	670, 663, 0, 1633, 673, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 297, 0, 0, 0, 0, 0,
	1132, 0, 662, 661, 671, 672, 664, 665, 666, 667,
	668, 669, 670, 663, 0, 1134, 673, 0, 0, 963,
	964, 0, 0, 97, 0, 1668, 1669, 0, 0, 614,
	0, 0, 0, 0, 0, 0, 614, 614, 614, 0,
	0, 662, 661, 671, 672, 664, 665, 666, 667, 668,
	669, 670, 663, 0, 614, 673, 0, 0, 0, 614,
	614, 614, 0, 614, 614, 0, 0, 0, 0, 297,
	1349, 761, 0, 0, 0, 614, 614, 0, 0, 97,
	0, 0, 447, 0, 97, 97, 0, 0, 793, 0,
	662, 661, 671, 672, 664, 665, 666, 667, 668, 669,
	670, 663, 0, 0, 673, 0, 1064, 0, 0, 1171,
	0, 97, 662, 661, 671, 672, 664, 665, 666, 667,
	668, 669, 670, 663, 0, 97, 673, 97, 97, 662,
	661, 671, 672, 664, 665, 666, 667, 668, 669, 670,
	663, 0, 0, 673, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 661, 671, 672, 664, 665,
	666, 667, 668, 669, 670, 663, 0, 0, 673, 0,
	0, 0, 0, 0, 297, 0, 0, 0, 0, 0,
	97, 0, 0, 97, 97, 97, 297, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 0, 0, 0, 0, 0, 447,
	0, 0, 0, 0, 0, 1041, 447, 447, 447, 773,
	0, 0, 0, 773, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 447, 0, 0, 0, 0, 447,
	447, 447, 0, 447, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 447, 447, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1196, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 97, 0, 614, 0, 614, 0, 0, 297,
	0, 0, 0, 0, 0, 1219, 1220, 748, 0, 0,
	0, 0, 0, 614, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 949, 0,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	97, 0, 97, 0, 979, 0, 0, 97, 0, 97,
	97, 97, 297, 0, 0, 97, 0, 0, 0, 0,
	0, 983, 984, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 297, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 1008, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 761, 0, 0, 447, 1176, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 447, 0, 0, 0,
	0, 97, 97, 0, 0, 0, 0, 0, 0, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 0, 0, 0, 773, 97, 0, 0, 0,
	0, 1238, 1239, 0, 0, 773, 773, 773, 773, 773,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 821, 0, 1041, 447, 1265, 447, 0, 0, 0,
	0, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	1378, 919, 0, 447, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 0,
	0, 0, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1391, 1158, 0, 1160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 982, 0, 0, 0, 809, 295, 0, 0, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 430, 0, 0, 438, 822, 0, 0, 0,
	295, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 838, 839, 840, 841, 842, 843, 0,
	844, 845, 846, 847, 848, 823, 824, 825, 826, 807,
	808, 836, 0, 810, 979, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 827, 828, 829, 830, 831,
	832, 833, 834, 0, 0, 0, 0, 0, 1399, 0,
	31, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	447, 0, 0, 0, 337, 0, 0, 0, 0, 0,
	0, 1509, 0, 0, 1510, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1309, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1166, 1167, 1168, 0, 0, 0, 0, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1552, 337, 0, 0, 295, 0, 0, 0, 447,
	295, 0, 0, 0, 0, 0, 295, 1487, 0, 0,
	0, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	1514, 1515, 0, 0, 0, 447, 0, 979, 0, 0,
	1401, 1403, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 0, 0, 0, 1403, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 447, 0, 447, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 430, 1399, 0, 31, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 295, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1454, 0, 0, 1459,
	1460, 1461, 0, 1584, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1399, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1371, 1372, 0, 1373, 1374, 0, 979, 0, 0,
	0, 0, 0, 0, 0, 0, 1381, 1382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 447, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 447, 0, 0, 0, 0, 0, 0, 447, 0,
	0, 1654, 0, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 295, 0, 0, 0,
	0, 0, 0, 295, 0, 0, 295, 0, 0, 295,
	0, 0, 0, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 0, 1558, 1559, 1437, 1560, 0,
	0, 0, 0, 1467, 0, 1467, 1467, 1467, 0, 0,
	0, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 0, 0, 0, 1467, 0, 0,
	0, 1589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 447, 447, 0,
	430, 875, 0, 0, 0, 430, 430, 0, 0, 430,
	430, 430, 979, 0, 1629, 980, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1635, 0, 430, 430, 430, 430, 430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	295, 0, 0, 0, 0, 0, 875, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 295, 1046, 0, 0,
	295, 295, 0, 0, 295, 1054, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1543,
	1544, 1545, 1546, 1547, 0, 0, 0, 1550, 1551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 295, 295, 295, 295, 0, 295,
	295, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 0, 0, 295, 0, 295, 0, 0, 295, 0,
	1154, 1155, 0, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 430, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 430, 0, 0, 0, 0,
	1660, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 430, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 980, 295, 295, 295, 295,
	295, 0, 0, 0, 0, 0, 0, 0, 1256, 0,
	0, 0, 0, 0, 295, 0, 0, 0, 1046, 0,
	0, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1046,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	557, 545, 0, 502, 560, 475, 492, 568, 493, 496,
	533, 460, 515, 191, 490, 0, 479, 455, 486, 456,
	477, 504, 131, 508, 474, 547, 518, 559, 162, 0,
	480, 566, 164, 524, 0, 241, 179, 0, 0, 0,
	506, 549, 513, 542, 501, 534, 465, 523, 561, 491,
	531, 562, 0, 0, 0, 98, 99, 100, 0, 1071,
	1072, 0, 0, 980, 0, 0, 121, 0, 528, 556,
	488, 530, 532, 570, 454, 525, 295, 458, 461, 567,
	552, 483, 484, 1281, 0, 0, 0, 0, 0, 0,
	505, 514, 539, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 481, 0, 522, 0, 0, 0, 462, 459,
	0, 0, 0, 0, 503, 0, 0, 0, 464, 0,
	482, 540, 0, 452, 141, 544, 551, 500, 298, 555,
	498, 497, 558, 210, 0, 246, 144, 161, 117, 158,
	102, 113, 0, 143, 188, 218, 222, 548, 478, 487,
	125, 485, 220, 198, 262, 521, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 106, 248,
	260, 122, 231, 0, 0, 0, 108, 258, 244, 177,
	154, 155, 107, 0, 216, 130, 139, 127, 190, 255,
	256, 126, 279, 114, 268, 110, 115, 267, 184, 251,
	259, 178, 170, 109, 257, 176, 169, 160, 134, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 457, 0,
	242, 265, 280, 119, 473, 250, 274, 275, 0, 212,
	120, 140, 133, 207, 138, 183, 116, 149, 239, 159,
	166, 215, 278, 197, 221, 123, 264, 240, 469, 472,
	467, 468, 516, 517, 563, 564, 565, 541, 463, 0,
	470, 471, 0, 546, 553, 554, 520, 101, 111, 163,
	277, 213, 137, 266, 453, 466, 129, 476, 0, 0,
	489, 494, 495, 507, 509, 510, 511, 512, 519, 526,
	527, 529, 535, 536, 537, 538, 543, 550, 569, 103,
	104, 112, 118, 124, 128, 132, 135, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 0, 0, 105,
	156, 171, 229, 232, 238, 245, 136, 153, 557, 545,
	0, 502, 560, 475, 492, 568, 493, 496, 533, 460,
	515, 191, 490, 0, 479, 455, 486, 456, 477, 504,
	131, 508, 474, 547, 518, 559, 162, 0, 480, 566,
	164, 524, 0, 241, 179, 0, 0, 0, 506, 549,
	513, 542, 501, 534, 465, 523, 561, 491, 531, 562,
	0, 0, 0, 98, 99, 100, 0, 1071, 1072, 0,
	0, 0, 0, 0, 121, 0, 528, 556, 488, 530,
	532, 570, 454, 525, 0, 458, 461, 567, 552, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 505, 514,
	539, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	481, 0, 522, 0, 0, 0, 462, 459, 0, 0,
	0, 0, 503, 0, 0, 0, 464, 0, 482, 540,
	0, 452, 141, 544, 551, 500, 298, 555, 498, 497,
	558, 210, 0, 246, 144, 161, 117, 158, 102, 113,
	0, 143, 188, 218, 222, 548, 478, 487, 125, 485,
	220, 198, 262, 521, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 106, 248, 260, 122,
	231, 0, 0, 0, 108, 258, 244, 177, 154, 155,
	107, 0, 216, 130, 139, 127, 190, 255, 256, 126,
	279, 114, 268, 110, 115, 267, 184, 251, 259, 178,
	170, 109, 257, 176, 169, 160, 134, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 457, 0, 242, 265,
	280, 119, 473, 250, 274, 275, 0, 212, 120, 140,
	133, 207, 138, 183, 116, 149, 239, 159, 166, 215,
	278, 197, 221, 123, 264, 240, 469, 472, 467, 468,
	516, 517, 563, 564, 565, 541, 463, 0, 470, 471,
	0, 546, 553, 554, 520, 101, 111, 163, 277, 213,
	137, 266, 453, 466, 129, 476, 0, 0, 489, 494,
	495, 507, 509, 510, 511, 512, 519, 526, 527, 529,
	535, 536, 537, 538, 543, 550, 569, 103, 104, 112,
	118, 124, 128, 132, 135, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 0, 0, 105, 156, 171,
	229, 232, 238, 245, 136, 153, 557, 545, 0, 502,
	560, 475, 492, 568, 493, 496, 533, 460, 515, 191,
	490, 0, 479, 455, 486, 456, 477, 504, 131, 508,
	474, 547, 518, 559, 162, 0, 480, 566, 164, 524,
	0, 241, 179, 0, 0, 0, 506, 549, 513, 542,
	501, 534, 465, 523, 561, 491, 531, 562, 63, 0,
	0, 98, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 528, 556, 488, 530, 532, 570,
	454, 525, 0, 458, 461, 567, 552, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 505, 514, 539, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 481, 0,
	522, 0, 0, 0, 462, 459, 0, 0, 0, 0,
	503, 0, 0, 0, 464, 0, 482, 540, 0, 452,
	141, 544, 551, 500, 298, 555, 498, 497, 558, 210,
	0, 246, 144, 161, 117, 158, 102, 113, 0, 143,
	188, 218, 222, 548, 478, 487, 125, 485, 220, 198,
	262, 521, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 106, 248, 260, 122, 231, 0,
	0, 0, 108, 258, 244, 177, 154, 155, 107, 0,
	216, 130, 139, 127, 190, 255, 256, 126, 279, 114,
	268, 110, 115, 267, 184, 251, 259, 178, 170, 109,
	257, 176, 169, 160, 134, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 457, 0, 242, 265, 280, 119,
	473, 250, 274, 275, 0, 212, 120, 140, 133, 207,
	138, 183, 116, 149, 239, 159, 166, 215, 278, 197,
	221, 123, 264, 240, 469, 472, 467, 468, 516, 517,
	563, 564, 565, 541, 463, 0, 470, 471, 0, 546,
	553, 554, 520, 101, 111, 163, 277, 213, 137, 266,
	453, 466, 129, 476, 0, 0, 489, 494, 495, 507,
	509, 510, 511, 512, 519, 526, 527, 529, 535, 536,
	537, 538, 543, 550, 569, 103, 104, 112, 118, 124,
	128, 132, 135, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 0, 0, 105, 156, 171, 229, 232,
	238, 245, 136, 153, 557, 545, 0, 502, 560, 475,
	492, 568, 493, 496, 533, 460, 515, 191, 490, 0,
	479, 455, 486, 456, 477, 504, 131, 508, 474, 547,
	518, 559, 162, 0, 480, 566, 164, 524, 0, 241,
	179, 0, 0, 0, 506, 549, 513, 542, 501, 534,
	465, 523, 561, 491, 531, 562, 0, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 528, 556, 488, 530, 532, 570, 454, 525,
	0, 458, 461, 567, 552, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 505, 514, 539, 499, 0, 0,
	0, 0, 0, 0, 1392, 0, 481, 0, 522, 0,
	0, 0, 462, 459, 0, 0, 0, 0, 503, 0,
	0, 0, 464, 0, 482, 540, 0, 452, 141, 544,
	551, 500, 298, 555, 498, 497, 558, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 548, 478, 487, 125, 485, 220, 198, 262, 521,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 457, 0, 242, 265, 280, 119, 473, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 469, 472, 467, 468, 516, 517, 563, 564,
	565, 541, 463, 0, 470, 471, 0, 546, 553, 554,
	520, 101, 111, 163, 277, 213, 137, 266, 453, 466,
	129, 476, 0, 0, 489, 494, 495, 507, 509, 510,
	511, 512, 519, 526, 527, 529, 535, 536, 537, 538,
	543, 550, 569, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 557, 545, 0, 502, 560, 475, 492, 568,
	493, 496, 533, 460, 515, 191, 490, 0, 479, 455,
	486, 456, 477, 504, 131, 508, 474, 547, 518, 559,
	162, 0, 480, 566, 164, 524, 0, 241, 179, 0,
	0, 0, 506, 549, 513, 542, 501, 534, 465, 523,
	561, 491, 531, 562, 0, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	528, 556, 488, 530, 532, 570, 454, 525, 0, 458,
	461, 567, 552, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 505, 514, 539, 499, 0, 0, 0, 0,
	0, 0, 1055, 0, 481, 0, 522, 0, 0, 0,
	462, 459, 0, 0, 0, 0, 503, 0, 0, 0,
	464, 0, 482, 540, 0, 452, 141, 544, 551, 500,
	298, 555, 498, 497, 558, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 548,
	478, 487, 125, 485, 220, 198, 262, 521, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	457, 0, 242, 265, 280, 119, 473, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	469, 472, 467, 468, 516, 517, 563, 564, 565, 541,
	463, 0, 470, 471, 0, 546, 553, 554, 520, 101,
	111, 163, 277, 213, 137, 266, 453, 466, 129, 476,
	0, 0, 489, 494, 495, 507, 509, 510, 511, 512,
	519, 526, 527, 529, 535, 536, 537, 538, 543, 550,
	569, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	557, 545, 0, 502, 560, 475, 492, 568, 493, 496,
	533, 460, 515, 191, 490, 0, 479, 455, 486, 456,
	477, 504, 131, 508, 474, 547, 518, 559, 162, 0,
	480, 566, 164, 524, 0, 241, 179, 0, 0, 0,
	506, 549, 513, 542, 501, 534, 465, 523, 561, 491,
	531, 562, 0, 0, 0, 98, 99, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 528, 556,
	488, 530, 532, 570, 454, 525, 0, 458, 461, 567,
	552, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	505, 514, 539, 499, 0, 0, 0, 0, 0, 0,
	1017, 0, 481, 0, 522, 0, 0, 0, 462, 459,
	0, 0, 0, 0, 503, 0, 0, 0, 464, 0,
	482, 540, 0, 452, 141, 544, 551, 500, 298, 555,
	498, 497, 558, 210, 0, 246, 144, 161, 117, 158,
	102, 113, 0, 143, 188, 218, 222, 548, 478, 487,
	125, 485, 220, 198, 262, 521, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 106, 248,
	260, 122, 231, 0, 0, 0, 108, 258, 244, 177,
	154, 155, 107, 0, 216, 130, 139, 127, 190, 255,
	256, 126, 279, 114, 268, 110, 115, 267, 184, 251,
	259, 178, 170, 109, 257, 176, 169, 160, 134, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 457, 0,
	242, 265, 280, 119, 473, 250, 274, 275, 0, 212,
	120, 140, 133, 207, 138, 183, 116, 149, 239, 159,
	166, 215, 278, 197, 221, 123, 264, 240, 469, 472,
	467, 468, 516, 517, 563, 564, 565, 541, 463, 0,
	470, 471, 0, 546, 553, 554, 520, 101, 111, 163,
	277, 213, 137, 266, 453, 466, 129, 476, 0, 0,
	489, 494, 495, 507, 509, 510, 511, 512, 519, 526,
	527, 529, 535, 536, 537, 538, 543, 550, 569, 103,
	104, 112, 118, 124, 128, 132, 135, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 0, 0, 105,
	156, 171, 229, 232, 238, 245, 136, 153, 557, 545,
	0, 502, 560, 475, 492, 568, 493, 496, 533, 460,
	515, 191, 490, 0, 479, 455, 486, 456, 477, 504,
	131, 508, 474, 547, 518, 559, 162, 0, 480, 566,
	164, 524, 0, 241, 179, 0, 0, 0, 506, 549,
	513, 542, 501, 534, 465, 523, 561, 491, 531, 562,
	0, 0, 0, 98, 99, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 528, 556, 488, 530,
	532, 570, 454, 525, 0, 458, 461, 567, 552, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 505, 514,
	539, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	481, 0, 522, 0, 0, 0, 462, 459, 0, 0,
	0, 0, 503, 0, 0, 0, 464, 0, 482, 540,
	0, 452, 141, 544, 551, 500, 298, 555, 498, 497,
	558, 210, 0, 246, 144, 161, 117, 158, 102, 113,
	0, 143, 188, 218, 222, 548, 478, 487, 125, 485,
	220, 198, 262, 521, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 106, 248, 260, 122,
	231, 0, 0, 0, 108, 258, 244, 177, 154, 155,
	107, 0, 216, 130, 139, 127, 190, 255, 256, 126,
	279, 114, 268, 110, 115, 267, 184, 251, 259, 178,
	170, 109, 257, 176, 169, 160, 134, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 457, 0, 242, 265,
	280, 119, 473, 250, 274, 275, 0, 212, 120, 140,
	133, 207, 138, 183, 116, 149, 239, 159, 166, 215,
	278, 197, 221, 123, 264, 240, 469, 472, 467, 468,
	516, 517, 563, 564, 565, 541, 463, 0, 470, 471,
	0, 546, 553, 554, 520, 101, 111, 163, 277, 213,
	137, 266, 453, 466, 129, 476, 0, 0, 489, 494,
	495, 507, 509, 510, 511, 512, 519, 526, 527, 529,
	535, 536, 537, 538, 543, 550, 569, 103, 104, 112,
	118, 124, 128, 132, 135, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 0, 0, 105, 156, 171,
	229, 232, 238, 245, 136, 153, 557, 545, 0, 502,
	560, 475, 492, 568, 493, 496, 533, 460, 515, 191,
	490, 0, 479, 455, 486, 456, 477, 504, 131, 508,
	474, 547, 518, 559, 162, 0, 480, 566, 164, 524,
	0, 241, 179, 0, 0, 0, 506, 549, 513, 542,
	501, 534, 465, 523, 561, 491, 531, 562, 0, 0,
	0, 98, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 528, 556, 488, 530, 532, 570,
	454, 525, 0, 458, 461, 567, 552, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 505, 514, 539, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 481, 0,
	522, 0, 0, 0, 462, 459, 0, 0, 0, 0,
	503, 0, 0, 0, 464, 0, 482, 540, 0, 452,
	141, 544, 551, 500, 298, 555, 498, 497, 558, 210,
	0, 246, 144, 161, 117, 158, 102, 113, 0, 143,
	188, 218, 222, 548, 478, 487, 125, 485, 220, 198,
	262, 521, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 106, 248, 260, 122, 231, 0,
	0, 0, 108, 258, 244, 177, 154, 155, 107, 0,
	216, 130, 139, 127, 190, 255, 256, 126, 279, 114,
	268, 110, 450, 267, 184, 251, 259, 178, 170, 109,
	257, 176, 169, 160, 134, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 457, 0, 242, 265, 280, 119,
	473, 250, 274, 275, 0, 212, 120, 140, 133, 207,
	138, 451, 449, 149, 239, 159, 166, 215, 278, 197,
	221, 123, 264, 240, 469, 472, 467, 468, 516, 517,
	563, 564, 565, 541, 463, 0, 470, 471, 0, 546,
	553, 554, 520, 101, 111, 163, 277, 213, 137, 266,
	453, 466, 129, 476, 0, 0, 489, 494, 495, 507,
	509, 510, 511, 512, 519, 526, 527, 529, 535, 536,
	537, 538, 543, 550, 569, 103, 104, 112, 118, 124,
	128, 132, 135, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 0, 0, 105, 156, 171, 229, 232,
	238, 245, 136, 153, 557, 545, 0, 502, 560, 475,
	492, 568, 493, 496, 533, 460, 515, 191, 490, 0,
	479, 455, 486, 456, 477, 504, 131, 508, 474, 547,
	518, 559, 162, 0, 480, 566, 164, 524, 0, 241,
	179, 0, 0, 0, 506, 549, 513, 542, 501, 534,
	465, 523, 561, 491, 531, 562, 0, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 528, 556, 488, 530, 532, 570, 454, 525,
	0, 458, 461, 567, 552, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 505, 514, 539, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 481, 0, 522, 0,
	0, 0, 462, 459, 0, 0, 0, 0, 503, 0,
	0, 0, 464, 0, 482, 540, 0, 452, 141, 544,
	551, 500, 298, 555, 498, 497, 558, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 548, 478, 487, 125, 485, 220, 198, 262, 521,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 785, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	450, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 457, 0, 242, 265, 280, 119, 473, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 451,
	449, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 469, 472, 467, 468, 516, 517, 563, 564,
	565, 541, 463, 0, 470, 471, 0, 546, 553, 554,
	520, 101, 111, 163, 277, 213, 137, 266, 453, 466,
	129, 476, 0, 0, 489, 494, 495, 507, 509, 510,
	511, 512, 519, 526, 527, 529, 535, 536, 537, 538,
	543, 550, 569, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 557, 545, 0, 502, 560, 475, 492, 568,
	493, 496, 533, 460, 515, 191, 490, 0, 479, 455,
	486, 456, 477, 504, 131, 508, 474, 547, 518, 559,
	162, 0, 480, 566, 164, 524, 0, 241, 179, 0,
	0, 0, 506, 549, 513, 542, 501, 534, 465, 523,
	561, 491, 531, 562, 0, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	528, 556, 488, 530, 532, 570, 454, 525, 0, 458,
	461, 567, 552, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 505, 514, 539, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 481, 0, 522, 0, 0, 0,
	462, 459, 0, 0, 0, 0, 503, 0, 0, 0,
	464, 0, 482, 540, 0, 452, 141, 544, 551, 500,
	298, 555, 498, 497, 558, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 548,
	478, 487, 125, 485, 220, 198, 262, 521, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 441, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 450, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	457, 0, 242, 265, 280, 119, 473, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 451, 449, 444,
	443, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	469, 472, 467, 468, 516, 517, 563, 564, 565, 541,
	463, 0, 470, 471, 0, 546, 553, 554, 520, 101,
	111, 163, 277, 213, 137, 266, 453, 466, 129, 476,
	0, 0, 489, 494, 495, 507, 509, 510, 511, 512,
	519, 526, 527, 529, 535, 536, 537, 538, 543, 550,
	569, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 951, 0, 342, 0, 0, 0, 131,
	0, 341, 0, 0, 0, 162, 0, 952, 385, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 98, 99, 100, 363, 362, 365, 366, 367,
	368, 0, 0, 121, 364, 369, 370, 371, 0, 0,
	0, 0, 339, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 428, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 398, 0, 0, 298, 0, 0, 396, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 386, 397, 392, 393, 390,
	391, 389, 388, 387, 400, 378, 379, 380, 381, 383,
	0, 394, 395, 382, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	342, 0, 0, 0, 131, 0, 341, 0, 0, 0,
	162, 0, 0, 385, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 376, 377, 0, 0, 0, 0,
	0, 0, 1062, 0, 63, 0, 0, 98, 99, 100,
	363, 362, 365, 366, 367, 368, 0, 0, 121, 364,
	369, 370, 371, 1063, 0, 0, 0, 339, 356, 0,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 399, 0, 355, 0,
	0, 348, 349, 351, 350, 352, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 398, 0, 0,
	298, 0, 0, 396, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	386, 397, 392, 393, 390, 391, 389, 388, 387, 400,
	378, 379, 380, 381, 383, 0, 394, 395, 382, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 0, 342, 0, 0, 0, 131,
	0, 341, 0, 0, 0, 162, 0, 0, 385, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 416, 98, 99, 100, 363, 362, 365, 366, 367,
	368, 0, 0, 121, 364, 369, 370, 371, 0, 0,
	0, 0, 339, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 0, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 398, 0, 0, 298, 0, 0, 396, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 386, 397, 392, 393, 390,
	391, 389, 388, 387, 400, 378, 379, 380, 381, 383,
	0, 394, 395, 382, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	342, 0, 0, 0, 131, 0, 341, 0, 0, 0,
	162, 0, 0, 385, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 0, 98, 99, 100,
	363, 362, 365, 366, 367, 368, 0, 0, 121, 364,
	369, 370, 371, 0, 0, 0, 0, 339, 356, 0,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 428, 0, 0, 0, 399, 0, 355, 0,
	0, 348, 349, 351, 350, 352, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 398, 0, 0,
	298, 0, 0, 396, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	386, 397, 392, 393, 390, 391, 389, 388, 387, 400,
	378, 379, 380, 381, 383, 0, 394, 395, 382, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 0, 342, 0, 0, 0, 131,
	0, 341, 0, 0, 0, 162, 0, 0, 385, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 98, 99, 100, 363, 969, 365, 366, 367,
	368, 0, 0, 121, 364, 369, 370, 371, 0, 0,
	0, 0, 339, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 428, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 398, 0, 0, 298, 0, 0, 396, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 386, 397, 392, 393, 390,
	391, 389, 388, 387, 400, 378, 379, 380, 381, 383,
	0, 394, 395, 382, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	342, 0, 0, 0, 131, 0, 341, 0, 0, 0,
	162, 0, 0, 385, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 0, 98, 99, 100,
	363, 966, 365, 366, 367, 368, 0, 0, 121, 364,
	369, 370, 371, 0, 0, 0, 0, 339, 356, 0,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 428, 0, 0, 0, 399, 0, 355, 0,
	0, 348, 349, 351, 350, 352, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 398, 0, 0,
	298, 0, 0, 396, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	386, 397, 392, 393, 390, 391, 389, 388, 387, 400,
	378, 379, 380, 381, 383, 0, 394, 395, 382, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 409, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 0, 342, 0, 0, 0, 131,
	0, 341, 0, 0, 0, 162, 0, 0, 385, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 98, 99, 100, 363, 362, 365, 366, 367,
	368, 0, 0, 121, 364, 369, 370, 371, 0, 0,
	0, 0, 339, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 0, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 398, 0, 0, 298, 0, 0, 396, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 386, 397, 392, 393, 390,
	391, 389, 388, 387, 400, 378, 379, 380, 381, 383,
	0, 394, 395, 382, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	342, 0, 0, 0, 131, 0, 341, 0, 0, 0,
	162, 0, 0, 385, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 0, 98, 99, 100,
	363, 362, 365, 366, 367, 368, 0, 0, 121, 364,
	369, 370, 371, 0, 0, 0, 0, 339, 356, 0,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 399, 0, 355, 0,
	0, 348, 349, 351, 350, 352, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 398, 0, 0,
	298, 0, 0, 396, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	386, 397, 392, 393, 390, 391, 389, 388, 387, 400,
	378, 379, 380, 381, 383, 0, 394, 395, 382, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 162, 0, 0, 385, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 98, 99, 100, 363, 362, 365, 366, 367,
	368, 0, 0, 121, 364, 369, 370, 371, 0, 0,
	0, 0, 0, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 0, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 398, 0, 0, 298, 0, 0, 396, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 1661, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 386, 397, 392, 393, 390,
	391, 389, 388, 387, 400, 378, 379, 380, 381, 383,
	0, 394, 395, 382, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	162, 0, 0, 385, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 416, 98, 99, 100,
	363, 362, 365, 366, 367, 368, 0, 0, 121, 364,
	369, 370, 371, 0, 0, 0, 0, 0, 356, 0,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 399, 0, 355, 0,
	0, 348, 349, 351, 350, 352, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 398, 0, 0,
	298, 0, 0, 396, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	386, 397, 392, 393, 390, 391, 389, 388, 387, 400,
	378, 379, 380, 381, 383, 0, 394, 395, 382, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 162, 0, 0, 385, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 98, 99, 100, 363, 362, 365, 366, 367,
	368, 0, 0, 121, 364, 369, 370, 371, 0, 0,
	0, 0, 0, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 0, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 398, 0, 0, 298, 0, 0, 396, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 386, 397, 392, 393, 390,
	391, 389, 388, 387, 400, 378, 379, 380, 381, 383,
	0, 394, 395, 382, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 662, 661, 671, 672,
	664, 665, 666, 667, 668, 669, 670, 663, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	298, 0, 0, 0, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 760, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 100, 0, 762, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 651,
	652, 650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 653, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 298, 0, 0, 0, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 92, 93, 0,
	89, 0, 0, 0, 94, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 1045, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 100, 0, 1047, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 298, 0, 0, 0, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 32, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	298, 0, 0, 0, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 32, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 98, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 298, 0, 0, 0, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 1040, 153, 191, 0, 0, 0, 1045,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 100,
	0, 1047, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	298, 0, 0, 0, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 1043, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 100, 0, 0, 1009, 0, 0,
	1010, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 298, 0, 0, 0, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 795, 0, 0, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 100,
	0, 794, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	298, 0, 0, 0, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 416, 98, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 298, 0, 0, 0, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	298, 0, 0, 0, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 100, 0, 1047, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 298, 0, 0, 0, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 100,
	0, 1161, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	298, 0, 0, 0, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	191, 0, 0, 0, 0, 0, 0, 0, 765, 131,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 298, 0, 0, 0, 0,
	210, 0, 246, 144, 161, 117, 158, 102, 113, 0,
	143, 188, 218, 222, 0, 0, 0, 125, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 106, 248, 260, 122, 231,
	0, 0, 0, 108, 258, 244, 177, 154, 155, 107,
	0, 216, 130, 139, 127, 190, 255, 256, 126, 279,
	114, 268, 110, 115, 267, 184, 251, 259, 178, 170,
	109, 257, 176, 169, 160, 134, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	119, 0, 250, 274, 275, 0, 212, 120, 140, 133,
	207, 138, 183, 116, 149, 239, 159, 166, 215, 278,
	197, 221, 123, 264, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 111, 163, 277, 213, 137,
	266, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 128, 132, 135, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 105, 156, 171, 229,
	232, 238, 245, 136, 153, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 100,
	0, 762, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	298, 0, 0, 0, 0, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 0,
	0, 0, 125, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 119, 0, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	111, 163, 277, 213, 137, 266, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	433, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 293, 0, 298, 0, 0,
	0, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153,
}

var yyPact = [...]int{
	199, -1000, -287, 1075, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1019, 845, -1000, -1000, -1000, -1000, -1000, -1000, 310, 12387,
	18, 158, 12, 17364, 156, 26, 17719, -1000, 38, -1000,
	21, 17719, 34, -23, -1000, -1000, -74, -84, -1000, 10257,
	-267, -1000, 483, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 829, 1010, 1018, 1029, 574, 1017, -1000, 8837,
	113, 113, 17009, 7417, -1000, -1000, 602, 17719, 150, 17719,
	-136, 110, 110, 110, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 155, 17719, 646, 646, 240, -1000, 17719, 105, 646,
	105, 105, 105, 17719, -1000, 214, -1000, -1000, -1000, 17719,
	646, 952, 342, 175, 4841, -1000, 672, -1000, 4841, 46,
	4841, -36, 1042, 47, -16, -1000, 646, -1000, -1000, -1000,
	-1000, -1000, -1000, 137, -1000, -1000, 17719, -89, 124, 339,
	-1000, -1000, -1000, -1000, -1000, -1000, 694, 599, -1000, 10257,
	1607, 812, 812, -1000, -1000, 176, -1000, -1000, 11322, 11322,
	11322, 11322, 11322, 11322, 11322, 11322, 11322, 11322, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 812, 210, -1000, 9902, 812, 812, 812, 812,
	812, 812, 812, 812, 10257, 812, 812, 812, 812, 812,
	812, 812, 812, 812, 812, 812, 812, 812, 812, 812,
	812, -1000, -1000, -266, 17719, -1000, 1019, -1000, 845, -1000,
	-1000, -1000, 948, 10257, 10257, 1019, -1000, 916, 8837, -1000,
	-1000, 928, -1000, -1000, -1000, -1000, 403, 1055, -1000, 12032,
	209, 16292, 15227, 17719, 817, 775, -1000, -1000, 201, 790,
	7049, -109, -1000, -1000, -1000, 323, 14517, -1000, -1000, -1000,
	947, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 767, 17719, -1000, 2501, -1000, 646, 4841, 144, 646,
	365, 646, 17719, 17719, 4841, 4841, 4841, 53, 94, 88,
	17719, 789, 119, 17719, 985, 873, 17719, 646, 646, -1000,
	6313, -1000, 4841, 342, -1000, 532, 10257, 4841, 4841, 4841,
	17719, 4841, 4841, -1000, -1000, -1000, 413, 504, -1000, -1000,
	-1000, -1000, -1000, 4841, 4841, -1000, 1053, 396, -1000, -1000,
	-1000, -1000, 10257, 266, -1000, 872, -1000, -1000, 33, -1000,
	17719, -1000, 1075, -1000, -1000, -1000, -119, -1000, -1000, 10257,
	10257, 10257, 10257, 515, 279, 11322, 395, 424, 11322, 11322,
	11322, 11322, 11322, 11322, 11322, 11322, 11322, 11322, 11322, 11322,
	11322, 11322, 11322, 656, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 646, -1000, 1071, 777, 777, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 11677, 7772, 6313, 574,
	764, 1019, 8837, 8837, 10257, 10257, 9547, 9192, 8837, 945,
	314, 599, 17719, -1000, -1000, 10967, -1000, -1000, -1000, -1000,
	-1000, 545, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17719,
	17719, 8837, 8837, 8837, 8837, 8837, 646, 646, 507, 1018,
	574, 928, -1000, 1066, 241, 668, 788, -1000, 540, 1018,
	14162, 718, -1000, 928, -1000, -1000, -1000, 17719, -1000, -1000,
	16647, -1000, -1000, 5945, 67, 17719, -1000, 663, 971, -1000,
	-1000, -1000, 993, 13452, 13807, 67, 774, 15227, 17719, -1000,
	-1000, 15227, 17719, 5577, 6681, -109, -1000, 742, -1000, -104,
	-93, 8127, 206, -1000, -1000, -1000, -1000, 4473, 415, 620,
	366, -55, -1000, -1000, -1000, 820, -1000, 820, 820, 820,
	820, -15, -15, -15, -15, -1000, -1000, -1000, -1000, -1000,
	844, 840, -1000, 820, 820, 820, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 838, 838, 838, 822, 822, 852,
	-1000, 17719, 4841, 984, 4841, -1000, 1777, -1000, -1000, -1000,
	17719, 17719, 17719, 17719, 17719, 168, 17719, 17719, 771, -1000,
	17719, 4841, -1000, -1000, 200, -1000, -1000, -1000, -1000, -1000,
	599, -1000, -1000, -1000, -1000, -1000, -1000, 17719, -1000, -1000,
	17719, -1000, 16292, -1000, -1000, 17719, 342, 17719, 17719, 599,
	-1000, 529, 17719, 17719, -1000, 15937, -1000, -1000, -1000, -1000,
	599, 279, 472, 302, -1000, -1000, 617, -1000, -1000, 2053,
	-1000, -1000, -1000, -1000, 395, 11322, 11322, 11322, 425, 2053,
	2070, 1033, 2095, 219, 349, 349, 275, 275, 275, 275,
	275, 436, 436, -1000, -1000, -1000, 545, -1000, -1000, -1000,
	545, 8837, 8837, 759, 812, 198, -1000, 829, -1000, -1000,
	1018, 754, 754, 549, 592, 288, 1051, 754, 280, 1044,
	754, 754, 8837, -1000, -1000, 358, -1000, 10257, 545, -1000,
	196, -1000, 547, 752, 749, 754, 545, 545, 754, 754,
	-270, -1000, 572, -1000, 315, -1000, 948, -1000, -1000, 910,
	10257, 10257, 10257, -1000, -1000, -1000, 948, 1030, -1000, 924,
	923, 1035, 8837, 15227, 928, -1000, -1000, -1000, 195, 830,
	812, -1000, 17719, 15227, 15227, 15227, 15227, 15227, -1000, 897,
	893, -1000, 895, 885, 917, 17719, -1000, 761, 545, 574,
	-1000, 13452, 220, 812, -1000, 15582, -1000, -1000, 1035, 15227,
	692, -1000, 692, -1000, 190, -1000, -1000, 742, -109, -56,
	-1000, -1000, -1000, -1000, 599, -1000, 679, 737, 4105, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 837, 646, -1000, 965,
	247, 252, 646, 964, -1000, -1000, -1000, 957, -1000, 375,
	-45, -1000, -1000, 454, -15, -15, -1000, -1000, 206, 946,
	206, 206, 206, 528, 528, -1000, -1000, -1000, -1000, 452,
	-1000, -1000, -1000, 447, -1000, 871, 17719, 4841, -1000, -1000,
	-1000, -1000, 331, 331, 248, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 65, 849, -1000, -1000,
	-1000, -1000, 16, 51, 117, -1000, 4841, -1000, 6313, 396,
	342, 835, 396, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 425, 2053, 2031, -1000,
	11322, 11322, -1000, -1000, 754, 754, 8837, 6313, 1019, 948,
	-1000, -1000, 311, 656, 311, 11322, 11322, -1000, 11322, 11322,
	-1000, -148, 684, 341, -1000, 10257, 481, -1000, 6313, -1000,
	11322, 11322, -1000, -1000, -1000, -1000, -1000, 511, -1000, -1000,
	-1000, 507, -1000, -1000, 312, -1000, 777, -1000, 907, 599,
	599, -1000, -1000, 17719, -1000, -1000, -1000, -1000, 1040, 10257,
	-1000, 710, -1000, 5209, 869, 17719, 812, 1075, 13097, 17719,
	779, -1000, 301, 971, 834, 868, 954, -1000, -1000, -1000,
	-1000, 889, -1000, 886, -1000, -1000, -1000, -1000, -1000, -1000,
	574, -1000, 149, 147, 146, 17719, -1000, 1019, 692, -1000,
	-1000, 233, -1000, -1000, -117, -123, -1000, -1000, -1000, 4473,
	-1000, 4473, 17719, 86, -1000, 646, 646, -1000, -1000, 827,
	866, 11322, -1000, -1000, -1000, 613, 206, 206, -1000, 285,
	-1000, -1000, -1000, 744, -1000, 722, 702, 714, 17719, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17719, -1000,
	-1000, -1000, -1000, -1000, 17719, -154, 646, 17719, 17719, 17719,
	17719, -1000, 183, 342, -1000, 342, 17719, 342, -1000, 11322,
	2053, 2053, -1000, -1000, 545, -1000, 1018, -1000, 545, 820,
	820, -1000, 820, 822, -1000, 820, 9, 820, 6, 545,
	545, 1982, 1943, 1911, 1752, 812, -143, -1000, 599, 10257,
	-1000, 1709, 313, 510, -1000, 777, -1000, -1000, -1000, 1034,
	1028, 599, -1000, -1000, 967, 657, 677, -1000, -1000, 8482,
	696, 182, 690, -1000, 1019, 17719, 10257, -1000, -1000, 10257,
	821, -1000, 10257, -1000, -1000, -1000, 1019, 812, 812, 812,
	690, 1018, -1000, -1000, -1000, -1000, 4105, -1000, 669, -1000,
	820, -1000, -1000, -1000, 17719, -38, 1065, 2053, -1000, -1000,
	-1000, -1000, -1000, -15, 497, -15, 443, -1000, 421, 4841,
	-1000, -1000, -1000, -1000, 978, -1000, 6313, -1000, -1000, 819,
	851, -1000, -1000, 6313, -1000, -1000, 665, -1000, -1000, 2053,
	-1000, 948, -1000, -1000, 142, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11322, 11322, 11322, 11322, 11322, 1018, 493,
	599, 11322, 11322, -1000, -1000, -1000, 10257, 10257, 961, -1000,
	812, -1000, 652, 17719, 17719, -1000, 17719, 1018, -1000, 599,
	599, 17719, 599, 14872, 17719, 17719, 12742, -1000, 191, 17719,
	-1000, 637, 212, -1000, -81, 206, -1000, 206, 608, 581,
	-1000, 812, 698, -1000, 299, 17719, 17719, -1000, -1000, 17719,
	-1000, -1000, -1000, 547, 547, 547, 547, 60, 545, -1000,
	547, 547, 599, 694, 1062, -1000, 812, 1075, 172, -1000,
	-1000, -1000, 626, 623, -1000, 623, 623, 220, 191, -1000,
	646, 295, 492, -1000, 82, 380, 960, -1000, 955, -1000,
	-1000, -1000, -1000, -1000, 62, 6313, 4473, 578, -1000, -1000,
	-1000, -1000, -1000, -1000, 545, 71, -163, -1000, -1000, -1000,
	17719, 677, 17719, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	400, -1000, -1000, 17719, -1000, 490, -1000, -1000, 564, -1000,
	17719, -1000, -1000, 849, -1000, 906, -152, -166, 603, -1000,
	-1000, 813, -1000, -1000, 62, 919, -154, -1000, 905, -1000,
	17719, -1000, 59, -1000, -155, 557, 57, -164, 865, 812,
	-172, 859, -1000, 1048, 10612, -1000, -1000, 1059, 215, 215,
	547, 545, -1000, -1000, -1000, 93, 431, -1000, -1000, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1322, 1316, 31, 74, 63, 1311, 1305, 1304, 107,
	106, 102, 1303, 1301, 1299, 1298, 1297, 1296, 1295, 1294,
	1293, 1291, 1289, 1285, 1284, 1281, 1278, 1276, 1275, 1274,
	1273, 1271, 1270, 1098, 1269, 1268, 81, 1267, 77, 1265,
	1264, 1263, 1262, 1261, 1259, 1258, 1257, 1256, 46, 249,
	55, 59, 1254, 61, 1354, 1252, 56, 70, 60, 1251,
	30, 1250, 1249, 79, 1248, 1247, 58, 1246, 1244, 48,
	68, 76, 1238, 13, 38, 1237, 1233, 1231, 1230, 24,
	1895, 1229, 1228, 14, 1227, 1220, 96, 1219, 66, 29,
	11, 18, 20, 1218, 65, 1217, 6, 1215, 64, 1214,
	1211, 1210, 1209, 42, 1208, 62, 1207, 17, 36, 1206,
	16, 1205, 80, 22, 21, 7, 1200, 1199, 19, 69,
	53, 72, 1197, 1193, 620, 1192, 933, 45, 1191, 1189,
	109, 25, 1188, 103, 572, 1187, 1183, 1182, 1181, 37,
	885, 1681, 26, 78, 1180, 1177, 1175, 2572, 54, 57,
	12, 1172, 1171, 1170, 35, 184, 39, 1169, 1167, 41,
	1166, 1165, 1164, 1161, 1160, 1159, 1158, 187, 1156, 1155,
	1153, 67, 23, 1152, 1151, 71, 34, 1150, 1148, 1144,
	49, 75, 1131, 1130, 51, 1129, 85, 27, 1128, 1127,
	1123, 1121, 1120, 43, 10, 1119, 15, 1116, 9, 1115,
	28, 1114, 4, 1113, 8, 1111, 3, 0, 1108, 5,
	1107, 1102, 50, 1, 1101, 2, 33, 1100, 1096, 1092,
	1090, 1084, 1491, 404, 82, 1081, 108,
}

var yyR1 = [...]int{
	0, 220, 221, 221, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 207, 207, 207, 210, 211, 20, 3, 3,
	3, 3, 2, 2, 8, 4, 5, 5, 9, 9,
	39, 39, 10, 11, 11, 11, 11, 224, 224, 63,
	63, 64, 64, 112, 112, 12, 13, 13, 121, 121,
	120, 120, 120, 122, 122, 122, 122, 157, 157, 14,
	14, 14, 14, 14, 14, 14, 35, 35, 32, 32,
	32, 32, 47, 47, 47, 209, 209, 208, 206, 206,
	205, 205, 204, 21, 189, 191, 191, 190, 190, 190,
	190, 181, 160, 160, 160, 160, 163, 163, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 162, 162, 162,
	162, 162, 164, 164, 164, 164, 164, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 166, 166, 166, 166, 166, 166, 166, 166,
	180, 180, 167, 167, 175, 175, 176, 176, 176, 173,
	173, 174, 174, 177, 177, 177, 169, 169, 170, 170,
	178, 178, 171, 171, 171, 172, 172, 172, 179, 179,
	179, 179, 179, 168, 168, 182, 182, 199, 199, 198,
	198, 198, 34, 188, 188, 195, 195, 195, 195, 195,
	185, 185, 185, 186, 186, 184, 184, 187, 187, 197,
	197, 196, 183, 183, 200, 200, 200, 200, 214, 215,
	213, 213, 213, 213, 213, 192, 192, 192, 193, 193,
	193, 194, 194, 194, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 203, 201, 201, 202, 202,
	16, 22, 22, 17, 17, 17, 17, 17, 18, 18,
	23, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 128, 128, 130, 130, 126, 126, 129, 129, 127,
	127, 127, 131, 131, 131, 132, 132, 158, 158, 158,
	25, 25, 27, 27, 28, 29, 29, 152, 152, 153,
	153, 30, 31, 40, 40, 40, 40, 40, 40, 42,
	42, 42, 7, 7, 7, 7, 41, 41, 41, 6,
	6, 26, 26, 26, 26, 19, 225, 36, 37, 37,
	38, 38, 38, 44, 44, 44, 43, 43, 43, 50,
	50, 52, 52, 52, 52, 52, 53, 53, 53, 53,
	53, 53, 49, 49, 51, 51, 51, 51, 144, 144,
	144, 143, 143, 55, 55, 56, 56, 57, 57, 58,
	58, 58, 58, 95, 72, 72, 111, 111, 110, 110,
	113, 113, 59, 59, 59, 59, 60, 60, 61, 61,
	62, 62, 151, 151, 150, 150, 150, 149, 149, 65,
	65, 65, 67, 66, 66, 66, 66, 68, 68, 70,
	70, 69, 69, 69, 69, 71, 73, 73, 73, 73,
	73, 74, 74, 54, 54, 54, 54, 54, 54, 54,
	54, 125, 125, 76, 76, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 87, 87, 87, 87, 87,
	87, 77, 77, 77, 77, 77, 77, 77, 48, 48,
	88, 88, 88, 94, 89, 89, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	84, 84, 84, 84, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 226, 226, 86, 85, 85, 85, 85,
	85, 85, 85, 45, 45, 45, 45, 45, 156, 156,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 99, 99, 46, 46, 97, 97, 98,
	100, 100, 96, 96, 96, 79, 79, 79, 79, 79,
	79, 79, 79, 81, 81, 81, 101, 101, 102, 102,
	103, 103, 104, 104, 105, 106, 106, 106, 107, 107,
	107, 107, 108, 108, 108, 78, 78, 78, 78, 109,
	109, 109, 109, 114, 114, 90, 90, 92, 92, 91,
	93, 115, 115, 118, 116, 116, 116, 119, 119, 119,
	119, 117, 117, 117, 146, 146, 146, 123, 123, 133,
	133, 134, 134, 124, 124, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 136, 136, 136, 137, 137,
	138, 138, 138, 145, 145, 141, 141, 142, 142, 147,
	147, 148, 148, 216, 217, 218, 218, 219, 219, 219,
	33, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 222, 223, 154, 155, 155, 155,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 2, 4, 6,
	6, 7, 4, 6, 5, 8, 1, 3, 7, 8,
	1, 1, 9, 8, 7, 6, 6, 1, 1, 1,
	3, 1, 3, 0, 4, 3, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 8, 4, 6, 5, 5, 0, 1, 4, 5,
	7, 4, 1, 1, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	3, 2, 3, 1, 10, 11, 11, 12, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 7, 7, 4,
	5, 4, 4, 7, 5, 5, 5, 12, 7, 5,
	9, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 3, 4, 4, 4, 4, 4, 4,
	3, 2, 7, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 4, 3, 3, 5, 2, 6, 4, 3,
	7, 1, 1, 0, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 5, 0, 1, 0,
	1, 2, 3, 0, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 5,
	3, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 1, 2, 3, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 3, 7, 0, 3, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 5, 7, 3, 0, 5, 4, 5,
	5, 0, 2, 1, 3, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 5, 6, 4, 4, 6, 6, 6, 8,
	8, 8, 8, 9, 8, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 5, 4, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 2, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 0, 1, 0, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -220, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -32, -33, -34,
	-4, -222, 6, 7, -39, 9, 10, 30, -21, 123,
	124, 126, 125, 159, 127, 152, 53, 173, 174, 176,
	177, 178, 179, -42, 157, 158, 31, 32, 129, 34,
	-35, 371, 370, 57, 8, 262, 154, 153, 25, 372,
	-221, 373, -38, 5, -103, 15, -3, -36, -225, -36,
	-36, -36, -36, -36, -189, -191, 57, 96, -138, 133,
	77, 254, 130, 131, 137, -141, -207, -140, 60, 61,
	62, 272, 145, 304, 305, 364, 173, 187, 181, 208,
	200, 273, 306, 146, 198, 201, 241, 143, 307, 228,
	235, 71, 176, 250, 308, 155, 196, 192, 309, 281,
	190, 27, 310, 237, 213, 311, 371, 277, 239, 191,
	236, 129, 312, 148, 141, 313, 214, 218, 314, 242,
	315, 316, 317, 372, 185, 186, 365, 318, 144, 244,
	212, 142, 33, 274, 37, 163, 245, 216, 319, 211,
	207, 366, 320, 321, 322, 323, 210, 184, 206, 41,
	220, 219, 221, 240, 203, 324, 325, 326, 149, 327,
	193, 18, 328, 329, 330, 331, 332, 248, 158, 333,
	161, 334, 335, 336, 337, 338, 339, 238, 215, 217,
	138, 165, 234, 276, 340, 246, 189, 341, 150, 162,
	157, 249, 151, 342, 343, 344, 345, 346, 347, 367,
	348, 177, 368, 349, 350, 351, 352, 172, 369, 243,
	252, 40, 225, 353, 183, 370, 140, 354, 174, 169,
	230, 204, 164, 355, 356, 194, 195, 209, 182, 205,
	175, 166, 159, 357, 251, 226, 278, 202, 199, 170,
	358, 167, 168, 359, 231, 232, 171, 275, 247, 197,
	227, -124, 133, 254, 130, 232, 135, 131, 131, 132,
	133, 254, 130, 131, -69, -147, -207, -140, 133, 131,
	114, 201, 241, 123, 229, 237, -130, 238, 165, -158,
	131, -126, 228, 231, 232, 171, 364, 239, 243, 242,
	233, -147, 175, -152, 180, -141, 178, -126, -40, 360,
	127, -154, -154, 230, 230, -154, -89, -54, -75, 80,
	-80, 29, 23, -79, -76, -96, -93, -94, 114, 115,
	117, 116, 118, 103, 104, 111, 81, 119, -84, -82,
	-83, -85, 64, 63, 72, 65, 66, 67, 68, 73,
	74, 75, -141, -147, -91, -222, 47, 48, 263, 264,
	265, 266, 271, 267, 83, 36, 253, 261, 260, 259,
	257, 258, 255, 256, 269, 270, 136, 254, 130, 109,
	262, -207, -140, 364, -36, 65, -5, -4, -222, 6,
	20, 21, -107, 17, 16, -223, 59, -44, -52, 42,
	43, -53, 21, 35, 46, 44, -37, -51, 105, -54,
	-147, -124, -124, 11, -63, -64, -69, -71, -147, -116,
	-157, 175, -119, 243, 242, -142, -117, -141, -139, 241,
	201, 240, 128, 279, 79, 22, 24, 223, 82, 114,
	16, 83, 113, 263, 123, 51, 280, 255, 256, 253,
	265, 266, 254, 229, 29, 10, 282, 25, 153, 21,
	35, 107, 125, 86, 87, 156, 23, 154, 75, 285,
	19, 54, 11, 13, 286, 287, 14, 136, 135, 98,
	132, 49, 8, 119, 26, 95, 45, 288, 28, 289,
	290, 291, 292, 47, 96, 17, 257, 258, 31, 293,
	271, 160, 109, 52, 38, 80, 294, 295, 73, 296,
	76, 55, 77, 15, 50, 297, 298, 299, 300, 97,
	126, 262, 48, 301, 130, 6, 268, 30, 152, 46,
	302, 131, 85, 269, 270, 134, 74, 5, 137, 32,
	9, 53, 56, 259, 260, 261, 36, 84, 12, 303,
	78, -190, 96, -181, -207, -69, 132, -69, 262, -134,
	136, -134, -134, 131, -69, -207, -207, 123, 125, 128,
	55, -22, -69, -133, 136, -207, -133, -133, -133, -69,
	120, -69, -207, 30, -131, 96, 12, 254, -207, 165,
	131, 166, 133, -155, -222, -142, -185, -207, 8, 132,
	33, 144, -155, 169, 170, -155, -129, -128, 235, 236,
	230, 234, 12, 170, 230, 168, -187, -207, 134, -141,
	-130, -7, -3, -10, -9, -11, 88, -154, -154, 58,
	79, 77, 78, 95, -54, -77, 98, 80, 96, 97,
	82, 100, 99, 110, 103, 104, 105, 106, 107, 108,
	109, 101, 102, 113, 88, 89, 90, 91, 92, 93,
	94, -125, -222, -94, -222, 121, 122, -80, -80, -80,
	-80, -80, -80, -80, -80, -80, -80, -222, 120, -2,
	-89, -4, -222, -222, -222, -222, -222, -222, -222, -222,
	-99, -54, -222, -226, -86, -222, -226, -86, -226, -86,
	-226, -222, -226, -86, -226, -86, -226, -226, -86, -222,
	-222, -222, -222, -222, -222, -222, 366, 367, -69, -103,
	-3, -36, -108, 19, 31, -54, -104, -105, -54, -103,
	38, -49, -51, -53, 42, 43, 70, 11, -144, -143,
	22, -141, 64, 120, -70, 26, -69, -56, -57, -58,
	-59, -72, -95, -222, -69, -69, -63, -224, 58, 11,
	56, -224, 58, 120, 58, 175, -119, -121, -120, 244,
	246, 88, -146, -141, 64, 29, 30, 59, 58, -69,
	-160, -163, -165, -164, -166, -161, -162, 198, 199, 114,
	202, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 30, 155, 194, 195, 196, 197, 214, 215, 216,
	217, 218, 219, 220, 221, 181, 200, 273, 182, 183,
	184, 185, 186, 187, 189, 190, 191, 192, 193, -207,
	-155, 133, -207, 80, -207, -69, -69, -155, -155, -155,
	167, 167, 131, 131, 172, -69, 58, 134, -63, 23,
	55, -69, -207, -207, -148, -147, -139, -155, -131, 64,
	-54, -155, -155, -155, -69, -155, -155, -186, 11, 98,
	-186, -131, -36, -155, -155, 11, -127, 11, 98, -54,
	-132, 96, 55, -153, 178, -69, 212, 361, 362, 363,
	-54, -54, -54, -54, -87, 73, 80, 74, 75, -80,
	-88, -91, -94, 69, 98, 96, 97, 82, -80, -80,
	-80, -80, -80, -80, -80, -80, -80, -80, -80, -80,
	-80, -80, -80, -156, -207, 64, -207, -79, -79, -141,
	-50, 21, 35, -49, -142, -148, -139, -38, -223, -223,
	-103, -49, -49, -54, -54, -96, 64, -49, -96, 64,
	-49, -49, -43, 21, 35, -97, -98, 84, -96, -141,
	-147, -223, -80, -141, -141, -49, -50, -50, -49, -49,
	-187, -187, -219, -216, -210, 61, -107, -223, 9, 98,
	58, 18, 58, -106, 24, 25, -107, -81, -141, 65,
	68, -55, 58, 11, -53, -69, -143, 105, -148, -112,
	161, -69, 30, 58, -65, -67, -66, -68, 45, 49,
	51, 46, 47, 48, 52, -151, 22, -56, -33, -3,
	371, -222, -150, 161, -149, 22, -147, 64, -112, 56,
	-56, -69, -56, -71, -147, 105, -119, -121, 58, 245,
	247, 248, 55, 76, -54, -172, 113, -192, -193, -194,
	-142, 64, 65, -181, -182, -183, -195, 147, -200, 138,
	140, 137, -184, 148, 132, 28, 59, -177, 73, 80,
	-173, 226, -167, 57, -167, -167, -167, -167, -171, 201,
	-171, -171, -171, 57, 57, -167, -167, -167, -175, 57,
	-175, -175, -176, 57, -176, -145, 56, -69, -155, 23,
	-155, -135, 128, 125, 126, -203, 124, 223, 201, 71,
	29, 15, 263, 161, 278, -207, 162, -69, -69, -69,
	-69, -69, 128, 125, -69, -69, -69, -155, 120, -69,
	-69, -70, -69, -131, -147, -147, 64, -69, -141, -41,
	-141, 64, 73, 74, 75, -88, -80, -80, -80, -48,
	156, 79, -223, -223, -49, -49, -222, 120, -5, -107,
	-223, -223, 58, 56, 22, 11, 11, -223, 11, 11,
	-223, -223, -49, -100, -98, 86, -54, -223, 120, -223,
	58, 58, -223, -223, -223, -223, -223, -47, 365, 369,
	368, 58, -218, -217, -211, 62, 88, -108, 40, -54,
	-54, -105, -108, -123, 19, 11, 36, 36, -74, 12,
	-51, -56, -53, 120, -78, 30, 36, -3, -222, -222,
	-115, -118, -96, -57, -58, -58, -57, -58, 45, 45,
	45, 50, 45, 50, 45, -66, -147, -223, -223, -223,
	-3, -73, 53, 135, 54, -222, -149, -74, -56, -74,
	-74, 120, -120, -122, 249, 246, 252, -207, 64, 58,
	-194, 88, 57, -207, 28, -184, -184, -187, -187, 28,
	-169, 29, 73, -174, 227, 65, -171, -171, -172, 30,
	-172, -172, -172, -180, 64, -180, 65, 65, 55, -141,
	-155, -154, -212, 143, 139, 147, 148, 141, 60, 61,
	62, 132, 28, 138, 140, 161, 137, -212, -136, -137,
	134, 22, 132, 28, 161, -209, 56, 167, 223, 167,
	134, -155, -148, -127, -131, -111, 57, -127, -48, 79,
	-80, -80, -223, -223, -50, -142, -103, -108, -159, 114,
	198, 155, 196, 192, 212, 203, 225, 194, 226, -156,
	-159, -80, -80, -80, -80, 272, -103, 87, -54, 85,
	-142, -80, -80, 64, -216, 88, -79, 41, -69, -101,
	13, -54, 105, -114, 55, -115, -90, -92, -91, -222,
	-109, -141, -113, -141, -74, 58, 88, -61, -60, 55,
	56, -62, 55, -60, 45, 45, -223, 132, 132, 132,
	-113, -103, -74, 246, 250, 251, -193, -194, -197, -196,
	-141, -200, -187, -187, 57, -170, 55, -80, 59, -172,
	-172, -207, 114, 59, 58, 59, 58, 59, 58, -69,
	-154, -154, -69, -154, -141, -206, 275, -208, -207, -141,
	-141, -141, -69, 120, -131, -131, -110, -141, -131, -80,
	-223, -107, -223, -167, -167, -167, -176, -167, 186, -167,
	186, -223, -223, 19, 19, 19, 19, -222, -46, 268,
	-54, 58, 58, 64, -79, -102, 14, 16, 27, -114,
	58, -223, -223, 58, 120, -223, 58, -103, -118, -54,
	-54, 57, -54, -222, -222, -222, -223, -107, 59, 58,
	-167, -110, -178, 223, 9, -171, 64, -171, 65, 65,
	-155, 26, -205, -204, -142, 57, 56, -148, 59, 58,
	-108, -171, -207, -80, -80, -80, -80, -80, -107, 64,
	-80, -80, -54, -89, 28, -92, 36, -3, -141, -141,
	-141, -107, -110, -110, -223, -110, -110, -150, -199, -198,
	56, 142, 71, -196, 59, -179, 138, 28, 137, -83,
	-172, -172, 59, 59, -222, 58, 88, -110, -69, -141,
	-223, -223, -223, -223, -45, 98, 275, -223, -223, -223,
	9, -90, 120, 59, -223, -223, -223, -73, -198, -207,
	-188, 88, 64, 150, -168, 71, 28, 28, -201, -202,
	161, -204, -194, 59, -223, 273, 52, 276, -115, -141,
	65, -69, 64, -223, 58, -141, -209, 41, 274, 277,
	57, -202, 36, -206, 41, -110, 163, 275, 59, 164,
	276, -214, -215, 55, -222, 277, -215, 55, 10, 9,
	-80, 160, -213, 151, 146, 149, 30, -213, -223, -223,
	145, 29, 73,
}

var yyDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	640, 0, 376, 376, 376, 376, 376, 376, 0, 710,
	693, 0, 0, 0, 0, -2, 341, 342, 0, 344,
	-2, 0, 0, -2, 1033, 1033, 0, 0, 1033, 0,
	0, 376, 0, 1031, 50, 51, 359, 360, 361, 87,
	1, 3, 0, 380, 648, 0, 0, -2, 378, 0,
	693, 693, 0, 0, 79, 80, 0, 0, 0, 1020,
	0, 691, 691, 691, 711, 712, 715, 716, 32, 33,
	34, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 0, 0, 0, 0, 0, 694, 0, 689, 0,
	689, 689, 689, 0, 289, 461, 719, 720, 1020, 0,
	0, 0, 332, 0, 1034, 301, 0, 303, 1034, 0,
	1034, 0, 310, 0, 0, 316, 217, 324, 338, 339,
	326, 340, 343, 0, 348, 351, 0, 323, 0, 0,
	358, 371, 372, 1033, 1033, 375, 37, 514, 473, 0,
	479, 481, 0, 516, 517, 518, 519, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 546, 547,
	548, 549, 625, 626, 627, 628, 629, 630, 631, 632,
	483, 484, 622, 0, 670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 583, 583, 583, 583,
	583, 583, 583, 583, 0, 0, 0, 0, 0, 0,
	0, -2, -2, 0, 0, 202, 640, 46, 0, 376,
	381, 382, 652, 0, 0, 640, 1032, 0, 0, -2,
	-2, 392, 398, 399, 400, 401, 377, 0, 404, 408,
	0, 0, 0, 0, 0, 0, 59, 61, 461, 65,
	0, 1009, 674, -2, -2, 0, 0, 717, 718, -2,
	864, -2, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 0, 0, 107, 0, 105, 0, 1034, 0, 0,
	0, 0, 0, 0, 1034, 1034, 1034, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 288,
	0, 290, 1034, 332, 293, 0, 0, 1034, 1034, 1034,
	0, 1034, 1034, 300, 1035, 1036, 0, 332, 376, 210,
	211, 212, 304, 1034, 1034, 306, 0, 329, 327, 328,
	321, 322, 0, 335, 313, 314, 319, 218, 349, 352,
	0, 370, 362, 363, 364, 365, 0, 373, 374, 0,
	0, 0, 0, 0, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 501, 502, 503, 504, 505, 506,
	507, 480, 0, 494, 0, 0, 0, 536, 537, 538,
	539, 540, 541, 542, 543, 544, 0, 389, 0, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 386,
	0, 614, 0, 567, 575, 0, 568, 576, 569, 577,
	570, 0, 571, 578, 572, 579, 573, 574, 580, 0,
	0, 0, 389, 389, 0, 0, 217, 217, 727, 648,
	0, 391, 38, 0, 0, 649, 641, 642, 645, 648,
	0, 413, 402, 393, 396, 397, 379, 0, 405, 409,
	0, 411, 412, 0, 63, 0, 460, 0, 415, 417,
	418, 419, 442, 0, 444, -2, 0, 0, 0, 57,
	58, 0, 0, 0, 0, 1009, 675, 67, 68, 0,
	0, 0, 185, 684, 685, 686, 682, 235, 0, 0,
	173, 169, 113, 114, 115, 162, 117, 162, 162, 162,
	162, 182, 182, 182, 182, 145, 146, 147, 148, 149,
	0, 0, 132, 162, 162, 162, 136, 152, 153, 154,
	155, 156, 157, 158, 159, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 164, 164, 164, 166, 166, 713,
	82, 0, 1034, 0, 1034, 103, 0, 249, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 690,
	0, 1034, 286, 287, 462, 721, 722, 291, 292, 333,
	334, 294, 295, 296, 297, 298, 299, 0, 213, 214,
	0, 318, 0, 305, 309, 0, 332, 0, 0, 311,
	312, 0, 0, 0, 350, 366, 354, 355, 356, 357,
	515, 474, 475, 476, 478, 495, 0, 497, 499, 485,
	486, 510, 511, 512, 0, 0, 0, 0, 508, 490,
	0, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 535, 598, 599, 0, 533, 534, 545,
	0, 0, 0, 390, 623, 0, -2, 0, 513, 669,
	648, 0, 0, 0, 0, 518, 625, 0, 518, 625,
	0, 0, 0, 387, 388, 620, 617, 0, 0, 622,
	0, 584, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 91, 725, 728, 0, 35, 652, 47, 653, 0,
	0, 0, 0, 644, 646, 647, 652, 0, 633, 0,
	0, 471, 0, 0, 394, 44, 410, 406, 0, 0,
	0, 459, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 452, 0, 0, 0, 0, 443, 0, 0, 0,
	-2, 0, 466, 949, 445, 0, 447, 448, 471, 0,
	471, 60, 471, 62, 0, 465, 676, 66, 0, 0,
	71, 72, 677, 678, 679, 680, 0, 104, 236, 238,
	241, 242, 243, 108, 109, 110, 0, 0, 223, 0,
	0, 217, 217, 0, 215, 216, 106, 176, 174, 0,
	171, 170, 116, 0, 182, 182, 139, 140, 185, 0,
	185, 185, 185, 0, 0, 133, 134, 135, 127, 0,
	128, 129, 130, 0, 131, 0, 0, 1034, 84, 692,
	85, 1033, 0, 0, 705, 250, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 0, 95, 254, 256,
	255, 259, 0, 0, 0, 281, 1034, 285, 0, 329,
	332, 426, 329, 308, 330, 331, 336, 315, 346, 369,
	367, 368, 496, 498, 500, 487, 508, 491, 0, 488,
	0, 0, 482, 550, 0, 0, 389, 0, 640, 652,
	554, 555, 0, 0, 0, 0, 0, 591, 0, 0,
	592, 0, 640, 0, 618, 0, 0, 566, 0, 585,
	0, 0, 586, 587, 588, 589, 590, 89, 92, 93,
	94, 0, 730, 726, 0, 36, 0, 40, 0, 650,
	651, 643, 39, 0, 687, 688, 634, 635, 636, 0,
	403, 414, 395, 0, 663, 0, 0, 656, 0, 0,
	471, 671, 0, 416, 438, 440, 0, 435, 450, 451,
	453, 0, 455, 0, 457, 458, 420, 421, 422, 423,
	0, 424, 0, 0, 0, 0, 446, 640, 471, 55,
	56, 0, 69, 70, 0, 0, 76, 186, 187, 0,
	239, 0, 0, 0, 205, 217, 217, 208, 209, 0,
	178, 0, 175, 112, 172, 0, 185, 185, 141, 0,
	142, 143, 144, 0, 160, 0, 0, 0, 0, 714,
	83, 244, 1033, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 1033, 0, 1033,
	706, 707, 708, 709, 0, 98, 0, 0, 0, 0,
	0, 284, 463, 332, 317, 332, 0, 332, 489, 0,
	509, 492, 551, 552, 0, 624, 648, 42, 0, 162,
	162, 603, 162, 166, 606, 162, 608, 162, 611, 0,
	0, 0, 0, 0, 0, 0, 615, 565, 621, 0,
	623, 0, 0, 0, 729, 0, 723, 654, 41, 638,
	0, 472, 407, 48, 0, 663, 655, 665, 667, 0,
	0, 659, 0, 430, 640, 0, 0, 432, 439, 0,
	0, 433, 0, 434, 454, 456, -2, 0, 0, 0,
	0, 648, 54, 73, 74, 75, 237, 240, 0, 219,
	162, 222, 206, 207, 0, 180, 0, 177, 163, 137,
	138, 183, 184, 182, 0, 182, 0, 167, 0, 1034,
	245, 246, 247, 248, 0, 253, 0, 96, 97, 0,
	0, 258, 282, 0, 302, 320, 0, 428, 307, 493,
	553, 652, 556, 600, 182, 604, 605, 607, 609, 610,
	612, 558, 557, 0, 0, 0, 0, 0, 648, 0,
	619, 0, 0, 90, 724, 45, 0, 0, 0, 49,
	0, 668, 0, 0, 0, 64, 0, 648, 672, 673,
	436, 0, 441, 0, 0, 0, 444, 53, 196, 0,
	221, 0, 188, 181, 0, 185, 161, 185, 0, 0,
	81, 0, 99, 100, 0, 0, 0, 464, 427, 0,
	43, 601, 602, 0, 0, 0, 0, 593, 0, 616,
	0, 0, 639, 637, 0, 666, 0, 658, 661, 660,
	431, 52, 0, 0, 468, 0, 0, 466, 195, 197,
	0, 203, 0, 220, 0, 193, 0, 190, 192, 179,
	150, 151, 165, 168, 0, 0, 0, 0, 260, 429,
	559, 561, 560, 562, 0, 0, 0, 564, 581, 582,
	0, 657, 0, 437, 467, 469, 470, 425, 198, 199,
	0, 204, 201, 0, 111, 0, 189, 191, 0, 276,
	0, 101, 102, 95, 563, 0, 0, 0, 664, 662,
	200, 0, 194, 275, 0, 0, 98, 594, 0, 597,
	0, 277, 0, 257, 595, 0, 0, 0, 224, 0,
	0, 225, 226, 0, 0, 596, 227, 0, 0, 0,
	0, 0, 228, 230, 231, 0, 0, 229, 278, 279,
	232, 233, 234,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 373,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:356
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:361
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:362
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:366
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:396
		{
			setParseTree(yylex, nil)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:402
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:406
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:422
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:428
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:434
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:442
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:446
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:473
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:481
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:495
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:501
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:505
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:512
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:524
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:536
		{
			yyVAL.str = InsertStr
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = ReplaceStr
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:546
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:552
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:560
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:564
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:569
		{
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:570
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:578
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:588
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:593
		{
			yyVAL.partitions = nil
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:597
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:603
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:609
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:613
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:619
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:623
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:629
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:633
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:637
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:643
		{
			yyVAL.str = RepeatableRead
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:647
		{
			yyVAL.str = ReadCommitted
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:651
		{
			yyVAL.str = ReadUncommitted
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:655
		{
			yyVAL.str = Serializable
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.str = SessionStr
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.str = GlobalStr
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:671
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:676
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 81:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:682
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:687
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:691
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:695
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:699
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:704
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:714
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:719
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:724
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str, KeyFilePath: string(yyDollar[6].bytes), KeyEnvVar: string(yyDollar[7].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:729
		{
			yyVAL.statement = &AuthRevoke{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.str = InteractiveStr
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.str = ServiceAccountStr
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.str = ServiceAccountStr
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:749
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:753
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:764
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:769
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:775
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:780
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:786
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:792
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:799
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:810
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:829
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:835
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1057
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1062
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1067
		{
			yyVAL.sqlVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1071
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1076
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1080
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1088
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1092
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1098
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1106
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1110
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1115
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1125
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1129
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1133
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1138
		{
			yyVAL.optVal = nil
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1142
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1147
		{
			yyVAL.optVal = nil
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1151
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1156
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1165
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1169
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1173
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1178
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1182
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1186
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1191
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1195
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1199
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1203
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1207
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1212
		{
			yyVAL.sqlVal = nil
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1216
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1222
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1226
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1232
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1236
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1242
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1246
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1251
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1257
		{
			yyVAL.statement = &Sleep{Duration: NewIntVal(yyDollar[2].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1263
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1273
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1277
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1281
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1285
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1289
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1320
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1324
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1329
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1333
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1339
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1343
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1349
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1355
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1359
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 224:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1366
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 225:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1370
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 226:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1374
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 227:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1378
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1384
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1390
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1396
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1400
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1404
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1408
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1412
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1417
		{
			yyVAL.str = ""
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1421
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1425
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1433
		{
			yyVAL.str = yyDollar[1].str
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1437
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1441
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1455
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1461
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1465
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1469
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1473
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1478
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1552
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1585
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1591
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1595
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 278:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1601
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 279:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1605
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1617
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1621
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1629
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1637
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1642
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1660
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1669
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1680
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1685
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1707
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1711
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1715
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1719
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1723
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1728
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1732
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1736
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1740
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1744
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1749
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1763
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1771
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1776
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1780
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1784
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1788
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1792
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1809
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), ShowTablesOpt: showTablesOpt}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1814
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: yyDollar[3].str}
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1819
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Comments: Comments(yyDollar[4].bytes2), Type: string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt, Columns: yyDollar[6].columns}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1836
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.str = "extended "
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1846
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1850
		{
			yyVAL.str = "full "
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1866
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1870
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1874
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1880
		{
			yyVAL.showFilter = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1884
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1888
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1894
		{
			yyVAL.showFilter = nil
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1898
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1904
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1908
		{
			yyVAL.str = SessionStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.str = GlobalStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1918
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1922
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.statement = &Begin{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1932
		{
			yyVAL.statement = &Begin{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			yyVAL.statement = &Commit{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1944
		{
			yyVAL.statement = &Rollback{}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1948
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1953
		{
			yyVAL.empty = struct{}{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.empty = struct{}{}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1958
		{
			yyVAL.empty = struct{}{}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1960
		{
			yyVAL.empty = struct{}{}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1965
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1976
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1980
		{
			yyVAL.str = JSONStr
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1984
		{
			yyVAL.str = TreeStr
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1988
		{
			yyVAL.str = VitessStr
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1992
		{
			yyVAL.str = TraditionalStr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1996
		{
			yyVAL.str = AnalyzeStr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2002
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2006
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2010
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2016
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2020
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2024
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2047
		{
			yyVAL.statement = &DescribeTable{Full: string(yyDollar[2].str), Extended: string(yyDollar[3].str), Table: yyDollar[4].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2051
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2057
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2061
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2065
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2069
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2075
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2079
		{
			setAllowComments(yylex, true)
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2083
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2089
		{
			yyVAL.bytes2 = nil
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2093
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.str = UnionStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2103
		{
			yyVAL.str = UnionAllStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2107
		{
			yyVAL.str = UnionDistinctStr
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2112
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.str = SQLCacheStr
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2125
		{
			yyVAL.str = ""
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.str = DistinctStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.str = DistinctStr
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2138
		{
			yyVAL.selectExprs = nil
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2147
		{
			yyVAL.strs = nil
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2155
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2159
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2163
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.str = SQLCacheStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2177
		{
			yyVAL.str = DistinctStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2181
		{
			yyVAL.str = DistinctStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.str = StraightJoinHint
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2195
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2209
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2213
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2217
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2222
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2230
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2237
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2242
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2246
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2256
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2270
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2274
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2278
		{
			exec := yyDollar[2].statement.(*Exec)
			yyVAL.tableExpr = &ExecSubquery{Exec: exec}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2285
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2291
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 425:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2295
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2300
		{
			yyVAL.columns = nil
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2304
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2311
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2315
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2321
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2325
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2338
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2342
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2346
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2356
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2358
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2362
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2368
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2370
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2373
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2375
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2378
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2382
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2386
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2393
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2399
		{
			yyVAL.str = JoinStr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2403
		{
			yyVAL.str = JoinStr
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2407
		{
			yyVAL.str = JoinStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.str = StraightJoinStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.str = LeftJoinStr
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.str = LeftJoinStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2427
		{
			yyVAL.str = RightJoinStr
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2431
		{
			yyVAL.str = RightJoinStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2437
		{
			yyVAL.str = NaturalJoinStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2441
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2455
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2461
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2469
		{
			yyVAL.tableName = TableName{QualifierSecond: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 464:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2473
		{
			yyVAL.tableName = TableName{QualifierThird: yyDollar[1].tableIdent, QualifierSecond: yyDollar[3].tableIdent, Qualifier: yyDollar[5].tableIdent, Name: yyDollar[7].tableIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2479
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2484
		{
			yyVAL.indexHints = nil
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2488
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2492
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2496
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2500
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = nil
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2515
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2527
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2549
		{
			yyVAL.str = ""
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2553
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2611
		{
			yyVAL.str = IsNullStr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2615
		{
			yyVAL.str = IsNotNullStr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2619
		{
			yyVAL.str = IsTrueStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2623
		{
			yyVAL.str = IsNotTrueStr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.str = IsFalseStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.str = IsNotFalseStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2637
		{
			yyVAL.str = EqualStr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.str = LessThanStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2645
		{
			yyVAL.str = GreaterThanStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.str = LessEqualStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2653
		{
			yyVAL.str = GreaterEqualStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2657
		{
			yyVAL.str = NotEqualStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2676
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2680
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2684
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2696
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2700
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2738
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2794
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2806
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2814
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2836
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2884
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 558:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 560:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 561:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2904
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2908
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 563:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2912
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 564:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2916
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2920
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2924
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2938
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2942
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2952
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2968
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2973
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2977
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2981
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2986
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2991
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3000
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 582:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3004
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3014
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3024
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3028
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3032
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3036
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3040
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3044
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3054
		{
			yyVAL.str = ""
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3058
		{
			yyVAL.str = BooleanModeStr
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3062
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 596:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3066
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.str = QueryExpansionStr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3076
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3086
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3090
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3094
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3102
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3116
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3128
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3132
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3136
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3141
		{
			yyVAL.expr = nil
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3150
		{
			yyVAL.str = string("")
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3154
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3164
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3170
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3175
		{
			yyVAL.expr = nil
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3179
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3185
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3189
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3193
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3199
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3207
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3211
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.expr = &NullVal{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3242
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3246
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3251
		{
			yyVAL.exprs = nil
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3255
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3260
		{
			yyVAL.expr = nil
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3264
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3269
		{
			yyVAL.orderBy = nil
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3273
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3279
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3283
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3289
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3294
		{
			yyVAL.str = AscScr
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3298
		{
			yyVAL.str = AscScr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3302
		{
			yyVAL.str = DescScr
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3307
		{
			yyVAL.limit = nil
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3311
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3315
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3319
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3324
		{
			yyVAL.str = ""
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3328
		{
			yyVAL.str = ForUpdateStr
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3332
		{
			yyVAL.str = ShareModeStr
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3345
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3349
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3353
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3357
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3363
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3367
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3371
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3375
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3380
		{
			yyVAL.updateExprs = nil
		}
	case 664:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3384
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3390
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3394
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3400
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3404
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3410
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3426
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3430
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3436
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3442
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3446
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3451
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3457
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3461
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3465
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3469
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3476
		{
			yyVAL.bytes = []byte("charset")
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3483
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3487
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3491
		{
			yyVAL.expr = &Default{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3500
		{
			yyVAL.byt = 0
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3502
		{
			yyVAL.byt = 1
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3505
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3507
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3510
		{
			yyVAL.str = ""
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3512
		{
			yyVAL.str = IgnoreStr
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3516
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3518
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3520
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3522
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3524
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3526
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3528
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3530
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3532
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3534
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3537
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3539
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3541
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3545
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3547
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3550
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3552
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3554
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3557
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3559
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3563
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3574
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3580
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3584
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3591
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3597
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3603
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3609
		{
			yyVAL.execVarDefOpt = nil
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3611
		{
			rv := yyDollar[1].execVarDef
			yyVAL.execVarDefOpt = &rv
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3617
		{
			yyVAL.execVarDefs = nil
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3619
		{
			yyVAL.execVarDefs = []ExecVarDef{yyDollar[1].execVarDef}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3623
		{
			yyVAL.execVarDefs = append(yyDollar[1].execVarDefs, yyDollar[3].execVarDef)
		}
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3630
		{
			yyVAL.statement = NewExec(yyDollar[2].bytes2, yyDollar[3].tableName, yyDollar[4].execVarDefs, yyDollar[5].execVarDefOpt)
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3957
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3966
		{
			decNesting(yylex)
		}
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3971
		{
			skipToEnd(yylex)
		}
	case 1034:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3976
		{
			skipToEnd(yylex)
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3980
		{
			skipToEnd(yylex)
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3984
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
