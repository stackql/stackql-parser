// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "strings"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:55
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	execsubquery         *ExecSubquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	execVarDef           ExecVarDef
	execVarDefOpt        *ExecVarDef
	execVarDefs          []ExecVarDef
	listArgsConcat       []ListArg
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688
const AUTH = 57689
const INTERACTIVE = 57690
const LOGIN = 57691
const MATERIALIZED = 57692
const REVOKE = 57693
const SA = 57694
const SERVICEACCOUNT = 57695
const SLEEP = 57696
const TEMP = 57697
const TEMPORARY = 57698
const REGISTRY = 57699
const PULL = 57700
const LIST = 57701
const EXEC = 57702
const PURGE = 57703
const NATIVEQUERY = 57704
const STACKQL = 57705

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"AUTH",
	"INTERACTIVE",
	"LOGIN",
	"MATERIALIZED",
	"REVOKE",
	"SA",
	"SERVICEACCOUNT",
	"SLEEP",
	"TEMP",
	"TEMPORARY",
	"REGISTRY",
	"PULL",
	"LIST",
	"EXEC",
	"PURGE",
	"NATIVEQUERY",
	"STACKQL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	364, 94,
	374, 94,
	-2, 34,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	132, 734,
	-2, 82,
	-1, 48,
	169, 352,
	170, 352,
	230, 340,
	234, 340,
	235, 340,
	236, 340,
	-2, 338,
	-1, 53,
	134, 362,
	-2, 360,
	-1, 56,
	6, 368,
	8, 368,
	9, 368,
	10, 368,
	57, 368,
	262, 368,
	-2, 340,
	-1, 82,
	38, 398,
	-2, 406,
	-1, 101,
	133, 86,
	-2, 952,
	-1, 102,
	132, 1030,
	-2, 83,
	-1, 103,
	132, 1031,
	-2, 84,
	-1, 356,
	80, 903,
	82, 903,
	88, 903,
	89, 903,
	90, 903,
	91, 903,
	92, 903,
	93, 903,
	94, 903,
	96, 903,
	97, 903,
	98, 903,
	99, 903,
	100, 903,
	101, 903,
	102, 903,
	103, 903,
	104, 903,
	105, 903,
	106, 903,
	107, 903,
	108, 903,
	109, 903,
	110, 903,
	113, 903,
	120, 903,
	121, 903,
	122, 903,
	-2, 499,
	-1, 416,
	53, 743,
	54, 743,
	120, 743,
	135, 743,
	-2, 739,
	-1, 417,
	53, 744,
	54, 744,
	120, 744,
	135, 744,
	-2, 740,
	-1, 437,
	38, 399,
	-2, 411,
	-1, 438,
	38, 400,
	-2, 412,
	-1, 461,
	88, 1018,
	-2, 80,
	-1, 462,
	88, 924,
	-2, 81,
	-1, 467,
	88, 891,
	134, 891,
	-2, 705,
	-1, 469,
	88, 960,
	134, 960,
	-2, 707,
	-1, 783,
	1, 420,
	5, 420,
	11, 420,
	12, 420,
	13, 420,
	14, 420,
	15, 420,
	17, 420,
	19, 420,
	31, 420,
	55, 420,
	58, 420,
	59, 420,
	268, 420,
	381, 420,
	-2, 496,
	-1, 804,
	56, 62,
	58, 62,
	-2, 66,
	-1, 989,
	53, 746,
	54, 746,
	120, 746,
	135, 746,
	-2, 742,
	-1, 1462,
	5, 661,
	17, 661,
	19, 661,
	31, 661,
	59, 661,
	-2, 440,
}

const yyPrivate = 57344

const yyLast = 18676

var yyAct = [...]int{
	416, 1711, 1502, 1701, 1381, 1668, 360, 1284, 1581, 1513,
	1109, 375, 1442, 1475, 1617, 1014, 1138, 1306, 1077, 1285,
	774, 389, 1118, 1108, 1439, 1443, 1272, 767, 1105, 1152,
	1448, 1454, 721, 1047, 1029, 358, 905, 976, 1211, 983,
	81, 3, 1404, 104, 621, 346, 1358, 308, 1348, 817,
	308, 927, 1122, 1062, 79, 104, 777, 653, 1078, 772,
	1073, 424, 430, 953, 439, 795, 1009, 33, 466, 790,
	362, 460, 1148, 1055, 816, 590, 785, 77, 455, 452,
	596, 794, 94, 918, 82, 630, 806, 672, 308, 104,
	734, 76, 591, 308, 882, 351, 418, 433, 1250, 735,
	759, 760, 1252, 1251, 347, 345, 419, 350, 35, 36,
	69, 38, 39, 757, 938, 758, 7, 6, 5, 632,
	314, 84, 85, 86, 87, 88, 320, 73, 610, 317,
	1704, 1688, 40, 59, 60, 1699, 62, 324, 1676, 1696,
	1503, 445, 1687, 1421, 1675, 425, 1536, 595, 1096, 420,
	1320, 422, 423, 1319, 1469, 49, 1321, 934, 401, 68,
	407, 408, 405, 406, 404, 403, 402, 304, 300, 301,
	302, 322, 1470, 1471, 409, 410, 332, 329, 598, 1097,
	1098, 331, 1643, 682, 681, 691, 692, 684, 685, 686,
	687, 688, 689, 690, 683, 655, 818, 693, 819, 35,
	647, 69, 38, 39, 648, 645, 646, 315, 463, 296,
	652, 335, 294, 349, 298, 348, 1339, 1131, 1383, 1570,
	1139, 106, 107, 108, 1527, 42, 43, 45, 44, 47,
	1525, 61, 339, 936, 326, 318, 341, 327, 328, 335,
	337, 801, 894, 319, 321, 332, 650, 316, 334, 333,
	68, 106, 107, 108, 48, 72, 71, 1405, 1385, 57,
	58, 46, 891, 939, 940, 941, 640, 641, 893, 1698,
	1695, 1669, 651, 1380, 1384, 50, 51, 1056, 52, 53,
	54, 55, 1662, 895, 1123, 1715, 1719, 1625, 306, 1307,
	1309, 303, 627, 597, 629, 308, 602, 603, 1407, 1377,
	308, 1618, 612, 611, 892, 1379, 308, 298, 1386, 898,
	820, 297, 656, 1125, 308, 619, 1620, 1158, 625, 104,
	1125, 634, 594, 104, 1465, 104, 626, 628, 1464, 454,
	1463, 654, 593, 295, 592, 1409, 600, 1413, 344, 1408,
	599, 1406, 104, 313, 299, 1185, 1411, 1650, 1184, 705,
	706, 1551, 106, 107, 108, 1410, 821, 607, 1510, 1644,
	1316, 1230, 1277, 1240, 70, 1674, 1125, 1219, 1412, 1414,
	330, 1308, 682, 681, 691, 692, 684, 685, 686, 687,
	688, 689, 690, 683, 660, 1190, 693, 1619, 1084, 812,
	1227, 789, 1139, 1106, 665, 666, 1626, 1624, 106, 107,
	108, 1713, 719, 617, 1714, 1368, 1712, 693, 639, 1378,
	642, 1376, 106, 107, 108, 624, 683, 1124, 1092, 693,
	1035, 308, 932, 308, 1124, 604, 1132, 605, 703, 1212,
	606, 613, 614, 615, 919, 623, 1660, 1364, 1365, 1366,
	928, 919, 673, 1634, 91, 764, 1452, 1431, 104, 623,
	308, 1260, 308, 664, 1423, 70, 293, 1337, 722, 104,
	663, 661, 662, 884, 1010, 104, 1488, 765, 671, 658,
	1124, 705, 706, 65, 960, 1121, 1119, 1128, 1120, 64,
	66, 67, 74, 92, 1129, 1117, 1123, 1664, 958, 959,
	957, 781, 1679, 737, 739, 741, 743, 745, 747, 748,
	705, 706, 738, 740, 778, 744, 746, 635, 749, 1367,
	1720, 793, 766, 951, 1372, 1369, 1360, 1370, 1363, 622,
	1359, 920, 68, 1173, 1361, 1362, 1576, 929, 920, 1575,
	815, 805, 637, 622, 956, 783, 601, 1172, 1371, 1352,
	810, 609, 449, 450, 1010, 1351, 1237, 616, 686, 687,
	688, 689, 690, 683, 1721, 618, 693, 1340, 421, 106,
	107, 108, 106, 107, 108, 673, 1226, 673, 106, 107,
	108, 1681, 1031, 669, 670, 668, 670, 668, 463, 1171,
	691, 692, 684, 685, 686, 687, 688, 689, 690, 683,
	308, 671, 693, 671, 879, 308, 1661, 883, 589, 885,
	1597, 308, 104, 104, 104, 1573, 434, 1540, 308, 673,
	1429, 308, 1349, 673, 308, 903, 904, 1198, 308, 668,
	104, 669, 670, 668, 910, 104, 104, 104, 308, 104,
	104, 636, 1168, 1165, 1166, 671, 1164, 763, 78, 671,
	1255, 104, 104, 638, 1259, 434, 682, 681, 691, 692,
	684, 685, 686, 687, 688, 689, 690, 683, 1631, 308,
	693, 1225, 761, 1224, 762, 909, 947, 949, 950, 1175,
	1178, 1587, 1697, 948, 673, 1204, 1205, 1206, 881, 922,
	886, 1630, 669, 670, 668, 1484, 907, 888, 889, 890,
	899, 792, 434, 804, 977, 106, 107, 108, 954, 978,
	671, 1683, 434, 979, 1273, 908, 106, 107, 108, 1170,
	912, 913, 914, 673, 916, 917, 1440, 104, 921, 1451,
	923, 669, 670, 668, 1587, 1672, 924, 925, 1126, 1425,
	1049, 1169, 1587, 434, 998, 1001, 991, 992, 1049, 671,
	1011, 980, 981, 993, 1037, 1587, 1652, 955, 1587, 1622,
	1059, 104, 104, 106, 107, 108, 988, 1323, 654, 654,
	1025, 1026, 1451, 684, 685, 686, 687, 688, 689, 690,
	683, 1174, 722, 693, 1587, 1586, 104, 1451, 106, 107,
	108, 1033, 1254, 308, 1036, 1048, 1176, 104, 989, 1566,
	1565, 80, 308, 1019, 1020, 673, 1553, 434, 990, 1550,
	434, 308, 308, 669, 670, 668, 1494, 1493, 308, 1490,
	1491, 35, 308, 308, 104, 1023, 1024, 1490, 1489, 808,
	1082, 671, 1048, 434, 1059, 434, 1054, 1032, 104, 591,
	808, 829, 667, 434, 1048, 1279, 880, 1042, 1547, 987,
	1075, 1280, 887, 1050, 106, 107, 108, 667, 1027, 896,
	373, 1058, 454, 828, 827, 902, 1633, 1492, 989, 1140,
	1141, 1142, 68, 1052, 809, 1059, 811, 1087, 1086, 915,
	807, 1089, 35, 1324, 1095, 809, 1243, 807, 1085, 1059,
	1242, 907, 1048, 807, 104, 1093, 104, 308, 1177, 1094,
	1090, 1038, 308, 308, 308, 308, 308, 897, 308, 308,
	937, 35, 308, 104, 1113, 427, 1040, 1041, 1154, 987,
	1064, 1067, 1068, 1069, 1065, 417, 1066, 1070, 813, 308,
	1455, 1456, 308, 68, 308, 68, 1689, 308, 1583, 308,
	308, 1604, 1133, 463, 308, 1558, 104, 1153, 104, 1064,
	1067, 1068, 1069, 1065, 1480, 1066, 1070, 1110, 1150, 1151,
	1392, 673, 68, 1455, 1456, 325, 68, 1327, 105, 669,
	670, 668, 309, 1149, 1144, 309, 1143, 1382, 1584, 1159,
	105, 1161, 1195, 1461, 1156, 1706, 1702, 671, 1482, 954,
	378, 377, 380, 381, 382, 383, 1458, 1440, 1189, 379,
	384, 1353, 933, 1193, 901, 1214, 1296, 1294, 1460, 1215,
	1293, 1297, 1295, 309, 105, 1292, 1693, 1686, 309, 1433,
	1222, 1223, 342, 1262, 775, 1691, 1229, 1271, 440, 1232,
	1233, 1207, 1270, 1344, 1051, 826, 1253, 1239, 955, 1336,
	768, 1241, 441, 1057, 1244, 1245, 1246, 1247, 1248, 779,
	780, 443, 769, 442, 1298, 1006, 1068, 1069, 620, 1088,
	1666, 1665, 1220, 1602, 1334, 1329, 1221, 1545, 425, 1007,
	1261, 1579, 440, 1160, 1496, 1286, 900, 1157, 1072, 1269,
	1266, 431, 308, 428, 429, 1236, 441, 1268, 1544, 432,
	308, 80, 1543, 437, 438, 443, 1436, 442, 1273, 1301,
	1302, 1303, 649, 1708, 1707, 83, 1281, 1231, 1265, 1228,
	926, 782, 1708, 1648, 1571, 1274, 1034, 1322, 427, 104,
	1275, 78, 1312, 75, 1314, 1276, 1315, 1304, 1328, 1325,
	1074, 29, 654, 654, 1299, 1, 1288, 1289, 1162, 1291,
	1028, 1256, 1257, 1179, 1180, 1181, 1182, 1183, 1305, 1186,
	1187, 1287, 1700, 1188, 1290, 1317, 1258, 1313, 1030, 1504,
	1580, 1341, 1342, 989, 1167, 1667, 1616, 104, 1474, 308,
	1191, 1116, 1107, 1192, 90, 792, 588, 1343, 1194, 1345,
	1346, 1347, 89, 1330, 1331, 1199, 1659, 633, 1115, 1332,
	1333, 1114, 1623, 1569, 1127, 1338, 1130, 1481, 1335, 104,
	1663, 308, 834, 1350, 832, 833, 831, 836, 1355, 835,
	830, 986, 323, 458, 1311, 935, 338, 1071, 822, 1357,
	309, 1155, 1373, 784, 93, 309, 1375, 1374, 1163, 931,
	104, 309, 643, 644, 701, 1267, 977, 1388, 1110, 309,
	98, 1318, 1398, 1399, 105, 464, 457, 1390, 105, 1391,
	105, 1402, 1446, 1389, 1039, 771, 1393, 1394, 1542, 1403,
	1435, 1235, 731, 1008, 798, 1422, 361, 105, 1400, 907,
	946, 376, 374, 1415, 1134, 1135, 1136, 1137, 308, 1416,
	1043, 1278, 675, 359, 1387, 353, 797, 988, 104, 1063,
	1145, 1146, 1147, 104, 104, 1061, 1286, 1441, 1060, 453,
	1430, 1457, 1453, 796, 436, 1249, 1432, 1535, 1642, 435,
	1005, 800, 1444, 56, 1201, 343, 37, 444, 63, 989,
	32, 104, 31, 28, 30, 27, 22, 21, 1450, 20,
	1462, 19, 1459, 18, 24, 104, 17, 104, 104, 16,
	15, 654, 654, 1467, 608, 41, 309, 1473, 309, 1401,
	1468, 1466, 26, 25, 14, 1487, 13, 12, 1472, 11,
	10, 1477, 9, 8, 308, 4, 659, 23, 720, 2,
	1426, 0, 0, 105, 0, 309, 0, 309, 0, 0,
	1485, 1486, 0, 0, 105, 308, 0, 0, 390, 34,
	105, 104, 0, 1505, 104, 104, 104, 308, 1478, 1479,
	0, 0, 0, 104, 0, 0, 0, 1401, 0, 0,
	1356, 0, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 0, 0, 34, 0, 0, 1517, 0, 0, 1498,
	1519, 1500, 0, 0, 0, 387, 0, 0, 0, 0,
	0, 1528, 1529, 0, 1511, 0, 1512, 0, 1515, 1523,
	0, 0, 0, 0, 1110, 0, 1110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 426, 0, 1286, 0,
	0, 1548, 1549, 0, 1552, 1518, 1546, 1541, 100, 0,
	0, 1555, 0, 104, 0, 0, 0, 1554, 0, 0,
	340, 104, 1563, 1325, 0, 0, 0, 0, 0, 0,
	1568, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 104, 309, 1572, 0, 1574, 1434,
	309, 308, 0, 0, 465, 0, 309, 105, 105, 105,
	0, 0, 1590, 309, 0, 0, 309, 0, 0, 309,
	1564, 0, 0, 309, 0, 105, 0, 1578, 1589, 0,
	105, 105, 105, 309, 105, 105, 1588, 1585, 0, 0,
	0, 104, 104, 0, 104, 0, 105, 105, 0, 104,
	0, 104, 104, 104, 308, 0, 0, 104, 1610, 1444,
	1611, 1613, 1614, 1603, 309, 1609, 1612, 1601, 0, 907,
	1621, 1577, 1615, 1627, 104, 308, 0, 0, 104, 0,
	1605, 0, 1110, 1635, 0, 1495, 0, 0, 1596, 0,
	0, 1628, 0, 1629, 0, 0, 0, 1638, 1639, 1640,
	1641, 0, 1645, 0, 1646, 1647, 1499, 1649, 0, 1658,
	0, 0, 0, 1582, 0, 0, 1444, 1653, 1509, 1654,
	1655, 1657, 105, 1656, 104, 104, 0, 0, 776, 0,
	0, 0, 1670, 0, 0, 1671, 0, 0, 0, 0,
	800, 104, 0, 0, 0, 1286, 1677, 800, 1673, 0,
	0, 800, 0, 308, 0, 0, 105, 105, 0, 0,
	104, 0, 1651, 0, 0, 0, 0, 1685, 0, 0,
	0, 0, 0, 1682, 0, 0, 0, 0, 1692, 1690,
	104, 105, 0, 0, 0, 0, 0, 631, 309, 1694,
	0, 631, 105, 631, 1705, 0, 0, 309, 0, 0,
	1716, 0, 0, 0, 0, 0, 309, 309, 0, 0,
	0, 0, 34, 309, 0, 1717, 1718, 309, 309, 105,
	0, 0, 0, 0, 0, 702, 704, 0, 0, 0,
	0, 0, 0, 105, 465, 0, 0, 0, 465, 0,
	465, 0, 0, 1582, 1110, 681, 691, 692, 684, 685,
	686, 687, 688, 689, 690, 683, 718, 657, 693, 0,
	723, 724, 725, 726, 727, 728, 729, 730, 0, 733,
	736, 736, 736, 742, 736, 736, 742, 736, 750, 751,
	752, 753, 754, 755, 756, 0, 0, 0, 0, 105,
	0, 105, 309, 0, 0, 34, 0, 309, 309, 309,
	309, 309, 0, 309, 309, 1539, 0, 309, 105, 0,
	0, 0, 0, 0, 0, 0, 1636, 0, 0, 799,
	0, 0, 1520, 1521, 309, 1522, 0, 309, 1524, 309,
	1526, 0, 309, 0, 309, 309, 0, 0, 0, 309,
	0, 105, 0, 105, 0, 0, 682, 681, 691, 692,
	684, 685, 686, 687, 688, 689, 690, 683, 0, 0,
	693, 0, 0, 787, 0, 0, 802, 0, 0, 1533,
	0, 0, 0, 0, 465, 0, 0, 0, 0, 0,
	823, 0, 0, 0, 0, 0, 0, 1538, 0, 0,
	800, 0, 0, 1567, 1680, 0, 0, 355, 0, 0,
	800, 800, 800, 800, 800, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 994, 995, 800, 0, 1000,
	1003, 1004, 0, 0, 0, 0, 0, 800, 682, 681,
	691, 692, 684, 685, 686, 687, 688, 689, 690, 683,
	1532, 0, 693, 0, 1018, 0, 0, 1021, 1022, 682,
	681, 691, 692, 684, 685, 686, 687, 688, 689, 690,
	683, 0, 0, 693, 0, 0, 0, 0, 0, 0,
	631, 631, 631, 0, 0, 0, 0, 309, 0, 0,
	0, 0, 0, 0, 0, 309, 0, 0, 631, 0,
	0, 0, 0, 631, 631, 631, 0, 631, 631, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 631,
	631, 0, 0, 0, 105, 0, 0, 465, 465, 465,
	682, 681, 691, 692, 684, 685, 686, 687, 688, 689,
	690, 683, 1531, 0, 693, 465, 0, 0, 0, 0,
	465, 465, 465, 0, 465, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 465, 465, 677, 0,
	680, 0, 105, 0, 309, 0, 694, 695, 696, 697,
	698, 699, 700, 0, 678, 679, 676, 682, 681, 691,
	692, 684, 685, 686, 687, 688, 689, 690, 683, 0,
	0, 693, 0, 388, 105, 0, 309, 682, 681, 691,
	692, 684, 685, 686, 687, 688, 689, 690, 683, 0,
	0, 693, 682, 681, 691, 692, 684, 685, 686, 687,
	688, 689, 690, 683, 0, 105, 693, 0, 0, 0,
	1395, 0, 982, 0, 0, 465, 0, 0, 0, 0,
	307, 0, 0, 336, 0, 0, 0, 0, 0, 1012,
	682, 681, 691, 692, 684, 685, 686, 687, 688, 689,
	690, 683, 0, 0, 693, 0, 1016, 1017, 1076, 0,
	0, 718, 0, 309, 0, 799, 1216, 1217, 448, 799,
	0, 456, 0, 105, 0, 0, 307, 0, 105, 105,
	0, 1044, 0, 0, 0, 0, 0, 1234, 0, 0,
	0, 0, 787, 0, 0, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 802, 105, 0, 0, 0,
	0, 0, 802, 1530, 0, 0, 802, 0, 0, 465,
	105, 0, 105, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 631, 0, 631, 0, 0, 0, 0, 309,
	0, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 631, 0, 0, 0, 0, 0, 0, 0, 0,
	309, 0, 0, 0, 0, 0, 105, 0, 0, 105,
	105, 105, 309, 0, 0, 0, 0, 0, 105, 465,
	1213, 465, 0, 682, 681, 691, 692, 684, 685, 686,
	687, 688, 689, 690, 683, 0, 0, 693, 465, 0,
	682, 681, 691, 692, 684, 685, 686, 687, 688, 689,
	690, 683, 0, 0, 693, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1200, 0, 1202, 0, 0, 1218, 0, 0, 426,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 307, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 307,
	0, 105, 0, 0, 0, 0, 0, 307, 0, 105,
	0, 0, 0, 0, 0, 0, 309, 0, 799, 0,
	0, 0, 0, 352, 1282, 1283, 0, 0, 799, 799,
	799, 799, 799, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 799, 105, 105, 0, 105,
	0, 0, 0, 0, 105, 802, 105, 105, 105, 309,
	0, 0, 105, 0, 1012, 802, 802, 802, 802, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	309, 0, 802, 105, 0, 0, 0, 0, 0, 0,
	465, 0, 802, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 465, 0, 34, 0, 0, 0,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	105, 0, 0, 307, 803, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 631, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 1354, 952, 0, 105, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1015, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 34, 0, 0, 0, 0, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1218, 0, 0, 307, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 465, 307, 1012, 0, 0, 1447, 1449,
	0, 307, 0, 0, 307, 0, 0, 307, 0, 0,
	0, 906, 0, 0, 0, 674, 0, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	465, 0, 465, 1476, 0, 0, 0, 0, 0, 0,
	0, 352, 307, 0, 0, 0, 0, 0, 0, 0,
	732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1534, 0, 770, 773, 0, 0, 1501, 0, 0, 1506,
	1507, 1508, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 448, 906, 0, 0, 0, 448, 448, 0,
	0, 448, 448, 448, 0, 0, 0, 1013, 0, 0,
	0, 0, 1560, 1561, 1562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 448, 448, 448, 448,
	448, 0, 0, 0, 0, 0, 1208, 1209, 1210, 0,
	0, 0, 0, 0, 631, 34, 0, 1012, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 906, 0, 307, 0, 0, 465, 0,
	0, 0, 0, 803, 1080, 1080, 1514, 0, 0, 0,
	803, 307, 0, 0, 803, 1091, 906, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 1445, 0, 34, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1632, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1606, 1607, 0, 1608,
	0, 0, 0, 1445, 1514, 0, 1514, 1514, 1514, 0,
	307, 0, 1476, 0, 911, 307, 307, 307, 307, 307,
	0, 307, 307, 0, 0, 307, 0, 0, 0, 1514,
	0, 0, 0, 1637, 0, 0, 0, 0, 0, 0,
	930, 0, 307, 0, 0, 307, 0, 307, 0, 0,
	307, 0, 1196, 1197, 0, 0, 0, 307, 942, 943,
	944, 945, 0, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 465,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1012, 0, 1678, 1703, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 448,
	0, 0, 0, 0, 0, 1684, 996, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 448,
	0, 0, 0, 0, 0, 1514, 0, 0, 0, 0,
	1396, 1397, 0, 0, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 0, 1417, 1418, 0, 1419, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 448, 803, 0, 0, 0, 0, 0, 0,
	0, 0, 1013, 803, 803, 803, 803, 803, 852, 0,
	0, 0, 0, 0, 0, 1300, 0, 0, 0, 0,
	803, 0, 0, 1080, 0, 0, 0, 0, 906, 0,
	803, 1101, 1104, 0, 865, 868, 869, 870, 871, 872,
	873, 0, 874, 875, 876, 877, 878, 853, 854, 855,
	856, 837, 838, 866, 0, 840, 0, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 857, 858, 859,
	860, 861, 862, 863, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1238, 0, 1013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1263, 1264, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1591, 1592,
	1593, 1594, 1595, 0, 0, 0, 1598, 1599, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 1709, 0, 0, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1013, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 0, 0, 1556, 0, 0, 1557, 574, 562, 1559,
	520, 577, 492, 510, 585, 511, 514, 550, 478, 532,
	201, 508, 0, 496, 473, 504, 474, 494, 522, 140,
	169, 136, 564, 535, 576, 171, 0, 497, 583, 173,
	541, 0, 252, 188, 0, 0, 0, 524, 566, 530,
	559, 519, 551, 483, 540, 578, 509, 548, 579, 0,
	0, 0, 106, 107, 108, 0, 1111, 1112, 0, 0,
	0, 0, 0, 129, 0, 545, 573, 506, 547, 549,
	587, 472, 542, 0, 476, 479, 584, 569, 500, 501,
	1326, 0, 0, 0, 1600, 352, 0, 523, 531, 556,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 498,
	0, 539, 0, 0, 0, 480, 477, 0, 0, 0,
	0, 521, 0, 0, 0, 482, 0, 499, 557, 0,
	470, 149, 561, 568, 518, 282, 572, 516, 515, 575,
	220, 0, 257, 152, 170, 125, 166, 110, 121, 0,
	151, 198, 229, 233, 565, 495, 505, 133, 502, 231,
	208, 273, 538, 210, 230, 174, 263, 221, 272, 283,
	284, 260, 280, 288, 248, 114, 259, 271, 130, 242,
	0, 0, 0, 116, 269, 255, 186, 162, 163, 115,
	0, 227, 139, 147, 135, 200, 266, 267, 134, 291,
	122, 279, 118, 123, 278, 194, 262, 270, 187, 179,
	117, 268, 185, 178, 168, 143, 154, 218, 176, 219,
	155, 190, 189, 191, 0, 475, 0, 253, 276, 292,
	127, 491, 261, 286, 287, 0, 222, 128, 148, 142,
	217, 146, 192, 124, 157, 250, 167, 175, 226, 290,
	207, 232, 131, 275, 251, 487, 490, 485, 486, 533,
	534, 580, 581, 582, 558, 481, 0, 488, 489, 0,
	563, 570, 571, 537, 109, 119, 172, 289, 224, 145,
	277, 471, 484, 138, 493, 0, 0, 507, 512, 513,
	525, 526, 527, 528, 529, 536, 543, 544, 546, 552,
	553, 554, 555, 560, 567, 586, 111, 112, 120, 126,
	132, 137, 141, 144, 150, 153, 156, 158, 159, 160,
	165, 177, 181, 182, 183, 184, 195, 196, 197, 199,
	202, 203, 204, 205, 206, 209, 211, 212, 213, 214,
	215, 216, 225, 228, 234, 235, 236, 237, 238, 239,
	241, 244, 245, 246, 247, 254, 258, 264, 265, 274,
	281, 285, 0, 0, 0, 0, 113, 164, 180, 310,
	240, 243, 249, 256, 311, 312, 0, 0, 0, 503,
	223, 193, 161, 574, 562, 0, 520, 577, 492, 510,
	585, 511, 514, 550, 478, 532, 201, 508, 0, 496,
	473, 504, 474, 494, 522, 140, 169, 136, 564, 535,
	576, 171, 0, 497, 583, 173, 541, 0, 252, 188,
	0, 0, 0, 524, 566, 530, 559, 519, 551, 483,
	540, 578, 509, 548, 579, 0, 0, 0, 106, 107,
	108, 0, 1111, 1112, 0, 0, 0, 0, 0, 129,
	0, 545, 573, 506, 547, 549, 587, 472, 542, 0,
	476, 479, 584, 569, 500, 501, 0, 0, 0, 0,
	0, 0, 0, 523, 531, 556, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 498, 0, 539, 0, 0,
	0, 480, 477, 0, 0, 0, 0, 521, 0, 0,
	0, 482, 0, 499, 557, 0, 470, 149, 561, 568,
	518, 282, 572, 516, 515, 575, 220, 0, 257, 152,
	170, 125, 166, 110, 121, 0, 151, 198, 229, 233,
	565, 495, 505, 133, 502, 231, 208, 273, 538, 210,
	230, 174, 263, 221, 272, 283, 284, 260, 280, 288,
	248, 114, 259, 271, 130, 242, 0, 0, 0, 116,
	269, 255, 186, 162, 163, 115, 0, 227, 139, 147,
	135, 200, 266, 267, 134, 291, 122, 279, 118, 123,
	278, 194, 262, 270, 187, 179, 117, 268, 185, 178,
	168, 143, 154, 218, 176, 219, 155, 190, 189, 191,
	0, 475, 0, 253, 276, 292, 127, 491, 261, 286,
	287, 0, 222, 128, 148, 142, 217, 146, 192, 124,
	157, 250, 167, 175, 226, 290, 207, 232, 131, 275,
	251, 487, 490, 485, 486, 533, 534, 580, 581, 582,
	558, 481, 0, 488, 489, 0, 563, 570, 571, 537,
	109, 119, 172, 289, 224, 145, 277, 471, 484, 138,
	493, 0, 0, 507, 512, 513, 525, 526, 527, 528,
	529, 536, 543, 544, 546, 552, 553, 554, 555, 560,
	567, 586, 111, 112, 120, 126, 132, 137, 141, 144,
	150, 153, 156, 158, 159, 160, 165, 177, 181, 182,
	183, 184, 195, 196, 197, 199, 202, 203, 204, 205,
	206, 209, 211, 212, 213, 214, 215, 216, 225, 228,
	234, 235, 236, 237, 238, 239, 241, 244, 245, 246,
	247, 254, 258, 264, 265, 274, 281, 285, 0, 0,
	0, 0, 113, 164, 180, 310, 240, 243, 249, 256,
	311, 312, 0, 0, 0, 503, 223, 193, 161, 574,
	562, 0, 520, 577, 492, 510, 585, 511, 514, 550,
	478, 532, 201, 508, 0, 496, 473, 504, 474, 494,
	522, 140, 169, 136, 564, 535, 576, 171, 0, 497,
	583, 173, 541, 0, 252, 188, 0, 0, 0, 524,
	566, 530, 559, 519, 551, 483, 540, 578, 509, 548,
	579, 68, 0, 0, 106, 107, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 545, 573, 506,
	547, 549, 587, 472, 542, 0, 476, 479, 584, 569,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 523,
	531, 556, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 498, 0, 539, 0, 0, 0, 480, 477, 0,
	0, 0, 0, 521, 0, 0, 0, 482, 0, 499,
	557, 0, 470, 149, 561, 568, 518, 282, 572, 516,
	515, 575, 220, 0, 257, 152, 170, 125, 166, 110,
	121, 0, 151, 198, 229, 233, 565, 495, 505, 133,
	502, 231, 208, 273, 538, 210, 230, 174, 263, 221,
	272, 283, 284, 260, 280, 288, 248, 114, 259, 271,
	130, 242, 0, 0, 0, 116, 269, 255, 186, 162,
	163, 115, 0, 227, 139, 147, 135, 200, 266, 267,
	134, 291, 122, 279, 118, 123, 278, 194, 262, 270,
	187, 179, 117, 268, 185, 178, 168, 143, 154, 218,
	176, 219, 155, 190, 189, 191, 0, 475, 0, 253,
	276, 292, 127, 491, 261, 286, 287, 0, 222, 128,
	148, 142, 217, 146, 192, 124, 157, 250, 167, 175,
	226, 290, 207, 232, 131, 275, 251, 487, 490, 485,
	486, 533, 534, 580, 581, 582, 558, 481, 0, 488,
	489, 0, 563, 570, 571, 537, 109, 119, 172, 289,
	224, 145, 277, 471, 484, 138, 493, 0, 0, 507,
	512, 513, 525, 526, 527, 528, 529, 536, 543, 544,
	546, 552, 553, 554, 555, 560, 567, 586, 111, 112,
	120, 126, 132, 137, 141, 144, 150, 153, 156, 158,
	159, 160, 165, 177, 181, 182, 183, 184, 195, 196,
	197, 199, 202, 203, 204, 205, 206, 209, 211, 212,
	213, 214, 215, 216, 225, 228, 234, 235, 236, 237,
	238, 239, 241, 244, 245, 246, 247, 254, 258, 264,
	265, 274, 281, 285, 0, 0, 0, 0, 113, 164,
	180, 310, 240, 243, 249, 256, 311, 312, 0, 0,
	0, 503, 223, 193, 161, 574, 562, 0, 520, 577,
	492, 510, 585, 511, 514, 550, 478, 532, 201, 508,
	0, 496, 473, 504, 474, 494, 522, 140, 169, 136,
	564, 535, 576, 171, 0, 497, 583, 173, 541, 0,
	252, 188, 0, 0, 0, 524, 566, 530, 559, 519,
	551, 483, 540, 578, 509, 548, 579, 0, 0, 0,
	106, 107, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 545, 573, 506, 547, 549, 587, 472,
	542, 0, 476, 479, 584, 569, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 523, 531, 556, 517, 0,
	0, 0, 0, 0, 0, 1438, 0, 498, 0, 539,
	0, 0, 0, 480, 477, 0, 0, 0, 0, 521,
	0, 0, 0, 482, 0, 499, 557, 0, 470, 149,
	561, 568, 518, 282, 572, 516, 515, 575, 220, 0,
	257, 152, 170, 125, 166, 110, 121, 0, 151, 198,
	229, 233, 565, 495, 505, 133, 502, 231, 208, 273,
	538, 210, 230, 174, 263, 221, 272, 283, 284, 260,
	280, 288, 248, 114, 259, 271, 130, 242, 0, 0,
	0, 116, 269, 255, 186, 162, 163, 115, 0, 227,
	139, 147, 135, 200, 266, 267, 134, 291, 122, 279,
	118, 123, 278, 194, 262, 270, 187, 179, 117, 268,
	185, 178, 168, 143, 154, 218, 176, 219, 155, 190,
	189, 191, 0, 475, 0, 253, 276, 292, 127, 491,
	261, 286, 287, 0, 222, 128, 148, 142, 217, 146,
	192, 124, 157, 250, 167, 175, 226, 290, 207, 232,
	131, 275, 251, 487, 490, 485, 486, 533, 534, 580,
	581, 582, 558, 481, 0, 488, 489, 0, 563, 570,
	571, 537, 109, 119, 172, 289, 224, 145, 277, 471,
	484, 138, 493, 0, 0, 507, 512, 513, 525, 526,
	527, 528, 529, 536, 543, 544, 546, 552, 553, 554,
	555, 560, 567, 586, 111, 112, 120, 126, 132, 137,
	141, 144, 150, 153, 156, 158, 159, 160, 165, 177,
	181, 182, 183, 184, 195, 196, 197, 199, 202, 203,
	204, 205, 206, 209, 211, 212, 213, 214, 215, 216,
	225, 228, 234, 235, 236, 237, 238, 239, 241, 244,
	245, 246, 247, 254, 258, 264, 265, 274, 281, 285,
	0, 0, 0, 0, 113, 164, 180, 310, 240, 243,
	249, 256, 311, 312, 0, 0, 0, 503, 223, 193,
	161, 574, 562, 0, 520, 577, 492, 510, 585, 511,
	514, 550, 478, 532, 201, 508, 0, 496, 473, 504,
	474, 494, 522, 140, 169, 136, 564, 535, 576, 171,
	0, 497, 583, 173, 541, 0, 252, 188, 0, 0,
	0, 524, 566, 530, 559, 519, 551, 483, 540, 578,
	509, 548, 579, 0, 0, 0, 106, 107, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 545,
	573, 506, 547, 549, 587, 472, 542, 0, 476, 479,
	584, 569, 500, 501, 0, 0, 0, 0, 0, 0,
	0, 523, 531, 556, 517, 0, 0, 0, 0, 0,
	0, 1092, 0, 498, 0, 539, 0, 0, 0, 480,
	477, 0, 0, 0, 0, 521, 0, 0, 0, 482,
	0, 499, 557, 0, 470, 149, 561, 568, 518, 282,
	572, 516, 515, 575, 220, 0, 257, 152, 170, 125,
	166, 110, 121, 0, 151, 198, 229, 233, 565, 495,
	505, 133, 502, 231, 208, 273, 538, 210, 230, 174,
	263, 221, 272, 283, 284, 260, 280, 288, 248, 114,
	259, 271, 130, 242, 0, 0, 0, 116, 269, 255,
	186, 162, 163, 115, 0, 227, 139, 147, 135, 200,
	266, 267, 134, 291, 122, 279, 118, 123, 278, 194,
	262, 270, 187, 179, 117, 268, 185, 178, 168, 143,
	154, 218, 176, 219, 155, 190, 189, 191, 0, 475,
	0, 253, 276, 292, 127, 491, 261, 286, 287, 0,
	222, 128, 148, 142, 217, 146, 192, 124, 157, 250,
	167, 175, 226, 290, 207, 232, 131, 275, 251, 487,
	490, 485, 486, 533, 534, 580, 581, 582, 558, 481,
	0, 488, 489, 0, 563, 570, 571, 537, 109, 119,
	172, 289, 224, 145, 277, 471, 484, 138, 493, 0,
	0, 507, 512, 513, 525, 526, 527, 528, 529, 536,
	543, 544, 546, 552, 553, 554, 555, 560, 567, 586,
	111, 112, 120, 126, 132, 137, 141, 144, 150, 153,
	156, 158, 159, 160, 165, 177, 181, 182, 183, 184,
	195, 196, 197, 199, 202, 203, 204, 205, 206, 209,
	211, 212, 213, 214, 215, 216, 225, 228, 234, 235,
	236, 237, 238, 239, 241, 244, 245, 246, 247, 254,
	258, 264, 265, 274, 281, 285, 0, 0, 0, 0,
	113, 164, 180, 310, 240, 243, 249, 256, 311, 312,
	0, 0, 0, 503, 223, 193, 161, 574, 562, 0,
	520, 577, 492, 510, 585, 511, 514, 550, 478, 532,
	201, 508, 0, 496, 473, 504, 474, 494, 522, 140,
	169, 136, 564, 535, 576, 171, 0, 497, 583, 173,
	541, 0, 252, 188, 0, 0, 0, 524, 566, 530,
	559, 519, 551, 483, 540, 578, 509, 548, 579, 0,
	0, 0, 106, 107, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 545, 573, 506, 547, 549,
	587, 472, 542, 0, 476, 479, 584, 569, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 523, 531, 556,
	517, 0, 0, 0, 0, 0, 0, 1053, 0, 498,
	0, 539, 0, 0, 0, 480, 477, 0, 0, 0,
	0, 521, 0, 0, 0, 482, 0, 499, 557, 0,
	470, 149, 561, 568, 518, 282, 572, 516, 515, 575,
	220, 0, 257, 152, 170, 125, 166, 110, 121, 0,
	151, 198, 229, 233, 565, 495, 505, 133, 502, 231,
	208, 273, 538, 210, 230, 174, 263, 221, 272, 283,
	284, 260, 280, 288, 248, 114, 259, 271, 130, 242,
	0, 0, 0, 116, 269, 255, 186, 162, 163, 115,
	0, 227, 139, 147, 135, 200, 266, 267, 134, 291,
	122, 279, 118, 123, 278, 194, 262, 270, 187, 179,
	117, 268, 185, 178, 168, 143, 154, 218, 176, 219,
	155, 190, 189, 191, 0, 475, 0, 253, 276, 292,
	127, 491, 261, 286, 287, 0, 222, 128, 148, 142,
	217, 146, 192, 124, 157, 250, 167, 175, 226, 290,
	207, 232, 131, 275, 251, 487, 490, 485, 486, 533,
	534, 580, 581, 582, 558, 481, 0, 488, 489, 0,
	563, 570, 571, 537, 109, 119, 172, 289, 224, 145,
	277, 471, 484, 138, 493, 0, 0, 507, 512, 513,
	525, 526, 527, 528, 529, 536, 543, 544, 546, 552,
	553, 554, 555, 560, 567, 586, 111, 112, 120, 126,
	132, 137, 141, 144, 150, 153, 156, 158, 159, 160,
	165, 177, 181, 182, 183, 184, 195, 196, 197, 199,
	202, 203, 204, 205, 206, 209, 211, 212, 213, 214,
	215, 216, 225, 228, 234, 235, 236, 237, 238, 239,
	241, 244, 245, 246, 247, 254, 258, 264, 265, 274,
	281, 285, 0, 0, 0, 0, 113, 164, 180, 310,
	240, 243, 249, 256, 311, 312, 0, 0, 0, 503,
	223, 193, 161, 574, 562, 0, 520, 577, 492, 510,
	585, 511, 514, 550, 478, 532, 201, 508, 0, 496,
	473, 504, 474, 494, 522, 140, 169, 136, 564, 535,
	576, 171, 0, 497, 583, 173, 541, 0, 252, 188,
	0, 0, 0, 524, 566, 530, 559, 519, 551, 483,
	540, 578, 509, 548, 579, 0, 0, 0, 106, 107,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 545, 573, 506, 547, 549, 587, 472, 542, 0,
	476, 479, 584, 569, 500, 501, 0, 0, 0, 0,
	0, 0, 0, 523, 531, 556, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 498, 0, 539, 0, 0,
	0, 480, 477, 0, 0, 0, 0, 521, 0, 0,
	0, 482, 0, 499, 557, 0, 470, 149, 561, 568,
	518, 282, 572, 516, 515, 575, 220, 0, 257, 152,
	170, 125, 166, 110, 121, 0, 151, 198, 229, 233,
	565, 495, 505, 133, 502, 231, 208, 273, 538, 210,
	230, 174, 263, 221, 272, 283, 284, 260, 280, 288,
	248, 114, 259, 271, 130, 242, 0, 0, 0, 116,
	269, 255, 186, 162, 163, 115, 0, 227, 139, 147,
	135, 200, 266, 267, 134, 291, 122, 279, 118, 123,
	278, 194, 262, 270, 187, 179, 117, 268, 185, 178,
	168, 143, 154, 218, 176, 219, 155, 190, 189, 191,
	0, 475, 0, 253, 276, 292, 127, 491, 261, 286,
	287, 0, 222, 128, 148, 142, 217, 146, 192, 124,
	157, 250, 167, 175, 226, 290, 207, 232, 131, 275,
	251, 487, 490, 485, 486, 533, 534, 580, 581, 582,
	558, 481, 0, 488, 489, 0, 563, 570, 571, 537,
	109, 119, 172, 289, 224, 145, 277, 471, 484, 138,
	493, 0, 0, 507, 512, 513, 525, 526, 527, 528,
	529, 536, 543, 544, 546, 552, 553, 554, 555, 560,
	567, 586, 111, 112, 120, 126, 132, 137, 141, 144,
	150, 153, 156, 158, 159, 160, 165, 177, 181, 182,
	183, 184, 195, 196, 197, 199, 202, 203, 204, 205,
	206, 209, 211, 212, 213, 214, 215, 216, 225, 228,
	234, 235, 236, 237, 238, 239, 241, 244, 245, 246,
	247, 254, 258, 264, 265, 274, 281, 285, 0, 0,
	0, 0, 113, 164, 180, 310, 240, 243, 249, 256,
	311, 312, 0, 0, 0, 503, 223, 193, 161, 574,
	562, 0, 520, 577, 492, 510, 585, 511, 514, 550,
	478, 532, 201, 508, 0, 496, 473, 504, 474, 494,
	522, 140, 169, 136, 564, 535, 576, 171, 0, 497,
	583, 173, 541, 0, 252, 188, 0, 0, 0, 524,
	566, 530, 559, 519, 551, 483, 540, 578, 509, 548,
	579, 0, 0, 0, 106, 107, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 545, 573, 506,
	547, 549, 587, 472, 542, 0, 476, 479, 584, 569,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 523,
	531, 556, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 498, 0, 539, 0, 0, 0, 480, 477, 0,
	0, 0, 0, 521, 0, 0, 0, 482, 0, 499,
	557, 0, 470, 149, 561, 568, 518, 282, 572, 516,
	515, 575, 220, 0, 257, 152, 170, 125, 166, 110,
	121, 0, 151, 198, 229, 233, 565, 495, 505, 133,
	502, 231, 208, 273, 538, 210, 230, 174, 263, 221,
	272, 283, 284, 260, 280, 288, 248, 114, 259, 271,
	130, 242, 0, 0, 0, 116, 269, 255, 186, 162,
	163, 115, 0, 227, 139, 147, 135, 200, 266, 267,
	134, 291, 122, 279, 118, 468, 278, 194, 262, 270,
	187, 179, 117, 268, 185, 178, 168, 143, 154, 218,
	176, 219, 155, 190, 189, 191, 0, 475, 0, 253,
	276, 292, 127, 491, 261, 286, 287, 0, 222, 128,
	148, 142, 217, 146, 469, 467, 157, 250, 167, 175,
	226, 290, 207, 232, 131, 275, 251, 487, 490, 485,
	486, 533, 534, 580, 581, 582, 558, 481, 0, 488,
	489, 0, 563, 570, 571, 537, 109, 119, 172, 289,
	224, 145, 277, 471, 484, 138, 493, 0, 0, 507,
	512, 513, 525, 526, 527, 528, 529, 536, 543, 544,
	546, 552, 553, 554, 555, 560, 567, 586, 111, 112,
	120, 126, 132, 137, 141, 144, 150, 153, 156, 158,
	159, 160, 165, 177, 181, 182, 183, 184, 195, 196,
	197, 199, 202, 203, 204, 205, 206, 209, 211, 212,
	213, 214, 215, 216, 225, 228, 234, 235, 236, 237,
	238, 239, 241, 244, 245, 246, 247, 254, 258, 264,
	265, 274, 281, 285, 0, 0, 0, 0, 113, 164,
	180, 310, 240, 243, 249, 256, 311, 312, 0, 0,
	0, 503, 223, 193, 161, 574, 562, 0, 520, 577,
	492, 510, 585, 511, 514, 550, 478, 532, 201, 508,
	0, 496, 473, 504, 474, 494, 522, 140, 169, 136,
	564, 535, 576, 171, 0, 497, 583, 173, 541, 0,
	252, 188, 0, 0, 0, 524, 566, 530, 559, 519,
	551, 483, 540, 578, 509, 548, 579, 0, 0, 0,
	106, 107, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 545, 573, 506, 547, 549, 587, 472,
	542, 0, 476, 479, 584, 569, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 523, 531, 556, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 498, 0, 539,
	0, 0, 0, 480, 477, 0, 0, 0, 0, 521,
	0, 0, 0, 482, 0, 499, 557, 0, 470, 149,
	561, 568, 518, 282, 572, 516, 515, 575, 220, 0,
	257, 152, 170, 125, 166, 110, 121, 0, 151, 198,
	229, 233, 565, 495, 505, 133, 502, 231, 208, 273,
	538, 210, 230, 174, 263, 221, 272, 283, 284, 260,
	280, 288, 248, 114, 259, 814, 130, 242, 0, 0,
	0, 116, 269, 255, 186, 162, 163, 115, 0, 227,
	139, 147, 135, 200, 266, 267, 134, 291, 122, 279,
	118, 468, 278, 194, 262, 270, 187, 179, 117, 268,
	185, 178, 168, 143, 154, 218, 176, 219, 155, 190,
	189, 191, 0, 475, 0, 253, 276, 292, 127, 491,
	261, 286, 287, 0, 222, 128, 148, 142, 217, 146,
	469, 467, 157, 250, 167, 175, 226, 290, 207, 232,
	131, 275, 251, 487, 490, 485, 486, 533, 534, 580,
	581, 582, 558, 481, 0, 488, 489, 0, 563, 570,
	571, 537, 109, 119, 172, 289, 224, 145, 277, 471,
	484, 138, 493, 0, 0, 507, 512, 513, 525, 526,
	527, 528, 529, 536, 543, 544, 546, 552, 553, 554,
	555, 560, 567, 586, 111, 112, 120, 126, 132, 137,
	141, 144, 150, 153, 156, 158, 159, 160, 165, 177,
	181, 182, 183, 184, 195, 196, 197, 199, 202, 203,
	204, 205, 206, 209, 211, 212, 213, 214, 215, 216,
	225, 228, 234, 235, 236, 237, 238, 239, 241, 244,
	245, 246, 247, 254, 258, 264, 265, 274, 281, 285,
	0, 0, 0, 0, 113, 164, 180, 310, 240, 243,
	249, 256, 311, 312, 0, 0, 0, 503, 223, 193,
	161, 574, 562, 0, 520, 577, 492, 510, 585, 511,
	514, 550, 478, 532, 201, 508, 0, 496, 473, 504,
	474, 494, 522, 140, 169, 136, 564, 535, 576, 171,
	0, 497, 583, 173, 541, 0, 252, 188, 0, 0,
	0, 524, 566, 530, 559, 519, 551, 483, 540, 578,
	509, 548, 579, 0, 0, 0, 106, 107, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 545,
	573, 506, 547, 549, 587, 472, 542, 0, 476, 479,
	584, 569, 500, 501, 0, 0, 0, 0, 0, 0,
	0, 523, 531, 556, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 498, 0, 539, 0, 0, 0, 480,
	477, 0, 0, 0, 0, 521, 0, 0, 0, 482,
	0, 499, 557, 0, 470, 149, 561, 568, 518, 282,
	572, 516, 515, 575, 220, 0, 257, 152, 170, 125,
	166, 110, 121, 0, 151, 198, 229, 233, 565, 495,
	505, 133, 502, 231, 208, 273, 538, 210, 230, 174,
	263, 221, 272, 283, 284, 260, 280, 288, 248, 114,
	259, 459, 130, 242, 0, 0, 0, 116, 269, 255,
	186, 162, 163, 115, 0, 227, 139, 147, 135, 200,
	266, 267, 134, 291, 122, 279, 118, 468, 278, 194,
	262, 270, 187, 179, 117, 268, 185, 178, 168, 143,
	154, 218, 176, 219, 155, 190, 189, 191, 0, 475,
	0, 253, 276, 292, 127, 491, 261, 286, 287, 0,
	222, 128, 148, 142, 217, 146, 469, 467, 462, 461,
	167, 175, 226, 290, 207, 232, 131, 275, 251, 487,
	490, 485, 486, 533, 534, 580, 581, 582, 558, 481,
	0, 488, 489, 0, 563, 570, 571, 537, 109, 119,
	172, 289, 224, 145, 277, 471, 484, 138, 493, 0,
	0, 507, 512, 513, 525, 526, 527, 528, 529, 536,
	543, 544, 546, 552, 553, 554, 555, 560, 567, 586,
	111, 112, 120, 126, 132, 137, 141, 144, 150, 153,
	156, 158, 159, 160, 165, 177, 181, 182, 183, 184,
	195, 196, 197, 199, 202, 203, 204, 205, 206, 209,
	211, 212, 213, 214, 215, 216, 225, 228, 234, 235,
	236, 237, 238, 239, 241, 244, 245, 246, 247, 254,
	258, 264, 265, 274, 281, 285, 0, 0, 0, 0,
	113, 164, 180, 310, 240, 243, 249, 256, 311, 312,
	0, 0, 0, 503, 223, 193, 161, 201, 0, 0,
	984, 0, 357, 0, 0, 0, 140, 169, 356, 0,
	0, 0, 171, 0, 985, 400, 173, 0, 0, 252,
	188, 0, 0, 0, 0, 0, 391, 392, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 106,
	107, 108, 378, 377, 380, 381, 382, 383, 0, 0,
	129, 379, 384, 385, 386, 0, 0, 0, 0, 354,
	371, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 368, 369, 446, 0, 0, 0, 414, 0,
	370, 0, 0, 363, 364, 366, 365, 367, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 413,
	0, 0, 282, 0, 0, 411, 0, 220, 0, 257,
	152, 170, 125, 166, 110, 121, 0, 151, 198, 229,
	233, 0, 0, 0, 133, 0, 231, 208, 273, 0,
	210, 230, 174, 263, 221, 272, 283, 284, 260, 280,
	288, 248, 114, 259, 271, 130, 242, 0, 0, 0,
	116, 269, 255, 186, 162, 163, 115, 0, 227, 139,
	147, 135, 200, 266, 267, 134, 291, 122, 279, 118,
	123, 278, 194, 262, 270, 187, 179, 117, 268, 185,
	178, 168, 143, 154, 218, 176, 219, 155, 190, 189,
	191, 0, 0, 0, 253, 276, 292, 127, 0, 261,
	286, 287, 0, 222, 128, 148, 142, 217, 146, 192,
	124, 157, 250, 167, 175, 226, 290, 207, 232, 131,
	275, 251, 401, 412, 407, 408, 405, 406, 404, 403,
	402, 415, 393, 394, 395, 396, 398, 0, 409, 410,
	397, 109, 119, 172, 289, 224, 145, 277, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 112, 120, 126, 132, 137, 141,
	144, 150, 153, 156, 158, 159, 160, 165, 177, 181,
	182, 183, 184, 195, 196, 197, 199, 202, 203, 204,
	205, 206, 209, 211, 212, 213, 214, 215, 216, 225,
	228, 234, 235, 236, 237, 238, 239, 241, 244, 245,
	246, 247, 254, 258, 264, 265, 274, 281, 285, 0,
	0, 0, 0, 113, 164, 180, 310, 240, 243, 249,
	256, 311, 312, 0, 0, 201, 0, 223, 193, 161,
	357, 0, 0, 0, 140, 169, 356, 0, 0, 0,
	171, 0, 0, 400, 173, 0, 0, 252, 188, 0,
	0, 0, 0, 0, 391, 392, 0, 0, 0, 0,
	0, 0, 1102, 0, 68, 0, 0, 106, 107, 108,
	378, 377, 380, 381, 382, 383, 0, 0, 129, 379,
	384, 385, 386, 1103, 0, 0, 0, 354, 371, 0,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 0, 0, 0, 0, 414, 0, 370, 0,
	0, 363, 364, 366, 365, 367, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 413, 0, 0,
	282, 0, 0, 411, 0, 220, 0, 257, 152, 170,
	125, 166, 110, 121, 0, 151, 198, 229, 233, 0,
	0, 0, 133, 0, 231, 208, 273, 0, 210, 230,
	174, 263, 221, 272, 283, 284, 260, 280, 288, 248,
	114, 259, 271, 130, 242, 0, 0, 0, 116, 269,
	255, 186, 162, 163, 115, 0, 227, 139, 147, 135,
	200, 266, 267, 134, 291, 122, 279, 118, 123, 278,
	194, 262, 270, 187, 179, 117, 268, 185, 178, 168,
	143, 154, 218, 176, 219, 155, 190, 189, 191, 0,
	0, 0, 253, 276, 292, 127, 0, 261, 286, 287,
	0, 222, 128, 148, 142, 217, 146, 192, 124, 157,
	250, 167, 175, 226, 290, 207, 232, 131, 275, 251,
	401, 412, 407, 408, 405, 406, 404, 403, 402, 415,
	393, 394, 395, 396, 398, 0, 409, 410, 397, 109,
	119, 172, 289, 224, 145, 277, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 112, 120, 126, 132, 137, 141, 144, 150,
	153, 156, 158, 159, 160, 165, 177, 181, 182, 183,
	184, 195, 196, 197, 199, 202, 203, 204, 205, 206,
	209, 211, 212, 213, 214, 215, 216, 225, 228, 234,
	235, 236, 237, 238, 239, 241, 244, 245, 246, 247,
	254, 258, 264, 265, 274, 281, 285, 0, 0, 0,
	0, 113, 164, 180, 310, 240, 243, 249, 256, 311,
	312, 0, 0, 201, 0, 223, 193, 161, 357, 0,
	0, 0, 140, 169, 356, 0, 0, 0, 171, 0,
	0, 400, 173, 0, 0, 252, 188, 0, 0, 0,
	0, 0, 391, 392, 0, 0, 0, 0, 0, 0,
	1099, 0, 68, 0, 0, 106, 107, 108, 378, 377,
	380, 381, 382, 383, 0, 0, 129, 379, 384, 385,
	386, 1100, 0, 0, 0, 354, 371, 0, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 368, 369,
	0, 0, 0, 0, 414, 0, 370, 0, 0, 363,
	364, 366, 365, 367, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 413, 0, 0, 282, 0,
	0, 411, 0, 220, 0, 257, 152, 170, 125, 166,
	110, 121, 0, 151, 198, 229, 233, 0, 0, 0,
	133, 0, 231, 208, 273, 0, 210, 230, 174, 263,
	221, 272, 283, 284, 260, 280, 288, 248, 114, 259,
	271, 130, 242, 0, 0, 0, 116, 269, 255, 186,
	162, 163, 115, 0, 227, 139, 147, 135, 200, 266,
	267, 134, 291, 122, 279, 118, 123, 278, 194, 262,
	270, 187, 179, 117, 268, 185, 178, 168, 143, 154,
	218, 176, 219, 155, 190, 189, 191, 0, 0, 0,
	253, 276, 292, 127, 0, 261, 286, 287, 0, 222,
	128, 148, 142, 217, 146, 192, 124, 157, 250, 167,
	175, 226, 290, 207, 232, 131, 275, 251, 401, 412,
	407, 408, 405, 406, 404, 403, 402, 415, 393, 394,
	395, 396, 398, 0, 409, 410, 397, 109, 119, 172,
	289, 224, 145, 277, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	112, 120, 126, 132, 137, 141, 144, 150, 153, 156,
	158, 159, 160, 165, 177, 181, 182, 183, 184, 195,
	196, 197, 199, 202, 203, 204, 205, 206, 209, 211,
	212, 213, 214, 215, 216, 225, 228, 234, 235, 236,
	237, 238, 239, 241, 244, 245, 246, 247, 254, 258,
	264, 265, 274, 281, 285, 0, 0, 0, 0, 113,
	164, 180, 310, 240, 243, 249, 256, 311, 312, 0,
	0, 201, 0, 223, 193, 161, 357, 0, 0, 0,
	140, 169, 356, 0, 0, 0, 171, 0, 0, 400,
	173, 0, 0, 252, 188, 0, 0, 0, 0, 0,
	391, 392, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 434, 106, 107, 108, 378, 377, 380, 381,
	382, 383, 0, 0, 129, 379, 384, 385, 386, 0,
	0, 0, 0, 354, 371, 0, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 368, 369, 0, 0,
	0, 0, 414, 0, 370, 0, 0, 363, 364, 366,
	365, 367, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 413, 0, 0, 282, 0, 0, 411,
	0, 220, 0, 257, 152, 170, 125, 166, 110, 121,
	0, 151, 198, 229, 233, 0, 0, 0, 133, 0,
	231, 208, 273, 0, 210, 230, 174, 263, 221, 272,
	283, 284, 260, 280, 288, 248, 114, 259, 271, 130,
	242, 0, 0, 0, 116, 269, 255, 186, 162, 163,
	115, 0, 227, 139, 147, 135, 200, 266, 267, 134,
	291, 122, 279, 118, 123, 278, 194, 262, 270, 187,
	179, 117, 268, 185, 178, 168, 143, 154, 218, 176,
	219, 155, 190, 189, 191, 0, 0, 0, 253, 276,
	292, 127, 0, 261, 286, 287, 0, 222, 128, 148,
	142, 217, 146, 192, 124, 157, 250, 167, 175, 226,
	290, 207, 232, 131, 275, 251, 401, 412, 407, 408,
	405, 406, 404, 403, 402, 415, 393, 394, 395, 396,
	398, 0, 409, 410, 397, 109, 119, 172, 289, 224,
	145, 277, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 120,
	126, 132, 137, 141, 144, 150, 153, 156, 158, 159,
	160, 165, 177, 181, 182, 183, 184, 195, 196, 197,
	199, 202, 203, 204, 205, 206, 209, 211, 212, 213,
	214, 215, 216, 225, 228, 234, 235, 236, 237, 238,
	239, 241, 244, 245, 246, 247, 254, 258, 264, 265,
	274, 281, 285, 0, 0, 0, 0, 113, 164, 180,
	310, 240, 243, 249, 256, 311, 312, 0, 0, 201,
	0, 223, 193, 161, 357, 0, 0, 0, 140, 169,
	356, 0, 0, 0, 171, 0, 0, 400, 173, 0,
	0, 252, 188, 0, 0, 0, 0, 0, 391, 392,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 106, 107, 108, 378, 377, 380, 381, 382, 383,
	0, 0, 129, 379, 384, 385, 386, 0, 0, 0,
	0, 354, 371, 0, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 446, 0, 0, 0,
	414, 0, 370, 0, 0, 363, 364, 366, 365, 367,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 413, 0, 0, 282, 0, 0, 411, 0, 220,
	0, 257, 152, 170, 125, 166, 110, 121, 0, 151,
	198, 229, 233, 0, 0, 0, 133, 0, 231, 208,
	273, 0, 210, 230, 174, 263, 221, 272, 283, 284,
	260, 280, 288, 248, 114, 259, 271, 130, 242, 0,
	0, 0, 116, 269, 255, 186, 162, 163, 115, 0,
	227, 139, 147, 135, 200, 266, 267, 134, 291, 122,
	279, 118, 123, 278, 194, 262, 270, 187, 179, 117,
	268, 185, 178, 168, 143, 154, 218, 176, 219, 155,
	190, 189, 191, 0, 0, 0, 253, 276, 292, 127,
	0, 261, 286, 287, 0, 222, 128, 148, 142, 217,
	146, 192, 124, 157, 250, 167, 175, 226, 290, 207,
	232, 131, 275, 251, 401, 412, 407, 408, 405, 406,
	404, 403, 402, 415, 393, 394, 395, 396, 398, 0,
	409, 410, 397, 109, 119, 172, 289, 224, 145, 277,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 112, 120, 126, 132,
	137, 141, 144, 150, 153, 156, 158, 159, 160, 165,
	177, 181, 182, 183, 184, 195, 196, 197, 199, 202,
	203, 204, 205, 206, 209, 211, 212, 213, 214, 215,
	216, 225, 228, 234, 235, 236, 237, 238, 239, 241,
	244, 245, 246, 247, 254, 258, 264, 265, 274, 281,
	285, 0, 0, 0, 0, 113, 164, 180, 310, 240,
	243, 249, 256, 311, 312, 0, 0, 201, 0, 223,
	193, 161, 357, 0, 0, 0, 140, 169, 356, 0,
	0, 0, 171, 0, 0, 400, 173, 0, 0, 252,
	188, 0, 0, 0, 0, 0, 391, 392, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 106,
	107, 108, 378, 1002, 380, 381, 382, 383, 0, 0,
	129, 379, 384, 385, 386, 0, 0, 0, 0, 354,
	371, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 368, 369, 446, 0, 0, 0, 414, 0,
	370, 0, 0, 363, 364, 366, 365, 367, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 413,
	0, 0, 282, 0, 0, 411, 0, 220, 0, 257,
	152, 170, 125, 166, 110, 121, 0, 151, 198, 229,
	233, 0, 0, 0, 133, 0, 231, 208, 273, 0,
	210, 230, 174, 263, 221, 272, 283, 284, 260, 280,
	288, 248, 114, 259, 271, 130, 242, 0, 0, 0,
	116, 269, 255, 186, 162, 163, 115, 0, 227, 139,
	147, 135, 200, 266, 267, 134, 291, 122, 279, 118,
	123, 278, 194, 262, 270, 187, 179, 117, 268, 185,
	178, 168, 143, 154, 218, 176, 219, 155, 190, 189,
	191, 0, 0, 0, 253, 276, 292, 127, 0, 261,
	286, 287, 0, 222, 128, 148, 142, 217, 146, 192,
	124, 157, 250, 167, 175, 226, 290, 207, 232, 131,
	275, 251, 401, 412, 407, 408, 405, 406, 404, 403,
	402, 415, 393, 394, 395, 396, 398, 0, 409, 410,
	397, 109, 119, 172, 289, 224, 145, 277, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 112, 120, 126, 132, 137, 141,
	144, 150, 153, 156, 158, 159, 160, 165, 177, 181,
	182, 183, 184, 195, 196, 197, 199, 202, 203, 204,
	205, 206, 209, 211, 212, 213, 214, 215, 216, 225,
	228, 234, 235, 236, 237, 238, 239, 241, 244, 245,
	246, 247, 254, 258, 264, 265, 274, 281, 285, 0,
	0, 0, 0, 113, 164, 180, 310, 240, 243, 249,
	256, 311, 312, 0, 0, 201, 0, 223, 193, 161,
	357, 0, 0, 0, 140, 169, 356, 0, 0, 0,
	171, 0, 0, 400, 173, 0, 0, 252, 188, 0,
	0, 0, 0, 0, 391, 392, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 106, 107, 108,
	378, 999, 380, 381, 382, 383, 0, 0, 129, 379,
	384, 385, 386, 0, 0, 0, 0, 354, 371, 0,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 446, 0, 0, 0, 414, 0, 370, 0,
	0, 363, 364, 366, 365, 367, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 413, 0, 0,
	282, 0, 0, 411, 0, 220, 0, 257, 152, 170,
	125, 166, 110, 121, 0, 151, 198, 229, 233, 0,
	0, 0, 133, 0, 231, 208, 273, 0, 210, 230,
	174, 263, 221, 272, 283, 284, 260, 280, 288, 248,
	114, 259, 271, 130, 242, 0, 0, 0, 116, 269,
	255, 186, 162, 163, 115, 0, 227, 139, 147, 135,
	200, 266, 267, 134, 291, 122, 279, 118, 123, 278,
	194, 262, 270, 187, 179, 117, 268, 185, 178, 168,
	143, 154, 218, 176, 219, 155, 190, 189, 191, 0,
	0, 0, 253, 276, 292, 127, 0, 261, 286, 287,
	0, 222, 128, 148, 142, 217, 146, 192, 124, 157,
	250, 167, 175, 226, 290, 207, 232, 131, 275, 251,
	401, 412, 407, 408, 405, 406, 404, 403, 402, 415,
	393, 394, 395, 396, 398, 0, 409, 410, 397, 109,
	119, 172, 289, 224, 145, 277, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 112, 120, 126, 132, 137, 141, 144, 150,
	153, 156, 158, 159, 160, 165, 177, 181, 182, 183,
	184, 195, 196, 197, 199, 202, 203, 204, 205, 206,
	209, 211, 212, 213, 214, 215, 216, 225, 228, 234,
	235, 236, 237, 238, 239, 241, 244, 245, 246, 247,
	254, 258, 264, 265, 274, 281, 285, 0, 0, 0,
	0, 113, 164, 180, 310, 240, 243, 249, 256, 311,
	312, 427, 0, 0, 0, 223, 193, 161, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 357, 0,
	0, 0, 140, 169, 356, 0, 0, 0, 171, 0,
	0, 400, 173, 0, 0, 252, 188, 0, 0, 0,
	0, 0, 391, 392, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 106, 107, 108, 378, 377,
	380, 381, 382, 383, 0, 0, 129, 379, 384, 385,
	386, 0, 0, 0, 0, 354, 371, 0, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 368, 369,
	0, 0, 0, 0, 414, 0, 370, 0, 0, 363,
	364, 366, 365, 367, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 413, 0, 0, 282, 0,
	0, 411, 0, 220, 0, 257, 152, 170, 125, 166,
	110, 121, 0, 151, 198, 229, 233, 0, 0, 0,
	133, 0, 231, 208, 273, 0, 210, 230, 174, 263,
	221, 272, 283, 284, 260, 280, 288, 248, 114, 259,
	271, 130, 242, 0, 0, 0, 116, 269, 255, 186,
	162, 163, 115, 0, 227, 139, 147, 135, 200, 266,
	267, 134, 291, 122, 279, 118, 123, 278, 194, 262,
	270, 187, 179, 117, 268, 185, 178, 168, 143, 154,
	218, 176, 219, 155, 190, 189, 191, 0, 0, 0,
	253, 276, 292, 127, 0, 261, 286, 287, 0, 222,
	128, 148, 142, 217, 146, 192, 124, 157, 250, 167,
	175, 226, 290, 207, 232, 131, 275, 251, 401, 412,
	407, 408, 405, 406, 404, 403, 402, 415, 393, 394,
	395, 396, 398, 0, 409, 410, 397, 109, 119, 172,
	289, 224, 145, 277, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	112, 120, 126, 132, 137, 141, 144, 150, 153, 156,
	158, 159, 160, 165, 177, 181, 182, 183, 184, 195,
	196, 197, 199, 202, 203, 204, 205, 206, 209, 211,
	212, 213, 214, 215, 216, 225, 228, 234, 235, 236,
	237, 238, 239, 241, 244, 245, 246, 247, 254, 258,
	264, 265, 274, 281, 285, 0, 0, 0, 0, 113,
	164, 180, 310, 240, 243, 249, 256, 311, 312, 0,
	0, 201, 0, 223, 193, 161, 357, 0, 0, 0,
	140, 169, 356, 0, 0, 0, 171, 0, 0, 400,
	173, 0, 0, 252, 188, 0, 0, 0, 0, 0,
	391, 392, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 106, 107, 108, 378, 377, 380, 381,
	382, 383, 0, 0, 129, 379, 384, 385, 386, 0,
	0, 0, 0, 354, 371, 0, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 368, 369, 0, 0,
	0, 0, 414, 0, 370, 0, 0, 363, 364, 366,
	365, 367, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 413, 0, 0, 282, 0, 0, 411,
	0, 220, 0, 257, 152, 170, 125, 166, 110, 121,
	0, 151, 198, 229, 233, 0, 0, 0, 133, 0,
	231, 208, 273, 0, 210, 230, 174, 263, 221, 272,
	283, 284, 260, 280, 288, 248, 114, 259, 271, 130,
	242, 0, 0, 0, 116, 269, 255, 186, 162, 163,
	115, 0, 227, 139, 147, 135, 200, 266, 267, 134,
	291, 122, 279, 118, 123, 278, 194, 262, 270, 187,
	179, 117, 268, 185, 178, 168, 143, 154, 218, 176,
	219, 155, 190, 189, 191, 0, 0, 0, 253, 276,
	292, 127, 0, 261, 286, 287, 0, 222, 128, 148,
	142, 217, 146, 192, 124, 157, 250, 167, 175, 226,
	290, 207, 232, 131, 275, 251, 401, 412, 407, 408,
	405, 406, 404, 403, 402, 415, 393, 394, 395, 396,
	398, 0, 409, 410, 397, 109, 119, 172, 289, 224,
	145, 277, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 120,
	126, 132, 137, 141, 144, 150, 153, 156, 158, 159,
	160, 165, 177, 181, 182, 183, 184, 195, 196, 197,
	199, 202, 203, 204, 205, 206, 209, 211, 212, 213,
	214, 215, 216, 225, 228, 234, 235, 236, 237, 238,
	239, 241, 244, 245, 246, 247, 254, 258, 264, 265,
	274, 281, 285, 0, 0, 0, 0, 113, 164, 180,
	310, 240, 243, 249, 256, 311, 312, 201, 0, 0,
	0, 223, 193, 161, 0, 0, 140, 169, 136, 0,
	0, 0, 171, 0, 0, 400, 173, 0, 0, 252,
	188, 0, 0, 0, 0, 0, 391, 392, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 106,
	107, 108, 378, 377, 380, 381, 382, 383, 0, 0,
	129, 379, 384, 385, 386, 0, 0, 0, 0, 0,
	371, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 368, 369, 0, 0, 0, 0, 414, 0,
	370, 0, 0, 363, 364, 366, 365, 367, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 413,
	0, 0, 282, 0, 0, 411, 0, 220, 0, 257,
	152, 170, 125, 166, 110, 121, 0, 151, 198, 229,
	233, 0, 0, 0, 133, 0, 231, 208, 273, 1710,
	210, 230, 174, 263, 221, 272, 283, 284, 260, 280,
	288, 248, 114, 259, 271, 130, 242, 0, 0, 0,
	116, 269, 255, 186, 162, 163, 115, 0, 227, 139,
	147, 135, 200, 266, 267, 134, 291, 122, 279, 118,
	123, 278, 194, 262, 270, 187, 179, 117, 268, 185,
	178, 168, 143, 154, 218, 176, 219, 155, 190, 189,
	191, 0, 0, 0, 253, 276, 292, 127, 0, 261,
	286, 287, 0, 222, 128, 148, 142, 217, 146, 192,
	124, 157, 250, 167, 175, 226, 290, 207, 232, 131,
	275, 251, 401, 412, 407, 408, 405, 406, 404, 403,
	402, 415, 393, 394, 395, 396, 398, 0, 409, 410,
	397, 109, 119, 172, 289, 224, 145, 277, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 112, 120, 126, 132, 137, 141,
	144, 150, 153, 156, 158, 159, 160, 165, 177, 181,
	182, 183, 184, 195, 196, 197, 199, 202, 203, 204,
	205, 206, 209, 211, 212, 213, 214, 215, 216, 225,
	228, 234, 235, 236, 237, 238, 239, 241, 244, 245,
	246, 247, 254, 258, 264, 265, 274, 281, 285, 0,
	0, 0, 0, 113, 164, 180, 310, 240, 243, 249,
	256, 311, 312, 201, 0, 0, 0, 223, 193, 161,
	0, 0, 140, 169, 136, 0, 0, 0, 171, 0,
	0, 400, 173, 0, 0, 252, 188, 0, 0, 0,
	0, 0, 391, 392, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 434, 106, 107, 108, 378, 377,
	380, 381, 382, 383, 0, 0, 129, 379, 384, 385,
	386, 0, 0, 0, 0, 0, 371, 0, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 368, 369,
	0, 0, 0, 0, 414, 0, 370, 0, 0, 363,
	364, 366, 365, 367, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 413, 0, 0, 282, 0,
	0, 411, 0, 220, 0, 257, 152, 170, 125, 166,
	110, 121, 0, 151, 198, 229, 233, 0, 0, 0,
	133, 0, 231, 208, 273, 0, 210, 230, 174, 263,
	221, 272, 283, 284, 260, 280, 288, 248, 114, 259,
	271, 130, 242, 0, 0, 0, 116, 269, 255, 186,
	162, 163, 115, 0, 227, 139, 147, 135, 200, 266,
	267, 134, 291, 122, 279, 118, 123, 278, 194, 262,
	270, 187, 179, 117, 268, 185, 178, 168, 143, 154,
	218, 176, 219, 155, 190, 189, 191, 0, 0, 0,
	253, 276, 292, 127, 0, 261, 286, 287, 0, 222,
	128, 148, 142, 217, 146, 192, 124, 157, 250, 167,
	175, 226, 290, 207, 232, 131, 275, 251, 401, 412,
	407, 408, 405, 406, 404, 403, 402, 415, 393, 394,
	395, 396, 398, 0, 409, 410, 397, 109, 119, 172,
	289, 224, 145, 277, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	112, 120, 126, 132, 137, 141, 144, 150, 153, 156,
	158, 159, 160, 165, 177, 181, 182, 183, 184, 195,
	196, 197, 199, 202, 203, 204, 205, 206, 209, 211,
	212, 213, 214, 215, 216, 225, 228, 234, 235, 236,
	237, 238, 239, 241, 244, 245, 246, 247, 254, 258,
	264, 265, 274, 281, 285, 0, 0, 0, 0, 113,
	164, 180, 310, 240, 243, 249, 256, 311, 312, 201,
	0, 0, 0, 223, 193, 161, 0, 0, 140, 169,
	136, 0, 0, 0, 171, 0, 0, 400, 173, 0,
	0, 252, 188, 0, 0, 0, 0, 0, 391, 392,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 106, 107, 108, 378, 377, 380, 381, 382, 383,
	0, 0, 129, 379, 384, 385, 386, 0, 0, 0,
	0, 0, 371, 0, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 0, 0, 0, 0,
	414, 0, 370, 0, 0, 363, 364, 366, 365, 367,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 413, 0, 0, 282, 0, 0, 411, 0, 220,
	0, 257, 152, 170, 125, 166, 110, 121, 0, 151,
	198, 229, 233, 0, 0, 0, 133, 0, 231, 208,
	273, 0, 210, 230, 174, 263, 221, 272, 283, 284,
	260, 280, 288, 248, 114, 259, 271, 130, 242, 0,
	0, 0, 116, 269, 255, 186, 162, 163, 115, 0,
	227, 139, 147, 135, 200, 266, 267, 134, 291, 122,
	279, 118, 123, 278, 194, 262, 270, 187, 179, 117,
	268, 185, 178, 168, 143, 154, 218, 176, 219, 155,
	190, 189, 191, 0, 0, 0, 253, 276, 292, 127,
	0, 261, 286, 287, 0, 222, 128, 148, 142, 217,
	146, 192, 124, 157, 250, 167, 175, 226, 290, 207,
	232, 131, 275, 251, 401, 412, 407, 408, 405, 406,
	404, 403, 402, 415, 393, 394, 395, 396, 398, 0,
	409, 410, 397, 109, 119, 172, 289, 224, 145, 277,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 112, 120, 126, 132,
	137, 141, 144, 150, 153, 156, 158, 159, 160, 165,
	177, 181, 182, 183, 184, 195, 196, 197, 199, 202,
	203, 204, 205, 206, 209, 211, 212, 213, 214, 215,
	216, 225, 228, 234, 235, 236, 237, 238, 239, 241,
	244, 245, 246, 247, 254, 258, 264, 265, 274, 281,
	285, 0, 0, 0, 0, 113, 164, 180, 310, 240,
	243, 249, 256, 311, 312, 201, 0, 0, 0, 223,
	193, 161, 0, 0, 140, 169, 136, 0, 0, 0,
	171, 0, 0, 400, 173, 0, 0, 252, 188, 0,
	0, 0, 0, 0, 391, 392, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 106, 107, 108,
	378, 717, 380, 381, 382, 383, 0, 0, 129, 379,
	384, 385, 386, 0, 0, 0, 0, 0, 371, 0,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 0, 0, 0, 0, 414, 0, 370, 0,
	0, 363, 364, 366, 365, 367, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 413, 0, 0,
	282, 0, 0, 411, 0, 220, 0, 257, 152, 170,
	125, 166, 110, 121, 0, 151, 198, 229, 233, 0,
	0, 0, 133, 0, 231, 208, 273, 0, 210, 230,
	174, 263, 221, 272, 283, 284, 260, 280, 288, 248,
	114, 259, 271, 130, 242, 0, 0, 0, 116, 269,
	255, 186, 162, 163, 115, 0, 227, 139, 147, 135,
	200, 266, 267, 134, 291, 122, 279, 118, 123, 278,
	194, 262, 270, 187, 179, 117, 268, 185, 178, 168,
	143, 154, 218, 176, 219, 155, 190, 189, 191, 0,
	0, 0, 253, 276, 292, 127, 0, 261, 286, 287,
	0, 222, 128, 148, 142, 217, 146, 192, 124, 157,
	250, 167, 175, 226, 290, 207, 232, 131, 275, 251,
	401, 412, 407, 408, 405, 406, 404, 403, 402, 415,
	393, 394, 395, 396, 398, 0, 409, 410, 397, 109,
	119, 172, 289, 224, 145, 277, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 112, 120, 126, 132, 137, 141, 144, 150,
	153, 156, 158, 159, 160, 165, 177, 181, 182, 183,
	184, 195, 196, 197, 199, 202, 203, 204, 205, 206,
	209, 211, 212, 213, 214, 215, 216, 225, 228, 234,
	235, 236, 237, 238, 239, 241, 244, 245, 246, 247,
	254, 258, 264, 265, 274, 281, 285, 0, 0, 0,
	0, 113, 164, 180, 310, 240, 243, 249, 256, 311,
	312, 201, 0, 0, 0, 223, 193, 161, 0, 0,
	140, 169, 136, 0, 0, 0, 171, 0, 0, 0,
	173, 0, 0, 252, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 682, 681, 691, 692, 684, 685, 686, 687,
	688, 689, 690, 683, 0, 0, 693, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 282, 0, 0, 0,
	0, 220, 0, 257, 152, 170, 125, 166, 110, 121,
	0, 151, 198, 229, 233, 0, 0, 0, 133, 0,
	231, 208, 273, 0, 210, 230, 174, 263, 221, 272,
	283, 284, 260, 280, 288, 248, 114, 259, 271, 130,
	242, 0, 0, 0, 116, 269, 255, 186, 162, 163,
	115, 0, 227, 139, 147, 135, 200, 266, 267, 134,
	291, 122, 279, 118, 123, 278, 194, 262, 270, 187,
	179, 117, 268, 185, 178, 168, 143, 154, 218, 176,
	219, 155, 190, 189, 191, 0, 0, 0, 253, 276,
	292, 127, 0, 261, 286, 287, 0, 222, 128, 148,
	142, 217, 146, 192, 124, 157, 250, 167, 175, 226,
	290, 207, 232, 131, 275, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 119, 172, 289, 224,
	145, 277, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 120,
	126, 132, 137, 141, 144, 150, 153, 156, 158, 159,
	160, 165, 177, 181, 182, 183, 184, 195, 196, 197,
	199, 202, 203, 204, 205, 206, 209, 211, 212, 213,
	214, 215, 216, 225, 228, 234, 235, 236, 237, 238,
	239, 241, 244, 245, 246, 247, 254, 258, 264, 265,
	274, 281, 285, 0, 0, 0, 0, 113, 164, 180,
	310, 240, 243, 249, 256, 311, 312, 0, 0, 0,
	201, 223, 193, 161, 786, 0, 0, 0, 0, 140,
	169, 136, 0, 0, 0, 171, 0, 0, 0, 173,
	0, 0, 252, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 0, 788, 0, 0, 0,
	0, 673, 0, 129, 0, 0, 0, 0, 0, 669,
	670, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 671, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 282, 0, 0, 0, 0,
	220, 0, 257, 152, 170, 125, 166, 110, 121, 0,
	151, 198, 229, 233, 0, 0, 0, 133, 0, 231,
	208, 273, 0, 210, 230, 174, 263, 221, 272, 283,
	284, 260, 280, 288, 248, 114, 259, 271, 130, 242,
	0, 0, 0, 116, 269, 255, 186, 162, 163, 115,
	0, 227, 139, 147, 135, 200, 266, 267, 134, 291,
	122, 279, 118, 123, 278, 194, 262, 270, 187, 179,
	117, 268, 185, 178, 168, 143, 154, 218, 176, 219,
	155, 190, 189, 191, 0, 0, 0, 253, 276, 292,
	127, 0, 261, 286, 287, 0, 222, 128, 148, 142,
	217, 146, 192, 124, 157, 250, 167, 175, 226, 290,
	207, 232, 131, 275, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 119, 172, 289, 224, 145,
	277, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 112, 120, 126,
	132, 137, 141, 144, 150, 153, 156, 158, 159, 160,
	165, 177, 181, 182, 183, 184, 195, 196, 197, 199,
	202, 203, 204, 205, 206, 209, 211, 212, 213, 214,
	215, 216, 225, 228, 234, 235, 236, 237, 238, 239,
	241, 244, 245, 246, 247, 254, 258, 264, 265, 274,
	281, 285, 0, 0, 0, 0, 113, 164, 180, 310,
	240, 243, 249, 256, 311, 312, 201, 0, 0, 0,
	223, 193, 161, 0, 0, 140, 169, 136, 0, 0,
	0, 171, 0, 0, 0, 173, 0, 0, 252, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 97, 0,
	0, 282, 0, 0, 0, 99, 220, 0, 257, 152,
	170, 125, 166, 110, 121, 0, 151, 198, 229, 233,
	0, 0, 0, 133, 0, 231, 208, 273, 0, 210,
	230, 174, 263, 221, 272, 283, 284, 260, 280, 288,
	248, 114, 259, 271, 130, 242, 0, 0, 0, 116,
	269, 255, 186, 162, 163, 115, 0, 227, 139, 147,
	135, 200, 266, 267, 134, 291, 122, 279, 118, 123,
	278, 194, 262, 270, 187, 179, 117, 268, 185, 178,
	168, 143, 154, 218, 176, 219, 155, 190, 189, 191,
	0, 0, 0, 253, 276, 292, 127, 0, 261, 286,
	287, 0, 222, 128, 148, 142, 217, 146, 192, 124,
	157, 250, 167, 175, 226, 290, 207, 232, 131, 275,
	251, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 119, 172, 289, 224, 145, 277, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 112, 120, 126, 132, 137, 141, 144,
	150, 153, 156, 158, 159, 160, 165, 177, 181, 182,
	183, 184, 195, 196, 197, 199, 202, 203, 204, 205,
	206, 209, 211, 212, 213, 214, 215, 216, 225, 228,
	234, 235, 236, 237, 238, 239, 241, 244, 245, 246,
	247, 254, 258, 264, 265, 274, 281, 285, 0, 0,
	35, 0, 113, 164, 180, 101, 240, 243, 249, 256,
	102, 103, 201, 0, 0, 0, 223, 193, 161, 0,
	0, 140, 169, 136, 0, 0, 0, 171, 0, 0,
	0, 173, 0, 0, 252, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 106, 107, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 282, 0, 0,
	0, 0, 220, 0, 257, 152, 170, 125, 166, 110,
	121, 0, 151, 198, 229, 233, 0, 0, 0, 133,
	0, 231, 208, 273, 0, 210, 230, 174, 263, 221,
	272, 283, 284, 260, 280, 288, 248, 114, 259, 271,
	130, 242, 0, 0, 0, 116, 269, 255, 186, 162,
	163, 115, 0, 227, 139, 147, 135, 200, 266, 267,
	134, 291, 122, 279, 118, 123, 278, 194, 262, 270,
	187, 179, 117, 268, 185, 178, 168, 143, 154, 218,
	176, 219, 155, 190, 189, 191, 0, 0, 0, 253,
	276, 292, 127, 0, 261, 286, 287, 0, 222, 128,
	148, 142, 217, 146, 192, 124, 157, 250, 167, 175,
	226, 290, 207, 232, 131, 275, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 119, 172, 289,
	224, 145, 277, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	120, 126, 132, 137, 141, 144, 150, 153, 156, 158,
	159, 160, 165, 177, 181, 182, 183, 184, 195, 196,
	197, 199, 202, 203, 204, 205, 206, 209, 211, 212,
	213, 214, 215, 216, 225, 228, 234, 235, 236, 237,
	238, 239, 241, 244, 245, 246, 247, 254, 258, 264,
	265, 274, 281, 285, 0, 0, 0, 0, 113, 164,
	180, 310, 240, 243, 249, 256, 311, 312, 0, 0,
	0, 64, 223, 193, 161, 201, 0, 0, 0, 1079,
	0, 0, 0, 0, 140, 169, 136, 0, 0, 0,
	171, 0, 0, 0, 173, 0, 0, 252, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	0, 1081, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	282, 0, 0, 0, 0, 220, 0, 257, 152, 170,
	125, 166, 110, 121, 0, 151, 198, 229, 233, 0,
	0, 0, 133, 0, 231, 208, 273, 0, 210, 230,
	174, 263, 221, 272, 283, 284, 260, 280, 288, 248,
	114, 259, 271, 130, 242, 0, 0, 0, 116, 269,
	255, 186, 162, 163, 115, 0, 227, 139, 147, 135,
	200, 266, 267, 134, 291, 122, 279, 118, 123, 278,
	194, 262, 270, 187, 179, 117, 268, 185, 178, 168,
	143, 154, 218, 176, 219, 155, 190, 189, 191, 0,
	0, 0, 253, 276, 292, 127, 0, 261, 286, 287,
	0, 222, 128, 148, 142, 217, 146, 192, 124, 157,
	250, 167, 175, 226, 290, 207, 232, 131, 275, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	119, 172, 289, 224, 145, 277, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 112, 120, 126, 132, 137, 141, 144, 150,
	153, 156, 158, 159, 160, 165, 177, 181, 182, 183,
	184, 195, 196, 197, 199, 202, 203, 204, 205, 206,
	209, 211, 212, 213, 214, 215, 216, 225, 228, 234,
	235, 236, 237, 238, 239, 241, 244, 245, 246, 247,
	254, 258, 264, 265, 274, 281, 285, 0, 0, 35,
	0, 113, 164, 180, 310, 240, 243, 249, 256, 311,
	312, 201, 0, 0, 0, 223, 193, 161, 0, 0,
	140, 169, 136, 0, 0, 0, 171, 0, 0, 0,
	173, 0, 0, 252, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 106, 107, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 282, 0, 0, 0,
	0, 220, 0, 257, 152, 170, 125, 166, 110, 121,
	0, 151, 198, 229, 233, 0, 0, 0, 133, 0,
	231, 208, 273, 0, 210, 230, 174, 263, 221, 272,
	283, 284, 260, 280, 288, 248, 114, 259, 271, 130,
	242, 0, 0, 0, 116, 269, 255, 186, 162, 163,
	115, 0, 227, 139, 147, 135, 200, 266, 267, 134,
	291, 122, 279, 118, 123, 278, 194, 262, 270, 187,
	179, 117, 268, 185, 178, 168, 143, 154, 218, 176,
	219, 155, 190, 189, 191, 0, 0, 0, 253, 276,
	292, 127, 0, 261, 286, 287, 0, 222, 128, 148,
	142, 217, 146, 192, 124, 157, 250, 167, 175, 226,
	290, 207, 232, 131, 275, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 119, 172, 289, 224,
	145, 277, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 120,
	126, 132, 137, 141, 144, 150, 153, 156, 158, 159,
	160, 165, 177, 181, 182, 183, 184, 195, 196, 197,
	199, 202, 203, 204, 205, 206, 209, 211, 212, 213,
	214, 215, 216, 225, 228, 234, 235, 236, 237, 238,
	239, 241, 244, 245, 246, 247, 254, 258, 264, 265,
	274, 281, 285, 0, 0, 0, 0, 113, 164, 180,
	310, 240, 243, 249, 256, 311, 312, 0, 0, 0,
	201, 223, 193, 161, 1079, 0, 0, 0, 0, 140,
	169, 136, 0, 0, 0, 171, 0, 0, 0, 173,
	0, 0, 252, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 0, 1081, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 282, 0, 0, 0, 0,
	220, 0, 257, 152, 170, 125, 166, 110, 121, 0,
	151, 198, 229, 233, 0, 0, 0, 133, 0, 231,
	208, 273, 0, 1083, 230, 174, 263, 221, 272, 283,
	284, 260, 280, 288, 248, 114, 259, 271, 130, 242,
	0, 0, 0, 116, 269, 255, 186, 162, 163, 115,
	0, 227, 139, 147, 135, 200, 266, 267, 134, 291,
	122, 279, 118, 123, 278, 194, 262, 270, 187, 179,
	117, 268, 185, 178, 168, 143, 154, 218, 176, 219,
	155, 190, 189, 191, 0, 0, 0, 253, 276, 292,
	127, 0, 261, 286, 287, 0, 222, 128, 148, 142,
	217, 146, 192, 124, 157, 250, 167, 175, 226, 290,
	207, 232, 131, 275, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 119, 172, 289, 224, 145,
	277, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 112, 120, 126,
	132, 137, 141, 144, 150, 153, 156, 158, 159, 160,
	165, 177, 181, 182, 183, 184, 195, 196, 197, 199,
	202, 203, 204, 205, 206, 209, 211, 212, 213, 214,
	215, 216, 225, 228, 234, 235, 236, 237, 238, 239,
	241, 244, 245, 246, 247, 254, 258, 264, 265, 274,
	281, 285, 0, 0, 0, 0, 113, 164, 180, 310,
	240, 243, 249, 256, 311, 312, 201, 0, 0, 0,
	223, 193, 161, 0, 0, 140, 169, 136, 0, 0,
	0, 171, 0, 0, 0, 173, 0, 0, 252, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 0, 0, 1045, 0, 0, 1046, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 282, 0, 0, 0, 0, 220, 0, 257, 152,
	170, 125, 166, 110, 121, 0, 151, 198, 229, 233,
	0, 0, 0, 133, 0, 231, 208, 273, 0, 210,
	230, 174, 263, 221, 272, 283, 284, 260, 280, 288,
	248, 114, 259, 271, 130, 242, 0, 0, 0, 116,
	269, 255, 186, 162, 163, 115, 0, 227, 139, 147,
	135, 200, 266, 267, 134, 291, 122, 279, 118, 123,
	278, 194, 262, 270, 187, 179, 117, 268, 185, 178,
	168, 143, 154, 218, 176, 219, 155, 190, 189, 191,
	0, 0, 0, 253, 276, 292, 127, 0, 261, 286,
	287, 0, 222, 128, 148, 142, 217, 146, 192, 124,
	157, 250, 167, 175, 226, 290, 207, 232, 131, 275,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 119, 172, 289, 224, 145, 277, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 112, 120, 126, 132, 137, 141, 144,
	150, 153, 156, 158, 159, 160, 165, 177, 181, 182,
	183, 184, 195, 196, 197, 199, 202, 203, 204, 205,
	206, 209, 211, 212, 213, 214, 215, 216, 225, 228,
	234, 235, 236, 237, 238, 239, 241, 244, 245, 246,
	247, 254, 258, 264, 265, 274, 281, 285, 0, 0,
	0, 0, 113, 164, 180, 310, 240, 243, 249, 256,
	311, 312, 201, 0, 0, 0, 223, 193, 161, 0,
	0, 140, 169, 136, 0, 0, 0, 171, 0, 0,
	0, 173, 0, 0, 252, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 434, 106, 107, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 282, 0, 0,
	0, 0, 220, 0, 257, 152, 170, 125, 166, 110,
	121, 0, 151, 198, 229, 233, 0, 0, 0, 133,
	0, 231, 208, 273, 0, 210, 230, 174, 263, 221,
	272, 283, 284, 260, 280, 288, 248, 114, 259, 271,
	130, 242, 0, 0, 0, 116, 269, 255, 186, 162,
	163, 115, 0, 227, 139, 147, 135, 200, 266, 267,
	134, 291, 122, 279, 118, 123, 278, 194, 262, 270,
	187, 179, 117, 268, 185, 178, 168, 143, 154, 218,
	176, 219, 155, 190, 189, 191, 0, 0, 0, 253,
	276, 292, 127, 0, 261, 286, 287, 0, 222, 128,
	148, 142, 217, 146, 192, 124, 157, 250, 167, 175,
	226, 290, 207, 232, 131, 275, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 119, 172, 289,
	224, 145, 277, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	120, 126, 132, 137, 141, 144, 150, 153, 156, 158,
	159, 160, 165, 177, 181, 182, 183, 184, 195, 196,
	197, 199, 202, 203, 204, 205, 206, 209, 211, 212,
	213, 214, 215, 216, 225, 228, 234, 235, 236, 237,
	238, 239, 241, 244, 245, 246, 247, 254, 258, 264,
	265, 274, 281, 285, 0, 0, 0, 0, 113, 164,
	180, 310, 240, 243, 249, 256, 311, 312, 201, 0,
	0, 0, 223, 193, 161, 0, 0, 140, 169, 136,
	0, 0, 0, 171, 0, 0, 0, 173, 0, 0,
	252, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	106, 107, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 282, 0, 0, 0, 0, 220, 0,
	257, 152, 170, 125, 166, 110, 121, 0, 151, 198,
	229, 233, 0, 0, 0, 133, 0, 231, 208, 273,
	0, 210, 230, 174, 263, 221, 272, 283, 284, 260,
	280, 288, 248, 114, 259, 271, 130, 242, 0, 0,
	0, 116, 269, 255, 186, 162, 163, 115, 0, 227,
	139, 147, 135, 200, 266, 267, 134, 291, 122, 279,
	118, 123, 278, 194, 262, 270, 187, 179, 117, 268,
	185, 178, 168, 143, 154, 218, 176, 219, 155, 190,
	189, 191, 0, 0, 0, 253, 276, 292, 127, 0,
	261, 286, 287, 0, 222, 128, 148, 142, 217, 146,
	192, 124, 157, 250, 167, 175, 226, 290, 207, 232,
	131, 275, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 119, 172, 289, 224, 145, 277, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 112, 120, 126, 132, 137,
	141, 144, 150, 153, 156, 158, 159, 160, 165, 177,
	181, 182, 183, 184, 195, 196, 197, 199, 202, 203,
	204, 205, 206, 209, 211, 212, 213, 214, 215, 216,
	225, 228, 234, 235, 236, 237, 238, 239, 241, 244,
	245, 246, 247, 254, 258, 264, 265, 274, 281, 285,
	0, 0, 0, 0, 113, 164, 180, 310, 240, 243,
	249, 256, 311, 312, 201, 0, 0, 0, 223, 193,
	161, 0, 0, 140, 169, 136, 0, 0, 0, 171,
	0, 0, 0, 173, 0, 0, 252, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 0,
	1081, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 282,
	0, 0, 0, 0, 220, 0, 257, 152, 170, 125,
	166, 110, 121, 0, 151, 198, 229, 233, 0, 0,
	0, 133, 0, 231, 208, 273, 0, 210, 230, 174,
	263, 221, 272, 283, 284, 260, 280, 288, 248, 114,
	259, 271, 130, 242, 0, 0, 0, 116, 269, 255,
	186, 162, 163, 115, 0, 227, 139, 147, 135, 200,
	266, 267, 134, 291, 122, 279, 118, 123, 278, 194,
	262, 270, 187, 179, 117, 268, 185, 178, 168, 143,
	154, 218, 176, 219, 155, 190, 189, 191, 0, 0,
	0, 253, 276, 292, 127, 0, 261, 286, 287, 0,
	222, 128, 148, 142, 217, 146, 192, 124, 157, 250,
	167, 175, 226, 290, 207, 232, 131, 275, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 119,
	172, 289, 224, 145, 277, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 112, 120, 126, 132, 137, 141, 144, 150, 153,
	156, 158, 159, 160, 165, 177, 181, 182, 183, 184,
	195, 196, 197, 199, 202, 203, 204, 205, 206, 209,
	211, 212, 213, 214, 215, 216, 225, 228, 234, 235,
	236, 237, 238, 239, 241, 244, 245, 246, 247, 254,
	258, 264, 265, 274, 281, 285, 0, 0, 0, 0,
	113, 164, 180, 310, 240, 243, 249, 256, 311, 312,
	201, 0, 0, 0, 223, 193, 161, 0, 0, 140,
	169, 136, 0, 0, 0, 171, 0, 0, 0, 173,
	0, 0, 252, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 0, 1203, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 282, 0, 0, 0, 0,
	220, 0, 257, 152, 170, 125, 166, 110, 121, 0,
	151, 198, 229, 233, 0, 0, 0, 133, 0, 231,
	208, 273, 0, 210, 230, 174, 263, 221, 272, 283,
	284, 260, 280, 288, 248, 114, 259, 271, 130, 242,
	0, 0, 0, 116, 269, 255, 186, 162, 163, 115,
	0, 227, 139, 147, 135, 200, 266, 267, 134, 291,
	122, 279, 118, 123, 278, 194, 262, 270, 187, 179,
	117, 268, 185, 178, 168, 143, 154, 218, 176, 219,
	155, 190, 189, 191, 0, 0, 0, 253, 276, 292,
	127, 0, 261, 286, 287, 0, 222, 128, 148, 142,
	217, 146, 192, 124, 157, 250, 167, 175, 226, 290,
	207, 232, 131, 275, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 119, 172, 289, 224, 145,
	277, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 112, 120, 126,
	132, 137, 141, 144, 150, 153, 156, 158, 159, 160,
	165, 177, 181, 182, 183, 184, 195, 196, 197, 199,
	202, 203, 204, 205, 206, 209, 211, 212, 213, 214,
	215, 216, 225, 228, 234, 235, 236, 237, 238, 239,
	241, 244, 245, 246, 247, 254, 258, 264, 265, 274,
	281, 285, 0, 0, 0, 0, 113, 164, 180, 310,
	240, 243, 249, 256, 311, 312, 201, 0, 0, 0,
	223, 193, 161, 0, 791, 140, 169, 136, 0, 0,
	0, 171, 0, 0, 0, 173, 0, 0, 252, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 282, 0, 0, 0, 0, 220, 0, 257, 152,
	170, 125, 166, 110, 121, 0, 151, 198, 229, 233,
	0, 0, 0, 133, 0, 231, 208, 273, 0, 210,
	230, 174, 263, 221, 272, 283, 284, 260, 280, 288,
	248, 114, 259, 271, 130, 242, 0, 0, 0, 116,
	269, 255, 186, 162, 163, 115, 0, 227, 139, 147,
	135, 200, 266, 267, 134, 291, 122, 279, 118, 123,
	278, 194, 262, 270, 187, 179, 117, 268, 185, 178,
	168, 143, 154, 218, 176, 219, 155, 190, 189, 191,
	0, 0, 0, 253, 276, 292, 127, 0, 261, 286,
	287, 0, 222, 128, 148, 142, 217, 146, 192, 124,
	157, 250, 167, 175, 226, 290, 207, 232, 131, 275,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 119, 172, 289, 224, 145, 277, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 112, 120, 126, 132, 137, 141, 144,
	150, 153, 156, 158, 159, 160, 165, 177, 181, 182,
	183, 184, 195, 196, 197, 199, 202, 203, 204, 205,
	206, 209, 211, 212, 213, 214, 215, 216, 225, 228,
	234, 235, 236, 237, 238, 239, 241, 244, 245, 246,
	247, 254, 258, 264, 265, 274, 281, 285, 0, 0,
	0, 0, 113, 164, 180, 310, 240, 243, 249, 256,
	311, 312, 201, 0, 0, 0, 223, 193, 161, 0,
	0, 140, 169, 136, 0, 0, 0, 171, 0, 0,
	0, 173, 0, 0, 252, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 0, 788, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 282, 0, 0,
	0, 0, 220, 0, 257, 152, 170, 125, 166, 110,
	121, 0, 151, 198, 229, 233, 0, 0, 0, 133,
	0, 231, 208, 273, 0, 210, 230, 174, 263, 221,
	272, 283, 284, 260, 280, 288, 248, 114, 259, 271,
	130, 242, 0, 0, 0, 116, 269, 255, 186, 162,
	163, 115, 0, 227, 139, 147, 135, 200, 266, 267,
	134, 291, 122, 279, 118, 123, 278, 194, 262, 270,
	187, 179, 117, 268, 185, 178, 168, 143, 154, 218,
	176, 219, 155, 190, 189, 191, 0, 0, 0, 253,
	276, 292, 127, 0, 261, 286, 287, 0, 222, 128,
	148, 142, 217, 146, 192, 124, 157, 250, 167, 175,
	226, 290, 207, 232, 131, 275, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 119, 172, 289,
	224, 145, 277, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	120, 126, 132, 137, 141, 144, 150, 153, 156, 158,
	159, 160, 165, 177, 181, 182, 183, 184, 195, 196,
	197, 199, 202, 203, 204, 205, 206, 209, 211, 212,
	213, 214, 215, 216, 225, 228, 234, 235, 236, 237,
	238, 239, 241, 244, 245, 246, 247, 254, 258, 264,
	265, 274, 281, 285, 0, 0, 0, 0, 113, 164,
	180, 310, 240, 243, 249, 256, 311, 312, 201, 0,
	0, 0, 223, 193, 161, 0, 0, 140, 169, 825,
	0, 0, 0, 171, 0, 0, 0, 173, 0, 0,
	252, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 0, 824, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 282, 0, 0, 0, 0, 220, 0,
	257, 152, 170, 125, 166, 110, 121, 0, 151, 198,
	229, 233, 0, 0, 0, 133, 0, 231, 208, 273,
	0, 210, 230, 174, 263, 221, 272, 283, 284, 260,
	280, 288, 248, 114, 259, 271, 130, 242, 0, 0,
	0, 116, 269, 255, 186, 162, 163, 115, 0, 227,
	139, 147, 135, 200, 266, 267, 134, 291, 122, 279,
	118, 123, 278, 194, 262, 270, 187, 179, 117, 268,
	185, 178, 168, 143, 154, 218, 176, 219, 155, 190,
	189, 191, 0, 0, 0, 253, 276, 292, 127, 0,
	261, 286, 287, 0, 222, 128, 148, 142, 217, 146,
	192, 124, 157, 250, 167, 175, 226, 290, 207, 232,
	131, 275, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 119, 172, 289, 224, 145, 277, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 112, 120, 126, 132, 137,
	141, 144, 150, 153, 156, 158, 159, 160, 165, 177,
	181, 182, 183, 184, 195, 196, 197, 199, 202, 203,
	204, 205, 206, 209, 211, 212, 213, 214, 215, 216,
	225, 228, 234, 235, 236, 237, 238, 239, 241, 244,
	245, 246, 247, 254, 258, 264, 265, 274, 281, 285,
	0, 0, 0, 0, 113, 164, 180, 310, 240, 243,
	249, 256, 311, 312, 451, 0, 0, 0, 223, 193,
	161, 201, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 169, 136, 0, 0, 0, 171, 0, 0, 0,
	173, 0, 0, 252, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 282, 0, 0, 0,
	0, 220, 0, 257, 152, 170, 125, 166, 110, 121,
	0, 151, 198, 229, 233, 0, 0, 0, 133, 0,
	231, 208, 273, 0, 210, 230, 174, 263, 221, 272,
	283, 284, 260, 280, 288, 248, 114, 259, 271, 130,
	242, 0, 0, 0, 116, 269, 255, 186, 162, 163,
	115, 0, 227, 139, 147, 135, 200, 266, 267, 134,
	291, 122, 279, 118, 123, 278, 194, 262, 270, 187,
	179, 117, 268, 185, 178, 168, 143, 154, 218, 176,
	219, 155, 190, 189, 191, 0, 0, 0, 253, 276,
	292, 127, 0, 261, 286, 287, 0, 222, 128, 148,
	142, 217, 146, 192, 124, 157, 250, 167, 175, 226,
	290, 207, 232, 131, 275, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 119, 172, 289, 224,
	145, 277, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 120,
	126, 132, 137, 141, 144, 150, 153, 156, 158, 159,
	160, 165, 177, 181, 182, 183, 184, 195, 196, 197,
	199, 202, 203, 204, 205, 206, 209, 211, 212, 213,
	214, 215, 216, 225, 228, 234, 235, 236, 237, 238,
	239, 241, 244, 245, 246, 247, 254, 258, 264, 265,
	274, 281, 285, 0, 0, 0, 0, 113, 164, 180,
	310, 240, 243, 249, 256, 311, 312, 201, 0, 0,
	0, 223, 193, 161, 0, 0, 140, 169, 136, 0,
	0, 0, 171, 0, 0, 0, 173, 0, 0, 252,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	305, 0, 282, 0, 0, 0, 0, 220, 0, 257,
	152, 170, 125, 166, 110, 121, 0, 151, 198, 229,
	233, 0, 0, 0, 133, 0, 231, 208, 273, 0,
	210, 230, 174, 263, 221, 272, 283, 284, 260, 280,
	288, 248, 114, 259, 271, 130, 242, 0, 0, 0,
	116, 269, 255, 186, 162, 163, 115, 0, 227, 139,
	147, 135, 200, 266, 267, 134, 291, 122, 279, 118,
	123, 278, 194, 262, 270, 187, 179, 117, 268, 185,
	178, 168, 143, 154, 218, 176, 219, 155, 190, 189,
	191, 0, 0, 0, 253, 276, 292, 127, 0, 261,
	286, 287, 0, 222, 128, 148, 142, 217, 146, 192,
	124, 157, 250, 167, 175, 226, 290, 207, 232, 131,
	275, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 119, 172, 289, 224, 145, 277, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 112, 120, 126, 132, 137, 141,
	144, 150, 153, 156, 158, 159, 160, 165, 177, 181,
	182, 183, 184, 195, 196, 197, 199, 202, 203, 204,
	205, 206, 209, 211, 212, 213, 214, 215, 216, 225,
	228, 234, 235, 236, 237, 238, 239, 241, 244, 245,
	246, 247, 254, 258, 264, 265, 274, 281, 285, 0,
	0, 0, 0, 113, 164, 180, 310, 240, 243, 249,
	256, 311, 312, 201, 0, 0, 0, 223, 193, 161,
	0, 0, 140, 169, 136, 0, 0, 0, 171, 0,
	0, 0, 173, 0, 0, 252, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 282, 0,
	0, 0, 0, 220, 0, 257, 152, 170, 125, 166,
	110, 121, 0, 151, 198, 229, 233, 0, 0, 0,
	133, 0, 231, 208, 273, 0, 210, 230, 174, 263,
	221, 272, 283, 284, 260, 280, 288, 248, 114, 259,
	271, 130, 242, 0, 0, 0, 116, 269, 255, 186,
	162, 163, 115, 0, 227, 139, 147, 135, 200, 266,
	267, 134, 291, 122, 279, 118, 123, 278, 194, 262,
	270, 187, 179, 117, 268, 185, 178, 168, 143, 154,
	218, 176, 219, 155, 190, 189, 191, 0, 0, 0,
	253, 276, 292, 127, 0, 261, 286, 287, 0, 222,
	128, 148, 142, 217, 146, 192, 124, 157, 250, 167,
	175, 226, 290, 207, 232, 131, 275, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 119, 172,
	289, 224, 145, 277, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	112, 120, 126, 132, 137, 141, 144, 150, 153, 156,
	158, 159, 160, 165, 177, 181, 182, 183, 184, 195,
	196, 197, 199, 202, 203, 204, 205, 206, 209, 211,
	212, 213, 214, 215, 216, 225, 228, 234, 235, 236,
	237, 238, 239, 241, 244, 245, 246, 247, 254, 258,
	264, 265, 274, 281, 285, 0, 0, 0, 0, 113,
	164, 180, 310, 240, 243, 249, 256, 311, 312, 0,
	0, 0, 0, 223, 193, 161,
}

var yyPact = [...]int{
	102, -1000, -290, 1106, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1066, 866, -1000, -1000, -1000, -1000, -1000,
	-1000, 387, 12938, 79, 213, 37, 17939, 212, 6, 18295,
	-1000, 65, -1000, 52, 18295, 58, -22, -1000, -1000, -15,
	-17, -1000, 10443, -268, -1000, 493, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 899, 1053, 1054,
	1063, 633, 1041, -1000, 9001, 172, 172, 17583, 7206, -1000,
	-1000, 502, 18295, 200, 189, -115, 157, 157, 209, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 205, 18295, 646, 646, 302, -1000, 18295,
	167, 646, 167, 167, 167, 18295, -1000, 283, -1000, -1000,
	-1000, -1000, -1000, 18295, 646, 1018, 437, 161, 4574, -1000,
	499, -1000, 4574, 97, 4574, -30, 1080, 76, 42, -1000,
	646, -49, -1000, -1000, -1000, -1000, -1000, -1000, 178, -1000,
	-1000, 18295, -63, 193, 365, -1000, -1000, -1000, -1000, -1000,
	-1000, 789, 496, -1000, 10443, 1988, 868, 868, -1000, -1000,
	228, -1000, -1000, 11511, 11511, 11511, 11511, 11511, 11511, 11511,
	11511, 11511, 11867, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 868, 282, -1000,
	10085, 868, 868, 868, 868, 868, 868, 868, 868, 10443,
	868, 868, 868, 868, 868, 868, 868, 868, 868, 868,
	868, 868, 868, 868, 868, 868, -1000, -1000, -253, -275,
	18295, -1000, 18295, 573, 1066, -1000, 866, -1000, -1000, -1000,
	1011, 10443, 10443, 1066, -1000, 976, 9001, -1000, -1000, 997,
	-1000, -1000, -1000, -1000, 421, 1090, -1000, 12582, 271, 16508,
	15440, 18295, 819, 808, -1000, -1000, 269, 860, 6830, -48,
	-1000, -1000, -1000, 222, 17220, -1000, -1000, -1000, 995, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 795, 18295,
	-1000, 3013, -1000, 646, 18295, -273, 646, 383, 646, 157,
	18295, 4574, 4574, 4574, 95, 137, 111, 18295, 839, 175,
	18295, 1043, 939, 18295, 646, 646, -1000, 6078, -1000, 4574,
	437, -1000, 560, 10443, 4574, 4574, 4574, 18295, 4574, 4574,
	-1000, -1000, -1000, 430, 423, -1000, -1000, -1000, -1000, -1000,
	4574, 4574, -1000, 1089, 429, -1000, -1000, -1000, -1000, 10443,
	326, -1000, 937, -1000, -1000, -88, 55, -1000, 18295, -1000,
	1106, -1000, -1000, -1000, -98, -1000, -1000, 10443, 10443, 10443,
	10443, 593, 444, -1000, 373, 11511, 465, 392, 11511, 11511,
	11511, 11511, 11511, 11511, 11511, 11511, 11511, 11511, 11511, 11511,
	11511, 11511, 11511, 635, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 646, -1000, 1102, 917, 917, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 12223, -1000, 7569, 6078,
	633, 774, 1066, 9001, 9001, 10443, 10443, 9717, 9359, 9001,
	1024, 380, 496, 18295, -1000, -1000, 11155, -1000, -1000, -1000,
	-1000, -1000, 586, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	18295, 18295, 9001, 9001, 9001, 9001, 9001, 646, 646, 646,
	784, 511, -1000, -1000, 1054, 633, 997, -1000, 1097, 322,
	726, 833, -1000, 882, 1054, 14728, 727, -1000, 997, -1000,
	-1000, -1000, 18295, 444, -1000, -1000, 16864, -1000, -1000, 5702,
	116, 18295, -1000, 821, 894, -1000, -1000, -1000, 1046, 13294,
	13657, 14372, 868, 268, 116, 812, 15440, 18295, -1000, -1000,
	15440, 18295, 5326, 6454, -48, -1000, 816, -1000, -97, -68,
	8285, 7927, 280, -1000, -1000, -1000, -1000, 4198, 338, 669,
	404, -9, -1000, -1000, -1000, 875, -1000, 875, 875, 875,
	875, 19, 19, 19, 19, -1000, -1000, -1000, -1000, -1000,
	909, 907, -1000, 875, 875, 875, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 906, 906, 906, 880, 880, 918,
	1045, 184, -1000, 4574, 1040, 4574, 18295, 508, -1000, -1000,
	-1000, 18295, 18295, 18295, 18295, 18295, 220, 18295, 18295, 825,
	-1000, 18295, 4574, -1000, -1000, 265, -1000, -1000, -1000, -1000,
	-1000, 496, -1000, -1000, -1000, -1000, -1000, -1000, 18295, -1000,
	-1000, 18295, -1000, 16508, -1000, -1000, 18295, 437, 18295, 18295,
	496, -1000, 553, 18295, -1000, 18295, -1000, 16152, -1000, -1000,
	-1000, -1000, 496, 373, 498, 540, -1000, -1000, 602, -1000,
	-1000, -1000, 2008, -1000, -1000, -1000, -1000, 465, 11511, 11511,
	11511, 273, 2008, 2231, 479, 1655, 294, 443, 443, 306,
	306, 306, 306, 306, 660, 660, -1000, -1000, -1000, 586,
	-1000, -1000, -1000, 586, 9001, 9001, 824, 868, 247, -1000,
	899, -1000, -1000, 1054, 764, 764, 605, 544, 379, 1088,
	764, 350, 1086, 764, 764, 9001, -1000, -1000, 460, -1000,
	10443, 586, -1000, 243, -1000, 547, 822, 818, 764, 586,
	586, 764, 764, -267, -1000, 718, -1000, -1000, 582, -1000,
	363, -1000, 1011, -1000, -1000, 973, 10443, 10443, 10443, -1000,
	-1000, -1000, 1011, 1058, -1000, 986, 981, 1076, 9001, 15440,
	997, -1000, -1000, -1000, 242, 805, 868, -1000, 18295, 15440,
	15440, 15440, 15440, 15440, -1000, 960, 955, -1000, 952, 951,
	999, 18295, -1000, 766, 586, 633, 13294, -1000, -1000, 15796,
	-1000, -1000, 236, 868, 6078, 1076, 15440, 692, -1000, 692,
	-1000, 240, -1000, -1000, 816, -48, -96, -1000, -1000, -1000,
	-1000, 496, -1000, -1000, 496, -1000, 693, 815, 3822, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 900, 646, -1000, 1027,
	285, 292, 646, 1026, -1000, -1000, -1000, 1000, -1000, 384,
	-11, -1000, -1000, 492, 19, 19, -1000, -1000, 280, 993,
	280, 280, 280, 548, 548, -1000, -1000, -1000, -1000, 480,
	-1000, -1000, -1000, 474, -1000, 936, 18295, 866, 18295, -1000,
	-1000, -1000, -1000, -1000, 377, 377, 277, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 112, 911,
	-1000, -1000, -1000, -1000, 51, 91, 174, -1000, 4574, -1000,
	6078, 429, 437, 893, 429, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 273, 2008,
	2061, -1000, 11511, 11511, -1000, -1000, 764, 764, 9001, 6078,
	1066, 1011, -1000, -1000, 143, 635, 143, 11511, 11511, -1000,
	11511, 11511, -1000, -129, 776, 367, -1000, 10443, 644, -1000,
	6078, -1000, 11511, 11511, -1000, -1000, -1000, -1000, -1000, 546,
	-1000, -1000, -1000, -1000, -1000, 511, -1000, -1000, 359, -1000,
	917, -1000, 968, 496, 496, -1000, -1000, 18295, -1000, -1000,
	-1000, -1000, 1073, 10443, -1000, 807, -1000, 4950, 932, 18295,
	868, 1106, 14013, 18295, 719, -1000, 358, 894, 898, 931,
	865, -1000, -1000, -1000, -1000, 953, -1000, 928, -1000, -1000,
	-1000, -1000, -1000, -1000, 633, -1000, -1000, 198, 196, 192,
	18295, 868, 1066, 692, -1000, -1000, 313, -1000, -1000, -92,
	-78, -1000, -1000, -1000, 4198, -1000, 4198, 18295, 136, -1000,
	646, 646, -1000, -1000, 887, 923, 11511, -1000, -1000, -1000,
	626, 280, 280, -1000, 352, -1000, -1000, -1000, 759, -1000,
	751, 799, 748, 18295, -1000, 1106, 1042, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 18295, -1000, -1000, -1000, -1000, -1000,
	18295, -135, 646, 18295, 18295, 18295, 18295, -1000, 238, 437,
	-1000, 437, 18295, 437, -1000, 11511, 2008, 2008, -1000, -1000,
	586, -1000, 1054, -1000, 586, 875, 875, -1000, 875, 880,
	-1000, 875, 44, 875, 38, 586, 586, 2214, 2023, 1931,
	1860, 868, -122, -1000, 496, 10443, -1000, 1839, 1757, 543,
	-1000, 917, -1000, -1000, -1000, 1068, 1062, 496, -1000, -1000,
	1030, 661, 780, -1000, -1000, 8643, 741, 231, 738, -1000,
	1076, 18295, 10443, -1000, -1000, 10443, 878, -1000, 10443, -1000,
	-1000, -1000, 1066, 868, 868, 868, 738, 1054, -1000, -1000,
	-1000, -1000, 3822, -1000, 731, -1000, 875, -1000, -1000, -1000,
	18295, -4, 1095, 2008, -1000, -1000, -1000, -1000, -1000, 19,
	541, 19, 464, -1000, 461, 4574, 866, -1000, -1000, -1000,
	-1000, 1035, -1000, 6078, -1000, -1000, 871, 912, -1000, -1000,
	6078, -1000, -1000, 716, -1000, -1000, 2008, -1000, 1011, -1000,
	-1000, 191, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11511, 11511, 11511, 11511, 11511, 1054, 536, 496, 11511, 11511,
	-1000, -1000, -1000, 10443, 10443, 1025, -1000, 868, -1000, 895,
	18295, 18295, -1000, 18295, 1066, -1000, 496, 496, 18295, 496,
	15084, 18295, 18295, 13657, -1000, 245, 18295, -1000, 690, 259,
	-1000, -95, 280, -1000, 280, 622, 599, -1000, 1106, 868,
	798, -1000, 355, 18295, 18295, -1000, -1000, 18295, -1000, -1000,
	-1000, 547, 547, 547, 547, 84, 586, -1000, 547, 547,
	496, 789, 1094, -1000, 868, 1106, 227, -1000, -1000, 1054,
	687, 674, -1000, 674, 674, 236, 245, -1000, 646, 348,
	532, -1000, 132, 416, 1023, -1000, 1022, -1000, -1000, -1000,
	-1000, -1000, 110, 6078, 4198, 666, -1000, -1000, -1000, -1000,
	-1000, -1000, 586, 92, -138, -1000, -1000, -1000, 18295, 780,
	18295, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 427,
	-1000, -1000, 18295, -1000, 507, -1000, -1000, 643, -1000, 18295,
	-1000, -1000, 911, -1000, 966, -132, -146, 704, -1000, -1000,
	869, -1000, -1000, 110, 979, -135, -1000, 965, -1000, 18295,
	-1000, 107, -1000, -136, 613, 105, -141, 921, 868, -147,
	920, -1000, 1084, 10799, -1000, -1000, 1093, 255, 255, 547,
	586, -1000, -1000, -1000, 141, 481, -1000, -1000, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]int{
	0, 1359, 1358, 40, 67, 61, 1357, 1356, 1355, 118,
	117, 116, 1353, 1352, 1350, 1349, 1347, 1346, 1344, 1343,
	1342, 1335, 1334, 1330, 1329, 1326, 1324, 1323, 1321, 1319,
	1317, 1316, 1315, 1120, 1314, 1313, 1312, 1310, 1308, 84,
	1307, 77, 1306, 1305, 1304, 1303, 1300, 1299, 1298, 1297,
	1295, 38, 1201, 39, 56, 1294, 64, 2370, 33, 60,
	81, 65, 1293, 31, 1292, 1291, 79, 1289, 1288, 53,
	1285, 1279, 241, 69, 78, 1276, 17, 26, 1275, 1273,
	1272, 1271, 35, 1907, 1270, 1262, 11, 850, 1261, 99,
	1260, 63, 32, 12, 21, 25, 1256, 70, 1254, 6,
	1253, 66, 1252, 1251, 1250, 1248, 20, 1245, 59, 1244,
	62, 27, 1242, 9, 1239, 73, 30, 24, 7, 1236,
	1235, 19, 71, 49, 74, 1231, 82, 1230, 1225, 456,
	1224, 955, 51, 1223, 1222, 126, 44, 1219, 128, 80,
	1218, 1217, 1216, 1214, 68, 915, 1425, 119, 76, 1213,
	1211, 1208, 2103, 36, 58, 18, 1207, 1206, 1205, 45,
	85, 37, 1203, 1202, 42, 1200, 1199, 1197, 1196, 1195,
	1194, 1192, 426, 1190, 1188, 1187, 16, 28, 1186, 1185,
	72, 29, 1184, 1183, 1182, 48, 75, 1181, 1178, 52,
	1177, 83, 57, 1176, 1172, 1166, 1164, 1162, 23, 10,
	1161, 13, 1158, 14, 1156, 22, 1155, 5, 1154, 8,
	1150, 2, 0, 1149, 4, 1148, 1146, 46, 1, 1142,
	3, 34, 1132, 1131, 1130, 87, 1125, 1113, 1378, 15,
	86, 1095, 90,
}

var yyR1 = [...]int{
	0, 226, 227, 227, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 212, 212, 212, 215, 216,
	20, 3, 3, 3, 3, 2, 2, 8, 4, 5,
	5, 9, 9, 42, 42, 10, 11, 11, 11, 11,
	230, 230, 66, 66, 67, 67, 115, 115, 12, 13,
	13, 124, 124, 123, 123, 123, 125, 125, 125, 125,
	162, 162, 127, 127, 127, 126, 126, 14, 14, 14,
	14, 14, 14, 14, 38, 38, 32, 32, 32, 32,
	35, 35, 35, 35, 35, 35, 50, 50, 50, 214,
	214, 213, 211, 211, 210, 210, 209, 21, 194, 196,
	196, 195, 195, 195, 195, 186, 165, 165, 165, 165,
	168, 168, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 167, 167, 167, 167, 167, 169, 169, 169, 169,
	169, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 171, 171, 171, 171,
	171, 171, 171, 171, 185, 185, 172, 172, 180, 180,
	181, 181, 181, 178, 178, 179, 179, 182, 182, 182,
	174, 174, 175, 175, 183, 183, 176, 176, 176, 177,
	177, 177, 184, 184, 184, 184, 184, 173, 173, 187,
	187, 204, 204, 203, 203, 203, 34, 193, 193, 200,
	200, 200, 200, 200, 190, 190, 190, 191, 191, 189,
	189, 192, 192, 202, 202, 201, 188, 188, 205, 205,
	205, 205, 219, 220, 218, 218, 218, 218, 218, 197,
	197, 197, 198, 198, 198, 199, 199, 199, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 208,
	206, 206, 207, 207, 16, 22, 22, 17, 17, 17,
	17, 17, 18, 18, 23, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 133, 133, 135, 135,
	131, 131, 134, 134, 132, 132, 132, 136, 136, 136,
	137, 137, 163, 163, 163, 25, 25, 27, 27, 28,
	29, 29, 157, 157, 158, 158, 30, 31, 43, 43,
	43, 43, 43, 43, 45, 45, 45, 7, 7, 7,
	7, 44, 44, 44, 6, 6, 26, 26, 26, 26,
	19, 231, 39, 40, 40, 41, 41, 41, 47, 47,
	47, 46, 46, 46, 53, 53, 55, 55, 55, 55,
	55, 56, 56, 56, 56, 56, 56, 52, 52, 54,
	54, 54, 54, 54, 149, 149, 149, 148, 148, 58,
	58, 59, 59, 60, 60, 61, 61, 61, 61, 61,
	98, 75, 75, 114, 114, 113, 113, 116, 116, 62,
	62, 62, 62, 63, 63, 64, 64, 65, 65, 156,
	156, 155, 155, 155, 154, 154, 68, 68, 68, 70,
	69, 69, 69, 69, 71, 71, 73, 73, 72, 72,
	72, 72, 74, 76, 76, 76, 76, 76, 77, 77,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 130,
	130, 79, 79, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 90, 90, 90, 90, 90, 90, 80,
	80, 80, 80, 80, 80, 80, 51, 51, 91, 91,
	91, 225, 225, 97, 92, 92, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 87, 87, 87, 87, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 232, 232, 89, 88, 88, 88,
	88, 88, 88, 88, 48, 48, 48, 48, 48, 161,
	161, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 102, 102, 49, 49, 100, 100,
	101, 103, 103, 99, 99, 99, 82, 82, 82, 82,
	82, 82, 82, 82, 84, 84, 84, 104, 104, 105,
	105, 106, 106, 107, 107, 108, 109, 109, 109, 110,
	110, 110, 110, 111, 111, 111, 81, 81, 81, 81,
	112, 112, 112, 112, 117, 117, 93, 93, 95, 95,
	94, 96, 118, 118, 121, 119, 119, 119, 122, 122,
	122, 122, 122, 122, 122, 120, 120, 120, 151, 151,
	151, 128, 128, 138, 138, 139, 139, 129, 129, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 141,
	141, 141, 142, 142, 143, 143, 143, 150, 150, 146,
	146, 147, 147, 152, 152, 153, 153, 221, 222, 223,
	223, 224, 224, 224, 33, 36, 36, 37, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 228, 229, 159, 160, 160, 160,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	2, 4, 6, 6, 7, 4, 6, 5, 8, 1,
	3, 7, 8, 1, 1, 10, 8, 7, 6, 6,
	1, 1, 1, 3, 1, 3, 0, 4, 3, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 0, 1, 1, 0, 1, 2, 2, 8,
	6, 8, 5, 5, 0, 1, 4, 5, 7, 4,
	5, 5, 4, 4, 4, 3, 1, 1, 1, 0,
	2, 1, 0, 2, 1, 3, 3, 5, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 3, 2, 3, 1, 10, 11,
	11, 12, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 7,
	7, 7, 7, 4, 5, 4, 4, 7, 5, 5,
	5, 12, 7, 5, 9, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 3, 4, 4,
	4, 4, 4, 4, 3, 2, 7, 2, 3, 4,
	3, 7, 5, 4, 2, 4, 4, 3, 3, 5,
	2, 6, 4, 3, 7, 4, 1, 1, 0, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 5, 0, 1, 0, 1, 2, 3, 0, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 5, 3, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 1, 2, 3,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 2,
	3, 3, 7, 0, 3, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	5, 7, 3, 0, 5, 4, 5, 5, 0, 2,
	1, 3, 3, 3, 2, 3, 2, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 2, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 2, 1, 1, 1,
	1, 4, 5, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 8, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 5, 4,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 0,
	1, 0, 1, 3, 5, 2, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -226, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -32, -35, -33,
	-34, -36, -37, -4, -228, 6, 7, -42, 9, 10,
	30, -21, 123, 124, 126, 125, 159, 127, 152, 53,
	173, 174, 176, 177, 178, 179, -45, 157, 158, 31,
	32, 129, 34, -38, 377, 371, 378, 379, 57, 8,
	262, 154, 153, 25, 380, -227, 381, -41, 5, -106,
	15, -3, -39, -231, -39, -39, -39, -39, -39, -194,
	-196, 57, 96, -143, -126, 77, 254, 130, -127, 137,
	-146, 367, 372, 373, -212, -145, 60, 61, 62, 272,
	145, 304, 305, 364, 173, 187, 181, 208, 200, 273,
	306, 146, 198, 201, 241, 143, 307, 228, 235, 71,
	176, 250, 308, 155, 196, 192, 29, 309, 281, 190,
	27, 310, 237, 213, 311, 277, 239, 191, 236, 129,
	312, 148, 141, 313, 214, 218, 314, 242, 315, 316,
	317, 380, 185, 186, 365, 318, 144, 244, 212, 28,
	142, 33, 274, 37, 163, 245, 216, 319, 211, 207,
	366, 320, 321, 322, 323, 210, 184, 206, 41, 220,
	219, 221, 240, 379, 203, 324, 325, 326, 149, 327,
	193, 18, 328, 329, 330, 331, 332, 248, 158, 333,
	161, 334, 335, 336, 337, 338, 339, 238, 215, 217,
	138, 165, 234, 378, 276, 340, 246, 189, 341, 150,
	162, 157, 249, 151, 342, 343, 344, 345, 346, 347,
	368, 348, 177, 369, 349, 350, 351, 352, 172, 370,
	243, 252, 40, 225, 353, 183, 371, 140, 354, 174,
	169, 230, 204, 164, 355, 356, 194, 195, 209, 182,
	205, 175, 166, 159, 357, 251, 226, 278, 202, 199,
	170, 358, 133, 167, 168, 359, 231, 232, 171, 275,
	247, 197, 227, -129, 133, 254, 130, 232, 135, 131,
	131, 132, 133, 254, 130, 131, -72, -152, -212, -145,
	367, 372, 373, 131, 114, 201, 241, 123, 229, 237,
	-135, 238, 165, -163, 131, -131, 228, 231, 232, 171,
	364, 175, 239, 243, 242, 233, -152, 175, -157, 180,
	-146, 178, -131, -43, 360, 127, -159, -159, 230, 230,
	-159, -92, -57, -78, 80, -83, 29, 23, -82, -79,
	-99, -96, -97, 114, 115, 117, 116, 118, 103, 104,
	111, 81, 119, -87, -85, -86, -88, 64, 63, 72,
	65, 66, 67, 68, 73, 74, 75, -146, -152, -94,
	-228, 47, 48, 263, 264, 265, 266, 271, 267, 83,
	36, 253, 261, 260, 259, 257, 258, 255, 256, 269,
	270, 136, 254, 130, 109, 262, -212, -145, 364, 374,
	-39, 65, -39, -39, -5, -4, -228, 6, 20, 21,
	-110, 17, 16, -229, 59, -47, -55, 42, 43, -56,
	21, 35, 46, 44, -40, -54, 105, -57, -152, -129,
	-129, 11, -66, -67, -72, -74, -152, -119, -162, 175,
	-122, 243, 242, -147, -120, -146, -144, 241, 201, 240,
	128, 279, 79, 22, 24, 223, 82, 114, 16, 83,
	113, 263, 123, 51, 280, 255, 256, 253, 265, 266,
	254, 229, 10, 282, 25, 153, 21, 35, 107, 125,
	86, 87, 156, 377, 23, 154, 75, 285, 19, 54,
	11, 13, 286, 287, 14, 136, 135, 98, 132, 49,
	8, 119, 26, 95, 45, 288, 289, 290, 291, 292,
	47, 96, 17, 257, 258, 31, 293, 271, 160, 109,
	52, 38, 80, 294, 295, 73, 296, 76, 55, 77,
	15, 50, 297, 298, 299, 300, 97, 126, 262, 48,
	301, 130, 6, 268, 30, 152, 46, 302, 131, 85,
	269, 270, 134, 74, 5, 137, 32, 9, 53, 56,
	259, 260, 261, 36, 84, 12, 303, 78, -195, 96,
	-186, -212, -72, 132, 133, 262, -139, 136, -139, 131,
	131, -72, -212, -212, 123, 125, 128, 55, -22, -72,
	-138, 136, -212, -138, -138, -138, -72, 120, -72, -212,
	30, -136, 96, 12, 254, -212, 165, 131, 166, 133,
	-160, -228, -147, -190, -212, 8, 132, 33, 144, -160,
	169, 170, -160, -134, -133, 235, 236, 230, 234, 12,
	170, 230, 168, -192, -212, 244, 134, -146, -135, -7,
	-3, -10, -9, -11, 88, -159, -159, 58, 79, 77,
	78, 95, -225, 69, -57, -80, 98, 80, 96, 97,
	82, 100, 99, 110, 103, 104, 105, 106, 107, 108,
	109, 101, 102, 113, 88, 89, 90, 91, 92, 93,
	94, -130, -228, -97, -228, 121, 122, -83, -83, -83,
	-83, -83, -83, -83, -83, -83, -83, 64, -228, 120,
	-2, -92, -4, -228, -228, -228, -228, -228, -228, -228,
	-228, -102, -57, -228, -232, -89, -228, -232, -89, -232,
	-89, -232, -228, -232, -89, -232, -89, -232, -232, -89,
	-228, -228, -228, -228, -228, -228, -228, 366, 368, 375,
	376, -72, -72, 64, -106, -3, -39, -111, 19, 31,
	-57, -107, -108, -57, -106, 38, -52, -54, -56, 42,
	43, 70, 11, -225, -149, -148, 22, -146, 64, 120,
	-73, 26, -72, -59, -60, -61, -62, -75, -98, -228,
	-87, -72, -146, -152, -72, -66, -230, 58, 11, 56,
	-230, 58, 120, 58, 175, -122, -124, -123, 244, 246,
	88, 134, -151, -146, 64, 29, 30, 59, 58, -72,
	-165, -168, -170, -169, -171, -166, -167, 198, 199, 114,
	202, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 30, 155, 194, 195, 196, 197, 214, 215, 216,
	217, 218, 219, 220, 221, 181, 200, 273, 182, 183,
	184, 185, 186, 187, 189, 190, 191, 192, 193, -212,
	-72, -126, 367, -212, 80, -212, -139, -72, -160, -160,
	-160, 167, 167, 131, 131, 172, -72, 58, 134, -66,
	23, 55, -72, -212, -212, -153, -152, -144, -160, -136,
	64, -57, -160, -160, -160, -72, -160, -160, -191, 11,
	98, -191, -136, -39, -160, -160, 11, -132, 11, 98,
	-57, -137, 96, 55, 245, -158, 178, -72, 212, 361,
	362, 363, -57, -57, -57, -57, -90, 73, 80, 74,
	75, 69, -83, -91, -94, -97, 69, 98, 96, 97,
	82, -83, -83, -83, -83, -83, -83, -83, -83, -83,
	-83, -83, -83, -83, -83, -83, -161, -212, 64, -212,
	-82, -82, -146, -53, 21, 35, -52, -147, -153, -144,
	-41, -229, -229, -106, -52, -52, -57, -57, -99, 64,
	-52, -99, 64, -52, -52, -46, 21, 35, -100, -101,
	84, -99, -146, -152, -229, -83, -146, -146, -52, -53,
	-53, -52, -52, -192, -192, -212, -212, 64, -224, -221,
	-215, 61, -110, -229, 9, 98, 58, 18, 58, -109,
	24, 25, -110, -84, -146, 65, 68, -58, 58, 11,
	-56, -72, -148, 105, -153, -115, 161, -72, 30, 58,
	-68, -70, -69, -71, 45, 49, 51, 46, 47, 48,
	52, -156, 22, -59, -33, -3, -228, -155, -154, 22,
	-152, 64, -155, 161, 120, -115, 56, -59, -72, -59,
	-74, -152, 105, -122, -124, 58, 245, 247, 248, 55,
	76, -57, 55, 76, -57, -177, 113, -197, -198, -199,
	-147, 64, 65, -186, -187, -188, -200, 147, -205, 138,
	140, 137, -189, 148, 132, 28, 59, -182, 73, 80,
	-178, 226, -172, 57, -172, -172, -172, -172, -176, 201,
	-176, -176, -176, 57, 57, -172, -172, -172, -180, 57,
	-180, -180, -181, 57, -181, -150, 56, 22, 133, -160,
	23, -160, -72, -140, 128, 125, 126, -208, 124, 223,
	201, 71, 29, 15, 263, 161, 278, -212, 162, -72,
	-72, -72, -72, -72, 128, 125, -72, -72, -72, -160,
	120, -72, -72, -73, -72, -136, -152, -152, 64, -72,
	-146, -44, -146, 64, 73, 74, 75, -91, -83, -83,
	-83, -51, 156, 79, -229, -229, -52, -52, -228, 120,
	-5, -110, -229, -229, 58, 56, 22, 11, 11, -229,
	11, 11, -229, -229, -52, -103, -101, 86, -57, -229,
	120, -229, 58, 58, -229, -229, -229, -229, -229, -50,
	365, 370, 369, -212, 64, 58, -223, -222, -216, 62,
	88, -111, 40, -57, -57, -108, -111, -128, 19, 11,
	36, 36, -77, 12, -54, -59, -56, 120, -81, 30,
	36, -3, -228, -228, -118, -121, -99, -60, -61, -61,
	-60, -61, 45, 45, 45, 50, 45, 50, 45, -69,
	-152, -229, -229, -229, -3, -154, -76, 53, 135, 54,
	-228, -147, -77, -59, -77, -77, 120, -123, -125, 249,
	246, 252, -212, 64, 58, -199, 88, 57, -212, 28,
	-189, -189, -192, -192, 28, -174, 29, 73, -179, 227,
	65, -176, -176, -177, 30, -177, -177, -177, -185, 64,
	-185, 65, 65, 55, -146, -3, -72, -159, -217, 143,
	139, 147, 148, 141, 60, 61, 62, 132, 28, 138,
	140, 161, 137, -217, -141, -142, 134, 22, 132, 28,
	161, -214, 56, 167, 223, 167, 134, -160, -153, -132,
	-136, -114, 57, -132, -51, 79, -83, -83, -229, -229,
	-53, -147, -106, -111, -164, 114, 198, 155, 196, 192,
	212, 203, 225, 194, 226, -161, -164, -83, -83, -83,
	-83, 272, -106, 87, -57, 85, -147, -83, -83, 64,
	-221, 88, -82, 41, -72, -104, 13, -57, 105, -117,
	55, -118, -93, -95, -94, -228, -112, -146, -116, -146,
	-58, 58, 88, -64, -63, 55, 56, -65, 55, -63,
	45, 45, -229, 132, 132, 132, -116, -106, -77, 246,
	250, 251, -198, -199, -202, -201, -146, -205, -192, -192,
	57, -175, 55, -83, 59, -177, -177, -212, 114, 59,
	58, 59, 58, 59, 58, -72, 22, -159, -159, -72,
	-159, -146, -211, 275, -213, -212, -146, -146, -146, -72,
	120, -136, -136, -113, -146, -136, -83, -229, -110, -229,
	-172, -172, -172, -181, -172, 186, -172, 186, -229, -229,
	19, 19, 19, 19, -228, -49, 268, -57, 58, 58,
	64, -82, -105, 14, 16, 27, -117, 58, -229, -229,
	58, 120, -229, 58, -77, -121, -57, -57, 57, -57,
	-228, -228, -228, -229, -110, 59, 58, -172, -113, -183,
	223, 9, -176, 64, -176, 65, 65, -160, -3, 26,
	-210, -209, -147, 57, 56, -153, 59, 58, -111, -176,
	-212, -83, -83, -83, -83, -83, -110, 64, -83, -83,
	-57, -92, 28, -95, 36, -3, -146, -146, -146, -106,
	-113, -113, -229, -113, -113, -155, -204, -203, 56, 142,
	71, -201, 59, -184, 138, 28, 137, -86, -177, -177,
	59, 59, -228, 58, 88, -113, -72, -146, -229, -229,
	-229, -229, -48, 98, 275, -229, -229, -229, 9, -93,
	120, -110, 59, -229, -229, -229, -76, -203, -212, -193,
	88, 64, 150, -173, 71, 28, 28, -206, -207, 161,
	-209, -199, 59, -229, 273, 52, 276, -118, -146, 65,
	-72, 64, -229, 58, -146, -214, 41, 274, 277, 57,
	-207, 36, -211, 41, -113, 163, 275, 59, 164, 276,
	-219, -220, 55, -228, 277, -220, 55, 10, 9, -83,
	160, -218, 151, 146, 149, 30, -218, -229, -229, 145,
	29, 73,
}

var yyDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 661, 0, 391, 391, 391, 391, 391,
	391, 0, -2, 717, 0, 0, 0, 0, -2, 356,
	357, 0, 359, -2, 0, 0, -2, 1065, 1065, 0,
	0, 1065, 0, 0, 391, 0, 391, 391, 1063, 53,
	54, 374, 375, 376, 95, 1, 3, 0, 395, 669,
	0, 0, -2, 393, 0, 717, 717, 0, 0, 87,
	88, 0, 0, 0, 0, 0, 715, 715, 0, 735,
	736, -2, -2, -2, 739, 740, 35, 36, 37, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 0, 0, 0, 0, 0, 718, 0,
	713, 0, 713, 713, 713, 0, 303, 478, 743, 744,
	952, 1030, 1031, 0, 0, 0, 347, 0, 1066, 315,
	0, 317, 1066, 0, 1066, 0, 324, 0, 0, 330,
	231, 0, 339, 353, 354, 341, 355, 358, 0, 363,
	366, 0, 338, 0, 0, 373, 386, 387, 1065, 1065,
	390, 40, 534, 490, 0, 497, -2, 0, 536, 537,
	538, 539, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 568, 569, 570, 646, 647, 648,
	649, 650, 651, 652, 653, 501, 502, 643, 0, 691,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 604, 604, 604, 604, 604, 604, 604, 604, 0,
	0, 0, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 216, 755, 0, 661, 49, 0, 391, 396, 397,
	673, 0, 0, 661, 1064, 0, 0, -2, -2, 407,
	413, 414, 415, 416, 392, 0, 419, 424, 0, 0,
	0, 0, 0, 0, 62, 64, 478, 68, 0, 1041,
	695, -2, -2, 0, 0, 741, 742, -2, 890, -2,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 0, 0,
	121, 0, 119, 0, 0, 85, 0, 0, 0, 715,
	0, 1066, 1066, 1066, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 304, 1066,
	347, 307, 0, 0, 1066, 1066, 1066, 0, 1066, 1066,
	314, 1067, 1068, 0, 347, 391, 224, 225, 226, 318,
	1066, 1066, 320, 0, 344, 342, 343, 336, 337, 0,
	350, 327, 328, 333, 232, 0, 364, 367, 0, 385,
	377, 378, 379, 380, 0, 388, 389, 0, 0, 0,
	0, 0, 496, 531, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 521, 522, 523, 524,
	525, 498, 0, 512, 0, 0, 0, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 0, 566, 404, 0,
	0, 0, 661, 0, 0, 0, 0, 0, 0, 0,
	401, 0, 635, 0, 588, 596, 0, 589, 597, 590,
	598, 591, 0, 592, 599, 593, 600, 594, 595, 601,
	0, 0, 0, 404, 404, 0, 0, 231, 231, 0,
	105, 751, 756, 757, 669, 0, 406, 41, 0, 0,
	670, 662, 663, 666, 669, 0, 429, 417, 408, 411,
	412, 394, 0, -2, 421, 425, 0, 427, 428, 0,
	66, 0, 477, 0, 431, 433, 434, 435, 459, 0,
	461, 461, 0, 478, -2, 0, 0, 0, 60, 61,
	0, 0, 0, 0, 1041, 696, 70, 71, 0, 0,
	0, 0, 199, 708, 709, 710, 706, 249, 0, 0,
	187, 183, 127, 128, 129, 176, 131, 176, 176, 176,
	176, 196, 196, 196, 196, 159, 160, 161, 162, 163,
	0, 0, 146, 176, 176, 176, 150, 166, 167, 168,
	169, 170, 171, 172, 173, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 178, 178, 178, 180, 180, 737,
	0, 0, 86, 1066, 0, 1066, 0, 0, 263, 265,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	714, 0, 1066, 300, 301, 479, 745, 746, 305, 306,
	348, 349, 308, 309, 310, 311, 312, 313, 0, 227,
	228, 0, 332, 0, 319, 323, 0, 347, 0, 0,
	325, 326, 0, 0, 335, 0, 365, 381, 369, 370,
	371, 372, 535, 491, 492, 493, 495, 513, 0, 515,
	517, 532, 503, 504, 528, 529, 530, 0, 0, 0,
	0, 526, 508, 0, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 555, 619, 620, 0,
	553, 554, 565, 0, 0, 0, 405, 644, 0, -2,
	0, 533, 690, 669, 0, 0, 0, 0, 538, 646,
	0, 538, 646, 0, 0, 0, 402, 403, 641, 638,
	0, 0, 643, 0, 605, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 99, 102, 103, 104, 749, 752,
	0, 38, 673, 50, 674, 0, 0, 0, 0, 665,
	667, 668, 673, 0, 654, 0, 0, 488, 0, 0,
	409, 47, 426, 422, 0, 0, 0, 476, 0, 0,
	0, 0, 0, 0, 466, 0, 0, 469, 0, 0,
	0, 0, 460, 0, 0, 0, 0, 439, 462, 0,
	464, 465, 483, 978, 0, 488, 0, 488, 63, 488,
	65, 0, 482, 697, 69, 0, 0, 74, 75, 698,
	699, 700, 701, 702, 703, 704, 0, 118, 250, 252,
	255, 256, 257, 122, 123, 124, 0, 0, 237, 0,
	0, 231, 231, 0, 229, 230, 120, 190, 188, 0,
	185, 184, 130, 0, 196, 196, 153, 154, 199, 0,
	199, 199, 199, 0, 0, 147, 148, 149, 141, 0,
	142, 143, 144, 0, 145, 0, 0, 0, 0, 92,
	716, 93, 117, 1065, 0, 0, 729, 264, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 0, 109,
	268, 270, 269, 273, 0, 0, 0, 295, 1066, 299,
	0, 344, 347, 443, 344, 322, 345, 346, 351, 329,
	361, 384, 382, 383, 514, 516, 518, 505, 526, 509,
	0, 506, 0, 0, 500, 571, 0, 0, 404, 0,
	661, 673, 575, 576, 0, 0, 0, 0, 0, 612,
	0, 0, 613, 0, 661, 0, 639, 0, 0, 587,
	0, 606, 0, 0, 607, 608, 609, 610, 611, 97,
	106, 107, 108, 100, 101, 0, 754, 750, 0, 39,
	0, 43, 0, 671, 672, 664, 42, 0, 711, 712,
	655, 656, 657, 0, 418, 430, 410, 0, 684, 0,
	0, 677, 0, 0, 429, 692, 0, 432, 455, 457,
	0, 452, 467, 468, 470, 0, 472, 0, 474, 475,
	436, 437, 438, 440, 0, 463, 441, 0, 0, 0,
	0, 0, 661, 488, 58, 59, 0, 72, 73, 0,
	0, 79, 200, 201, 0, 253, 0, 0, 0, 219,
	231, 231, 222, 223, 0, 192, 0, 189, 126, 186,
	0, 199, 199, 155, 0, 156, 157, 158, 0, 174,
	0, 0, 0, 0, 738, 90, 0, 258, 1065, 275,
	276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 1065, 0, 1065, 730, 731, 732, 733,
	0, 112, 0, 0, 0, 0, 0, 298, 480, 347,
	331, 347, 0, 347, 507, 0, 527, 510, 572, 573,
	0, 645, 669, 45, 0, 176, 176, 624, 176, 180,
	627, 176, 629, 176, 632, 0, 0, 0, 0, 0,
	0, 0, 636, 586, 642, 0, 644, 0, 0, 0,
	753, 0, 747, 675, 44, 659, 0, 489, 423, 51,
	0, 684, 676, 686, 688, 0, 0, 680, 0, 447,
	488, 0, 0, 449, 456, 0, 0, 450, 0, 451,
	471, 473, -2, 0, 0, 0, 0, 669, 57, 76,
	77, 78, 251, 254, 0, 233, 176, 236, 220, 221,
	0, 194, 0, 191, 177, 151, 152, 197, 198, 196,
	0, 196, 0, 181, 0, 1066, 0, 259, 260, 261,
	262, 0, 267, 0, 110, 111, 0, 0, 272, 296,
	0, 316, 334, 0, 445, 321, 511, 574, 673, 577,
	621, 196, 625, 626, 628, 630, 631, 633, 579, 578,
	0, 0, 0, 0, 0, 669, 0, 640, 0, 0,
	98, 748, 48, 0, 0, 0, 52, 0, 689, 0,
	0, 0, 67, 0, 661, 693, 694, 453, 0, 458,
	0, 0, 0, 461, 56, 210, 0, 235, 0, 202,
	195, 0, 199, 175, 199, 0, 0, 89, 91, 0,
	113, 114, 0, 0, 0, 481, 444, 0, 46, 622,
	623, 0, 0, 0, 0, 614, 0, 637, 0, 0,
	660, 658, 0, 687, 0, 679, 682, 681, 448, 669,
	0, 0, 485, 0, 0, 483, 209, 211, 0, 217,
	0, 234, 0, 207, 0, 204, 206, 193, 164, 165,
	179, 182, 0, 0, 0, 0, 274, 446, 580, 582,
	581, 583, 0, 0, 0, 585, 602, 603, 0, 678,
	0, 55, 454, 484, 486, 487, 442, 212, 213, 0,
	218, 215, 0, 125, 0, 203, 205, 0, 290, 0,
	115, 116, 109, 584, 0, 0, 0, 685, 683, 214,
	0, 208, 289, 0, 0, 112, 615, 0, 618, 0,
	291, 0, 271, 616, 0, 0, 0, 238, 0, 0,
	239, 240, 0, 0, 617, 241, 0, 0, 0, 0,
	0, 242, 244, 245, 0, 0, 243, 292, 293, 246,
	247, 248,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 381,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:369
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:374
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:375
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:379
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:412
		{
			setParseTree(yylex, nil)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:422
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:438
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:444
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:450
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:458
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:462
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:466
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:489
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:497
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:503
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:511
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:517
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:521
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:528
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:540
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.str = InsertStr
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:556
		{
			yyVAL.str = ReplaceStr
		}
	case 55:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:562
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), OrderBy: yyDollar[9].orderBy, Limit: yyDollar[10].limit}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:568
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:572
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:576
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:580
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:585
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:586
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:590
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:594
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:604
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:609
		{
			yyVAL.partitions = nil
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:613
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:619
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:625
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:629
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:635
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:639
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:645
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:653
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:659
		{
			yyVAL.str = RepeatableRead
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:663
		{
			yyVAL.str = ReadCommitted
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:667
		{
			yyVAL.str = ReadUncommitted
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:671
		{
			yyVAL.str = Serializable
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:677
		{
			yyVAL.str = SessionStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:681
		{
			yyVAL.str = GlobalStr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:686
		{
			yyVAL.str = ""
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:690
		{
			yyVAL.str = TempStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:694
		{
			yyVAL.str = TemporaryStr
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:699
		{
			yyVAL.str = ""
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.str = MaterializedStr
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:714
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:720
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:725
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[4].tableName.ToViewName(), SelectStatement: yyDollar[6].selStmt, Modifier: yyDollar[2].str}
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:729
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[6].tableName.ToViewName(), SelectStatement: yyDollar[8].selStmt, OrReplace: true, Modifier: yyDollar[4].str}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:733
		{
			var notExists bool
			if yyDollar[3].byt != 0 {
				notExists = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: notExists}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:741
		{
			var notExists bool
			if yyDollar[3].byt != 0 {
				notExists = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: notExists}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:750
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:754
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:760
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:765
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str}
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:770
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str, KeyFilePath: string(yyDollar[6].bytes), KeyEnvVar: string(yyDollar[7].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:775
		{
			yyVAL.statement = &AuthRevoke{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:781
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: yyDollar[5].colIdent.GetRawVal()}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:786
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: string(yyDollar[5].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:791
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:796
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:801
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: string(yyDollar[4].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:806
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.str = InteractiveStr
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.str = ServiceAccountStr
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.str = ServiceAccountStr
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:826
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:830
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:836
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:841
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:846
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:857
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:863
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:869
		{
			var notExists bool
			if yyDollar[4].byt != 0 {
				notExists = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[5].tableName, IfNotExists: notExists, Modifier: yyDollar[2].str}
			setDDL(yylex, yyVAL.ddl)
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:880
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:887
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:891
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:902
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:906
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:910
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 125:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:916
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:943
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1065
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1069
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1073
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1077
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1081
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1085
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1089
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1093
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1120
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1124
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1128
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1132
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1143
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1148
		{
			yyVAL.sqlVal = nil
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1152
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1157
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1161
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1169
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1173
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1179
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1187
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1196
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1200
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1206
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1210
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1214
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1219
		{
			yyVAL.optVal = nil
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1223
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1228
		{
			yyVAL.optVal = nil
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1232
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1237
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = ""
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1250
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1259
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1263
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1267
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1272
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1276
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1280
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1284
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1288
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1293
		{
			yyVAL.sqlVal = nil
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1297
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1303
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1307
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1313
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1317
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1323
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1327
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1332
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1338
		{
			yyVAL.statement = &Sleep{Duration: NewIntVal(yyDollar[2].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1344
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1348
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1354
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1362
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1366
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1370
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1376
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1380
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1384
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1391
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1395
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1401
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1405
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1410
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1414
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1420
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1424
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1430
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1436
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1440
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 238:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1447
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 239:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1451
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 240:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1455
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 241:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1459
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1465
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1471
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1477
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1481
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1485
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1489
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1493
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1498
		{
			yyVAL.str = ""
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1502
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1506
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1514
		{
			yyVAL.str = yyDollar[1].str
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1518
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1522
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1528
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1536
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1554
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1559
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 272:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1637
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1666
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1676
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 292:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1682
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1686
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1698
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1702
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1710
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1718
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1723
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1745
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1750
		{
			yyVAL.statement = &OtherRead{}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1756
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1761
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1766
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1776
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1780
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1784
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1788
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1792
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1796
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1800
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1804
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1809
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1813
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1817
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1821
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1825
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1830
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1840
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1844
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1848
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1852
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1861
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1865
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1869
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1873
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1890
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), ShowTablesOpt: showTablesOpt}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: yyDollar[3].str}
		}
	case 334:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1900
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Comments: Comments(yyDollar[4].bytes2), Type: string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt, Columns: yyDollar[6].columns}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1906
		{
			yyVAL.statement = &Show{Type: "TRANSACTION_ISOLATION_LEVEL"}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1916
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1922
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1926
		{
			yyVAL.str = "extended "
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1932
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1936
		{
			yyVAL.str = "full "
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1942
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1960
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1966
		{
			yyVAL.showFilter = nil
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1970
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1974
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1980
		{
			yyVAL.showFilter = nil
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1984
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1990
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1994
		{
			yyVAL.str = SessionStr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1998
		{
			yyVAL.str = GlobalStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2004
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2014
		{
			yyVAL.statement = &Begin{}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2018
		{
			yyVAL.statement = &Begin{}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2024
		{
			yyVAL.statement = &Commit{}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2030
		{
			yyVAL.statement = &Rollback{}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2034
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2039
		{
			yyVAL.empty = struct{}{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.empty = struct{}{}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2044
		{
			yyVAL.empty = struct{}{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2046
		{
			yyVAL.empty = struct{}{}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2057
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2062
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = JSONStr
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2070
		{
			yyVAL.str = TreeStr
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2074
		{
			yyVAL.str = VitessStr
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2078
		{
			yyVAL.str = TraditionalStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2082
		{
			yyVAL.str = AnalyzeStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2088
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2092
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2096
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2106
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = ""
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = ""
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2133
		{
			yyVAL.statement = &DescribeTable{Full: string(yyDollar[2].str), Extended: string(yyDollar[3].str), Table: yyDollar[4].tableName}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2143
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2147
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2151
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2155
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2161
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2165
		{
			setAllowComments(yylex, true)
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2169
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2175
		{
			yyVAL.bytes2 = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2179
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.str = UnionStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.str = UnionAllStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			yyVAL.str = UnionDistinctStr
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = ""
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = SQLCacheStr
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2211
		{
			yyVAL.str = ""
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2215
		{
			yyVAL.str = DistinctStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2219
		{
			yyVAL.str = DistinctStr
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2224
		{
			yyVAL.selectExprs = nil
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2228
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2233
		{
			yyVAL.strs = nil
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2237
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2241
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2245
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2249
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2259
		{
			yyVAL.str = SQLCacheStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2263
		{
			yyVAL.str = DistinctStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.str = DistinctStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2271
		{
			yyVAL.str = StraightJoinHint
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2275
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2281
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2285
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2295
		{
			concatamer := ListArgConcatamer(yyDollar[2].listArgsConcat)
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: NewColIdent(concatamer.String())}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2300
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2304
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2308
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2313
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2317
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2321
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2328
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2333
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2337
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2343
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2347
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2357
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2361
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2365
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2369
		{
			exec := yyDollar[2].statement.(*Exec)
			yyVAL.tableExpr = &ExecSubquery{Exec: exec}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2374
		{
			yyVAL.tableExpr = &TableValuedFuncTableExpr{FuncExpr: yyDollar[1].expr, As: yyDollar[2].tableIdent}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2380
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2386
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 442:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2390
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2395
		{
			yyVAL.columns = nil
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2406
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2410
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2416
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2420
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2433
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2437
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2441
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2453
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2457
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2459
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2463
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2465
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2468
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2470
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2473
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2477
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2488
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2494
		{
			yyVAL.str = JoinStr
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2498
		{
			yyVAL.str = JoinStr
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2502
		{
			yyVAL.str = JoinStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2508
		{
			yyVAL.str = StraightJoinStr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.str = LeftJoinStr
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2518
		{
			yyVAL.str = LeftOuterJoinStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2522
		{
			yyVAL.str = RightJoinStr
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2526
		{
			yyVAL.str = RightOuterJoinStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2532
		{
			yyVAL.str = NaturalJoinStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2550
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2556
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2560
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2564
		{
			yyVAL.tableName = TableName{QualifierSecond: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2568
		{
			yyVAL.tableName = TableName{QualifierThird: yyDollar[1].tableIdent, QualifierSecond: yyDollar[3].tableIdent, Qualifier: yyDollar[5].tableIdent, Name: yyDollar[7].tableIdent}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2574
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2579
		{
			yyVAL.indexHints = nil
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2583
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2587
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2591
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2595
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = nil
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &UnaryCastConcatamerExpr{Expr: yyDollar[1].expr, CastConcatamer: ListArgConcatamer(yyDollar[2].listArgsConcat)}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2648
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2652
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2662
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2680
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2684
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 511:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.str = IsNullStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = IsNotNullStr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.str = IsTrueStr
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.str = IsNotTrueStr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.str = IsFalseStr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.str = IsNotFalseStr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			yyVAL.str = EqualStr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2740
		{
			yyVAL.str = LessThanStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2744
		{
			yyVAL.str = GreaterThanStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2748
		{
			yyVAL.str = LessEqualStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2752
		{
			yyVAL.str = GreaterEqualStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2756
		{
			yyVAL.str = NotEqualStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2760
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2775
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2779
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2783
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2788
		{
			yyVAL.listArgsConcat = []ListArg{ListArg(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2792
		{
			yyVAL.listArgsConcat = append(yyDollar[1].listArgsConcat, ListArg(yyDollar[2].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2798
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2804
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2808
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2914
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2922
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2940
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2944
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2952
		{
			inputStr := string(yyDollar[2].bytes)
			stringList := strings.Split(inputStr, " ")
			if len(stringList) != 2 {
				yylex.Error("the interval string '" + inputStr + "' is not valid")
				return 1
			}
			stringExpr := NewStrVal([]byte(stringList[0]))
			yyVAL.expr = &IntervalExpr{Expr: stringExpr, Unit: stringList[1]}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2973
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2977
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2981
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2995
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2999
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3003
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3007
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 579:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 581:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 582:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3023
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3027
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 584:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3031
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 585:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3053
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3057
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3061
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3071
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3076
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3087
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3105
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3110
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3115
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3119
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 603:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3123
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3133
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3151
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3155
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3159
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3163
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3167
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3173
		{
			yyVAL.str = ""
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3177
		{
			yyVAL.str = BooleanModeStr
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3181
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 617:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3185
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3189
		{
			yyVAL.str = QueryExpansionStr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3205
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3209
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3213
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3221
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3225
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3235
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3243
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3247
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3255
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3260
		{
			yyVAL.expr = nil
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3264
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3269
		{
			yyVAL.str = string("")
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3273
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3279
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3283
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3289
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3294
		{
			yyVAL.expr = nil
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3298
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3308
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3312
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3318
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3322
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3326
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3330
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3334
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3338
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3342
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3346
		{
			yyVAL.expr = &NullVal{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3352
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3361
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3365
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3370
		{
			yyVAL.exprs = nil
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3374
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3379
		{
			yyVAL.expr = nil
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3383
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3388
		{
			yyVAL.orderBy = nil
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3392
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3398
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3402
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3408
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3413
		{
			yyVAL.str = AscScr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3417
		{
			yyVAL.str = AscScr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3421
		{
			yyVAL.str = DescScr
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3426
		{
			yyVAL.limit = nil
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3430
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3434
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3438
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3443
		{
			yyVAL.str = ""
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3447
		{
			yyVAL.str = ForUpdateStr
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3451
		{
			yyVAL.str = ShareModeStr
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3464
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3468
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3472
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3476
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3482
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3486
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3490
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3494
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3499
		{
			yyVAL.updateExprs = nil
		}
	case 685:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3503
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3509
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3513
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3519
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3523
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3529
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3535
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3545
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3549
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3555
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3561
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3565
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3570
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3576
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3580
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3584
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3588
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3592
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3596
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3600
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3607
		{
			yyVAL.bytes = []byte("charset")
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3614
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3618
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3622
		{
			yyVAL.expr = &Default{}
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3631
		{
			yyVAL.byt = 0
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3633
		{
			yyVAL.byt = 1
		}
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3636
		{
			yyVAL.byt = 0
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3638
		{
			yyVAL.byt = 1
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3641
		{
			yyVAL.str = ""
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3643
		{
			yyVAL.str = IgnoreStr
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3647
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3649
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3651
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3653
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3655
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3657
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3659
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3661
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3663
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3665
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3668
		{
			yyVAL.empty = struct{}{}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3670
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3672
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3676
		{
			yyVAL.empty = struct{}{}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3678
		{
			yyVAL.empty = struct{}{}
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3681
		{
			yyVAL.empty = struct{}{}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3683
		{
			yyVAL.empty = struct{}{}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3685
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3688
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3690
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3694
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3698
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3705
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3711
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3715
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3722
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3728
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3734
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3740
		{
			yyVAL.execVarDefOpt = nil
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3742
		{
			rv := yyDollar[1].execVarDef
			yyVAL.execVarDefOpt = &rv
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3748
		{
			yyVAL.execVarDefs = nil
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3750
		{
			yyVAL.execVarDefs = []ExecVarDef{yyDollar[1].execVarDef}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3754
		{
			yyVAL.execVarDefs = append(yyDollar[1].execVarDefs, yyDollar[3].execVarDef)
		}
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3761
		{
			yyVAL.statement = NewExec(yyDollar[2].bytes2, yyDollar[3].tableName, yyDollar[4].execVarDefs, yyDollar[5].execVarDefOpt)
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3767
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, TableName{}, true)
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3771
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, yyDollar[3].tableName, false)
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3777
		{
			yyVAL.statement = NewNativeQuery(yyDollar[2].bytes2, string(yyDollar[3].bytes))
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4109
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4118
		{
			decNesting(yylex)
		}
	case 1065:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4123
		{
			skipToEnd(yylex)
		}
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4128
		{
			skipToEnd(yylex)
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4132
		{
			skipToEnd(yylex)
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4136
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
