// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "strings"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:55
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	execsubquery         *ExecSubquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	execVarDef           ExecVarDef
	execVarDefOpt        *ExecVarDef
	execVarDefs          []ExecVarDef
	listArgsConcat       []ListArg
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688
const AUTH = 57689
const INTERACTIVE = 57690
const LOGIN = 57691
const MATERIALIZED = 57692
const REVOKE = 57693
const SA = 57694
const SERVICEACCOUNT = 57695
const SLEEP = 57696
const TEMP = 57697
const TEMPORARY = 57698
const REGISTRY = 57699
const PULL = 57700
const LIST = 57701
const EXEC = 57702
const PURGE = 57703
const NATIVEQUERY = 57704
const STACKQL = 57705

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"AUTH",
	"INTERACTIVE",
	"LOGIN",
	"MATERIALIZED",
	"REVOKE",
	"SA",
	"SERVICEACCOUNT",
	"SLEEP",
	"TEMP",
	"TEMPORARY",
	"REGISTRY",
	"PULL",
	"LIST",
	"EXEC",
	"PURGE",
	"NATIVEQUERY",
	"STACKQL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	364, 94,
	374, 94,
	-2, 34,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	169, 353,
	170, 353,
	230, 341,
	234, 341,
	235, 341,
	236, 341,
	-2, 339,
	-1, 53,
	134, 363,
	-2, 361,
	-1, 56,
	6, 369,
	8, 369,
	9, 369,
	10, 369,
	57, 369,
	262, 369,
	-2, 341,
	-1, 82,
	38, 399,
	-2, 407,
	-1, 103,
	132, 1031,
	-2, 82,
	-1, 104,
	132, 1032,
	-2, 83,
	-1, 357,
	80, 904,
	82, 904,
	88, 904,
	89, 904,
	90, 904,
	91, 904,
	92, 904,
	93, 904,
	94, 904,
	96, 904,
	97, 904,
	98, 904,
	99, 904,
	100, 904,
	101, 904,
	102, 904,
	103, 904,
	104, 904,
	105, 904,
	106, 904,
	107, 904,
	108, 904,
	109, 904,
	110, 904,
	113, 904,
	120, 904,
	121, 904,
	122, 904,
	-2, 500,
	-1, 417,
	120, 744,
	-2, 740,
	-1, 418,
	120, 745,
	-2, 741,
	-1, 438,
	38, 400,
	-2, 412,
	-1, 439,
	38, 401,
	-2, 413,
	-1, 462,
	88, 1019,
	-2, 80,
	-1, 463,
	88, 925,
	-2, 81,
	-1, 468,
	88, 892,
	134, 892,
	-2, 706,
	-1, 470,
	88, 961,
	134, 961,
	-2, 708,
	-1, 786,
	1, 421,
	5, 421,
	11, 421,
	12, 421,
	13, 421,
	14, 421,
	15, 421,
	17, 421,
	19, 421,
	31, 421,
	55, 421,
	58, 421,
	59, 421,
	268, 421,
	381, 421,
	-2, 497,
	-1, 804,
	56, 62,
	58, 62,
	-2, 66,
	-1, 991,
	120, 747,
	-2, 743,
	-1, 1464,
	5, 662,
	17, 662,
	19, 662,
	31, 662,
	59, 662,
	-2, 441,
}

const yyPrivate = 57344

const yyLast = 18996

var yyAct = [...]int{
	417, 1714, 1704, 1505, 1671, 1383, 361, 1286, 1584, 1516,
	1109, 1620, 390, 1307, 376, 1444, 1477, 1079, 1287, 1441,
	777, 1445, 624, 1152, 635, 907, 1105, 81, 3, 1118,
	359, 724, 1108, 1450, 1456, 1049, 1138, 347, 1274, 656,
	1031, 978, 431, 105, 467, 1406, 1360, 308, 1213, 1349,
	308, 929, 1122, 817, 79, 105, 1075, 1081, 985, 1064,
	770, 440, 780, 775, 1011, 797, 33, 425, 793, 363,
	461, 798, 788, 816, 955, 77, 920, 1148, 591, 456,
	453, 598, 806, 675, 737, 76, 7, 1057, 308, 105,
	82, 803, 592, 308, 352, 308, 348, 762, 763, 351,
	419, 760, 738, 761, 881, 940, 346, 1252, 315, 6,
	420, 1254, 1253, 464, 5, 613, 1707, 318, 321, 1691,
	1702, 1679, 1699, 1506, 1690, 325, 1678, 84, 85, 86,
	87, 88, 1423, 1539, 596, 1472, 1473, 35, 306, 69,
	38, 39, 1321, 1471, 426, 1320, 1096, 446, 1322, 1097,
	1098, 818, 633, 819, 936, 421, 658, 423, 424, 323,
	333, 350, 650, 1175, 349, 330, 651, 648, 649, 332,
	304, 300, 301, 302, 1340, 1131, 1573, 1174, 1385, 455,
	600, 601, 1139, 1530, 593, 1528, 595, 340, 68, 655,
	938, 342, 1132, 338, 653, 316, 1387, 402, 893, 408,
	409, 406, 407, 405, 404, 403, 643, 644, 107, 108,
	109, 896, 336, 410, 411, 107, 108, 109, 988, 1173,
	1701, 895, 327, 319, 1698, 328, 329, 336, 1672, 1382,
	1058, 320, 322, 333, 1386, 317, 335, 334, 1646, 685,
	684, 694, 695, 687, 688, 689, 690, 691, 692, 693,
	686, 654, 897, 696, 941, 942, 943, 894, 1665, 1718,
	1123, 1722, 107, 108, 109, 599, 1621, 820, 1308, 1310,
	614, 1379, 1170, 1167, 1168, 296, 1166, 1381, 294, 298,
	298, 1623, 1653, 1388, 900, 659, 1125, 1159, 603, 597,
	1467, 1466, 1465, 594, 303, 308, 605, 606, 602, 1628,
	308, 314, 615, 299, 708, 709, 308, 1554, 1125, 1177,
	1180, 1187, 1513, 821, 1186, 308, 622, 1317, 1407, 628,
	105, 1279, 637, 1232, 105, 1229, 105, 1242, 1370, 1221,
	1092, 1192, 657, 630, 812, 632, 792, 722, 882, 345,
	107, 108, 109, 105, 620, 686, 1106, 1677, 696, 1172,
	1309, 638, 1622, 696, 1037, 930, 1139, 934, 331, 1409,
	1366, 1367, 1368, 107, 108, 109, 626, 629, 631, 1663,
	921, 1171, 663, 1637, 91, 1716, 640, 297, 1717, 1454,
	1715, 1380, 1433, 1378, 676, 1262, 604, 668, 669, 667,
	1124, 612, 1425, 70, 671, 851, 1411, 619, 1415, 295,
	1410, 610, 1408, 107, 108, 109, 621, 1413, 1629, 1627,
	674, 1176, 1124, 92, 1012, 1647, 1412, 1490, 616, 617,
	618, 1012, 308, 1239, 308, 885, 1178, 1667, 706, 1414,
	1416, 666, 1369, 708, 709, 708, 709, 1374, 1371, 1362,
	1372, 1365, 931, 1361, 676, 1338, 767, 1363, 1364, 105,
	625, 308, 308, 308, 664, 768, 627, 922, 725, 665,
	105, 1373, 661, 784, 953, 1128, 105, 962, 68, 607,
	674, 608, 1129, 1682, 609, 639, 642, 1579, 645, 839,
	958, 960, 961, 959, 464, 1723, 1578, 641, 740, 742,
	744, 746, 748, 750, 751, 689, 690, 691, 692, 693,
	686, 1353, 781, 696, 1352, 1341, 741, 743, 796, 747,
	749, 422, 752, 764, 1684, 765, 1206, 1207, 1208, 769,
	852, 687, 688, 689, 690, 691, 692, 693, 686, 1724,
	815, 696, 786, 805, 1664, 921, 626, 810, 293, 107,
	108, 109, 795, 980, 804, 1600, 865, 868, 869, 870,
	871, 872, 873, 1576, 874, 875, 876, 877, 878, 853,
	854, 855, 856, 837, 838, 866, 1543, 840, 1431, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 857,
	858, 859, 860, 861, 862, 863, 864, 1227, 1033, 1226,
	1350, 308, 107, 108, 109, 879, 1324, 1200, 308, 884,
	676, 886, 308, 912, 308, 105, 105, 105, 672, 673,
	671, 308, 766, 435, 308, 1125, 1634, 308, 905, 906,
	625, 308, 922, 105, 450, 451, 674, 676, 105, 105,
	105, 308, 105, 105, 1633, 672, 673, 671, 867, 1039,
	107, 108, 109, 1427, 105, 105, 911, 107, 108, 109,
	949, 951, 952, 674, 1257, 1275, 779, 950, 1261, 1486,
	924, 78, 308, 1590, 1700, 909, 685, 684, 694, 695,
	687, 688, 689, 690, 691, 692, 693, 686, 676, 1038,
	696, 808, 829, 1126, 888, 1453, 672, 673, 671, 883,
	676, 1550, 956, 887, 901, 889, 670, 979, 672, 673,
	671, 1061, 898, 1636, 674, 455, 981, 68, 904, 107,
	108, 109, 1686, 435, 923, 435, 674, 1590, 1675, 1124,
	105, 1228, 917, 1214, 1121, 1119, 809, 1120, 811, 925,
	1590, 435, 1590, 1655, 1117, 1123, 1494, 1000, 1003, 982,
	983, 1590, 1625, 1013, 808, 590, 995, 989, 990, 957,
	1590, 1589, 1061, 939, 105, 105, 1325, 890, 891, 892,
	1095, 657, 657, 1027, 1028, 1569, 1568, 991, 676, 107,
	108, 109, 1692, 1256, 725, 910, 672, 673, 671, 105,
	914, 915, 916, 676, 918, 919, 308, 1042, 1043, 809,
	105, 807, 673, 671, 674, 308, 926, 927, 1245, 992,
	1025, 1026, 1244, 308, 308, 1556, 435, 308, 308, 674,
	1034, 308, 308, 308, 105, 1021, 1022, 989, 1056, 1051,
	1044, 107, 108, 109, 1051, 1029, 1553, 435, 105, 592,
	1077, 80, 676, 1496, 1495, 1492, 1493, 991, 464, 1586,
	672, 673, 671, 1052, 379, 378, 381, 382, 383, 384,
	1492, 1491, 1110, 380, 385, 1050, 435, 909, 674, 1061,
	435, 35, 1054, 1087, 670, 435, 1453, 1089, 828, 827,
	1442, 1050, 1050, 1453, 1050, 1060, 35, 1053, 807, 1140,
	1141, 1142, 308, 428, 1093, 105, 1059, 105, 1094, 308,
	1179, 1090, 1085, 35, 308, 308, 308, 308, 308, 1088,
	308, 308, 1154, 1061, 308, 105, 1607, 1113, 1157, 1086,
	1040, 807, 68, 1384, 899, 418, 813, 1281, 1133, 1561,
	1153, 308, 1482, 1282, 308, 1394, 308, 68, 1328, 308,
	1149, 308, 308, 1144, 68, 1143, 308, 1587, 105, 326,
	105, 1457, 1458, 1709, 68, 996, 997, 1156, 1705, 1002,
	1005, 1006, 1197, 1150, 1151, 1484, 1460, 1442, 106, 1354,
	935, 903, 309, 1298, 1296, 309, 1463, 1462, 1299, 1297,
	106, 1295, 956, 1158, 1020, 1294, 441, 1023, 1024, 1300,
	1164, 1070, 1071, 1696, 1689, 1181, 1182, 1183, 1184, 1185,
	442, 1188, 1189, 1435, 1195, 1190, 343, 782, 783, 444,
	441, 443, 1264, 309, 106, 778, 1694, 1273, 309, 1272,
	309, 1345, 1193, 826, 442, 1194, 623, 795, 1337, 1669,
	1196, 438, 439, 444, 1668, 443, 1008, 1201, 1255, 957,
	1134, 1135, 1136, 1137, 1209, 1605, 1335, 1161, 1223, 1163,
	1009, 771, 1330, 1548, 1582, 1499, 1145, 1146, 1147, 1162,
	902, 1356, 308, 772, 1160, 1074, 880, 1191, 432, 426,
	1222, 80, 308, 308, 308, 308, 308, 1288, 429, 430,
	1271, 1547, 433, 1438, 308, 1238, 1546, 1275, 1270, 308,
	652, 1711, 1710, 308, 1233, 1283, 1230, 308, 1711, 928,
	1066, 1069, 1070, 1071, 1067, 1263, 1068, 1072, 785, 1651,
	1457, 1458, 1574, 1036, 1267, 1268, 1306, 1323, 1277, 105,
	428, 78, 83, 1276, 1278, 1076, 29, 75, 1329, 1326,
	1, 1030, 657, 657, 1313, 1258, 1315, 1289, 1316, 1259,
	1292, 1703, 1301, 1110, 1290, 1291, 435, 1293, 1260, 1032,
	1312, 1507, 1583, 1314, 1066, 1069, 1070, 1071, 1067, 1318,
	1068, 1072, 1169, 1670, 1619, 1476, 1116, 105, 1107, 90,
	308, 1333, 1334, 589, 89, 1344, 1662, 1346, 1347, 1348,
	636, 1342, 1343, 1331, 1332, 1115, 685, 684, 694, 695,
	687, 688, 689, 690, 691, 692, 693, 686, 1358, 1114,
	696, 105, 1626, 308, 1351, 1572, 1127, 1339, 1130, 1483,
	1336, 1666, 834, 1359, 832, 1218, 1219, 833, 831, 836,
	309, 835, 830, 324, 1375, 309, 459, 1392, 1390, 937,
	339, 309, 105, 1073, 822, 1155, 1236, 787, 979, 93,
	309, 1377, 1376, 1165, 933, 106, 646, 909, 647, 106,
	704, 106, 1269, 1404, 100, 1391, 1403, 1319, 1395, 465,
	458, 1357, 1393, 1448, 1041, 774, 1545, 1424, 106, 1396,
	1437, 1237, 734, 1010, 801, 362, 948, 1428, 990, 1417,
	308, 377, 374, 375, 1418, 1045, 1280, 678, 360, 1402,
	105, 354, 800, 1065, 1405, 105, 105, 991, 1288, 1443,
	1063, 1062, 454, 1434, 1459, 1446, 1455, 799, 1432, 437,
	1251, 1538, 1645, 436, 1403, 1007, 56, 1203, 344, 37,
	445, 1016, 105, 63, 32, 31, 28, 30, 27, 22,
	21, 20, 1452, 19, 18, 24, 105, 1461, 105, 105,
	17, 16, 657, 657, 1469, 15, 611, 309, 1475, 309,
	41, 26, 25, 1389, 14, 1468, 1489, 13, 12, 11,
	1110, 10, 1110, 1470, 9, 308, 8, 4, 1474, 1479,
	662, 1436, 23, 723, 106, 2, 309, 309, 309, 1487,
	1488, 1480, 1481, 0, 0, 106, 0, 308, 1542, 0,
	0, 106, 0, 105, 1498, 1508, 105, 105, 105, 308,
	0, 0, 0, 434, 0, 105, 0, 0, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 1541, 0, 0,
	0, 0, 0, 1501, 1514, 1503, 1515, 0, 1518, 685,
	684, 694, 695, 687, 688, 689, 690, 691, 692, 693,
	686, 0, 0, 696, 0, 1526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 1521, 685, 684,
	694, 695, 687, 688, 689, 690, 691, 692, 693, 686,
	1288, 0, 696, 1549, 1544, 0, 0, 0, 1502, 0,
	0, 0, 1558, 0, 0, 105, 0, 0, 0, 0,
	1512, 0, 0, 105, 0, 1326, 0, 0, 0, 0,
	0, 1557, 1571, 0, 0, 0, 0, 0, 105, 1110,
	0, 0, 0, 0, 0, 0, 309, 105, 0, 0,
	0, 0, 1567, 309, 308, 0, 0, 309, 0, 309,
	106, 106, 106, 0, 0, 1593, 309, 1581, 1575, 309,
	1577, 1585, 309, 0, 391, 34, 309, 0, 106, 1588,
	0, 0, 0, 106, 106, 106, 309, 106, 106, 0,
	0, 0, 0, 0, 105, 105, 0, 105, 909, 106,
	106, 1592, 105, 1446, 105, 105, 105, 308, 0, 34,
	105, 1613, 1606, 1614, 1616, 1617, 0, 309, 1612, 1604,
	1608, 1599, 1591, 0, 1618, 0, 1624, 105, 308, 1630,
	0, 105, 0, 0, 0, 0, 1638, 0, 0, 0,
	1523, 1524, 1631, 1525, 1632, 0, 1527, 0, 1529, 0,
	0, 0, 427, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 1661, 1652, 0, 0, 0, 0, 0, 0,
	0, 1660, 1659, 0, 0, 106, 0, 105, 105, 0,
	0, 0, 0, 0, 0, 1673, 0, 0, 1674, 0,
	1580, 1536, 0, 0, 105, 1654, 0, 0, 1288, 1680,
	0, 1585, 1110, 0, 0, 0, 308, 0, 0, 106,
	106, 1570, 0, 105, 0, 0, 0, 0, 0, 1639,
	0, 1688, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1693, 1695, 105, 106, 0, 0, 1535, 0, 0,
	0, 309, 1697, 0, 0, 106, 1708, 0, 0, 0,
	309, 0, 0, 1719, 0, 0, 0, 0, 309, 309,
	0, 0, 309, 309, 0, 0, 309, 309, 309, 106,
	0, 685, 684, 694, 695, 687, 688, 689, 690, 691,
	692, 693, 686, 106, 1534, 696, 0, 0, 35, 36,
	69, 38, 39, 0, 448, 0, 0, 1683, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 40, 59, 60, 0, 62, 685, 684, 694,
	695, 687, 688, 689, 690, 691, 692, 693, 686, 0,
	0, 696, 0, 0, 0, 49, 0, 309, 0, 68,
	106, 0, 106, 0, 309, 0, 0, 0, 0, 309,
	309, 309, 309, 309, 0, 309, 309, 353, 0, 309,
	106, 0, 0, 1533, 685, 684, 694, 695, 687, 688,
	689, 690, 691, 692, 693, 686, 309, 0, 696, 309,
	0, 309, 0, 0, 309, 0, 309, 309, 0, 0,
	0, 309, 0, 106, 634, 106, 0, 0, 634, 0,
	634, 0, 0, 0, 0, 42, 43, 45, 44, 47,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 705, 707, 48, 72, 71, 0, 0, 57,
	58, 46, 0, 685, 684, 694, 695, 687, 688, 689,
	690, 691, 692, 693, 686, 50, 51, 696, 52, 53,
	54, 55, 0, 721, 0, 0, 0, 726, 727, 728,
	729, 730, 731, 732, 733, 0, 736, 739, 739, 739,
	745, 739, 739, 745, 739, 753, 754, 755, 756, 757,
	758, 759, 694, 695, 687, 688, 689, 690, 691, 692,
	693, 686, 34, 0, 696, 0, 0, 309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 309, 309, 309,
	309, 309, 0, 356, 0, 1397, 802, 0, 0, 309,
	0, 0, 0, 0, 309, 0, 388, 0, 309, 0,
	0, 0, 309, 0, 70, 685, 684, 694, 695, 687,
	688, 689, 690, 691, 692, 693, 686, 0, 0, 696,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 1215, 0, 0, 993, 994, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 341, 685, 684, 694, 695, 687, 688, 689, 690,
	691, 692, 693, 686, 0, 0, 696, 0, 0, 0,
	0, 0, 106, 0, 0, 309, 0, 0, 0, 0,
	1035, 0, 0, 0, 0, 466, 685, 684, 694, 695,
	687, 688, 689, 690, 691, 692, 693, 686, 0, 0,
	696, 0, 0, 0, 0, 0, 106, 0, 309, 0,
	677, 0, 0, 65, 0, 0, 0, 0, 0, 64,
	66, 67, 74, 684, 694, 695, 687, 688, 689, 690,
	691, 692, 693, 686, 0, 0, 696, 106, 0, 634,
	634, 634, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 0, 0, 0, 0, 735, 0, 634, 0, 0,
	0, 0, 634, 634, 634, 0, 634, 634, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 634, 634,
	0, 0, 0, 0, 0, 309, 0, 773, 776, 0,
	0, 0, 0, 0, 0, 106, 680, 0, 683, 0,
	106, 106, 0, 0, 697, 698, 699, 700, 701, 702,
	703, 0, 681, 682, 679, 685, 684, 694, 695, 687,
	688, 689, 690, 691, 692, 693, 686, 106, 0, 696,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 106, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 309, 1216, 0, 0, 0, 1217, 106, 0,
	0, 106, 106, 106, 309, 0, 0, 0, 1224, 1225,
	106, 0, 0, 0, 1231, 0, 466, 1234, 1235, 0,
	466, 0, 466, 0, 0, 1241, 0, 0, 0, 1243,
	0, 0, 1246, 1247, 1248, 1249, 1250, 1078, 0, 660,
	0, 802, 0, 0, 0, 802, 0, 0, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 913, 0, 0, 0, 0, 0, 1303, 1304, 1305,
	106, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 106, 0, 34, 0, 0, 0, 634,
	0, 634, 106, 0, 0, 944, 945, 946, 947, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 0, 790, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 823, 0, 0, 0, 0, 0, 0, 106,
	106, 0, 106, 0, 0, 0, 0, 106, 0, 106,
	106, 106, 309, 998, 999, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 309, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1220, 0, 0, 427, 0, 0,
	1400, 1401, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 106, 0, 0, 0, 389, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 1101, 1104, 0, 0, 0,
	0, 309, 0, 0, 0, 0, 802, 0, 106, 0,
	0, 0, 1284, 1285, 0, 0, 802, 802, 802, 802,
	802, 466, 466, 466, 307, 0, 0, 337, 106, 0,
	0, 0, 0, 1078, 0, 1311, 0, 0, 1464, 466,
	0, 802, 0, 0, 466, 466, 466, 0, 466, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	466, 466, 449, 0, 0, 457, 0, 0, 0, 0,
	307, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 954, 0, 0, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1520, 0, 984, 0, 1522, 466,
	0, 0, 0, 1017, 0, 634, 0, 0, 0, 1531,
	1532, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1018, 1019, 0, 0, 0, 0, 0, 0, 0, 1551,
	1552, 0, 1555, 0, 0, 0, 0, 1240, 0, 0,
	0, 0, 0, 0, 0, 1046, 0, 0, 0, 0,
	1566, 0, 0, 0, 0, 0, 790, 0, 0, 466,
	0, 0, 0, 1265, 1266, 776, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 1447, 0, 34,
	0, 0, 0, 0, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 1615, 0, 0, 0, 0,
	0, 466, 0, 466, 0, 0, 0, 0, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 466, 0, 0, 0, 0, 1641, 1642, 1643, 1644,
	0, 1648, 0, 1649, 1650, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1656, 0, 1657, 1658,
	0, 0, 0, 0, 1202, 0, 1204, 0, 0, 0,
	0, 0, 0, 0, 1210, 1211, 1212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1676, 1537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 307, 1685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1426, 449, 0, 0, 0, 0,
	1563, 1564, 1565, 0, 0, 0, 0, 0, 307, 307,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1720, 1721, 0, 0, 0, 0,
	1439, 0, 634, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 1355, 0, 307, 0, 0, 0, 307,
	0, 307, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 307, 0, 0, 307, 0, 0, 0, 908, 0,
	0, 0, 1540, 0, 0, 0, 0, 466, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 0, 353, 0, 0, 0, 0, 0, 0, 1559,
	0, 0, 1560, 1419, 1420, 1562, 1421, 1422, 466, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 1429, 1430,
	0, 0, 0, 0, 0, 0, 1706, 0, 0, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 466, 0, 1014, 449,
	908, 1449, 1451, 0, 449, 449, 0, 0, 449, 449,
	449, 0, 0, 0, 1015, 0, 0, 0, 0, 0,
	0, 1603, 353, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 449, 449, 449, 449, 449, 0, 0,
	0, 1485, 466, 0, 466, 1478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	908, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	307, 1083, 0, 0, 307, 307, 0, 0, 307, 1091,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 1519, 1509, 1510, 1511, 0, 0, 0, 0, 0,
	0, 1517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 0,
	1014, 307, 307, 307, 307, 307, 0, 307, 307, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 307, 1517,
	0, 307, 0, 307, 0, 0, 307, 0, 1198, 1199,
	0, 0, 0, 307, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1594, 1595, 1596,
	1597, 1598, 0, 0, 0, 1601, 1602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 449, 449, 0, 0, 0, 0,
	1609, 1610, 0, 1611, 0, 0, 0, 0, 1517, 0,
	1517, 1517, 1517, 0, 0, 449, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 0, 0, 0, 1640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 449, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 1015, 307,
	307, 307, 307, 307, 0, 0, 0, 0, 0, 0,
	0, 1302, 0, 466, 466, 0, 307, 0, 0, 0,
	1083, 0, 0, 0, 307, 0, 0, 0, 1014, 0,
	1681, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1687,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1517,
	1712, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1015,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1015, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 575, 563, 0,
	521, 578, 493, 511, 586, 512, 515, 551, 479, 533,
	202, 509, 0, 497, 474, 505, 475, 495, 523, 141,
	170, 137, 565, 536, 577, 172, 0, 498, 584, 174,
	542, 0, 253, 189, 0, 0, 0, 525, 567, 531,
	560, 520, 552, 484, 541, 579, 510, 549, 580, 0,
	0, 0, 107, 108, 109, 0, 1111, 1112, 0, 1015,
	0, 0, 0, 130, 0, 546, 574, 507, 548, 550,
	588, 473, 543, 307, 477, 480, 585, 570, 501, 502,
	1327, 0, 0, 0, 0, 0, 0, 524, 532, 557,
	518, 0, 0, 0, 0, 0, 0, 0, 0, 499,
	0, 540, 0, 0, 0, 481, 478, 0, 0, 0,
	0, 522, 0, 0, 0, 483, 0, 500, 558, 0,
	471, 150, 562, 569, 519, 313, 573, 517, 516, 576,
	221, 0, 258, 153, 171, 126, 167, 111, 122, 0,
	152, 199, 230, 234, 566, 496, 506, 134, 503, 232,
	209, 274, 539, 211, 231, 175, 264, 222, 273, 283,
	284, 261, 281, 288, 249, 115, 260, 272, 131, 243,
	0, 0, 0, 117, 270, 256, 187, 163, 164, 116,
	0, 228, 140, 148, 136, 201, 267, 268, 135, 291,
	123, 280, 119, 124, 279, 195, 263, 271, 188, 180,
	118, 269, 186, 179, 169, 144, 155, 219, 177, 220,
	156, 191, 190, 192, 0, 476, 0, 254, 277, 292,
	128, 492, 262, 286, 287, 0, 223, 129, 149, 143,
	218, 147, 193, 125, 158, 251, 168, 176, 227, 290,
	208, 233, 132, 276, 252, 488, 491, 486, 487, 534,
	535, 581, 582, 583, 559, 482, 0, 489, 490, 0,
	564, 571, 572, 538, 110, 120, 173, 289, 225, 146,
	278, 472, 485, 139, 494, 0, 0, 508, 513, 514,
	526, 527, 528, 529, 530, 537, 544, 545, 547, 553,
	554, 555, 556, 561, 568, 587, 112, 113, 121, 127,
	133, 138, 142, 145, 151, 154, 157, 159, 160, 161,
	166, 178, 182, 183, 184, 185, 196, 197, 198, 200,
	203, 204, 205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 226, 229, 235, 236, 237, 238, 239, 240,
	242, 245, 246, 247, 248, 255, 259, 265, 266, 275,
	282, 285, 0, 0, 0, 0, 114, 165, 181, 310,
	241, 244, 250, 257, 311, 312, 0, 0, 0, 504,
	224, 194, 162, 575, 563, 0, 521, 578, 493, 511,
	586, 512, 515, 551, 479, 533, 202, 509, 0, 497,
	474, 505, 475, 495, 523, 141, 170, 137, 565, 536,
	577, 172, 0, 498, 584, 174, 542, 0, 253, 189,
	0, 0, 0, 525, 567, 531, 560, 520, 552, 484,
	541, 579, 510, 549, 580, 0, 0, 0, 107, 108,
	109, 0, 1111, 1112, 0, 0, 0, 0, 0, 130,
	0, 546, 574, 507, 548, 550, 588, 473, 543, 0,
	477, 480, 585, 570, 501, 502, 0, 0, 0, 0,
	0, 0, 0, 524, 532, 557, 518, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 540, 0, 0,
	0, 481, 478, 0, 0, 0, 0, 522, 0, 0,
	0, 483, 0, 500, 558, 0, 471, 150, 562, 569,
	519, 313, 573, 517, 516, 576, 221, 0, 258, 153,
	171, 126, 167, 111, 122, 0, 152, 199, 230, 234,
	566, 496, 506, 134, 503, 232, 209, 274, 539, 211,
	231, 175, 264, 222, 273, 283, 284, 261, 281, 288,
	249, 115, 260, 272, 131, 243, 0, 0, 0, 117,
	270, 256, 187, 163, 164, 116, 0, 228, 140, 148,
	136, 201, 267, 268, 135, 291, 123, 280, 119, 124,
	279, 195, 263, 271, 188, 180, 118, 269, 186, 179,
	169, 144, 155, 219, 177, 220, 156, 191, 190, 192,
	0, 476, 0, 254, 277, 292, 128, 492, 262, 286,
	287, 0, 223, 129, 149, 143, 218, 147, 193, 125,
	158, 251, 168, 176, 227, 290, 208, 233, 132, 276,
	252, 488, 491, 486, 487, 534, 535, 581, 582, 583,
	559, 482, 0, 489, 490, 0, 564, 571, 572, 538,
	110, 120, 173, 289, 225, 146, 278, 472, 485, 139,
	494, 0, 0, 508, 513, 514, 526, 527, 528, 529,
	530, 537, 544, 545, 547, 553, 554, 555, 556, 561,
	568, 587, 112, 113, 121, 127, 133, 138, 142, 145,
	151, 154, 157, 159, 160, 161, 166, 178, 182, 183,
	184, 185, 196, 197, 198, 200, 203, 204, 205, 206,
	207, 210, 212, 213, 214, 215, 216, 217, 226, 229,
	235, 236, 237, 238, 239, 240, 242, 245, 246, 247,
	248, 255, 259, 265, 266, 275, 282, 285, 0, 0,
	0, 0, 114, 165, 181, 310, 241, 244, 250, 257,
	311, 312, 0, 0, 0, 504, 224, 194, 162, 575,
	563, 0, 521, 578, 493, 511, 586, 512, 515, 551,
	479, 533, 202, 509, 0, 497, 474, 505, 475, 495,
	523, 141, 170, 137, 565, 536, 577, 172, 0, 498,
	584, 174, 542, 0, 253, 189, 0, 0, 0, 525,
	567, 531, 560, 520, 552, 484, 541, 579, 510, 549,
	580, 68, 0, 0, 107, 108, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 546, 574, 507,
	548, 550, 588, 473, 543, 0, 477, 480, 585, 570,
	501, 502, 0, 0, 0, 0, 0, 0, 0, 524,
	532, 557, 518, 0, 0, 0, 0, 0, 0, 0,
	0, 499, 0, 540, 0, 0, 0, 481, 478, 0,
	0, 0, 0, 522, 0, 0, 0, 483, 0, 500,
	558, 0, 471, 150, 562, 569, 519, 313, 573, 517,
	516, 576, 221, 0, 258, 153, 171, 126, 167, 111,
	122, 0, 152, 199, 230, 234, 566, 496, 506, 134,
	503, 232, 209, 274, 539, 211, 231, 175, 264, 222,
	273, 283, 284, 261, 281, 288, 249, 115, 260, 272,
	131, 243, 0, 0, 0, 117, 270, 256, 187, 163,
	164, 116, 0, 228, 140, 148, 136, 201, 267, 268,
	135, 291, 123, 280, 119, 124, 279, 195, 263, 271,
	188, 180, 118, 269, 186, 179, 169, 144, 155, 219,
	177, 220, 156, 191, 190, 192, 0, 476, 0, 254,
	277, 292, 128, 492, 262, 286, 287, 0, 223, 129,
	149, 143, 218, 147, 193, 125, 158, 251, 168, 176,
	227, 290, 208, 233, 132, 276, 252, 488, 491, 486,
	487, 534, 535, 581, 582, 583, 559, 482, 0, 489,
	490, 0, 564, 571, 572, 538, 110, 120, 173, 289,
	225, 146, 278, 472, 485, 139, 494, 0, 0, 508,
	513, 514, 526, 527, 528, 529, 530, 537, 544, 545,
	547, 553, 554, 555, 556, 561, 568, 587, 112, 113,
	121, 127, 133, 138, 142, 145, 151, 154, 157, 159,
	160, 161, 166, 178, 182, 183, 184, 185, 196, 197,
	198, 200, 203, 204, 205, 206, 207, 210, 212, 213,
	214, 215, 216, 217, 226, 229, 235, 236, 237, 238,
	239, 240, 242, 245, 246, 247, 248, 255, 259, 265,
	266, 275, 282, 285, 0, 0, 0, 0, 114, 165,
	181, 310, 241, 244, 250, 257, 311, 312, 0, 0,
	0, 504, 224, 194, 162, 575, 563, 0, 521, 578,
	493, 511, 586, 512, 515, 551, 479, 533, 202, 509,
	0, 497, 474, 505, 475, 495, 523, 141, 170, 137,
	565, 536, 577, 172, 0, 498, 584, 174, 542, 0,
	253, 189, 0, 0, 0, 525, 567, 531, 560, 520,
	552, 484, 541, 579, 510, 549, 580, 0, 0, 0,
	107, 108, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 0, 546, 574, 507, 548, 550, 588, 473,
	543, 0, 477, 480, 585, 570, 501, 502, 0, 0,
	0, 0, 0, 0, 0, 524, 532, 557, 518, 0,
	0, 0, 0, 0, 0, 1440, 0, 499, 0, 540,
	0, 0, 0, 481, 478, 0, 0, 0, 0, 522,
	0, 0, 0, 483, 0, 500, 558, 0, 471, 150,
	562, 569, 519, 313, 573, 517, 516, 576, 221, 0,
	258, 153, 171, 126, 167, 111, 122, 0, 152, 199,
	230, 234, 566, 496, 506, 134, 503, 232, 209, 274,
	539, 211, 231, 175, 264, 222, 273, 283, 284, 261,
	281, 288, 249, 115, 260, 272, 131, 243, 0, 0,
	0, 117, 270, 256, 187, 163, 164, 116, 0, 228,
	140, 148, 136, 201, 267, 268, 135, 291, 123, 280,
	119, 124, 279, 195, 263, 271, 188, 180, 118, 269,
	186, 179, 169, 144, 155, 219, 177, 220, 156, 191,
	190, 192, 0, 476, 0, 254, 277, 292, 128, 492,
	262, 286, 287, 0, 223, 129, 149, 143, 218, 147,
	193, 125, 158, 251, 168, 176, 227, 290, 208, 233,
	132, 276, 252, 488, 491, 486, 487, 534, 535, 581,
	582, 583, 559, 482, 0, 489, 490, 0, 564, 571,
	572, 538, 110, 120, 173, 289, 225, 146, 278, 472,
	485, 139, 494, 0, 0, 508, 513, 514, 526, 527,
	528, 529, 530, 537, 544, 545, 547, 553, 554, 555,
	556, 561, 568, 587, 112, 113, 121, 127, 133, 138,
	142, 145, 151, 154, 157, 159, 160, 161, 166, 178,
	182, 183, 184, 185, 196, 197, 198, 200, 203, 204,
	205, 206, 207, 210, 212, 213, 214, 215, 216, 217,
	226, 229, 235, 236, 237, 238, 239, 240, 242, 245,
	246, 247, 248, 255, 259, 265, 266, 275, 282, 285,
	0, 0, 0, 0, 114, 165, 181, 310, 241, 244,
	250, 257, 311, 312, 0, 0, 0, 504, 224, 194,
	162, 575, 563, 0, 521, 578, 493, 511, 586, 512,
	515, 551, 479, 533, 202, 509, 0, 497, 474, 505,
	475, 495, 523, 141, 170, 137, 565, 536, 577, 172,
	0, 498, 584, 174, 542, 0, 253, 189, 0, 0,
	0, 525, 567, 531, 560, 520, 552, 484, 541, 579,
	510, 549, 580, 0, 0, 0, 107, 108, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 0, 546,
	574, 507, 548, 550, 588, 473, 543, 0, 477, 480,
	585, 570, 501, 502, 0, 0, 0, 0, 0, 0,
	0, 524, 532, 557, 518, 0, 0, 0, 0, 0,
	0, 1092, 0, 499, 0, 540, 0, 0, 0, 481,
	478, 0, 0, 0, 0, 522, 0, 0, 0, 483,
	0, 500, 558, 0, 471, 150, 562, 569, 519, 313,
	573, 517, 516, 576, 221, 0, 258, 153, 171, 126,
	167, 111, 122, 0, 152, 199, 230, 234, 566, 496,
	506, 134, 503, 232, 209, 274, 539, 211, 231, 175,
	264, 222, 273, 283, 284, 261, 281, 288, 249, 115,
	260, 272, 131, 243, 0, 0, 0, 117, 270, 256,
	187, 163, 164, 116, 0, 228, 140, 148, 136, 201,
	267, 268, 135, 291, 123, 280, 119, 124, 279, 195,
	263, 271, 188, 180, 118, 269, 186, 179, 169, 144,
	155, 219, 177, 220, 156, 191, 190, 192, 0, 476,
	0, 254, 277, 292, 128, 492, 262, 286, 287, 0,
	223, 129, 149, 143, 218, 147, 193, 125, 158, 251,
	168, 176, 227, 290, 208, 233, 132, 276, 252, 488,
	491, 486, 487, 534, 535, 581, 582, 583, 559, 482,
	0, 489, 490, 0, 564, 571, 572, 538, 110, 120,
	173, 289, 225, 146, 278, 472, 485, 139, 494, 0,
	0, 508, 513, 514, 526, 527, 528, 529, 530, 537,
	544, 545, 547, 553, 554, 555, 556, 561, 568, 587,
	112, 113, 121, 127, 133, 138, 142, 145, 151, 154,
	157, 159, 160, 161, 166, 178, 182, 183, 184, 185,
	196, 197, 198, 200, 203, 204, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 226, 229, 235, 236,
	237, 238, 239, 240, 242, 245, 246, 247, 248, 255,
	259, 265, 266, 275, 282, 285, 0, 0, 0, 0,
	114, 165, 181, 310, 241, 244, 250, 257, 311, 312,
	0, 0, 0, 504, 224, 194, 162, 575, 563, 0,
	521, 578, 493, 511, 586, 512, 515, 551, 479, 533,
	202, 509, 0, 497, 474, 505, 475, 495, 523, 141,
	170, 137, 565, 536, 577, 172, 0, 498, 584, 174,
	542, 0, 253, 189, 0, 0, 0, 525, 567, 531,
	560, 520, 552, 484, 541, 579, 510, 549, 580, 0,
	0, 0, 107, 108, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 0, 546, 574, 507, 548, 550,
	588, 473, 543, 0, 477, 480, 585, 570, 501, 502,
	0, 0, 0, 0, 0, 0, 0, 524, 532, 557,
	518, 0, 0, 0, 0, 0, 0, 1055, 0, 499,
	0, 540, 0, 0, 0, 481, 478, 0, 0, 0,
	0, 522, 0, 0, 0, 483, 0, 500, 558, 0,
	471, 150, 562, 569, 519, 313, 573, 517, 516, 576,
	221, 0, 258, 153, 171, 126, 167, 111, 122, 0,
	152, 199, 230, 234, 566, 496, 506, 134, 503, 232,
	209, 274, 539, 211, 231, 175, 264, 222, 273, 283,
	284, 261, 281, 288, 249, 115, 260, 272, 131, 243,
	0, 0, 0, 117, 270, 256, 187, 163, 164, 116,
	0, 228, 140, 148, 136, 201, 267, 268, 135, 291,
	123, 280, 119, 124, 279, 195, 263, 271, 188, 180,
	118, 269, 186, 179, 169, 144, 155, 219, 177, 220,
	156, 191, 190, 192, 0, 476, 0, 254, 277, 292,
	128, 492, 262, 286, 287, 0, 223, 129, 149, 143,
	218, 147, 193, 125, 158, 251, 168, 176, 227, 290,
	208, 233, 132, 276, 252, 488, 491, 486, 487, 534,
	535, 581, 582, 583, 559, 482, 0, 489, 490, 0,
	564, 571, 572, 538, 110, 120, 173, 289, 225, 146,
	278, 472, 485, 139, 494, 0, 0, 508, 513, 514,
	526, 527, 528, 529, 530, 537, 544, 545, 547, 553,
	554, 555, 556, 561, 568, 587, 112, 113, 121, 127,
	133, 138, 142, 145, 151, 154, 157, 159, 160, 161,
	166, 178, 182, 183, 184, 185, 196, 197, 198, 200,
	203, 204, 205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 226, 229, 235, 236, 237, 238, 239, 240,
	242, 245, 246, 247, 248, 255, 259, 265, 266, 275,
	282, 285, 0, 0, 0, 0, 114, 165, 181, 310,
	241, 244, 250, 257, 311, 312, 0, 0, 0, 504,
	224, 194, 162, 575, 563, 0, 521, 578, 493, 511,
	586, 512, 515, 551, 479, 533, 202, 509, 0, 497,
	474, 505, 475, 495, 523, 141, 170, 137, 565, 536,
	577, 172, 0, 498, 584, 174, 542, 0, 253, 189,
	0, 0, 0, 525, 567, 531, 560, 520, 552, 484,
	541, 579, 510, 549, 580, 0, 0, 0, 107, 108,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 546, 574, 507, 548, 550, 588, 473, 543, 0,
	477, 480, 585, 570, 501, 502, 0, 0, 0, 0,
	0, 0, 0, 524, 532, 557, 518, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 540, 0, 0,
	0, 481, 478, 0, 0, 0, 0, 522, 0, 0,
	0, 483, 0, 500, 558, 0, 471, 150, 562, 569,
	519, 313, 573, 517, 516, 576, 221, 0, 258, 153,
	171, 126, 167, 111, 122, 0, 152, 199, 230, 234,
	566, 496, 506, 134, 503, 232, 209, 274, 539, 211,
	231, 175, 264, 222, 273, 283, 284, 261, 281, 288,
	249, 115, 260, 272, 131, 243, 0, 0, 0, 117,
	270, 256, 187, 163, 164, 116, 0, 228, 140, 148,
	136, 201, 267, 268, 135, 291, 123, 280, 119, 124,
	279, 195, 263, 271, 188, 180, 118, 269, 186, 179,
	169, 144, 155, 219, 177, 220, 156, 191, 190, 192,
	0, 476, 0, 254, 277, 292, 128, 492, 262, 286,
	287, 0, 223, 129, 149, 143, 218, 147, 193, 125,
	158, 251, 168, 176, 227, 290, 208, 233, 132, 276,
	252, 488, 491, 486, 487, 534, 535, 581, 582, 583,
	559, 482, 0, 489, 490, 0, 564, 571, 572, 538,
	110, 120, 173, 289, 225, 146, 278, 472, 485, 139,
	494, 0, 0, 508, 513, 514, 526, 527, 528, 529,
	530, 537, 544, 545, 547, 553, 554, 555, 556, 561,
	568, 587, 112, 113, 121, 127, 133, 138, 142, 145,
	151, 154, 157, 159, 160, 161, 166, 178, 182, 183,
	184, 185, 196, 197, 198, 200, 203, 204, 205, 206,
	207, 210, 212, 213, 214, 215, 216, 217, 226, 229,
	235, 236, 237, 238, 239, 240, 242, 245, 246, 247,
	248, 255, 259, 265, 266, 275, 282, 285, 0, 0,
	0, 0, 114, 165, 181, 310, 241, 244, 250, 257,
	311, 312, 0, 0, 0, 504, 224, 194, 162, 575,
	563, 0, 521, 578, 493, 511, 586, 512, 515, 551,
	479, 533, 202, 509, 0, 497, 474, 505, 475, 495,
	523, 141, 170, 137, 565, 536, 577, 172, 0, 498,
	584, 174, 542, 0, 253, 189, 0, 0, 0, 525,
	567, 531, 560, 520, 552, 484, 541, 579, 510, 549,
	580, 0, 0, 0, 107, 108, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 546, 574, 507,
	548, 550, 588, 473, 543, 0, 477, 480, 585, 570,
	501, 502, 0, 0, 0, 0, 0, 0, 0, 524,
	532, 557, 518, 0, 0, 0, 0, 0, 0, 0,
	0, 499, 0, 540, 0, 0, 0, 481, 478, 0,
	0, 0, 0, 522, 0, 0, 0, 483, 0, 500,
	558, 0, 471, 150, 562, 569, 519, 313, 573, 517,
	516, 576, 221, 0, 258, 153, 171, 126, 167, 111,
	122, 0, 152, 199, 230, 234, 566, 496, 506, 134,
	503, 232, 209, 274, 539, 211, 231, 175, 264, 222,
	273, 283, 284, 261, 281, 288, 249, 115, 260, 272,
	131, 243, 0, 0, 0, 117, 270, 256, 187, 163,
	164, 116, 0, 228, 140, 148, 136, 201, 267, 268,
	135, 291, 123, 280, 119, 469, 279, 195, 263, 271,
	188, 180, 118, 269, 186, 179, 169, 144, 155, 219,
	177, 220, 156, 191, 190, 192, 0, 476, 0, 254,
	277, 292, 128, 492, 262, 286, 287, 0, 223, 129,
	149, 143, 218, 147, 470, 468, 158, 251, 168, 176,
	227, 290, 208, 233, 132, 276, 252, 488, 491, 486,
	487, 534, 535, 581, 582, 583, 559, 482, 0, 489,
	490, 0, 564, 571, 572, 538, 110, 120, 173, 289,
	225, 146, 278, 472, 485, 139, 494, 0, 0, 508,
	513, 514, 526, 527, 528, 529, 530, 537, 544, 545,
	547, 553, 554, 555, 556, 561, 568, 587, 112, 113,
	121, 127, 133, 138, 142, 145, 151, 154, 157, 159,
	160, 161, 166, 178, 182, 183, 184, 185, 196, 197,
	198, 200, 203, 204, 205, 206, 207, 210, 212, 213,
	214, 215, 216, 217, 226, 229, 235, 236, 237, 238,
	239, 240, 242, 245, 246, 247, 248, 255, 259, 265,
	266, 275, 282, 285, 0, 0, 0, 0, 114, 165,
	181, 310, 241, 244, 250, 257, 311, 312, 0, 0,
	0, 504, 224, 194, 162, 575, 563, 0, 521, 578,
	493, 511, 586, 512, 515, 551, 479, 533, 202, 509,
	0, 497, 474, 505, 475, 495, 523, 141, 170, 137,
	565, 536, 577, 172, 0, 498, 584, 174, 542, 0,
	253, 189, 0, 0, 0, 525, 567, 531, 560, 520,
	552, 484, 541, 579, 510, 549, 580, 0, 0, 0,
	107, 108, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 0, 546, 574, 507, 548, 550, 588, 473,
	543, 0, 477, 480, 585, 570, 501, 502, 0, 0,
	0, 0, 0, 0, 0, 524, 532, 557, 518, 0,
	0, 0, 0, 0, 0, 0, 0, 499, 0, 540,
	0, 0, 0, 481, 478, 0, 0, 0, 0, 522,
	0, 0, 0, 483, 0, 500, 558, 0, 471, 150,
	562, 569, 519, 313, 573, 517, 516, 576, 221, 0,
	258, 153, 171, 126, 167, 111, 122, 0, 152, 199,
	230, 234, 566, 496, 506, 134, 503, 232, 209, 274,
	539, 211, 231, 175, 264, 222, 273, 283, 284, 261,
	281, 288, 249, 115, 260, 814, 131, 243, 0, 0,
	0, 117, 270, 256, 187, 163, 164, 116, 0, 228,
	140, 148, 136, 201, 267, 268, 135, 291, 123, 280,
	119, 469, 279, 195, 263, 271, 188, 180, 118, 269,
	186, 179, 169, 144, 155, 219, 177, 220, 156, 191,
	190, 192, 0, 476, 0, 254, 277, 292, 128, 492,
	262, 286, 287, 0, 223, 129, 149, 143, 218, 147,
	470, 468, 158, 251, 168, 176, 227, 290, 208, 233,
	132, 276, 252, 488, 491, 486, 487, 534, 535, 581,
	582, 583, 559, 482, 0, 489, 490, 0, 564, 571,
	572, 538, 110, 120, 173, 289, 225, 146, 278, 472,
	485, 139, 494, 0, 0, 508, 513, 514, 526, 527,
	528, 529, 530, 537, 544, 545, 547, 553, 554, 555,
	556, 561, 568, 587, 112, 113, 121, 127, 133, 138,
	142, 145, 151, 154, 157, 159, 160, 161, 166, 178,
	182, 183, 184, 185, 196, 197, 198, 200, 203, 204,
	205, 206, 207, 210, 212, 213, 214, 215, 216, 217,
	226, 229, 235, 236, 237, 238, 239, 240, 242, 245,
	246, 247, 248, 255, 259, 265, 266, 275, 282, 285,
	0, 0, 0, 0, 114, 165, 181, 310, 241, 244,
	250, 257, 311, 312, 0, 0, 0, 504, 224, 194,
	162, 575, 563, 0, 521, 578, 493, 511, 586, 512,
	515, 551, 479, 533, 202, 509, 0, 497, 474, 505,
	475, 495, 523, 141, 170, 137, 565, 536, 577, 172,
	0, 498, 584, 174, 542, 0, 253, 189, 0, 0,
	0, 525, 567, 531, 560, 520, 552, 484, 541, 579,
	510, 549, 580, 0, 0, 0, 107, 108, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 0, 546,
	574, 507, 548, 550, 588, 473, 543, 0, 477, 480,
	585, 570, 501, 502, 0, 0, 0, 0, 0, 0,
	0, 524, 532, 557, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 499, 0, 540, 0, 0, 0, 481,
	478, 0, 0, 0, 0, 522, 0, 0, 0, 483,
	0, 500, 558, 0, 471, 150, 562, 569, 519, 313,
	573, 517, 516, 576, 221, 0, 258, 153, 171, 126,
	167, 111, 122, 0, 152, 199, 230, 234, 566, 496,
	506, 134, 503, 232, 209, 274, 539, 211, 231, 175,
	264, 222, 273, 283, 284, 261, 281, 288, 249, 115,
	260, 460, 131, 243, 0, 0, 0, 117, 270, 256,
	187, 163, 164, 116, 0, 228, 140, 148, 136, 201,
	267, 268, 135, 291, 123, 280, 119, 469, 279, 195,
	263, 271, 188, 180, 118, 269, 186, 179, 169, 144,
	155, 219, 177, 220, 156, 191, 190, 192, 0, 476,
	0, 254, 277, 292, 128, 492, 262, 286, 287, 0,
	223, 129, 149, 143, 218, 147, 470, 468, 463, 462,
	168, 176, 227, 290, 208, 233, 132, 276, 252, 488,
	491, 486, 487, 534, 535, 581, 582, 583, 559, 482,
	0, 489, 490, 0, 564, 571, 572, 538, 110, 120,
	173, 289, 225, 146, 278, 472, 485, 139, 494, 0,
	0, 508, 513, 514, 526, 527, 528, 529, 530, 537,
	544, 545, 547, 553, 554, 555, 556, 561, 568, 587,
	112, 113, 121, 127, 133, 138, 142, 145, 151, 154,
	157, 159, 160, 161, 166, 178, 182, 183, 184, 185,
	196, 197, 198, 200, 203, 204, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 226, 229, 235, 236,
	237, 238, 239, 240, 242, 245, 246, 247, 248, 255,
	259, 265, 266, 275, 282, 285, 0, 0, 0, 0,
	114, 165, 181, 310, 241, 244, 250, 257, 311, 312,
	0, 0, 0, 504, 224, 194, 162, 202, 0, 0,
	986, 0, 358, 0, 0, 0, 141, 170, 357, 0,
	0, 0, 172, 0, 987, 401, 174, 0, 0, 253,
	189, 0, 0, 0, 0, 0, 392, 393, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 107,
	108, 109, 379, 378, 381, 382, 383, 384, 0, 0,
	130, 380, 385, 386, 387, 0, 0, 0, 0, 355,
	372, 0, 400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 369, 370, 447, 0, 0, 0, 415, 0,
	371, 0, 0, 364, 365, 367, 366, 368, 373, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 414,
	0, 0, 313, 0, 0, 412, 0, 221, 0, 258,
	153, 171, 126, 167, 111, 122, 0, 152, 199, 230,
	234, 0, 0, 0, 134, 0, 232, 209, 274, 0,
	211, 231, 175, 264, 222, 273, 283, 284, 261, 281,
	288, 249, 115, 260, 272, 131, 243, 0, 0, 0,
	117, 270, 256, 187, 163, 164, 116, 0, 228, 140,
	148, 136, 201, 267, 268, 135, 291, 123, 280, 119,
	124, 279, 195, 263, 271, 188, 180, 118, 269, 186,
	179, 169, 144, 155, 219, 177, 220, 156, 191, 190,
	192, 0, 0, 0, 254, 277, 292, 128, 0, 262,
	286, 287, 0, 223, 129, 149, 143, 218, 147, 193,
	125, 158, 251, 168, 176, 227, 290, 208, 233, 132,
	276, 252, 402, 413, 408, 409, 406, 407, 405, 404,
	403, 416, 394, 395, 396, 397, 399, 0, 410, 411,
	398, 110, 120, 173, 289, 225, 146, 278, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 113, 121, 127, 133, 138, 142,
	145, 151, 154, 157, 159, 160, 161, 166, 178, 182,
	183, 184, 185, 196, 197, 198, 200, 203, 204, 205,
	206, 207, 210, 212, 213, 214, 215, 216, 217, 226,
	229, 235, 236, 237, 238, 239, 240, 242, 245, 246,
	247, 248, 255, 259, 265, 266, 275, 282, 285, 0,
	0, 0, 0, 114, 165, 181, 310, 241, 244, 250,
	257, 311, 312, 0, 0, 202, 0, 224, 194, 162,
	358, 0, 0, 0, 141, 170, 357, 0, 0, 0,
	172, 0, 0, 401, 174, 0, 0, 253, 189, 0,
	0, 0, 0, 0, 392, 393, 0, 0, 0, 0,
	0, 0, 1102, 0, 68, 0, 0, 107, 108, 109,
	379, 378, 381, 382, 383, 384, 0, 0, 130, 380,
	385, 386, 387, 1103, 0, 0, 0, 355, 372, 0,
	400, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	369, 370, 0, 0, 0, 0, 415, 0, 371, 0,
	0, 364, 365, 367, 366, 368, 373, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 414, 0, 0,
	313, 0, 0, 412, 0, 221, 0, 258, 153, 171,
	126, 167, 111, 122, 0, 152, 199, 230, 234, 0,
	0, 0, 134, 0, 232, 209, 274, 0, 211, 231,
	175, 264, 222, 273, 283, 284, 261, 281, 288, 249,
	115, 260, 272, 131, 243, 0, 0, 0, 117, 270,
	256, 187, 163, 164, 116, 0, 228, 140, 148, 136,
	201, 267, 268, 135, 291, 123, 280, 119, 124, 279,
	195, 263, 271, 188, 180, 118, 269, 186, 179, 169,
	144, 155, 219, 177, 220, 156, 191, 190, 192, 0,
	0, 0, 254, 277, 292, 128, 0, 262, 286, 287,
	0, 223, 129, 149, 143, 218, 147, 193, 125, 158,
	251, 168, 176, 227, 290, 208, 233, 132, 276, 252,
	402, 413, 408, 409, 406, 407, 405, 404, 403, 416,
	394, 395, 396, 397, 399, 0, 410, 411, 398, 110,
	120, 173, 289, 225, 146, 278, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 113, 121, 127, 133, 138, 142, 145, 151,
	154, 157, 159, 160, 161, 166, 178, 182, 183, 184,
	185, 196, 197, 198, 200, 203, 204, 205, 206, 207,
	210, 212, 213, 214, 215, 216, 217, 226, 229, 235,
	236, 237, 238, 239, 240, 242, 245, 246, 247, 248,
	255, 259, 265, 266, 275, 282, 285, 0, 0, 0,
	0, 114, 165, 181, 310, 241, 244, 250, 257, 311,
	312, 0, 0, 202, 0, 224, 194, 162, 358, 0,
	0, 0, 141, 170, 357, 0, 0, 0, 172, 0,
	0, 401, 174, 0, 0, 253, 189, 0, 0, 0,
	0, 0, 392, 393, 0, 0, 0, 0, 0, 0,
	1099, 0, 68, 0, 0, 107, 108, 109, 379, 378,
	381, 382, 383, 384, 0, 0, 130, 380, 385, 386,
	387, 1100, 0, 0, 0, 355, 372, 0, 400, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 369, 370,
	0, 0, 0, 0, 415, 0, 371, 0, 0, 364,
	365, 367, 366, 368, 373, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 414, 0, 0, 313, 0,
	0, 412, 0, 221, 0, 258, 153, 171, 126, 167,
	111, 122, 0, 152, 199, 230, 234, 0, 0, 0,
	134, 0, 232, 209, 274, 0, 211, 231, 175, 264,
	222, 273, 283, 284, 261, 281, 288, 249, 115, 260,
	272, 131, 243, 0, 0, 0, 117, 270, 256, 187,
	163, 164, 116, 0, 228, 140, 148, 136, 201, 267,
	268, 135, 291, 123, 280, 119, 124, 279, 195, 263,
	271, 188, 180, 118, 269, 186, 179, 169, 144, 155,
	219, 177, 220, 156, 191, 190, 192, 0, 0, 0,
	254, 277, 292, 128, 0, 262, 286, 287, 0, 223,
	129, 149, 143, 218, 147, 193, 125, 158, 251, 168,
	176, 227, 290, 208, 233, 132, 276, 252, 402, 413,
	408, 409, 406, 407, 405, 404, 403, 416, 394, 395,
	396, 397, 399, 0, 410, 411, 398, 110, 120, 173,
	289, 225, 146, 278, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	113, 121, 127, 133, 138, 142, 145, 151, 154, 157,
	159, 160, 161, 166, 178, 182, 183, 184, 185, 196,
	197, 198, 200, 203, 204, 205, 206, 207, 210, 212,
	213, 214, 215, 216, 217, 226, 229, 235, 236, 237,
	238, 239, 240, 242, 245, 246, 247, 248, 255, 259,
	265, 266, 275, 282, 285, 0, 0, 0, 0, 114,
	165, 181, 310, 241, 244, 250, 257, 311, 312, 0,
	0, 202, 0, 224, 194, 162, 358, 0, 0, 0,
	141, 170, 357, 0, 0, 0, 172, 0, 0, 401,
	174, 0, 0, 253, 189, 0, 0, 0, 0, 0,
	392, 393, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 435, 107, 108, 109, 379, 378, 381, 382,
	383, 384, 0, 0, 130, 380, 385, 386, 387, 0,
	0, 0, 0, 355, 372, 0, 400, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 369, 370, 0, 0,
	0, 0, 415, 0, 371, 0, 0, 364, 365, 367,
	366, 368, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 414, 0, 0, 313, 0, 0, 412,
	0, 221, 0, 258, 153, 171, 126, 167, 111, 122,
	0, 152, 199, 230, 234, 0, 0, 0, 134, 0,
	232, 209, 274, 0, 211, 231, 175, 264, 222, 273,
	283, 284, 261, 281, 288, 249, 115, 260, 272, 131,
	243, 0, 0, 0, 117, 270, 256, 187, 163, 164,
	116, 0, 228, 140, 148, 136, 201, 267, 268, 135,
	291, 123, 280, 119, 124, 279, 195, 263, 271, 188,
	180, 118, 269, 186, 179, 169, 144, 155, 219, 177,
	220, 156, 191, 190, 192, 0, 0, 0, 254, 277,
	292, 128, 0, 262, 286, 287, 0, 223, 129, 149,
	143, 218, 147, 193, 125, 158, 251, 168, 176, 227,
	290, 208, 233, 132, 276, 252, 402, 413, 408, 409,
	406, 407, 405, 404, 403, 416, 394, 395, 396, 397,
	399, 0, 410, 411, 398, 110, 120, 173, 289, 225,
	146, 278, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 113, 121,
	127, 133, 138, 142, 145, 151, 154, 157, 159, 160,
	161, 166, 178, 182, 183, 184, 185, 196, 197, 198,
	200, 203, 204, 205, 206, 207, 210, 212, 213, 214,
	215, 216, 217, 226, 229, 235, 236, 237, 238, 239,
	240, 242, 245, 246, 247, 248, 255, 259, 265, 266,
	275, 282, 285, 0, 0, 0, 0, 114, 165, 181,
	310, 241, 244, 250, 257, 311, 312, 0, 0, 202,
	0, 224, 194, 162, 358, 0, 0, 0, 141, 170,
	357, 0, 0, 0, 172, 0, 0, 401, 174, 0,
	0, 253, 189, 0, 0, 0, 0, 0, 392, 393,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 107, 108, 109, 379, 378, 381, 382, 383, 384,
	0, 0, 130, 380, 385, 386, 387, 0, 0, 0,
	0, 355, 372, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 369, 370, 447, 0, 0, 0,
	415, 0, 371, 0, 0, 364, 365, 367, 366, 368,
	373, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 414, 0, 0, 313, 0, 0, 412, 0, 221,
	0, 258, 153, 171, 126, 167, 111, 122, 0, 152,
	199, 230, 234, 0, 0, 0, 134, 0, 232, 209,
	274, 0, 211, 231, 175, 264, 222, 273, 283, 284,
	261, 281, 288, 249, 115, 260, 272, 131, 243, 0,
	0, 0, 117, 270, 256, 187, 163, 164, 116, 0,
	228, 140, 148, 136, 201, 267, 268, 135, 291, 123,
	280, 119, 124, 279, 195, 263, 271, 188, 180, 118,
	269, 186, 179, 169, 144, 155, 219, 177, 220, 156,
	191, 190, 192, 0, 0, 0, 254, 277, 292, 128,
	0, 262, 286, 287, 0, 223, 129, 149, 143, 218,
	147, 193, 125, 158, 251, 168, 176, 227, 290, 208,
	233, 132, 276, 252, 402, 413, 408, 409, 406, 407,
	405, 404, 403, 416, 394, 395, 396, 397, 399, 0,
	410, 411, 398, 110, 120, 173, 289, 225, 146, 278,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 113, 121, 127, 133,
	138, 142, 145, 151, 154, 157, 159, 160, 161, 166,
	178, 182, 183, 184, 185, 196, 197, 198, 200, 203,
	204, 205, 206, 207, 210, 212, 213, 214, 215, 216,
	217, 226, 229, 235, 236, 237, 238, 239, 240, 242,
	245, 246, 247, 248, 255, 259, 265, 266, 275, 282,
	285, 0, 0, 0, 0, 114, 165, 181, 310, 241,
	244, 250, 257, 311, 312, 0, 0, 202, 0, 224,
	194, 162, 358, 0, 0, 0, 141, 170, 357, 0,
	0, 0, 172, 0, 0, 401, 174, 0, 0, 253,
	189, 0, 0, 0, 0, 0, 392, 393, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 107,
	108, 109, 379, 1004, 381, 382, 383, 384, 0, 0,
	130, 380, 385, 386, 387, 0, 0, 0, 0, 355,
	372, 0, 400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 369, 370, 447, 0, 0, 0, 415, 0,
	371, 0, 0, 364, 365, 367, 366, 368, 373, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 414,
	0, 0, 313, 0, 0, 412, 0, 221, 0, 258,
	153, 171, 126, 167, 111, 122, 0, 152, 199, 230,
	234, 0, 0, 0, 134, 0, 232, 209, 274, 0,
	211, 231, 175, 264, 222, 273, 283, 284, 261, 281,
	288, 249, 115, 260, 272, 131, 243, 0, 0, 0,
	117, 270, 256, 187, 163, 164, 116, 0, 228, 140,
	148, 136, 201, 267, 268, 135, 291, 123, 280, 119,
	124, 279, 195, 263, 271, 188, 180, 118, 269, 186,
	179, 169, 144, 155, 219, 177, 220, 156, 191, 190,
	192, 0, 0, 0, 254, 277, 292, 128, 0, 262,
	286, 287, 0, 223, 129, 149, 143, 218, 147, 193,
	125, 158, 251, 168, 176, 227, 290, 208, 233, 132,
	276, 252, 402, 413, 408, 409, 406, 407, 405, 404,
	403, 416, 394, 395, 396, 397, 399, 0, 410, 411,
	398, 110, 120, 173, 289, 225, 146, 278, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 113, 121, 127, 133, 138, 142,
	145, 151, 154, 157, 159, 160, 161, 166, 178, 182,
	183, 184, 185, 196, 197, 198, 200, 203, 204, 205,
	206, 207, 210, 212, 213, 214, 215, 216, 217, 226,
	229, 235, 236, 237, 238, 239, 240, 242, 245, 246,
	247, 248, 255, 259, 265, 266, 275, 282, 285, 0,
	0, 0, 0, 114, 165, 181, 310, 241, 244, 250,
	257, 311, 312, 0, 0, 202, 0, 224, 194, 162,
	358, 0, 0, 0, 141, 170, 357, 0, 0, 0,
	172, 0, 0, 401, 174, 0, 0, 253, 189, 0,
	0, 0, 0, 0, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 107, 108, 109,
	379, 1001, 381, 382, 383, 384, 0, 0, 130, 380,
	385, 386, 387, 0, 0, 0, 0, 355, 372, 0,
	400, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	369, 370, 447, 0, 0, 0, 415, 0, 371, 0,
	0, 364, 365, 367, 366, 368, 373, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 414, 0, 0,
	313, 0, 0, 412, 0, 221, 0, 258, 153, 171,
	126, 167, 111, 122, 0, 152, 199, 230, 234, 0,
	0, 0, 134, 0, 232, 209, 274, 0, 211, 231,
	175, 264, 222, 273, 283, 284, 261, 281, 288, 249,
	115, 260, 272, 131, 243, 0, 0, 0, 117, 270,
	256, 187, 163, 164, 116, 0, 228, 140, 148, 136,
	201, 267, 268, 135, 291, 123, 280, 119, 124, 279,
	195, 263, 271, 188, 180, 118, 269, 186, 179, 169,
	144, 155, 219, 177, 220, 156, 191, 190, 192, 0,
	0, 0, 254, 277, 292, 128, 0, 262, 286, 287,
	0, 223, 129, 149, 143, 218, 147, 193, 125, 158,
	251, 168, 176, 227, 290, 208, 233, 132, 276, 252,
	402, 413, 408, 409, 406, 407, 405, 404, 403, 416,
	394, 395, 396, 397, 399, 0, 410, 411, 398, 110,
	120, 173, 289, 225, 146, 278, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 113, 121, 127, 133, 138, 142, 145, 151,
	154, 157, 159, 160, 161, 166, 178, 182, 183, 184,
	185, 196, 197, 198, 200, 203, 204, 205, 206, 207,
	210, 212, 213, 214, 215, 216, 217, 226, 229, 235,
	236, 237, 238, 239, 240, 242, 245, 246, 247, 248,
	255, 259, 265, 266, 275, 282, 285, 0, 0, 0,
	0, 114, 165, 181, 310, 241, 244, 250, 257, 311,
	312, 428, 0, 0, 0, 224, 194, 162, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 358, 0,
	0, 0, 141, 170, 357, 0, 0, 0, 172, 0,
	0, 401, 174, 0, 0, 253, 189, 0, 0, 0,
	0, 0, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 107, 108, 109, 379, 378,
	381, 382, 383, 384, 0, 0, 130, 380, 385, 386,
	387, 0, 0, 0, 0, 355, 372, 0, 400, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 369, 370,
	0, 0, 0, 0, 415, 0, 371, 0, 0, 364,
	365, 367, 366, 368, 373, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 414, 0, 0, 313, 0,
	0, 412, 0, 221, 0, 258, 153, 171, 126, 167,
	111, 122, 0, 152, 199, 230, 234, 0, 0, 0,
	134, 0, 232, 209, 274, 0, 211, 231, 175, 264,
	222, 273, 283, 284, 261, 281, 288, 249, 115, 260,
	272, 131, 243, 0, 0, 0, 117, 270, 256, 187,
	163, 164, 116, 0, 228, 140, 148, 136, 201, 267,
	268, 135, 291, 123, 280, 119, 124, 279, 195, 263,
	271, 188, 180, 118, 269, 186, 179, 169, 144, 155,
	219, 177, 220, 156, 191, 190, 192, 0, 0, 0,
	254, 277, 292, 128, 0, 262, 286, 287, 0, 223,
	129, 149, 143, 218, 147, 193, 125, 158, 251, 168,
	176, 227, 290, 208, 233, 132, 276, 252, 402, 413,
	408, 409, 406, 407, 405, 404, 403, 416, 394, 395,
	396, 397, 399, 0, 410, 411, 398, 110, 120, 173,
	289, 225, 146, 278, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	113, 121, 127, 133, 138, 142, 145, 151, 154, 157,
	159, 160, 161, 166, 178, 182, 183, 184, 185, 196,
	197, 198, 200, 203, 204, 205, 206, 207, 210, 212,
	213, 214, 215, 216, 217, 226, 229, 235, 236, 237,
	238, 239, 240, 242, 245, 246, 247, 248, 255, 259,
	265, 266, 275, 282, 285, 0, 0, 0, 0, 114,
	165, 181, 310, 241, 244, 250, 257, 311, 312, 0,
	0, 202, 0, 224, 194, 162, 358, 0, 0, 0,
	141, 170, 357, 0, 0, 0, 172, 0, 0, 401,
	174, 0, 0, 253, 189, 0, 0, 0, 0, 0,
	392, 393, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 107, 108, 109, 379, 378, 381, 382,
	383, 384, 0, 0, 130, 380, 385, 386, 387, 0,
	0, 0, 0, 355, 372, 0, 400, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 369, 370, 0, 0,
	0, 0, 415, 0, 371, 0, 0, 364, 365, 367,
	366, 368, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 414, 0, 0, 313, 0, 0, 412,
	0, 221, 0, 258, 153, 171, 126, 167, 111, 122,
	0, 152, 199, 230, 234, 0, 0, 0, 134, 0,
	232, 209, 274, 0, 211, 231, 175, 264, 222, 273,
	283, 284, 261, 281, 288, 249, 115, 260, 272, 131,
	243, 0, 0, 0, 117, 270, 256, 187, 163, 164,
	116, 0, 228, 140, 148, 136, 201, 267, 268, 135,
	291, 123, 280, 119, 124, 279, 195, 263, 271, 188,
	180, 118, 269, 186, 179, 169, 144, 155, 219, 177,
	220, 156, 191, 190, 192, 0, 0, 0, 254, 277,
	292, 128, 0, 262, 286, 287, 0, 223, 129, 149,
	143, 218, 147, 193, 125, 158, 251, 168, 176, 227,
	290, 208, 233, 132, 276, 252, 402, 413, 408, 409,
	406, 407, 405, 404, 403, 416, 394, 395, 396, 397,
	399, 0, 410, 411, 398, 110, 120, 173, 289, 225,
	146, 278, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 113, 121,
	127, 133, 138, 142, 145, 151, 154, 157, 159, 160,
	161, 166, 178, 182, 183, 184, 185, 196, 197, 198,
	200, 203, 204, 205, 206, 207, 210, 212, 213, 214,
	215, 216, 217, 226, 229, 235, 236, 237, 238, 239,
	240, 242, 245, 246, 247, 248, 255, 259, 265, 266,
	275, 282, 285, 0, 0, 0, 0, 114, 165, 181,
	310, 241, 244, 250, 257, 311, 312, 202, 0, 0,
	0, 224, 194, 162, 0, 0, 141, 170, 137, 0,
	0, 0, 172, 0, 0, 401, 174, 0, 0, 253,
	189, 0, 0, 0, 0, 0, 392, 393, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 107,
	108, 109, 379, 378, 381, 382, 383, 384, 0, 0,
	130, 380, 385, 386, 387, 0, 0, 0, 0, 0,
	372, 0, 400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 369, 370, 0, 0, 0, 0, 415, 0,
	371, 0, 0, 364, 365, 367, 366, 368, 373, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 414,
	0, 0, 313, 0, 0, 412, 0, 221, 0, 258,
	153, 171, 126, 167, 111, 122, 0, 152, 199, 230,
	234, 0, 0, 0, 134, 0, 232, 209, 274, 1713,
	211, 231, 175, 264, 222, 273, 283, 284, 261, 281,
	288, 249, 115, 260, 272, 131, 243, 0, 0, 0,
	117, 270, 256, 187, 163, 164, 116, 0, 228, 140,
	148, 136, 201, 267, 268, 135, 291, 123, 280, 119,
	124, 279, 195, 263, 271, 188, 180, 118, 269, 186,
	179, 169, 144, 155, 219, 177, 220, 156, 191, 190,
	192, 0, 0, 0, 254, 277, 292, 128, 0, 262,
	286, 287, 0, 223, 129, 149, 143, 218, 147, 193,
	125, 158, 251, 168, 176, 227, 290, 208, 233, 132,
	276, 252, 402, 413, 408, 409, 406, 407, 405, 404,
	403, 416, 394, 395, 396, 397, 399, 0, 410, 411,
	398, 110, 120, 173, 289, 225, 146, 278, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 113, 121, 127, 133, 138, 142,
	145, 151, 154, 157, 159, 160, 161, 166, 178, 182,
	183, 184, 185, 196, 197, 198, 200, 203, 204, 205,
	206, 207, 210, 212, 213, 214, 215, 216, 217, 226,
	229, 235, 236, 237, 238, 239, 240, 242, 245, 246,
	247, 248, 255, 259, 265, 266, 275, 282, 285, 0,
	0, 0, 0, 114, 165, 181, 310, 241, 244, 250,
	257, 311, 312, 202, 0, 0, 0, 224, 194, 162,
	0, 0, 141, 170, 137, 0, 0, 0, 172, 0,
	0, 401, 174, 0, 0, 253, 189, 0, 0, 0,
	0, 0, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 435, 107, 108, 109, 379, 378,
	381, 382, 383, 384, 0, 0, 130, 380, 385, 386,
	387, 0, 0, 0, 0, 0, 372, 0, 400, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 369, 370,
	0, 0, 0, 0, 415, 0, 371, 0, 0, 364,
	365, 367, 366, 368, 373, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 414, 0, 0, 313, 0,
	0, 412, 0, 221, 0, 258, 153, 171, 126, 167,
	111, 122, 0, 152, 199, 230, 234, 0, 0, 0,
	134, 0, 232, 209, 274, 0, 211, 231, 175, 264,
	222, 273, 283, 284, 261, 281, 288, 249, 115, 260,
	272, 131, 243, 0, 0, 0, 117, 270, 256, 187,
	163, 164, 116, 0, 228, 140, 148, 136, 201, 267,
	268, 135, 291, 123, 280, 119, 124, 279, 195, 263,
	271, 188, 180, 118, 269, 186, 179, 169, 144, 155,
	219, 177, 220, 156, 191, 190, 192, 0, 0, 0,
	254, 277, 292, 128, 0, 262, 286, 287, 0, 223,
	129, 149, 143, 218, 147, 193, 125, 158, 251, 168,
	176, 227, 290, 208, 233, 132, 276, 252, 402, 413,
	408, 409, 406, 407, 405, 404, 403, 416, 394, 395,
	396, 397, 399, 0, 410, 411, 398, 110, 120, 173,
	289, 225, 146, 278, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	113, 121, 127, 133, 138, 142, 145, 151, 154, 157,
	159, 160, 161, 166, 178, 182, 183, 184, 185, 196,
	197, 198, 200, 203, 204, 205, 206, 207, 210, 212,
	213, 214, 215, 216, 217, 226, 229, 235, 236, 237,
	238, 239, 240, 242, 245, 246, 247, 248, 255, 259,
	265, 266, 275, 282, 285, 0, 0, 0, 0, 114,
	165, 181, 310, 241, 244, 250, 257, 311, 312, 202,
	0, 0, 0, 224, 194, 162, 0, 0, 141, 170,
	137, 0, 0, 0, 172, 0, 0, 401, 174, 0,
	0, 253, 189, 0, 0, 0, 0, 0, 392, 393,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 107, 108, 109, 379, 378, 381, 382, 383, 384,
	0, 0, 130, 380, 385, 386, 387, 0, 0, 0,
	0, 0, 372, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 369, 370, 0, 0, 0, 0,
	415, 0, 371, 0, 0, 364, 365, 367, 366, 368,
	373, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 414, 0, 0, 313, 0, 0, 412, 0, 221,
	0, 258, 153, 171, 126, 167, 111, 122, 0, 152,
	199, 230, 234, 0, 0, 0, 134, 0, 232, 209,
	274, 0, 211, 231, 175, 264, 222, 273, 283, 284,
	261, 281, 288, 249, 115, 260, 272, 131, 243, 0,
	0, 0, 117, 270, 256, 187, 163, 164, 116, 0,
	228, 140, 148, 136, 201, 267, 268, 135, 291, 123,
	280, 119, 124, 279, 195, 263, 271, 188, 180, 118,
	269, 186, 179, 169, 144, 155, 219, 177, 220, 156,
	191, 190, 192, 0, 0, 0, 254, 277, 292, 128,
	0, 262, 286, 287, 0, 223, 129, 149, 143, 218,
	147, 193, 125, 158, 251, 168, 176, 227, 290, 208,
	233, 132, 276, 252, 402, 413, 408, 409, 406, 407,
	405, 404, 403, 416, 394, 395, 396, 397, 399, 0,
	410, 411, 398, 110, 120, 173, 289, 225, 146, 278,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 113, 121, 127, 133,
	138, 142, 145, 151, 154, 157, 159, 160, 161, 166,
	178, 182, 183, 184, 185, 196, 197, 198, 200, 203,
	204, 205, 206, 207, 210, 212, 213, 214, 215, 216,
	217, 226, 229, 235, 236, 237, 238, 239, 240, 242,
	245, 246, 247, 248, 255, 259, 265, 266, 275, 282,
	285, 0, 0, 0, 0, 114, 165, 181, 310, 241,
	244, 250, 257, 311, 312, 202, 0, 0, 0, 224,
	194, 162, 0, 0, 141, 170, 137, 0, 0, 0,
	172, 0, 0, 401, 174, 0, 0, 253, 189, 0,
	0, 0, 0, 0, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 107, 108, 109,
	379, 720, 381, 382, 383, 384, 0, 0, 130, 380,
	385, 386, 387, 0, 0, 0, 0, 0, 372, 0,
	400, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	369, 370, 0, 0, 0, 0, 415, 0, 371, 0,
	0, 364, 365, 367, 366, 368, 373, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 414, 0, 0,
	313, 0, 0, 412, 0, 221, 0, 258, 153, 171,
	126, 167, 111, 122, 0, 152, 199, 230, 234, 0,
	0, 0, 134, 0, 232, 209, 274, 0, 211, 231,
	175, 264, 222, 273, 283, 284, 261, 281, 288, 249,
	115, 260, 272, 131, 243, 0, 0, 0, 117, 270,
	256, 187, 163, 164, 116, 0, 228, 140, 148, 136,
	201, 267, 268, 135, 291, 123, 280, 119, 124, 279,
	195, 263, 271, 188, 180, 118, 269, 186, 179, 169,
	144, 155, 219, 177, 220, 156, 191, 190, 192, 0,
	0, 0, 254, 277, 292, 128, 0, 262, 286, 287,
	0, 223, 129, 149, 143, 218, 147, 193, 125, 158,
	251, 168, 176, 227, 290, 208, 233, 132, 276, 252,
	402, 413, 408, 409, 406, 407, 405, 404, 403, 416,
	394, 395, 396, 397, 399, 0, 410, 411, 398, 110,
	120, 173, 289, 225, 146, 278, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 113, 121, 127, 133, 138, 142, 145, 151,
	154, 157, 159, 160, 161, 166, 178, 182, 183, 184,
	185, 196, 197, 198, 200, 203, 204, 205, 206, 207,
	210, 212, 213, 214, 215, 216, 217, 226, 229, 235,
	236, 237, 238, 239, 240, 242, 245, 246, 247, 248,
	255, 259, 265, 266, 275, 282, 285, 0, 0, 0,
	0, 114, 165, 181, 310, 241, 244, 250, 257, 311,
	312, 202, 0, 0, 0, 224, 194, 162, 0, 0,
	141, 170, 137, 0, 0, 0, 172, 0, 0, 0,
	174, 0, 0, 253, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 108, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 685, 684, 694, 695, 687, 688, 689, 690,
	691, 692, 693, 686, 0, 0, 696, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 313, 0, 0, 0,
	0, 221, 0, 258, 153, 171, 126, 167, 111, 122,
	0, 152, 199, 230, 234, 0, 0, 0, 134, 0,
	232, 209, 274, 0, 211, 231, 175, 264, 222, 273,
	283, 284, 261, 281, 288, 249, 115, 260, 272, 131,
	243, 0, 0, 0, 117, 270, 256, 187, 163, 164,
	116, 0, 228, 140, 148, 136, 201, 267, 268, 135,
	291, 123, 280, 119, 124, 279, 195, 263, 271, 188,
	180, 118, 269, 186, 179, 169, 144, 155, 219, 177,
	220, 156, 191, 190, 192, 0, 0, 0, 254, 277,
	292, 128, 0, 262, 286, 287, 0, 223, 129, 149,
	143, 218, 147, 193, 125, 158, 251, 168, 176, 227,
	290, 208, 233, 132, 276, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 120, 173, 289, 225,
	146, 278, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 113, 121,
	127, 133, 138, 142, 145, 151, 154, 157, 159, 160,
	161, 166, 178, 182, 183, 184, 185, 196, 197, 198,
	200, 203, 204, 205, 206, 207, 210, 212, 213, 214,
	215, 216, 217, 226, 229, 235, 236, 237, 238, 239,
	240, 242, 245, 246, 247, 248, 255, 259, 265, 266,
	275, 282, 285, 0, 0, 0, 0, 114, 165, 181,
	310, 241, 244, 250, 257, 311, 312, 0, 0, 0,
	202, 224, 194, 162, 789, 0, 0, 0, 0, 141,
	170, 137, 0, 0, 0, 172, 0, 0, 0, 174,
	0, 0, 253, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 108, 109, 0, 791, 0, 0, 0,
	0, 676, 0, 130, 0, 0, 0, 0, 0, 672,
	673, 671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 313, 0, 0, 0, 0,
	221, 0, 258, 153, 171, 126, 167, 111, 122, 0,
	152, 199, 230, 234, 0, 0, 0, 134, 0, 232,
	209, 274, 0, 211, 231, 175, 264, 222, 273, 283,
	284, 261, 281, 288, 249, 115, 260, 272, 131, 243,
	0, 0, 0, 117, 270, 256, 187, 163, 164, 116,
	0, 228, 140, 148, 136, 201, 267, 268, 135, 291,
	123, 280, 119, 124, 279, 195, 263, 271, 188, 180,
	118, 269, 186, 179, 169, 144, 155, 219, 177, 220,
	156, 191, 190, 192, 0, 0, 0, 254, 277, 292,
	128, 0, 262, 286, 287, 0, 223, 129, 149, 143,
	218, 147, 193, 125, 158, 251, 168, 176, 227, 290,
	208, 233, 132, 276, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 120, 173, 289, 225, 146,
	278, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 113, 121, 127,
	133, 138, 142, 145, 151, 154, 157, 159, 160, 161,
	166, 178, 182, 183, 184, 185, 196, 197, 198, 200,
	203, 204, 205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 226, 229, 235, 236, 237, 238, 239, 240,
	242, 245, 246, 247, 248, 255, 259, 265, 266, 275,
	282, 285, 0, 0, 0, 0, 114, 165, 181, 310,
	241, 244, 250, 257, 311, 312, 202, 0, 0, 0,
	224, 194, 162, 0, 0, 141, 170, 137, 0, 0,
	0, 172, 0, 0, 0, 174, 0, 0, 253, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 108,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 98, 99,
	0, 94, 0, 0, 0, 101, 221, 0, 258, 153,
	171, 126, 167, 111, 122, 0, 152, 199, 230, 234,
	0, 0, 0, 134, 0, 232, 209, 274, 0, 211,
	231, 175, 264, 222, 273, 283, 284, 261, 281, 288,
	249, 115, 260, 272, 131, 243, 0, 0, 0, 117,
	270, 256, 187, 163, 164, 116, 0, 228, 140, 148,
	136, 201, 267, 268, 135, 291, 123, 280, 119, 124,
	279, 195, 263, 271, 188, 180, 118, 269, 186, 179,
	169, 144, 155, 219, 177, 220, 156, 191, 190, 192,
	0, 0, 0, 254, 277, 292, 128, 0, 262, 286,
	287, 0, 223, 129, 149, 143, 218, 147, 193, 125,
	158, 251, 168, 176, 227, 290, 208, 233, 132, 276,
	252, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 120, 173, 289, 225, 146, 278, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 113, 121, 127, 133, 138, 142, 145,
	151, 154, 157, 159, 160, 161, 166, 178, 182, 183,
	184, 185, 196, 197, 198, 200, 203, 204, 205, 206,
	207, 210, 212, 213, 214, 215, 216, 217, 226, 229,
	235, 236, 237, 238, 239, 240, 242, 245, 246, 247,
	248, 255, 259, 265, 266, 275, 282, 285, 0, 0,
	35, 0, 114, 165, 181, 96, 241, 244, 250, 257,
	103, 104, 202, 0, 0, 0, 224, 194, 162, 0,
	0, 141, 170, 137, 0, 0, 0, 172, 0, 0,
	0, 174, 0, 0, 253, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 107, 108, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 313, 0, 0,
	0, 0, 221, 0, 258, 153, 171, 126, 167, 111,
	122, 0, 152, 199, 230, 234, 0, 0, 0, 134,
	0, 232, 209, 274, 0, 211, 231, 175, 264, 222,
	273, 283, 284, 261, 281, 288, 249, 115, 260, 272,
	131, 243, 0, 0, 0, 117, 270, 256, 187, 163,
	164, 116, 0, 228, 140, 148, 136, 201, 267, 268,
	135, 291, 123, 280, 119, 124, 279, 195, 263, 271,
	188, 180, 118, 269, 186, 179, 169, 144, 155, 219,
	177, 220, 156, 191, 190, 192, 0, 0, 0, 254,
	277, 292, 128, 0, 262, 286, 287, 0, 223, 129,
	149, 143, 218, 147, 193, 125, 158, 251, 168, 176,
	227, 290, 208, 233, 132, 276, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 120, 173, 289,
	225, 146, 278, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 113,
	121, 127, 133, 138, 142, 145, 151, 154, 157, 159,
	160, 161, 166, 178, 182, 183, 184, 185, 196, 197,
	198, 200, 203, 204, 205, 206, 207, 210, 212, 213,
	214, 215, 216, 217, 226, 229, 235, 236, 237, 238,
	239, 240, 242, 245, 246, 247, 248, 255, 259, 265,
	266, 275, 282, 285, 0, 0, 0, 0, 114, 165,
	181, 310, 241, 244, 250, 257, 311, 312, 0, 0,
	0, 64, 224, 194, 162, 202, 0, 0, 0, 1082,
	0, 0, 0, 0, 141, 170, 137, 0, 0, 0,
	172, 0, 0, 0, 174, 0, 0, 253, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 108, 109,
	0, 1084, 0, 0, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	313, 0, 0, 0, 0, 221, 0, 258, 153, 171,
	126, 167, 111, 122, 0, 152, 199, 230, 234, 0,
	0, 0, 134, 0, 232, 209, 274, 0, 211, 231,
	175, 264, 222, 273, 283, 284, 261, 281, 288, 249,
	115, 260, 272, 131, 243, 0, 0, 0, 117, 270,
	256, 187, 163, 164, 116, 0, 228, 140, 148, 136,
	201, 267, 268, 135, 291, 123, 280, 119, 124, 279,
	195, 263, 271, 188, 180, 118, 269, 186, 179, 169,
	144, 155, 219, 177, 220, 156, 191, 190, 192, 0,
	0, 0, 254, 277, 292, 128, 0, 262, 286, 287,
	0, 223, 129, 149, 143, 218, 147, 193, 125, 158,
	251, 168, 176, 227, 290, 208, 233, 132, 276, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	120, 173, 289, 225, 146, 278, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 113, 121, 127, 133, 138, 142, 145, 151,
	154, 157, 159, 160, 161, 166, 178, 182, 183, 184,
	185, 196, 197, 198, 200, 203, 204, 205, 206, 207,
	210, 212, 213, 214, 215, 216, 217, 226, 229, 235,
	236, 237, 238, 239, 240, 242, 245, 246, 247, 248,
	255, 259, 265, 266, 275, 282, 285, 0, 0, 35,
	0, 114, 165, 181, 310, 241, 244, 250, 257, 311,
	312, 202, 0, 0, 0, 224, 194, 162, 0, 0,
	141, 170, 137, 0, 0, 0, 172, 0, 0, 0,
	174, 0, 0, 253, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 107, 108, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 313, 0, 0, 0,
	0, 221, 0, 258, 153, 171, 126, 167, 111, 122,
	0, 152, 199, 230, 234, 0, 0, 0, 134, 0,
	232, 209, 274, 0, 211, 231, 175, 264, 222, 273,
	283, 284, 261, 281, 288, 249, 115, 260, 272, 131,
	243, 0, 0, 0, 117, 270, 256, 187, 163, 164,
	116, 0, 228, 140, 148, 136, 201, 267, 268, 135,
	291, 123, 280, 119, 124, 279, 195, 263, 271, 188,
	180, 118, 269, 186, 179, 169, 144, 155, 219, 177,
	220, 156, 191, 190, 192, 0, 0, 0, 254, 277,
	292, 128, 0, 262, 286, 287, 0, 223, 129, 149,
	143, 218, 147, 193, 125, 158, 251, 168, 176, 227,
	290, 208, 233, 132, 276, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 120, 173, 289, 225,
	146, 278, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 113, 121,
	127, 133, 138, 142, 145, 151, 154, 157, 159, 160,
	161, 166, 178, 182, 183, 184, 185, 196, 197, 198,
	200, 203, 204, 205, 206, 207, 210, 212, 213, 214,
	215, 216, 217, 226, 229, 235, 236, 237, 238, 239,
	240, 242, 245, 246, 247, 248, 255, 259, 265, 266,
	275, 282, 285, 0, 0, 0, 0, 114, 165, 181,
	310, 241, 244, 250, 257, 311, 312, 0, 0, 0,
	202, 224, 194, 162, 1082, 0, 0, 0, 0, 141,
	170, 137, 0, 0, 0, 172, 0, 0, 0, 174,
	0, 0, 253, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 108, 109, 0, 1084, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 313, 0, 0, 0, 0,
	221, 0, 258, 153, 171, 126, 167, 111, 122, 0,
	152, 199, 230, 234, 0, 0, 0, 134, 0, 232,
	209, 274, 0, 1080, 231, 175, 264, 222, 273, 283,
	284, 261, 281, 288, 249, 115, 260, 272, 131, 243,
	0, 0, 0, 117, 270, 256, 187, 163, 164, 116,
	0, 228, 140, 148, 136, 201, 267, 268, 135, 291,
	123, 280, 119, 124, 279, 195, 263, 271, 188, 180,
	118, 269, 186, 179, 169, 144, 155, 219, 177, 220,
	156, 191, 190, 192, 0, 0, 0, 254, 277, 292,
	128, 0, 262, 286, 287, 0, 223, 129, 149, 143,
	218, 147, 193, 125, 158, 251, 168, 176, 227, 290,
	208, 233, 132, 276, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 120, 173, 289, 225, 146,
	278, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 113, 121, 127,
	133, 138, 142, 145, 151, 154, 157, 159, 160, 161,
	166, 178, 182, 183, 184, 185, 196, 197, 198, 200,
	203, 204, 205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 226, 229, 235, 236, 237, 238, 239, 240,
	242, 245, 246, 247, 248, 255, 259, 265, 266, 275,
	282, 285, 0, 0, 0, 0, 114, 165, 181, 310,
	241, 244, 250, 257, 311, 312, 202, 0, 0, 0,
	224, 194, 162, 0, 0, 141, 170, 137, 0, 0,
	0, 172, 0, 0, 0, 174, 0, 0, 253, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 108,
	109, 0, 0, 1047, 0, 0, 1048, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 313, 0, 0, 0, 0, 221, 0, 258, 153,
	171, 126, 167, 111, 122, 0, 152, 199, 230, 234,
	0, 0, 0, 134, 0, 232, 209, 274, 0, 211,
	231, 175, 264, 222, 273, 283, 284, 261, 281, 288,
	249, 115, 260, 272, 131, 243, 0, 0, 0, 117,
	270, 256, 187, 163, 164, 116, 0, 228, 140, 148,
	136, 201, 267, 268, 135, 291, 123, 280, 119, 124,
	279, 195, 263, 271, 188, 180, 118, 269, 186, 179,
	169, 144, 155, 219, 177, 220, 156, 191, 190, 192,
	0, 0, 0, 254, 277, 292, 128, 0, 262, 286,
	287, 0, 223, 129, 149, 143, 218, 147, 193, 125,
	158, 251, 168, 176, 227, 290, 208, 233, 132, 276,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 120, 173, 289, 225, 146, 278, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 113, 121, 127, 133, 138, 142, 145,
	151, 154, 157, 159, 160, 161, 166, 178, 182, 183,
	184, 185, 196, 197, 198, 200, 203, 204, 205, 206,
	207, 210, 212, 213, 214, 215, 216, 217, 226, 229,
	235, 236, 237, 238, 239, 240, 242, 245, 246, 247,
	248, 255, 259, 265, 266, 275, 282, 285, 0, 0,
	0, 0, 114, 165, 181, 310, 241, 244, 250, 257,
	311, 312, 202, 0, 0, 0, 224, 194, 162, 0,
	0, 141, 170, 137, 0, 0, 0, 172, 0, 0,
	0, 174, 0, 0, 253, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 435, 107, 108, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 313, 0, 0,
	0, 0, 221, 0, 258, 153, 171, 126, 167, 111,
	122, 0, 152, 199, 230, 234, 0, 0, 0, 134,
	0, 232, 209, 274, 0, 211, 231, 175, 264, 222,
	273, 283, 284, 261, 281, 288, 249, 115, 260, 272,
	131, 243, 0, 0, 0, 117, 270, 256, 187, 163,
	164, 116, 0, 228, 140, 148, 136, 201, 267, 268,
	135, 291, 123, 280, 119, 124, 279, 195, 263, 271,
	188, 180, 118, 269, 186, 179, 169, 144, 155, 219,
	177, 220, 156, 191, 190, 192, 0, 0, 0, 254,
	277, 292, 128, 0, 262, 286, 287, 0, 223, 129,
	149, 143, 218, 147, 193, 125, 158, 251, 168, 176,
	227, 290, 208, 233, 132, 276, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 120, 173, 289,
	225, 146, 278, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 113,
	121, 127, 133, 138, 142, 145, 151, 154, 157, 159,
	160, 161, 166, 178, 182, 183, 184, 185, 196, 197,
	198, 200, 203, 204, 205, 206, 207, 210, 212, 213,
	214, 215, 216, 217, 226, 229, 235, 236, 237, 238,
	239, 240, 242, 245, 246, 247, 248, 255, 259, 265,
	266, 275, 282, 285, 0, 0, 0, 0, 114, 165,
	181, 310, 241, 244, 250, 257, 311, 312, 202, 0,
	0, 0, 224, 194, 162, 0, 0, 141, 170, 137,
	0, 0, 0, 172, 0, 0, 0, 174, 0, 0,
	253, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	107, 108, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 313, 0, 0, 0, 0, 221, 0,
	258, 153, 171, 126, 167, 111, 122, 0, 152, 199,
	230, 234, 0, 0, 0, 134, 0, 232, 209, 274,
	0, 211, 231, 175, 264, 222, 273, 283, 284, 261,
	281, 288, 249, 115, 260, 272, 131, 243, 0, 0,
	0, 117, 270, 256, 187, 163, 164, 116, 0, 228,
	140, 148, 136, 201, 267, 268, 135, 291, 123, 280,
	119, 124, 279, 195, 263, 271, 188, 180, 118, 269,
	186, 179, 169, 144, 155, 219, 177, 220, 156, 191,
	190, 192, 0, 0, 0, 254, 277, 292, 128, 0,
	262, 286, 287, 0, 223, 129, 149, 143, 218, 147,
	193, 125, 158, 251, 168, 176, 227, 290, 208, 233,
	132, 276, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 120, 173, 289, 225, 146, 278, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 113, 121, 127, 133, 138,
	142, 145, 151, 154, 157, 159, 160, 161, 166, 178,
	182, 183, 184, 185, 196, 197, 198, 200, 203, 204,
	205, 206, 207, 210, 212, 213, 214, 215, 216, 217,
	226, 229, 235, 236, 237, 238, 239, 240, 242, 245,
	246, 247, 248, 255, 259, 265, 266, 275, 282, 285,
	0, 0, 0, 0, 114, 165, 181, 310, 241, 244,
	250, 257, 311, 312, 202, 0, 0, 0, 224, 194,
	162, 0, 0, 141, 170, 137, 0, 0, 0, 172,
	0, 0, 0, 174, 0, 0, 253, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 108, 109, 0,
	1084, 0, 0, 0, 0, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 0, 0, 0, 313,
	0, 0, 0, 0, 221, 0, 258, 153, 171, 126,
	167, 111, 122, 0, 152, 199, 230, 234, 0, 0,
	0, 134, 0, 232, 209, 274, 0, 211, 231, 175,
	264, 222, 273, 283, 284, 261, 281, 288, 249, 115,
	260, 272, 131, 243, 0, 0, 0, 117, 270, 256,
	187, 163, 164, 116, 0, 228, 140, 148, 136, 201,
	267, 268, 135, 291, 123, 280, 119, 124, 279, 195,
	263, 271, 188, 180, 118, 269, 186, 179, 169, 144,
	155, 219, 177, 220, 156, 191, 190, 192, 0, 0,
	0, 254, 277, 292, 128, 0, 262, 286, 287, 0,
	223, 129, 149, 143, 218, 147, 193, 125, 158, 251,
	168, 176, 227, 290, 208, 233, 132, 276, 252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 120,
	173, 289, 225, 146, 278, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 113, 121, 127, 133, 138, 142, 145, 151, 154,
	157, 159, 160, 161, 166, 178, 182, 183, 184, 185,
	196, 197, 198, 200, 203, 204, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 226, 229, 235, 236,
	237, 238, 239, 240, 242, 245, 246, 247, 248, 255,
	259, 265, 266, 275, 282, 285, 0, 0, 0, 0,
	114, 165, 181, 310, 241, 244, 250, 257, 311, 312,
	202, 0, 0, 0, 224, 194, 162, 0, 0, 141,
	170, 137, 0, 0, 0, 172, 0, 0, 0, 174,
	0, 0, 253, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 108, 109, 0, 1205, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 313, 0, 0, 0, 0,
	221, 0, 258, 153, 171, 126, 167, 111, 122, 0,
	152, 199, 230, 234, 0, 0, 0, 134, 0, 232,
	209, 274, 0, 211, 231, 175, 264, 222, 273, 283,
	284, 261, 281, 288, 249, 115, 260, 272, 131, 243,
	0, 0, 0, 117, 270, 256, 187, 163, 164, 116,
	0, 228, 140, 148, 136, 201, 267, 268, 135, 291,
	123, 280, 119, 124, 279, 195, 263, 271, 188, 180,
	118, 269, 186, 179, 169, 144, 155, 219, 177, 220,
	156, 191, 190, 192, 0, 0, 0, 254, 277, 292,
	128, 0, 262, 286, 287, 0, 223, 129, 149, 143,
	218, 147, 193, 125, 158, 251, 168, 176, 227, 290,
	208, 233, 132, 276, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 120, 173, 289, 225, 146,
	278, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 113, 121, 127,
	133, 138, 142, 145, 151, 154, 157, 159, 160, 161,
	166, 178, 182, 183, 184, 185, 196, 197, 198, 200,
	203, 204, 205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 226, 229, 235, 236, 237, 238, 239, 240,
	242, 245, 246, 247, 248, 255, 259, 265, 266, 275,
	282, 285, 0, 0, 0, 0, 114, 165, 181, 310,
	241, 244, 250, 257, 311, 312, 202, 0, 0, 0,
	224, 194, 162, 0, 794, 141, 170, 137, 0, 0,
	0, 172, 0, 0, 0, 174, 0, 0, 253, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 108,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 313, 0, 0, 0, 0, 221, 0, 258, 153,
	171, 126, 167, 111, 122, 0, 152, 199, 230, 234,
	0, 0, 0, 134, 0, 232, 209, 274, 0, 211,
	231, 175, 264, 222, 273, 283, 284, 261, 281, 288,
	249, 115, 260, 272, 131, 243, 0, 0, 0, 117,
	270, 256, 187, 163, 164, 116, 0, 228, 140, 148,
	136, 201, 267, 268, 135, 291, 123, 280, 119, 124,
	279, 195, 263, 271, 188, 180, 118, 269, 186, 179,
	169, 144, 155, 219, 177, 220, 156, 191, 190, 192,
	0, 0, 0, 254, 277, 292, 128, 0, 262, 286,
	287, 0, 223, 129, 149, 143, 218, 147, 193, 125,
	158, 251, 168, 176, 227, 290, 208, 233, 132, 276,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 120, 173, 289, 225, 146, 278, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 113, 121, 127, 133, 138, 142, 145,
	151, 154, 157, 159, 160, 161, 166, 178, 182, 183,
	184, 185, 196, 197, 198, 200, 203, 204, 205, 206,
	207, 210, 212, 213, 214, 215, 216, 217, 226, 229,
	235, 236, 237, 238, 239, 240, 242, 245, 246, 247,
	248, 255, 259, 265, 266, 275, 282, 285, 0, 0,
	0, 0, 114, 165, 181, 310, 241, 244, 250, 257,
	311, 312, 202, 0, 0, 0, 224, 194, 162, 0,
	0, 141, 170, 137, 0, 0, 0, 172, 0, 0,
	0, 174, 0, 0, 253, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 108, 109, 0, 791, 0,
	0, 0, 0, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 313, 0, 0,
	0, 0, 221, 0, 258, 153, 171, 126, 167, 111,
	122, 0, 152, 199, 230, 234, 0, 0, 0, 134,
	0, 232, 209, 274, 0, 211, 231, 175, 264, 222,
	273, 283, 284, 261, 281, 288, 249, 115, 260, 272,
	131, 243, 0, 0, 0, 117, 270, 256, 187, 163,
	164, 116, 0, 228, 140, 148, 136, 201, 267, 268,
	135, 291, 123, 280, 119, 124, 279, 195, 263, 271,
	188, 180, 118, 269, 186, 179, 169, 144, 155, 219,
	177, 220, 156, 191, 190, 192, 0, 0, 0, 254,
	277, 292, 128, 0, 262, 286, 287, 0, 223, 129,
	149, 143, 218, 147, 193, 125, 158, 251, 168, 176,
	227, 290, 208, 233, 132, 276, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 120, 173, 289,
	225, 146, 278, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 113,
	121, 127, 133, 138, 142, 145, 151, 154, 157, 159,
	160, 161, 166, 178, 182, 183, 184, 185, 196, 197,
	198, 200, 203, 204, 205, 206, 207, 210, 212, 213,
	214, 215, 216, 217, 226, 229, 235, 236, 237, 238,
	239, 240, 242, 245, 246, 247, 248, 255, 259, 265,
	266, 275, 282, 285, 0, 0, 0, 0, 114, 165,
	181, 310, 241, 244, 250, 257, 311, 312, 202, 0,
	0, 0, 224, 194, 162, 0, 0, 141, 170, 825,
	0, 0, 0, 172, 0, 0, 0, 174, 0, 0,
	253, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 108, 109, 0, 824, 0, 0, 0, 0, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 313, 0, 0, 0, 0, 221, 0,
	258, 153, 171, 126, 167, 111, 122, 0, 152, 199,
	230, 234, 0, 0, 0, 134, 0, 232, 209, 274,
	0, 211, 231, 175, 264, 222, 273, 283, 284, 261,
	281, 288, 249, 115, 260, 272, 131, 243, 0, 0,
	0, 117, 270, 256, 187, 163, 164, 116, 0, 228,
	140, 148, 136, 201, 267, 268, 135, 291, 123, 280,
	119, 124, 279, 195, 263, 271, 188, 180, 118, 269,
	186, 179, 169, 144, 155, 219, 177, 220, 156, 191,
	190, 192, 0, 0, 0, 254, 277, 292, 128, 0,
	262, 286, 287, 0, 223, 129, 149, 143, 218, 147,
	193, 125, 158, 251, 168, 176, 227, 290, 208, 233,
	132, 276, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 120, 173, 289, 225, 146, 278, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 113, 121, 127, 133, 138,
	142, 145, 151, 154, 157, 159, 160, 161, 166, 178,
	182, 183, 184, 185, 196, 197, 198, 200, 203, 204,
	205, 206, 207, 210, 212, 213, 214, 215, 216, 217,
	226, 229, 235, 236, 237, 238, 239, 240, 242, 245,
	246, 247, 248, 255, 259, 265, 266, 275, 282, 285,
	0, 0, 0, 0, 114, 165, 181, 310, 241, 244,
	250, 257, 311, 312, 452, 0, 0, 0, 224, 194,
	162, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 170, 137, 0, 0, 0, 172, 0, 0, 0,
	174, 0, 0, 253, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 108, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 313, 0, 0, 0,
	0, 221, 0, 258, 153, 171, 126, 167, 111, 122,
	0, 152, 199, 230, 234, 0, 0, 0, 134, 0,
	232, 209, 274, 0, 211, 231, 175, 264, 222, 273,
	283, 284, 261, 281, 288, 249, 115, 260, 272, 131,
	243, 0, 0, 0, 117, 270, 256, 187, 163, 164,
	116, 0, 228, 140, 148, 136, 201, 267, 268, 135,
	291, 123, 280, 119, 124, 279, 195, 263, 271, 188,
	180, 118, 269, 186, 179, 169, 144, 155, 219, 177,
	220, 156, 191, 190, 192, 0, 0, 0, 254, 277,
	292, 128, 0, 262, 286, 287, 0, 223, 129, 149,
	143, 218, 147, 193, 125, 158, 251, 168, 176, 227,
	290, 208, 233, 132, 276, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 120, 173, 289, 225,
	146, 278, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 113, 121,
	127, 133, 138, 142, 145, 151, 154, 157, 159, 160,
	161, 166, 178, 182, 183, 184, 185, 196, 197, 198,
	200, 203, 204, 205, 206, 207, 210, 212, 213, 214,
	215, 216, 217, 226, 229, 235, 236, 237, 238, 239,
	240, 242, 245, 246, 247, 248, 255, 259, 265, 266,
	275, 282, 285, 0, 0, 0, 0, 114, 165, 181,
	310, 241, 244, 250, 257, 311, 312, 202, 0, 0,
	0, 224, 194, 162, 0, 0, 141, 170, 137, 0,
	0, 0, 172, 0, 0, 0, 174, 0, 0, 253,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	108, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 0,
	305, 0, 313, 0, 0, 0, 0, 221, 0, 258,
	153, 171, 126, 167, 111, 122, 0, 152, 199, 230,
	234, 0, 0, 0, 134, 0, 232, 209, 274, 0,
	211, 231, 175, 264, 222, 273, 283, 284, 261, 281,
	288, 249, 115, 260, 272, 131, 243, 0, 0, 0,
	117, 270, 256, 187, 163, 164, 116, 0, 228, 140,
	148, 136, 201, 267, 268, 135, 291, 123, 280, 119,
	124, 279, 195, 263, 271, 188, 180, 118, 269, 186,
	179, 169, 144, 155, 219, 177, 220, 156, 191, 190,
	192, 0, 0, 0, 254, 277, 292, 128, 0, 262,
	286, 287, 0, 223, 129, 149, 143, 218, 147, 193,
	125, 158, 251, 168, 176, 227, 290, 208, 233, 132,
	276, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 120, 173, 289, 225, 146, 278, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 113, 121, 127, 133, 138, 142,
	145, 151, 154, 157, 159, 160, 161, 166, 178, 182,
	183, 184, 185, 196, 197, 198, 200, 203, 204, 205,
	206, 207, 210, 212, 213, 214, 215, 216, 217, 226,
	229, 235, 236, 237, 238, 239, 240, 242, 245, 246,
	247, 248, 255, 259, 265, 266, 275, 282, 285, 0,
	0, 0, 0, 114, 165, 181, 310, 241, 244, 250,
	257, 311, 312, 202, 0, 0, 0, 224, 194, 162,
	0, 0, 141, 170, 137, 0, 0, 0, 172, 0,
	0, 0, 174, 0, 0, 253, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 108, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 313, 0,
	0, 0, 0, 221, 0, 258, 153, 171, 126, 167,
	111, 122, 0, 152, 199, 230, 234, 0, 0, 0,
	134, 0, 232, 209, 274, 0, 211, 231, 175, 264,
	222, 273, 283, 284, 261, 281, 288, 249, 115, 260,
	272, 131, 243, 0, 0, 0, 117, 270, 256, 187,
	163, 164, 116, 0, 228, 140, 148, 136, 201, 267,
	268, 135, 291, 123, 280, 119, 124, 279, 195, 263,
	271, 188, 180, 118, 269, 186, 179, 169, 144, 155,
	219, 177, 220, 156, 191, 190, 192, 0, 0, 0,
	254, 277, 292, 128, 0, 262, 286, 287, 0, 223,
	129, 149, 143, 218, 147, 193, 125, 158, 251, 168,
	176, 227, 290, 208, 233, 132, 276, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 120, 173,
	289, 225, 146, 278, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	113, 121, 127, 133, 138, 142, 145, 151, 154, 157,
	159, 160, 161, 166, 178, 182, 183, 184, 185, 196,
	197, 198, 200, 203, 204, 205, 206, 207, 210, 212,
	213, 214, 215, 216, 217, 226, 229, 235, 236, 237,
	238, 239, 240, 242, 245, 246, 247, 248, 255, 259,
	265, 266, 275, 282, 285, 0, 0, 0, 0, 114,
	165, 181, 310, 241, 244, 250, 257, 311, 312, 0,
	0, 0, 0, 224, 194, 162,
}

var yyPact = [...]int{
	1742, -1000, -296, 1106, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1046, 855, -1000, -1000, -1000, -1000, -1000,
	-1000, 317, 13258, 145, 172, 40, 18259, 170, -6, 18615,
	-1000, 18, -1000, 7, 18615, 13, -21, -1000, -1000, -66,
	-69, -1000, 10763, -264, -1000, 446, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 877, 1048, 1041,
	1056, 656, 979, -1000, 9321, 144, 144, 17903, 7526, -1000,
	-1000, 649, 18615, 161, 18615, -128, 156, 129, 129, 129,
	167, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 157, 18615, 580, 580, 346, -1000, 18615,
	134, 580, 134, 134, 134, 18615, -1000, 224, -1000, -1000,
	-1000, -1000, -1000, -1000, 18615, 580, 986, 354, 202, 4894,
	-1000, 343, -1000, 4894, 37, 4894, -68, 1068, 24, 21,
	-1000, 580, -88, -1000, -1000, -1000, -1000, -1000, -1000, 151,
	-1000, -1000, 18615, -79, 131, 301, -1000, -1000, -1000, -1000,
	-1000, -1000, 638, 609, -1000, 10763, 2116, 650, 650, -1000,
	-1000, 183, -1000, -1000, 11831, 11831, 11831, 11831, 11831, 11831,
	11831, 11831, 11831, 12187, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 650, 217,
	-1000, 10405, 650, 650, 650, 650, 650, 650, 650, 650,
	10763, 650, 650, 650, 650, 650, 650, 650, 650, 650,
	650, 650, 650, 650, 650, 650, 650, -1000, -1000, -265,
	-278, 18615, -1000, 18615, 548, 1046, -1000, 855, -1000, -1000,
	-1000, 1022, 10763, 10763, 1046, -1000, 967, 9321, -1000, -1000,
	955, -1000, -1000, -1000, -1000, 393, 1087, -1000, 12902, 216,
	16828, 15760, 18615, 733, 670, -1000, -1000, 214, 858, 7150,
	-93, -1000, -1000, -1000, 179, 17540, -1000, -1000, -1000, 983,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 810,
	18615, -1000, 365, -1000, 580, 1034, -29, 18615, 580, 345,
	580, 18615, 129, 18615, 4894, 4894, 4894, 31, 90, 80,
	18615, 856, 150, 18615, 1027, 906, 18615, 580, 580, -1000,
	6398, -1000, 4894, 354, -1000, 539, 10763, 4894, 4894, 4894,
	18615, 4894, 4894, -1000, -1000, -1000, 359, 524, -1000, -1000,
	-1000, -1000, -1000, 4894, 4894, -1000, 1078, 344, -1000, -1000,
	-1000, -1000, 10763, 261, -1000, 905, -1000, -1000, -91, 12,
	-1000, 18615, -1000, 1106, -1000, -1000, -1000, -107, -1000, -1000,
	10763, 10763, 10763, 10763, 577, 395, -1000, 375, 11831, 411,
	385, 11831, 11831, 11831, 11831, 11831, 11831, 11831, 11831, 11831,
	11831, 11831, 11831, 11831, 11831, 11831, 479, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 580, -1000, 1104, 781, 781,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 12543,
	-1000, 7889, 6398, 656, 806, 1046, 9321, 9321, 10763, 10763,
	10037, 9679, 9321, 1005, 330, 609, 18615, -1000, -1000, 11475,
	-1000, -1000, -1000, -1000, -1000, 554, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 18615, 18615, 9321, 9321, 9321, 9321, 9321,
	580, 580, 580, 761, 527, -1000, -1000, 1041, 656, 955,
	-1000, 1094, 256, 621, 852, -1000, 763, 1041, 15048, 813,
	-1000, 955, -1000, -1000, -1000, 18615, 395, -1000, -1000, 17184,
	-1000, -1000, 6022, 69, 18615, -1000, 845, 1099, -1000, -1000,
	-1000, 1033, 13614, 14692, 69, 853, 15760, 18615, -1000, -1000,
	15760, 18615, 5646, 6774, -93, -1000, 702, -1000, -99, -98,
	8605, 8247, 233, -1000, -1000, -1000, -1000, 4518, 587, 624,
	392, -51, -1000, -1000, -1000, 861, -1000, 861, 861, 861,
	861, -19, -19, -19, -19, -1000, -1000, -1000, -1000, -1000,
	878, 876, -1000, 861, 861, 861, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 873, 873, 873, 863, 863, 891,
	855, 18615, 154, 1032, 4894, 1026, 4894, -1000, 18615, 148,
	-1000, -1000, -1000, 18615, 18615, 18615, 18615, 18615, 186, 18615,
	18615, 820, -1000, 18615, 4894, -1000, -1000, 211, -1000, -1000,
	-1000, -1000, -1000, 609, -1000, -1000, -1000, -1000, -1000, -1000,
	18615, -1000, -1000, 18615, -1000, 16828, -1000, -1000, 18615, 354,
	18615, 18615, 609, -1000, 533, 18615, -1000, 18615, -1000, 16472,
	-1000, -1000, -1000, -1000, 609, 375, 714, 315, -1000, -1000,
	443, -1000, -1000, -1000, 1987, -1000, -1000, -1000, -1000, 411,
	11831, 11831, 11831, 567, 1987, 1953, 1851, 2023, 240, 390,
	390, 235, 235, 235, 235, 235, 418, 418, -1000, -1000,
	-1000, 554, -1000, -1000, -1000, 554, 9321, 9321, 814, 650,
	209, -1000, 877, -1000, -1000, 1041, 797, 797, 531, 699,
	314, 1075, 797, 312, 1073, 797, 797, 9321, -1000, -1000,
	337, -1000, 10763, 554, -1000, 207, -1000, 1077, 744, 740,
	797, 554, 554, 797, 797, -258, -1000, 709, -1000, -1000,
	596, -1000, 297, -1000, 1022, -1000, -1000, 962, 10763, 10763,
	10763, -1000, -1000, -1000, 1022, 1059, -1000, 973, 971, 1065,
	9321, 15760, 955, -1000, -1000, -1000, 201, 887, 650, -1000,
	18615, 15760, 15760, 15760, 15760, 15760, -1000, 930, 926, -1000,
	919, 918, 934, 18615, -1000, 801, 554, 656, 13614, 215,
	650, -1000, 16116, -1000, -1000, 1065, 15760, 643, -1000, 643,
	-1000, 197, -1000, -1000, 702, -93, -104, -1000, -1000, -1000,
	-1000, 609, -1000, -1000, 609, -1000, 532, 698, 4142, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 871, 580, -1000, 1014,
	258, 280, 580, 1008, -1000, -1000, -1000, 989, -1000, 372,
	-53, -1000, -1000, 440, -19, -19, -1000, -1000, 233, 981,
	233, 233, 233, 526, 526, -1000, -1000, -1000, -1000, 439,
	-1000, -1000, -1000, 436, -1000, 904, 18615, 1106, 1029, 18615,
	855, -1000, -1000, -1000, -1000, -1000, 300, 300, 249, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	68, 857, -1000, -1000, -1000, -1000, 11, 29, 149, -1000,
	4894, -1000, 6398, 344, 354, 868, 344, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	567, 1987, 1906, -1000, 11831, 11831, -1000, -1000, 797, 797,
	9321, 6398, 1046, 1022, -1000, -1000, 204, 479, 204, 11831,
	11831, -1000, 11831, 11831, -1000, -140, 816, 305, -1000, 10763,
	558, -1000, 6398, -1000, 11831, 11831, -1000, -1000, -1000, -1000,
	-1000, 504, -1000, -1000, -1000, -1000, -1000, 527, -1000, -1000,
	294, -1000, 781, -1000, 952, 609, 609, -1000, -1000, 18615,
	-1000, -1000, -1000, -1000, 1060, 10763, -1000, 694, -1000, 5270,
	902, 18615, 650, 1106, 14333, 18615, 808, -1000, 291, 1099,
	886, 901, 1045, -1000, -1000, -1000, -1000, 922, -1000, 921,
	-1000, -1000, -1000, -1000, -1000, -1000, 656, -1000, 160, 159,
	158, 18615, -1000, 1046, 643, -1000, -1000, 225, -1000, -1000,
	-103, -115, -1000, -1000, -1000, 4518, -1000, 4518, 18615, 112,
	-1000, 580, 580, -1000, -1000, 865, 900, 11831, -1000, -1000,
	-1000, 600, 233, 233, -1000, 303, -1000, -1000, -1000, 792,
	-1000, 777, 678, 775, 18615, -1000, 855, 1023, 1106, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18615, -1000, -1000, -1000,
	-1000, -1000, 18615, -152, 580, 18615, 18615, 18615, 18615, -1000,
	192, 354, -1000, 354, 18615, 354, -1000, 11831, 1987, 1987,
	-1000, -1000, 554, -1000, 1041, -1000, 554, 861, 861, -1000,
	861, 863, -1000, 861, -1, 861, -3, 554, 554, 1804,
	1725, 1678, 1632, 650, -135, -1000, 609, 10763, -1000, 1349,
	1320, 502, -1000, 781, -1000, -1000, -1000, 1062, 1055, 609,
	-1000, -1000, 1016, 815, 633, -1000, -1000, 8963, 768, 187,
	747, -1000, 1065, 18615, 10763, -1000, -1000, 10763, 862, -1000,
	10763, -1000, -1000, -1000, 1046, 650, 650, 650, 747, 1041,
	-1000, -1000, -1000, -1000, 4142, -1000, 707, -1000, 861, -1000,
	-1000, -1000, 18615, -47, 1093, 1987, -1000, -1000, -1000, -1000,
	-1000, -19, 489, -19, 421, -1000, 412, 4894, 1106, 855,
	-1000, -1000, -1000, -1000, 1018, -1000, 6398, -1000, -1000, 782,
	881, -1000, -1000, 6398, -1000, -1000, 692, -1000, -1000, 1987,
	-1000, 1022, -1000, -1000, 155, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11831, 11831, 11831, 11831, 11831, 1041, 481,
	609, 11831, 11831, -1000, -1000, -1000, 10763, 10763, 1007, -1000,
	650, -1000, 870, 18615, 18615, -1000, 18615, 1046, -1000, 609,
	609, 18615, 609, 15404, 18615, 18615, 13977, -1000, 210, 18615,
	-1000, 683, 271, -1000, -56, 233, -1000, 233, 575, 557,
	-1000, 1106, 650, 645, -1000, 285, 18615, 18615, -1000, -1000,
	18615, -1000, -1000, -1000, 1077, 1077, 1077, 1077, 140, 554,
	-1000, 1077, 1077, 609, 638, 1090, -1000, 650, 1106, 162,
	-1000, -1000, 1041, 674, 672, -1000, 672, 672, 215, 210,
	-1000, 580, 281, 470, -1000, 108, 356, 996, -1000, 991,
	-1000, -1000, -1000, -1000, -1000, 67, 6398, 4518, 659, -1000,
	-1000, -1000, -1000, -1000, -1000, 554, 74, -155, -1000, -1000,
	-1000, 18615, 633, 18615, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 408, -1000, -1000, 18615, -1000, 450, -1000, -1000,
	654, -1000, 18615, -1000, -1000, 857, -1000, 943, -150, -158,
	627, -1000, -1000, 715, -1000, -1000, 67, 970, -152, -1000,
	942, -1000, 18615, -1000, 61, -1000, -153, 605, 56, -156,
	893, 650, -161, 888, -1000, 1072, 11119, -1000, -1000, 1079,
	229, 229, 1077, 554, -1000, -1000, -1000, 116, 456, -1000,
	-1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1365, 1363, 27, 66, 67, 1362, 1360, 1357, 114,
	109, 86, 1356, 1354, 1351, 1349, 1348, 1347, 1344, 1342,
	1341, 1340, 1336, 1335, 1331, 1330, 1325, 1324, 1323, 1321,
	1320, 1319, 1318, 1115, 1317, 1316, 1315, 1314, 1313, 90,
	1310, 75, 1309, 1308, 1307, 1306, 1305, 1303, 1302, 1301,
	1300, 48, 218, 58, 62, 1299, 61, 1754, 35, 56,
	65, 71, 1297, 1297, 34, 1296, 1294, 80, 1292, 1291,
	59, 1290, 1283, 91, 68, 79, 1282, 13, 38, 1281,
	1278, 1277, 1276, 30, 1983, 1275, 1273, 14, 1272, 1271,
	102, 1266, 74, 31, 15, 12, 21, 1265, 69, 1264,
	6, 1263, 64, 1262, 1261, 1260, 1256, 20, 1255, 63,
	1254, 42, 60, 1253, 9, 1252, 87, 33, 19, 7,
	1250, 1249, 18, 70, 53, 73, 1247, 1247, 1244, 1242,
	538, 1240, 939, 51, 1238, 1236, 118, 22, 1234, 115,
	81, 1233, 1232, 1231, 1229, 44, 915, 1996, 24, 72,
	1227, 1225, 1224, 2557, 25, 57, 17, 1223, 1220, 1219,
	37, 152, 41, 1216, 1213, 45, 1212, 1211, 1209, 1208,
	1207, 1204, 1202, 192, 1201, 1200, 1199, 36, 26, 1198,
	1197, 77, 23, 1196, 1195, 1192, 49, 78, 1189, 1175,
	52, 1170, 76, 39, 1166, 1164, 1163, 1159, 1158, 32,
	10, 1156, 16, 1155, 11, 1154, 29, 1153, 4, 1152,
	8, 1142, 3, 0, 1141, 5, 1139, 1138, 46, 1,
	1131, 2, 40, 1129, 1125, 1121, 83, 1120, 1117, 1534,
	1311, 82, 1112, 84,
}

var yyR1 = [...]int{
	0, 227, 228, 228, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 213, 213, 213, 216, 217,
	20, 3, 3, 3, 3, 2, 2, 8, 4, 5,
	5, 9, 9, 42, 42, 10, 11, 11, 11, 11,
	231, 231, 67, 67, 68, 68, 116, 116, 12, 13,
	13, 125, 125, 124, 124, 124, 126, 126, 126, 126,
	163, 163, 128, 128, 127, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 38, 38, 32, 32, 32, 32,
	35, 35, 35, 35, 35, 35, 50, 50, 50, 215,
	215, 214, 212, 212, 211, 211, 210, 21, 21, 195,
	197, 197, 196, 196, 196, 196, 187, 166, 166, 166,
	166, 169, 169, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 168, 168, 168, 168, 168, 170, 170, 170,
	170, 170, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 172, 172, 172,
	172, 172, 172, 172, 172, 186, 186, 173, 173, 181,
	181, 182, 182, 182, 179, 179, 180, 180, 183, 183,
	183, 175, 175, 176, 176, 184, 184, 177, 177, 177,
	178, 178, 178, 185, 185, 185, 185, 185, 174, 174,
	188, 188, 205, 205, 204, 204, 204, 34, 194, 194,
	201, 201, 201, 201, 201, 191, 191, 191, 192, 192,
	190, 190, 193, 193, 203, 203, 202, 189, 189, 206,
	206, 206, 206, 220, 221, 219, 219, 219, 219, 219,
	198, 198, 198, 199, 199, 199, 200, 200, 200, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	209, 207, 207, 208, 208, 16, 22, 22, 17, 17,
	17, 17, 17, 18, 18, 23, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 134, 134, 136,
	136, 132, 132, 135, 135, 133, 133, 133, 137, 137,
	137, 138, 138, 164, 164, 164, 25, 25, 27, 27,
	28, 29, 29, 158, 158, 159, 159, 30, 31, 43,
	43, 43, 43, 43, 43, 45, 45, 45, 7, 7,
	7, 7, 44, 44, 44, 6, 6, 26, 26, 26,
	26, 19, 232, 39, 40, 40, 41, 41, 41, 47,
	47, 47, 46, 46, 46, 53, 53, 55, 55, 55,
	55, 55, 56, 56, 56, 56, 56, 56, 52, 52,
	54, 54, 54, 54, 54, 150, 150, 150, 149, 149,
	58, 58, 59, 59, 60, 60, 63, 61, 61, 61,
	61, 99, 76, 76, 115, 115, 114, 114, 117, 117,
	62, 62, 62, 62, 64, 64, 65, 65, 66, 66,
	157, 157, 156, 156, 156, 155, 155, 69, 69, 69,
	71, 70, 70, 70, 70, 72, 72, 74, 74, 73,
	73, 73, 73, 75, 77, 77, 77, 77, 77, 78,
	78, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	131, 131, 80, 80, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 91, 91, 91, 91, 91, 91,
	81, 81, 81, 81, 81, 81, 81, 51, 51, 92,
	92, 92, 226, 226, 98, 93, 93, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 88, 88, 88, 88, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 233, 233, 90, 89, 89,
	89, 89, 89, 89, 89, 48, 48, 48, 48, 48,
	162, 162, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 103, 103, 49, 49, 101,
	101, 102, 104, 104, 100, 100, 100, 83, 83, 83,
	83, 83, 83, 83, 83, 85, 85, 85, 105, 105,
	106, 106, 107, 107, 108, 108, 109, 110, 110, 110,
	111, 111, 111, 111, 112, 112, 112, 82, 82, 82,
	82, 113, 113, 113, 113, 118, 118, 94, 94, 96,
	96, 95, 97, 119, 119, 122, 120, 120, 120, 123,
	123, 123, 123, 123, 123, 123, 121, 121, 121, 152,
	152, 152, 129, 129, 139, 139, 140, 140, 130, 130,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	142, 142, 142, 143, 143, 144, 144, 144, 151, 151,
	147, 147, 148, 148, 153, 153, 154, 154, 222, 223,
	224, 224, 225, 225, 225, 33, 36, 36, 37, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 229, 230, 160, 161, 161, 161,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	2, 4, 6, 6, 7, 4, 6, 5, 8, 1,
	3, 7, 8, 1, 1, 10, 8, 7, 6, 6,
	1, 1, 1, 3, 1, 3, 0, 4, 3, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 2, 2, 8, 5, 7,
	6, 8, 5, 5, 0, 1, 4, 5, 7, 4,
	5, 5, 4, 4, 4, 3, 1, 1, 1, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 5, 4,
	2, 4, 1, 3, 3, 3, 8, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 0, 3, 0, 1, 0, 3, 3,
	0, 2, 2, 0, 2, 1, 2, 1, 0, 2,
	5, 4, 1, 2, 2, 3, 2, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 2, 3, 1, 10,
	11, 11, 12, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 7, 7, 4, 5, 4, 4, 7, 5,
	5, 5, 12, 7, 5, 9, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 3, 4,
	4, 4, 4, 4, 4, 3, 2, 7, 2, 3,
	4, 3, 7, 5, 4, 2, 4, 4, 3, 3,
	5, 2, 6, 4, 3, 7, 4, 1, 1, 0,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 5, 0, 1, 0, 1, 2, 3, 0,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 5, 3, 2, 2, 3,
	3, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 1, 2,
	3, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 2, 1, 3, 3,
	3, 3, 3, 7, 0, 3, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 5, 7, 3, 0, 5, 4, 5, 5, 0,
	2, 1, 3, 3, 3, 2, 3, 2, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 1, 2, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 2, 1, 1,
	1, 1, 4, 5, 5, 6, 4, 4, 6, 6,
	6, 8, 8, 8, 8, 9, 8, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 5,
	4, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	0, 1, 0, 1, 3, 5, 2, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -227, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -32, -35, -33,
	-34, -36, -37, -4, -229, 6, 7, -42, 9, 10,
	30, -21, 123, 124, 126, 125, 159, 127, 152, 53,
	173, 174, 176, 177, 178, 179, -45, 157, 158, 31,
	32, 129, 34, -38, 377, 371, 378, 379, 57, 8,
	262, 154, 153, 25, 380, -228, 381, -41, 5, -107,
	15, -3, -39, -232, -39, -39, -39, -39, -39, -195,
	-197, 57, 96, -144, 133, 77, 367, 254, 130, 131,
	-128, 137, -147, 372, 373, -213, -146, 60, 61, 62,
	272, 145, 304, 305, 364, 173, 187, 181, 208, 200,
	273, 306, 146, 198, 201, 241, 143, 307, 228, 235,
	71, 176, 250, 308, 155, 196, 192, 29, 309, 281,
	190, 27, 310, 237, 213, 311, 277, 239, 191, 236,
	129, 312, 148, 141, 313, 214, 218, 314, 242, 315,
	316, 317, 380, 185, 186, 365, 318, 144, 244, 212,
	28, 142, 33, 274, 37, 163, 245, 216, 319, 211,
	207, 366, 320, 321, 322, 323, 210, 184, 206, 41,
	220, 219, 221, 240, 379, 203, 324, 325, 326, 149,
	327, 193, 18, 328, 329, 330, 331, 332, 248, 158,
	333, 161, 334, 335, 336, 337, 338, 339, 238, 215,
	217, 138, 165, 234, 378, 276, 340, 246, 189, 341,
	150, 162, 157, 249, 151, 342, 343, 344, 345, 346,
	347, 368, 348, 177, 369, 349, 350, 351, 352, 172,
	370, 243, 252, 40, 225, 353, 183, 371, 140, 354,
	174, 169, 230, 204, 164, 355, 356, 194, 195, 209,
	182, 205, 175, 166, 159, 357, 251, 226, 278, 202,
	199, 170, 358, 167, 168, 359, 231, 232, 171, 275,
	247, 197, 227, -130, 133, 254, 130, 232, 135, 131,
	131, 132, 133, 254, 130, 131, -73, -153, -213, -146,
	367, 372, 373, 133, 131, 114, 201, 241, 123, 229,
	237, -136, 238, 165, -164, 131, -132, 228, 231, 232,
	171, 364, 175, 239, 243, 242, 233, -153, 175, -158,
	180, -147, 178, -132, -43, 360, 127, -160, -160, 230,
	230, -160, -93, -57, -79, 80, -84, 29, 23, -83,
	-80, -100, -97, -98, 114, 115, 117, 116, 118, 103,
	104, 111, 81, 119, -88, -86, -87, -89, 64, 63,
	72, 65, 66, 67, 68, 73, 74, 75, -147, -153,
	-95, -229, 47, 48, 263, 264, 265, 266, 271, 267,
	83, 36, 253, 261, 260, 259, 257, 258, 255, 256,
	269, 270, 136, 254, 130, 109, 262, -213, -146, 364,
	374, -39, 65, -39, -39, -5, -4, -229, 6, 20,
	21, -111, 17, 16, -230, 59, -47, -55, 42, 43,
	-56, 21, 35, 46, 44, -40, -54, 105, -57, -153,
	-130, -130, 11, -67, -68, -73, -75, -153, -120, -163,
	175, -123, 243, 242, -148, -121, -147, -145, 241, 201,
	240, 128, 279, 79, 22, 24, 223, 82, 114, 16,
	83, 113, 263, 123, 51, 280, 255, 256, 253, 265,
	266, 254, 229, 10, 282, 25, 153, 21, 35, 107,
	125, 86, 87, 156, 377, 23, 154, 75, 285, 19,
	54, 11, 13, 286, 287, 14, 136, 135, 98, 132,
	49, 8, 119, 26, 95, 45, 288, 289, 290, 291,
	292, 47, 96, 17, 257, 258, 31, 293, 271, 160,
	109, 52, 38, 80, 294, 295, 73, 296, 76, 55,
	77, 15, 50, 297, 298, 299, 300, 97, 126, 262,
	48, 301, 130, 6, 268, 30, 152, 46, 302, 131,
	85, 269, 270, 134, 74, 5, 137, 32, 9, 53,
	56, 259, 260, 261, 36, 84, 12, 303, 78, -196,
	96, -187, -213, -73, 132, -73, 262, 133, -140, 136,
	-140, -140, 131, 131, -73, -213, -213, 123, 125, 128,
	55, -22, -73, -139, 136, -213, -139, -139, -139, -73,
	120, -73, -213, 30, -137, 96, 12, 254, -213, 165,
	131, 166, 133, -161, -229, -148, -191, -213, 8, 132,
	33, 144, -161, 169, 170, -161, -135, -134, 235, 236,
	230, 234, 12, 170, 230, 168, -193, -213, 244, 134,
	-147, -136, -7, -3, -10, -9, -11, 88, -160, -160,
	58, 79, 77, 78, 95, -226, 69, -57, -81, 98,
	80, 96, 97, 82, 100, 99, 110, 103, 104, 105,
	106, 107, 108, 109, 101, 102, 113, 88, 89, 90,
	91, 92, 93, 94, -131, -229, -98, -229, 121, 122,
	-84, -84, -84, -84, -84, -84, -84, -84, -84, -84,
	64, -229, 120, -2, -93, -4, -229, -229, -229, -229,
	-229, -229, -229, -229, -103, -57, -229, -233, -90, -229,
	-233, -90, -233, -90, -233, -229, -233, -90, -233, -90,
	-233, -233, -90, -229, -229, -229, -229, -229, -229, -229,
	366, 368, 375, 376, -73, -73, 64, -107, -3, -39,
	-112, 19, 31, -57, -108, -109, -57, -107, 38, -52,
	-54, -56, 42, 43, 70, 11, -226, -150, -149, 22,
	-147, 64, 120, -74, 26, -73, -59, -60, -61, -62,
	-76, -99, -229, -73, -73, -67, -231, 58, 11, 56,
	-231, 58, 120, 58, 175, -123, -125, -124, 244, 246,
	88, 134, -152, -147, 64, 29, 30, 59, 58, -73,
	-166, -169, -171, -170, -172, -167, -168, 198, 199, 114,
	202, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 30, 155, 194, 195, 196, 197, 214, 215, 216,
	217, 218, 219, 220, 221, 181, 200, 273, 182, 183,
	184, 185, 186, 187, 189, 190, 191, 192, 193, -213,
	22, 133, 367, -73, -213, 80, -213, -73, -140, -73,
	-161, -161, -161, 167, 167, 131, 131, 172, -73, 58,
	134, -67, 23, 55, -73, -213, -213, -154, -153, -145,
	-161, -137, 64, -57, -161, -161, -161, -73, -161, -161,
	-192, 11, 98, -192, -137, -39, -161, -161, 11, -133,
	11, 98, -57, -138, 96, 55, 245, -159, 178, -73,
	212, 361, 362, 363, -57, -57, -57, -57, -91, 73,
	80, 74, 75, 69, -84, -92, -95, -98, 69, 98,
	96, 97, 82, -84, -84, -84, -84, -84, -84, -84,
	-84, -84, -84, -84, -84, -84, -84, -84, -162, -213,
	64, -213, -83, -83, -147, -53, 21, 35, -52, -148,
	-154, -145, -41, -230, -230, -107, -52, -52, -57, -57,
	-100, 64, -52, -100, 64, -52, -52, -46, 21, 35,
	-101, -102, 84, -100, -147, -153, -230, -84, -147, -147,
	-52, -53, -53, -52, -52, -193, -193, -213, -213, 64,
	-225, -222, -216, 61, -111, -230, 9, 98, 58, 18,
	58, -110, 24, 25, -111, -85, -147, 65, 68, -58,
	58, 11, -56, -73, -149, 105, -154, -116, 161, -73,
	30, 58, -69, -71, -70, -72, 45, 49, 51, 46,
	47, 48, 52, -157, 22, -59, -33, -3, -229, -156,
	161, -155, 22, -153, 64, -116, 56, -59, -73, -59,
	-75, -153, 105, -123, -125, 58, 245, 247, 248, 55,
	76, -57, 55, 76, -57, -178, 113, -198, -199, -200,
	-148, 64, 65, -187, -188, -189, -201, 147, -206, 138,
	140, 137, -190, 148, 132, 28, 59, -183, 73, 80,
	-179, 226, -173, 57, -173, -173, -173, -173, -177, 201,
	-177, -177, -177, 57, 57, -173, -173, -173, -181, 57,
	-181, -181, -182, 57, -182, -151, 56, -3, -73, 133,
	22, -161, 23, -161, -73, -141, 128, 125, 126, -209,
	124, 223, 201, 71, 29, 15, 263, 161, 278, -213,
	162, -73, -73, -73, -73, -73, 128, 125, -73, -73,
	-73, -161, 120, -73, -73, -74, -73, -137, -153, -153,
	64, -73, -147, -44, -147, 64, 73, 74, 75, -92,
	-84, -84, -84, -51, 156, 79, -230, -230, -52, -52,
	-229, 120, -5, -111, -230, -230, 58, 56, 22, 11,
	11, -230, 11, 11, -230, -230, -52, -104, -102, 86,
	-57, -230, 120, -230, 58, 58, -230, -230, -230, -230,
	-230, -50, 365, 370, 369, -213, 64, 58, -224, -223,
	-217, 62, 88, -112, 40, -57, -57, -109, -112, -129,
	19, 11, 36, 36, -78, 12, -54, -59, -56, 120,
	-82, 30, 36, -3, -229, -229, -119, -122, -100, -60,
	-61, -61, -60, -61, 45, 45, 45, 50, 45, 50,
	45, -70, -153, -230, -230, -230, -3, -77, 53, 135,
	54, -229, -155, -78, -59, -78, -78, 120, -124, -126,
	249, 246, 252, -213, 64, 58, -200, 88, 57, -213,
	28, -190, -190, -193, -193, 28, -175, 29, 73, -180,
	227, 65, -177, -177, -178, 30, -178, -178, -178, -186,
	64, -186, 65, 65, 55, -147, 22, -73, -3, -160,
	-218, 143, 139, 147, 148, 141, 60, 61, 62, 132,
	28, 138, 140, 161, 137, -218, -142, -143, 134, 22,
	132, 28, 161, -215, 56, 167, 223, 167, 134, -161,
	-154, -133, -137, -115, 57, -133, -51, 79, -84, -84,
	-230, -230, -53, -148, -107, -112, -165, 114, 198, 155,
	196, 192, 212, 203, 225, 194, 226, -162, -165, -84,
	-84, -84, -84, 272, -107, 87, -57, 85, -148, -84,
	-84, 64, -222, 88, -83, 41, -73, -105, 13, -57,
	105, -118, 55, -119, -94, -96, -95, -229, -113, -147,
	-117, -147, -58, 58, 88, -65, -64, 55, 56, -66,
	55, -64, 45, 45, -230, 132, 132, 132, -117, -107,
	-78, 246, 250, 251, -199, -200, -203, -202, -147, -206,
	-193, -193, 57, -176, 55, -84, 59, -178, -178, -213,
	114, 59, 58, 59, 58, 59, 58, -73, -3, 22,
	-160, -160, -73, -160, -147, -212, 275, -214, -213, -147,
	-147, -147, -73, 120, -137, -137, -114, -147, -137, -84,
	-230, -111, -230, -173, -173, -173, -182, -173, 186, -173,
	186, -230, -230, 19, 19, 19, 19, -229, -49, 268,
	-57, 58, 58, 64, -83, -106, 14, 16, 27, -118,
	58, -230, -230, 58, 120, -230, 58, -78, -122, -57,
	-57, 57, -57, -229, -229, -229, -230, -111, 59, 58,
	-173, -114, -184, 223, 9, -177, 64, -177, 65, 65,
	-161, -3, 26, -211, -210, -148, 57, 56, -154, 59,
	58, -112, -177, -213, -84, -84, -84, -84, -84, -111,
	64, -84, -84, -57, -93, 28, -96, 36, -3, -147,
	-147, -147, -107, -114, -114, -230, -114, -114, -156, -205,
	-204, 56, 142, 71, -202, 59, -185, 138, 28, 137,
	-87, -178, -178, 59, 59, -229, 58, 88, -114, -73,
	-147, -230, -230, -230, -230, -48, 98, 275, -230, -230,
	-230, 9, -94, 120, -111, 59, -230, -230, -230, -77,
	-204, -213, -194, 88, 64, 150, -174, 71, 28, 28,
	-207, -208, 161, -210, -200, 59, -230, 273, 52, 276,
	-119, -147, 65, -73, 64, -230, 58, -147, -215, 41,
	274, 277, 57, -208, 36, -212, 41, -114, 163, 275,
	59, 164, 276, -220, -221, 55, -229, 277, -221, 55,
	10, 9, -84, 160, -219, 151, 146, 149, 30, -219,
	-230, -230, 145, 29, 73,
}

var yyDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 662, 0, 392, 392, 392, 392, 392,
	392, 0, 735, 718, 0, 0, 0, 0, -2, 357,
	358, 0, 360, -2, 0, 0, -2, 1066, 1066, 0,
	0, 1066, 0, 0, 392, 0, 392, 392, 1064, 53,
	54, 375, 376, 377, 95, 1, 3, 0, 396, 670,
	0, 0, -2, 394, 0, 718, 718, 0, 0, 85,
	86, 0, 0, 0, 1053, 0, 953, 716, 716, 716,
	0, 736, 737, -2, -2, 740, 741, 35, 36, 37,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 0, 0, 0, 0, 0, 719, 0,
	714, 0, 714, 714, 714, 0, 304, 479, 744, 745,
	953, 1031, 1032, 1053, 0, 0, 0, 348, 0, 1067,
	316, 0, 318, 1067, 0, 1067, 0, 325, 0, 0,
	331, 232, 0, 340, 354, 355, 342, 356, 359, 0,
	364, 367, 0, 339, 0, 0, 374, 387, 388, 1066,
	1066, 391, 40, 535, 491, 0, 498, -2, 0, 537,
	538, 539, 540, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 569, 570, 571, 647, 648,
	649, 650, 651, 652, 653, 654, 502, 503, 644, 0,
	692, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	635, 0, 605, 605, 605, 605, 605, 605, 605, 605,
	0, 0, 0, 0, 0, 0, 0, -2, -2, 0,
	0, 0, 217, 756, 0, 662, 49, 0, 392, 397,
	398, 674, 0, 0, 662, 1065, 0, 0, -2, -2,
	408, 414, 415, 416, 417, 393, 0, 420, 425, 0,
	0, 0, 0, 0, 0, 62, 64, 479, 68, 0,
	1042, 696, -2, -2, 0, 0, 742, 743, -2, 891,
	-2, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 0,
	0, 122, 0, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 1067, 1067, 1067, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 303,
	0, 305, 1067, 348, 308, 0, 0, 1067, 1067, 1067,
	0, 1067, 1067, 315, 1068, 1069, 0, 348, 392, 225,
	226, 227, 319, 1067, 1067, 321, 0, 345, 343, 344,
	337, 338, 0, 351, 328, 329, 334, 233, 0, 365,
	368, 0, 386, 378, 379, 380, 381, 0, 389, 390,
	0, 0, 0, 0, 0, 497, 532, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 520, 521, 522,
	523, 524, 525, 526, 499, 0, 513, 0, 0, 0,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 0,
	567, 405, 0, 0, 0, 662, 0, 0, 0, 0,
	0, 0, 0, 402, 0, 636, 0, 589, 597, 0,
	590, 598, 591, 599, 592, 0, 593, 600, 594, 601,
	595, 596, 602, 0, 0, 0, 405, 405, 0, 0,
	232, 232, 0, 105, 752, 757, 758, 670, 0, 407,
	41, 0, 0, 671, 663, 664, 667, 670, 0, 430,
	418, 409, 412, 413, 395, 0, -2, 422, 426, 0,
	428, 429, 0, 66, 0, 478, 0, 432, 434, 435,
	437, 460, 0, 462, -2, 0, 0, 0, 60, 61,
	0, 0, 0, 0, 1042, 697, 70, 71, 0, 0,
	0, 0, 200, 709, 710, 711, 707, 250, 0, 0,
	188, 184, 128, 129, 130, 177, 132, 177, 177, 177,
	177, 197, 197, 197, 197, 160, 161, 162, 163, 164,
	0, 0, 147, 177, 177, 177, 151, 167, 168, 169,
	170, 171, 172, 173, 174, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 179, 179, 179, 181, 181, 738,
	0, 0, 0, 0, 1067, 0, 1067, 117, 0, 0,
	264, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 715, 0, 1067, 301, 302, 480, 746, 747,
	306, 307, 349, 350, 309, 310, 311, 312, 313, 314,
	0, 228, 229, 0, 333, 0, 320, 324, 0, 348,
	0, 0, 326, 327, 0, 0, 336, 0, 366, 382,
	370, 371, 372, 373, 536, 492, 493, 494, 496, 514,
	0, 516, 518, 533, 504, 505, 529, 530, 531, 0,
	0, 0, 0, 527, 509, 0, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 556, 620,
	621, 0, 554, 555, 566, 0, 0, 0, 406, 645,
	0, -2, 0, 534, 691, 670, 0, 0, 0, 0,
	539, 647, 0, 539, 647, 0, 0, 0, 403, 404,
	642, 639, 0, 0, 644, 0, 606, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 99, 102, 103, 104,
	750, 753, 0, 38, 674, 50, 675, 0, 0, 0,
	0, 666, 668, 669, 674, 0, 655, 0, 0, 489,
	0, 0, 410, 47, 427, 423, 0, 0, 0, 477,
	0, 0, 0, 0, 0, 0, 467, 0, 0, 470,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 484,
	979, 463, 0, 465, 466, 489, 0, 489, 63, 489,
	65, 0, 483, 698, 69, 0, 0, 74, 75, 699,
	700, 701, 702, 703, 704, 705, 0, 119, 251, 253,
	256, 257, 258, 123, 124, 125, 0, 0, 238, 0,
	0, 232, 232, 0, 230, 231, 121, 191, 189, 0,
	186, 185, 131, 0, 197, 197, 154, 155, 200, 0,
	200, 200, 200, 0, 0, 148, 149, 150, 142, 0,
	143, 144, 145, 0, 146, 0, 0, 88, 0, 0,
	0, 92, 717, 93, 118, 1066, 0, 0, 730, 265,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	0, 109, 269, 271, 270, 274, 0, 0, 0, 296,
	1067, 300, 0, 345, 348, 444, 345, 323, 346, 347,
	352, 330, 362, 385, 383, 384, 515, 517, 519, 506,
	527, 510, 0, 507, 0, 0, 501, 572, 0, 0,
	405, 0, 662, 674, 576, 577, 0, 0, 0, 0,
	0, 613, 0, 0, 614, 0, 662, 0, 640, 0,
	0, 588, 0, 607, 0, 0, 608, 609, 610, 611,
	612, 97, 106, 107, 108, 100, 101, 0, 755, 751,
	0, 39, 0, 43, 0, 672, 673, 665, 42, 0,
	712, 713, 656, 657, 658, 0, 419, 431, 411, 0,
	685, 0, 0, 678, 0, 0, 430, 693, 0, 433,
	456, 458, 0, 453, 468, 469, 471, 0, 473, 0,
	475, 476, 438, 439, 440, 441, 0, 442, 0, 0,
	0, 0, 464, 662, 489, 58, 59, 0, 72, 73,
	0, 0, 79, 201, 202, 0, 254, 0, 0, 0,
	220, 232, 232, 223, 224, 0, 193, 0, 190, 127,
	187, 0, 200, 200, 156, 0, 157, 158, 159, 0,
	175, 0, 0, 0, 0, 739, 0, 0, 90, 259,
	1066, 276, 277, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 1066, 0, 1066, 731, 732,
	733, 734, 0, 112, 0, 0, 0, 0, 0, 299,
	481, 348, 332, 348, 0, 348, 508, 0, 528, 511,
	573, 574, 0, 646, 670, 45, 0, 177, 177, 625,
	177, 181, 628, 177, 630, 177, 633, 0, 0, 0,
	0, 0, 0, 0, 637, 587, 643, 0, 645, 0,
	0, 0, 754, 0, 748, 676, 44, 660, 0, 490,
	424, 51, 0, 685, 677, 687, 689, 0, 0, 681,
	0, 448, 489, 0, 0, 450, 457, 0, 0, 451,
	0, 452, 472, 474, -2, 0, 0, 0, 0, 670,
	57, 76, 77, 78, 252, 255, 0, 234, 177, 237,
	221, 222, 0, 195, 0, 192, 178, 152, 153, 198,
	199, 197, 0, 197, 0, 182, 0, 1067, 89, 0,
	260, 261, 262, 263, 0, 268, 0, 110, 111, 0,
	0, 273, 297, 0, 317, 335, 0, 446, 322, 512,
	575, 674, 578, 622, 197, 626, 627, 629, 631, 632,
	634, 580, 579, 0, 0, 0, 0, 0, 670, 0,
	641, 0, 0, 98, 749, 48, 0, 0, 0, 52,
	0, 690, 0, 0, 0, 67, 0, 662, 694, 695,
	454, 0, 459, 0, 0, 0, 462, 56, 211, 0,
	236, 0, 203, 196, 0, 200, 176, 200, 0, 0,
	87, 91, 0, 113, 114, 0, 0, 0, 482, 445,
	0, 46, 623, 624, 0, 0, 0, 0, 615, 0,
	638, 0, 0, 661, 659, 0, 688, 0, 680, 683,
	682, 449, 670, 0, 0, 486, 0, 0, 484, 210,
	212, 0, 218, 0, 235, 0, 208, 0, 205, 207,
	194, 165, 166, 180, 183, 0, 0, 0, 0, 275,
	447, 581, 583, 582, 584, 0, 0, 0, 586, 603,
	604, 0, 679, 0, 55, 455, 485, 487, 488, 443,
	213, 214, 0, 219, 216, 0, 126, 0, 204, 206,
	0, 291, 0, 115, 116, 109, 585, 0, 0, 0,
	686, 684, 215, 0, 209, 290, 0, 0, 112, 616,
	0, 619, 0, 292, 0, 272, 617, 0, 0, 0,
	239, 0, 0, 240, 241, 0, 0, 618, 242, 0,
	0, 0, 0, 0, 243, 245, 246, 0, 0, 244,
	293, 294, 247, 248, 249,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 381,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:369
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:374
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:375
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:379
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:412
		{
			setParseTree(yylex, nil)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:422
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:438
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:444
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:450
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:458
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:462
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:466
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:489
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:497
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:503
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:511
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:517
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:521
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:528
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:540
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.str = InsertStr
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:556
		{
			yyVAL.str = ReplaceStr
		}
	case 55:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:562
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), OrderBy: yyDollar[9].orderBy, Limit: yyDollar[10].limit}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:568
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:572
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:576
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:580
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:585
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:586
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:590
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:594
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:604
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:609
		{
			yyVAL.partitions = nil
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:613
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:619
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:625
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:629
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:635
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:639
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:645
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:653
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:659
		{
			yyVAL.str = RepeatableRead
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:663
		{
			yyVAL.str = ReadCommitted
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:667
		{
			yyVAL.str = ReadUncommitted
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:671
		{
			yyVAL.str = Serializable
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:677
		{
			yyVAL.str = SessionStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:681
		{
			yyVAL.str = GlobalStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.str = TempStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.str = TemporaryStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.str = MaterializedStr
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:703
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:708
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 87:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:714
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:719
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName(), SelectStatement: yyDollar[5].selStmt}
		}
	case 89:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:723
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName(), SelectStatement: yyDollar[7].selStmt, OrReplace: true}
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:727
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[4].tableName.ToViewName(), SelectStatement: yyDollar[6].selStmt, Modifier: MaterializedStr}
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:731
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[6].tableName.ToViewName(), SelectStatement: yyDollar[8].selStmt, OrReplace: true, Modifier: MaterializedStr}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:735
		{
			var notExists bool
			if yyDollar[3].byt != 0 {
				notExists = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: notExists}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:743
		{
			var notExists bool
			if yyDollar[3].byt != 0 {
				notExists = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: notExists}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:752
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:756
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:762
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:767
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str}
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:772
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str, KeyFilePath: string(yyDollar[6].bytes), KeyEnvVar: string(yyDollar[7].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:777
		{
			yyVAL.statement = &AuthRevoke{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:783
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: yyDollar[5].colIdent.GetRawVal()}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:788
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: string(yyDollar[5].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:793
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:798
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:803
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: string(yyDollar[4].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:808
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:814
		{
			yyVAL.str = InteractiveStr
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.str = ServiceAccountStr
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:822
		{
			yyVAL.str = ServiceAccountStr
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:828
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:832
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:843
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:859
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:865
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:871
		{
			var notExists bool
			if yyDollar[3].byt != 0 {
				notExists = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: notExists}
			setDDL(yylex, yyVAL.ddl)
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:880
		{
			var notExists bool
			if yyDollar[4].byt != 0 {
				notExists = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[5].tableName, IfNotExists: notExists, Modifier: yyDollar[2].str}
			setDDL(yylex, yyVAL.ddl)
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:891
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:898
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:902
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:913
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:917
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:921
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 126:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:927
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1022
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1109
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1149
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1154
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1159
		{
			yyVAL.sqlVal = nil
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1163
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1168
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1172
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1184
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1190
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1198
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1202
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1207
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1211
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1217
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1225
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1230
		{
			yyVAL.optVal = nil
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1239
		{
			yyVAL.optVal = nil
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1243
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1248
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1265
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1270
		{
			yyVAL.str = ""
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1283
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1287
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1295
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1304
		{
			yyVAL.sqlVal = nil
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1308
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1314
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1318
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1324
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1328
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1334
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1338
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1343
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1349
		{
			yyVAL.statement = &Sleep{Duration: NewIntVal(yyDollar[2].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1355
		{
			yyVAL.str = ""
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1359
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1365
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1369
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1373
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1377
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1381
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1387
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1391
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1395
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1402
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1406
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1412
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1416
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1421
		{
			yyVAL.str = ""
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1425
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1431
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1435
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1441
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1447
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 239:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1458
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 240:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1462
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 241:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1466
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 242:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1470
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1476
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1482
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1488
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1492
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1496
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1500
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1504
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1509
		{
			yyVAL.str = ""
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1513
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1517
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1525
		{
			yyVAL.str = yyDollar[1].str
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1529
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1533
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1539
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1543
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1547
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1557
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1565
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 263:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1570
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1621
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1677
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1687
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1693
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 294:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1697
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1709
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1713
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1721
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1729
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1734
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1742
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1746
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1752
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1756
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			yyVAL.statement = &OtherRead{}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1772
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1777
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1782
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1795
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1799
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1803
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1811
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1815
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1820
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1824
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1828
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1832
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1836
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1841
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1851
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1863
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1868
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1876
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1884
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1901
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), ShowTablesOpt: showTablesOpt}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1906
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: yyDollar[3].str}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1911
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Comments: Comments(yyDollar[4].bytes2), Type: string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt, Columns: yyDollar[6].columns}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1917
		{
			yyVAL.statement = &Show{Type: "TRANSACTION_ISOLATION_LEVEL"}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1923
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1933
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.str = "extended "
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1943
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.str = "full "
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1957
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1963
		{
			yyVAL.str = ""
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1967
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1977
		{
			yyVAL.showFilter = nil
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1981
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1985
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1991
		{
			yyVAL.showFilter = nil
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1995
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2001
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2005
		{
			yyVAL.str = SessionStr
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.str = GlobalStr
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2015
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.statement = &Begin{}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2029
		{
			yyVAL.statement = &Begin{}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.statement = &Commit{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.statement = &Rollback{}
		}
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2045
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2050
		{
			yyVAL.empty = struct{}{}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.empty = struct{}{}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2055
		{
			yyVAL.empty = struct{}{}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.empty = struct{}{}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2062
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2068
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2073
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2077
		{
			yyVAL.str = JSONStr
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = TreeStr
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = VitessStr
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2089
		{
			yyVAL.str = TraditionalStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = AnalyzeStr
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2117
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2130
		{
			yyVAL.str = ""
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.str = ""
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2144
		{
			yyVAL.statement = &DescribeTable{Full: string(yyDollar[2].str), Extended: string(yyDollar[3].str), Table: yyDollar[4].tableName}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2148
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2154
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2158
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2162
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2166
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2172
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2176
		{
			setAllowComments(yylex, true)
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2186
		{
			yyVAL.bytes2 = nil
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2190
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.str = UnionStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2200
		{
			yyVAL.str = UnionAllStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.str = UnionDistinctStr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2209
		{
			yyVAL.str = ""
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2213
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2217
		{
			yyVAL.str = SQLCacheStr
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = DistinctStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2230
		{
			yyVAL.str = DistinctStr
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2235
		{
			yyVAL.selectExprs = nil
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2239
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2244
		{
			yyVAL.strs = nil
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2252
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2256
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2260
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.str = SQLCacheStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.str = DistinctStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.str = DistinctStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2282
		{
			yyVAL.str = StraightJoinHint
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2306
		{
			concatamer := ListArgConcatamer(yyDollar[2].listArgsConcat)
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: NewColIdent(concatamer.String())}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2311
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2315
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2319
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2324
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2328
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2332
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2339
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2344
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2348
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2368
		{
			yyVAL.tableExpr = &TableValuedFuncTableExpr{FuncExpr: yyDollar[1].expr, As: yyDollar[2].tableIdent}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2374
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2378
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2382
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2386
		{
			exec := yyDollar[2].statement.(*Exec)
			yyVAL.tableExpr = &ExecSubquery{Exec: exec}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2393
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2403
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2408
		{
			yyVAL.columns = nil
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2433
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2446
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2450
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2454
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2458
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2464
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2466
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2470
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2472
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2476
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2478
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2481
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2483
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2486
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2490
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2494
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2501
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2507
		{
			yyVAL.str = JoinStr
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2511
		{
			yyVAL.str = JoinStr
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			yyVAL.str = JoinStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.str = StraightJoinStr
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2527
		{
			yyVAL.str = LeftJoinStr
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2531
		{
			yyVAL.str = LeftOuterJoinStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2535
		{
			yyVAL.str = RightJoinStr
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2539
		{
			yyVAL.str = RightOuterJoinStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.str = NaturalJoinStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2549
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2559
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2573
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2577
		{
			yyVAL.tableName = TableName{QualifierSecond: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 482:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2581
		{
			yyVAL.tableName = TableName{QualifierThird: yyDollar[1].tableIdent, QualifierSecond: yyDollar[3].tableIdent, Qualifier: yyDollar[5].tableIdent, Name: yyDollar[7].tableIdent}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2587
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2592
		{
			yyVAL.indexHints = nil
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2596
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2600
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2604
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2608
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = nil
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &UnaryCastConcatamerExpr{Expr: yyDollar[1].expr, CastConcatamer: ListArgConcatamer(yyDollar[2].listArgsConcat)}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2661
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2665
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2671
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2675
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2685
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2689
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2693
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2697
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2701
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2705
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2709
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 512:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2723
		{
			yyVAL.str = IsNullStr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2727
		{
			yyVAL.str = IsNotNullStr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2731
		{
			yyVAL.str = IsTrueStr
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2735
		{
			yyVAL.str = IsNotTrueStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2739
		{
			yyVAL.str = IsFalseStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2743
		{
			yyVAL.str = IsNotFalseStr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.str = EqualStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2753
		{
			yyVAL.str = LessThanStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.str = GreaterThanStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.str = LessEqualStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.str = GreaterEqualStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2769
		{
			yyVAL.str = NotEqualStr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2773
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = nil
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2788
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.listArgsConcat = []ListArg{ListArg(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2805
		{
			yyVAL.listArgsConcat = append(yyDollar[1].listArgsConcat, ListArg(yyDollar[2].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2811
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2817
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2821
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2835
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2851
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2859
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2867
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2887
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2923
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2927
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2935
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2957
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2965
		{
			inputStr := string(yyDollar[2].bytes)
			stringList := strings.Split(inputStr, " ")
			if len(stringList) != 2 {
				yylex.Error("the interval string '" + inputStr + "' is not valid")
				return 1
			}
			stringExpr := NewStrVal([]byte(stringList[0]))
			yyVAL.expr = &IntervalExpr{Expr: stringExpr, Unit: stringList[1]}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2986
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2990
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2994
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2998
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3008
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3012
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3016
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 579:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3020
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 580:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3024
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 581:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3028
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 582:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3032
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3036
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 584:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3040
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 585:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3044
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 586:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3052
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3056
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3070
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3074
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3079
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3084
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3095
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3105
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3109
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3113
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3118
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3123
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3128
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3132
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 604:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3136
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3146
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3156
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3160
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3164
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3168
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3172
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3176
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3180
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3186
		{
			yyVAL.str = ""
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3190
		{
			yyVAL.str = BooleanModeStr
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3194
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 618:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3198
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3202
		{
			yyVAL.str = QueryExpansionStr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3208
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3218
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3222
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3226
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3230
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3234
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3238
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3248
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3252
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3256
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3260
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3264
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3268
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3273
		{
			yyVAL.expr = nil
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3277
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3282
		{
			yyVAL.str = string("")
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3286
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3296
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3302
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3307
		{
			yyVAL.expr = nil
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3311
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3317
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3321
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3325
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3331
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3335
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3339
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3343
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3347
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3351
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3355
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3359
		{
			yyVAL.expr = &NullVal{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3365
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3374
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3378
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3383
		{
			yyVAL.exprs = nil
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3387
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3392
		{
			yyVAL.expr = nil
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3396
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3401
		{
			yyVAL.orderBy = nil
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3405
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3411
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3415
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3421
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3426
		{
			yyVAL.str = AscScr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3430
		{
			yyVAL.str = AscScr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3434
		{
			yyVAL.str = DescScr
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3439
		{
			yyVAL.limit = nil
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3443
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3447
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3451
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3456
		{
			yyVAL.str = ""
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3460
		{
			yyVAL.str = ForUpdateStr
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3464
		{
			yyVAL.str = ShareModeStr
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3477
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3481
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3485
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3489
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3495
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3499
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3503
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3507
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3512
		{
			yyVAL.updateExprs = nil
		}
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3516
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3522
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3526
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3532
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3536
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3542
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3548
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3558
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3562
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3568
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3574
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3578
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3583
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3589
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3593
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3597
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3601
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3605
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3609
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3613
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3620
		{
			yyVAL.bytes = []byte("charset")
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3627
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3635
		{
			yyVAL.expr = &Default{}
		}
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3644
		{
			yyVAL.byt = 0
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3646
		{
			yyVAL.byt = 1
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3649
		{
			yyVAL.byt = 0
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3651
		{
			yyVAL.byt = 1
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3654
		{
			yyVAL.str = ""
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3656
		{
			yyVAL.str = IgnoreStr
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3660
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3662
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3664
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3666
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3668
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3670
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3672
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3674
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3676
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3678
		{
			yyVAL.empty = struct{}{}
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3681
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3683
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3685
		{
			yyVAL.empty = struct{}{}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3689
		{
			yyVAL.empty = struct{}{}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3691
		{
			yyVAL.empty = struct{}{}
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3694
		{
			yyVAL.empty = struct{}{}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3696
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3698
		{
			yyVAL.empty = struct{}{}
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3701
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3703
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3707
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3711
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3718
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3724
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3728
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3735
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3741
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3747
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3753
		{
			yyVAL.execVarDefOpt = nil
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3755
		{
			rv := yyDollar[1].execVarDef
			yyVAL.execVarDefOpt = &rv
		}
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3761
		{
			yyVAL.execVarDefs = nil
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3763
		{
			yyVAL.execVarDefs = []ExecVarDef{yyDollar[1].execVarDef}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3767
		{
			yyVAL.execVarDefs = append(yyDollar[1].execVarDefs, yyDollar[3].execVarDef)
		}
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3774
		{
			yyVAL.statement = NewExec(yyDollar[2].bytes2, yyDollar[3].tableName, yyDollar[4].execVarDefs, yyDollar[5].execVarDefOpt)
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3780
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, TableName{}, true)
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3784
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, yyDollar[3].tableName, false)
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3790
		{
			yyVAL.statement = NewNativeQuery(yyDollar[2].bytes2, string(yyDollar[3].bytes))
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4122
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4131
		{
			decNesting(yylex)
		}
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4136
		{
			skipToEnd(yylex)
		}
	case 1067:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4141
		{
			skipToEnd(yylex)
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4145
		{
			skipToEnd(yylex)
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4149
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
