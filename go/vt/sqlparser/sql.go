// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	execsubquery         *ExecSubquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	execVarDef           ExecVarDef
	execVarDefOpt        *ExecVarDef
	execVarDefs          []ExecVarDef
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688
const AUTH = 57689
const INTERACTIVE = 57690
const LOGIN = 57691
const REVOKE = 57692
const SA = 57693
const SERVICEACCOUNT = 57694
const SLEEP = 57695
const REGISTRY = 57696
const PULL = 57697
const LIST = 57698
const EXEC = 57699
const PURGE = 57700
const NATIVEQUERY = 57701
const STACKQL = 57702

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"AUTH",
	"INTERACTIVE",
	"LOGIN",
	"REVOKE",
	"SA",
	"SERVICEACCOUNT",
	"SLEEP",
	"REGISTRY",
	"PULL",
	"LIST",
	"EXEC",
	"PURGE",
	"NATIVEQUERY",
	"STACKQL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	364, 89,
	371, 89,
	-2, 34,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	169, 344,
	170, 344,
	230, 332,
	234, 332,
	235, 332,
	236, 332,
	-2, 330,
	-1, 53,
	134, 354,
	-2, 352,
	-1, 56,
	6, 360,
	8, 360,
	9, 360,
	10, 360,
	57, 360,
	262, 360,
	-2, 332,
	-1, 82,
	38, 390,
	-2, 398,
	-1, 408,
	120, 729,
	-2, 725,
	-1, 409,
	120, 730,
	-2, 726,
	-1, 429,
	38, 391,
	-2, 403,
	-1, 430,
	38, 392,
	-2, 404,
	-1, 453,
	88, 1003,
	-2, 80,
	-1, 454,
	88, 911,
	-2, 81,
	-1, 459,
	88, 879,
	134, 879,
	-2, 691,
	-1, 461,
	88, 945,
	134, 945,
	-2, 693,
	-1, 791,
	56, 62,
	58, 62,
	-2, 66,
	-1, 974,
	120, 732,
	-2, 728,
	-1, 1439,
	5, 647,
	17, 647,
	19, 647,
	31, 647,
	59, 647,
	-2, 430,
}

const yyPrivate = 57344

const yyLast = 18580

var yyAct = [...]int{
	408, 1686, 1478, 1643, 1676, 1358, 1556, 1263, 352, 1284,
	1091, 1592, 999, 1419, 367, 1452, 1061, 765, 381, 350,
	422, 1087, 1420, 712, 1251, 1264, 1416, 1134, 1100, 647,
	458, 1090, 1425, 1031, 1431, 1013, 1489, 891, 1381, 968,
	615, 1191, 624, 101, 338, 913, 758, 302, 961, 1335,
	302, 79, 1326, 804, 1063, 101, 1057, 1046, 1104, 81,
	3, 763, 431, 994, 33, 768, 416, 354, 785, 938,
	780, 784, 1130, 803, 584, 775, 1039, 447, 82, 76,
	77, 904, 452, 924, 793, 444, 343, 725, 302, 101,
	306, 410, 585, 302, 425, 302, 750, 751, 411, 309,
	748, 749, 7, 339, 337, 726, 342, 316, 1230, 1120,
	6, 1232, 1231, 5, 1679, 84, 85, 86, 87, 88,
	312, 604, 393, 1114, 399, 400, 397, 398, 396, 395,
	394, 1663, 1674, 1651, 1153, 1671, 1479, 1662, 401, 402,
	1650, 314, 417, 412, 1398, 414, 415, 321, 1152, 1512,
	437, 323, 589, 1446, 103, 104, 105, 1078, 298, 294,
	295, 296, 805, 347, 806, 35, 920, 69, 38, 39,
	324, 290, 1298, 649, 288, 1297, 292, 307, 1299, 103,
	104, 105, 1447, 1448, 1079, 1080, 646, 341, 340, 1317,
	1151, 1618, 674, 673, 683, 684, 676, 677, 678, 679,
	680, 681, 682, 675, 318, 310, 685, 319, 320, 327,
	327, 1113, 1360, 311, 313, 324, 68, 308, 326, 325,
	1546, 103, 104, 105, 641, 621, 1121, 623, 642, 639,
	640, 331, 925, 926, 927, 1503, 1501, 922, 333, 329,
	634, 635, 880, 1148, 1145, 1146, 644, 1144, 645, 879,
	1362, 877, 1637, 1673, 1670, 1690, 1644, 1357, 1040, 620,
	622, 1105, 1694, 626, 1593, 1107, 605, 1382, 1361, 591,
	807, 1600, 292, 291, 1363, 884, 1285, 1287, 1354, 1595,
	1155, 1158, 297, 881, 1356, 878, 650, 1107, 868, 302,
	596, 597, 1345, 594, 302, 289, 606, 103, 104, 105,
	302, 1442, 1441, 1440, 587, 305, 302, 613, 1384, 293,
	619, 101, 1625, 628, 1527, 101, 808, 101, 1165, 1210,
	1150, 1164, 1207, 648, 1341, 1342, 1343, 697, 698, 1486,
	1294, 1256, 1220, 1199, 101, 1170, 799, 336, 779, 710,
	322, 611, 1149, 675, 1088, 1386, 685, 1390, 618, 1385,
	1594, 1383, 455, 685, 601, 1074, 1388, 633, 1286, 636,
	1107, 1649, 1121, 905, 617, 1387, 914, 590, 1619, 1106,
	1019, 1688, 918, 665, 1689, 905, 1687, 1635, 1389, 1391,
	1601, 1599, 1154, 838, 617, 659, 660, 1205, 1355, 1204,
	1353, 1106, 103, 104, 105, 654, 1344, 1156, 103, 104,
	105, 1349, 1346, 1337, 1347, 1340, 1609, 1336, 663, 664,
	662, 1338, 1339, 302, 1429, 302, 1021, 695, 607, 608,
	609, 70, 598, 662, 599, 1348, 665, 600, 1408, 697,
	698, 1239, 697, 698, 755, 91, 1024, 1025, 657, 665,
	101, 1400, 302, 302, 302, 945, 655, 713, 616, 656,
	906, 101, 1465, 915, 658, 652, 1020, 101, 995, 943,
	944, 942, 906, 870, 1106, 592, 593, 826, 616, 1103,
	1101, 995, 1102, 1217, 92, 663, 664, 662, 756, 1099,
	1105, 1315, 728, 730, 732, 734, 736, 738, 739, 663,
	664, 662, 1639, 665, 769, 103, 104, 105, 757, 783,
	729, 731, 772, 735, 737, 1654, 740, 665, 839, 678,
	679, 680, 681, 682, 675, 664, 662, 685, 1552, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 792,
	797, 583, 665, 802, 852, 855, 856, 857, 858, 859,
	860, 1551, 861, 862, 863, 864, 865, 840, 841, 842,
	843, 824, 825, 853, 1330, 827, 1329, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 844, 845, 846,
	847, 848, 849, 850, 851, 629, 676, 677, 678, 679,
	680, 681, 682, 675, 302, 287, 685, 1318, 866, 101,
	1695, 869, 1110, 871, 302, 302, 101, 101, 101, 1111,
	631, 68, 302, 1206, 413, 302, 1656, 1636, 302, 889,
	890, 1572, 302, 941, 101, 663, 664, 662, 1549, 101,
	101, 101, 302, 101, 101, 1015, 854, 103, 104, 105,
	1516, 867, 1406, 665, 1696, 101, 101, 1327, 874, 875,
	876, 1178, 893, 933, 935, 936, 663, 664, 662, 896,
	934, 754, 426, 302, 1402, 895, 894, 1606, 663, 664,
	662, 898, 899, 900, 665, 902, 903, 1562, 1672, 908,
	1605, 441, 442, 1184, 1185, 1186, 665, 910, 911, 370,
	369, 372, 373, 374, 375, 1461, 962, 939, 371, 376,
	885, 1428, 103, 104, 105, 964, 963, 1658, 426, 630,
	103, 104, 105, 1108, 1301, 103, 104, 105, 909, 101,
	907, 632, 1234, 1068, 455, 794, 1238, 965, 966, 1562,
	1647, 1562, 426, 1523, 976, 977, 78, 983, 986, 1562,
	1627, 978, 661, 996, 1562, 1597, 940, 1562, 1561, 1542,
	1541, 974, 101, 101, 1529, 426, 1526, 426, 973, 648,
	648, 1010, 1011, 1471, 1470, 1042, 971, 1467, 1468, 1467,
	1466, 713, 1032, 426, 1043, 426, 795, 101, 1252, 1017,
	661, 426, 35, 1608, 302, 35, 1016, 101, 1008, 1009,
	426, 1469, 302, 1043, 1004, 1005, 1026, 815, 814, 1043,
	302, 302, 975, 1302, 302, 302, 1258, 1077, 302, 302,
	302, 101, 1259, 1223, 439, 1579, 795, 1222, 1033, 1417,
	974, 796, 1428, 798, 1043, 101, 585, 1038, 1048, 1051,
	1052, 1053, 1049, 68, 1050, 1054, 68, 68, 1432, 1433,
	893, 937, 1034, 1032, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 1059,
	1069, 796, 1036, 794, 1071, 1428, 794, 1022, 883, 800,
	419, 1664, 1033, 80, 1558, 1115, 35, 344, 1067, 302,
	101, 1534, 101, 1135, 1157, 1076, 1072, 1457, 302, 302,
	302, 302, 302, 1075, 302, 302, 1432, 1433, 302, 101,
	1095, 1000, 1369, 1136, 673, 683, 684, 676, 677, 678,
	679, 680, 681, 682, 675, 302, 1032, 685, 302, 1032,
	302, 68, 1140, 302, 1142, 302, 302, 68, 1305, 1131,
	302, 1126, 101, 1125, 101, 1359, 1559, 1138, 1681, 1677,
	1459, 1169, 1435, 1417, 1331, 1132, 1133, 919, 317, 1122,
	1123, 1124, 887, 1277, 1438, 1052, 1053, 1275, 1116, 1117,
	1118, 1119, 1276, 1437, 1175, 1272, 1048, 1051, 1052, 1053,
	1049, 939, 1050, 1054, 1127, 1128, 1129, 1273, 1668, 1271,
	1661, 1410, 1274, 1241, 972, 766, 1666, 1194, 1250, 1249,
	1173, 1195, 683, 684, 676, 677, 678, 679, 680, 681,
	682, 675, 1202, 1203, 685, 334, 759, 1322, 1209, 1201,
	991, 1212, 1213, 813, 614, 1314, 1641, 1521, 760, 1219,
	940, 1233, 1187, 1221, 992, 1640, 1224, 1225, 1226, 1227,
	1228, 1577, 674, 673, 683, 684, 676, 677, 678, 679,
	680, 681, 682, 675, 302, 1312, 685, 1307, 1554, 1141,
	417, 886, 1200, 972, 302, 302, 302, 302, 302, 1056,
	423, 1265, 420, 421, 1248, 80, 302, 1216, 1520, 1519,
	432, 302, 1247, 1240, 455, 302, 424, 1413, 1252, 302,
	1280, 1281, 1282, 1245, 433, 643, 1683, 1682, 1092, 1192,
	1211, 770, 771, 435, 1244, 434, 1208, 912, 773, 1300,
	1254, 101, 1290, 1683, 1292, 1623, 1293, 1255, 1253, 1260,
	1306, 1303, 1547, 1018, 648, 648, 419, 1188, 1189, 1190,
	409, 83, 1278, 1267, 1268, 1266, 1270, 78, 1269, 1289,
	1283, 1058, 29, 75, 1, 1291, 1012, 432, 1235, 1236,
	1675, 1295, 1237, 1310, 1311, 1014, 1480, 1555, 1147, 101,
	101, 433, 1321, 1642, 1323, 1324, 1325, 1591, 429, 430,
	435, 666, 434, 102, 1451, 1098, 1089, 303, 90, 582,
	303, 1308, 1309, 89, 1634, 102, 627, 1097, 1096, 101,
	1598, 302, 1545, 1109, 1316, 1112, 1458, 1313, 1638, 1328,
	821, 819, 1333, 820, 818, 767, 823, 344, 1334, 822,
	817, 315, 450, 921, 330, 1350, 723, 1055, 303, 102,
	101, 893, 809, 303, 1137, 303, 962, 774, 1365, 1375,
	1376, 1364, 93, 1367, 1352, 1351, 1143, 1366, 1379, 917,
	1370, 637, 638, 693, 1246, 1296, 1319, 1320, 761, 764,
	1371, 456, 1399, 449, 1368, 1423, 1023, 762, 1377, 1518,
	1412, 1215, 722, 993, 788, 1393, 353, 302, 1380, 932,
	368, 974, 365, 366, 1392, 1027, 1257, 101, 973, 1409,
	667, 351, 101, 101, 345, 787, 1418, 1265, 1047, 1045,
	1407, 1044, 445, 1434, 1430, 786, 428, 1229, 1421, 1511,
	1617, 427, 990, 56, 1181, 335, 37, 436, 63, 101,
	32, 31, 28, 30, 27, 22, 1439, 1427, 21, 20,
	19, 18, 24, 101, 1436, 101, 101, 17, 1444, 648,
	648, 16, 15, 602, 41, 1450, 1445, 26, 25, 14,
	13, 1443, 12, 1464, 11, 10, 9, 8, 4, 653,
	23, 711, 302, 2, 1449, 1454, 0, 0, 1455, 1456,
	0, 1462, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 1092, 0, 1373, 1374, 101, 0,
	1481, 101, 101, 101, 302, 0, 0, 0, 0, 0,
	101, 1394, 1395, 0, 1396, 1397, 0, 0, 0, 0,
	1473, 0, 0, 0, 0, 0, 1404, 1405, 0, 0,
	1493, 0, 0, 0, 1495, 1474, 0, 1476, 0, 303,
	1494, 0, 0, 0, 303, 1504, 1505, 1487, 0, 1488,
	303, 1491, 0, 0, 1499, 0, 303, 0, 0, 0,
	0, 102, 897, 0, 0, 102, 0, 102, 1517, 0,
	0, 0, 0, 0, 0, 1524, 1525, 1265, 1528, 0,
	0, 0, 0, 0, 102, 1522, 0, 0, 916, 0,
	101, 0, 1530, 0, 1531, 0, 1539, 0, 101, 0,
	1303, 0, 0, 1378, 0, 1540, 928, 929, 930, 931,
	0, 979, 980, 101, 0, 985, 988, 989, 1460, 0,
	101, 0, 0, 0, 1403, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 1544, 0, 0, 0, 1565, 0,
	1003, 0, 0, 1006, 1007, 0, 1496, 1497, 0, 1498,
	0, 0, 1500, 0, 1502, 1553, 0, 893, 0, 0,
	1378, 981, 982, 303, 1560, 303, 0, 101, 101, 0,
	101, 0, 1571, 0, 0, 101, 1492, 101, 101, 101,
	302, 1563, 1421, 101, 1576, 0, 1578, 0, 1584, 1587,
	102, 0, 303, 303, 303, 0, 1590, 0, 1596, 101,
	302, 102, 1602, 101, 0, 0, 1092, 102, 1092, 0,
	1603, 1585, 1604, 1586, 1588, 1589, 1548, 1543, 1550, 1613,
	1614, 1615, 1616, 0, 1620, 1580, 1621, 1622, 0, 0,
	0, 0, 0, 1624, 1633, 1610, 0, 0, 1421, 1628,
	1631, 1629, 1630, 1632, 0, 1626, 0, 1564, 0, 101,
	101, 0, 1083, 1086, 0, 1645, 0, 0, 0, 0,
	1646, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	1648, 1652, 1265, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 790,
	0, 0, 0, 1660, 0, 1657, 0, 0, 0, 0,
	0, 0, 1665, 1667, 0, 101, 0, 0, 0, 0,
	1566, 1567, 1568, 1569, 1570, 0, 0, 0, 1573, 1574,
	1680, 0, 0, 0, 0, 1691, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 0, 300, 1692, 1693, 102,
	0, 1669, 0, 0, 303, 303, 102, 102, 102, 0,
	0, 0, 303, 1092, 0, 303, 382, 34, 303, 0,
	0, 1509, 303, 0, 102, 0, 1196, 1197, 0, 102,
	102, 102, 303, 102, 102, 0, 0, 446, 0, 0,
	0, 0, 586, 1557, 588, 102, 102, 1214, 669, 0,
	672, 34, 0, 0, 0, 0, 686, 687, 688, 689,
	690, 691, 692, 303, 670, 671, 668, 674, 673, 683,
	684, 676, 677, 678, 679, 680, 681, 682, 675, 0,
	0, 685, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 418, 0, 0, 0, 0, 0,
	1218, 674, 673, 683, 684, 676, 677, 678, 679, 680,
	681, 682, 675, 1515, 0, 685, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 1242, 1243, 764, 0, 674,
	673, 683, 684, 676, 677, 678, 679, 680, 681, 682,
	675, 0, 1684, 685, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 102, 674, 673, 683, 684, 676, 677,
	678, 679, 680, 681, 682, 675, 0, 0, 685, 0,
	0, 1514, 1557, 1092, 0, 0, 1508, 102, 0, 0,
	0, 0, 0, 0, 303, 0, 0, 102, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 0, 0, 0,
	303, 303, 0, 0, 303, 303, 0, 0, 303, 303,
	303, 102, 674, 673, 683, 684, 676, 677, 678, 679,
	680, 681, 682, 675, 0, 102, 685, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 603, 0, 0, 0, 0, 0, 610,
	0, 0, 0, 0, 0, 612, 674, 673, 683, 684,
	676, 677, 678, 679, 680, 681, 682, 675, 0, 0,
	685, 0, 0, 0, 0, 0, 0, 0, 0, 303,
	102, 0, 102, 1372, 0, 0, 0, 1507, 303, 303,
	303, 303, 303, 0, 303, 303, 0, 0, 303, 102,
	0, 0, 0, 674, 673, 683, 684, 676, 677, 678,
	679, 680, 681, 682, 675, 303, 1193, 685, 303, 0,
	303, 0, 1401, 303, 0, 303, 303, 625, 0, 0,
	303, 625, 102, 625, 102, 0, 674, 673, 683, 684,
	676, 677, 678, 679, 680, 681, 682, 675, 0, 0,
	685, 0, 34, 0, 0, 0, 0, 1414, 0, 0,
	0, 0, 752, 0, 753, 694, 696, 674, 673, 683,
	684, 676, 677, 678, 679, 680, 681, 682, 675, 0,
	0, 685, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 782, 0, 791, 0, 0, 709, 0, 0, 0,
	714, 715, 716, 717, 718, 719, 720, 721, 1506, 724,
	727, 727, 727, 733, 727, 727, 733, 727, 741, 742,
	743, 744, 745, 746, 747, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 303, 303, 303, 303, 789,
	0, 0, 0, 0, 0, 0, 303, 0, 0, 0,
	379, 303, 0, 0, 0, 303, 0, 0, 0, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 674, 673,
	683, 684, 676, 677, 678, 679, 680, 681, 682, 675,
	0, 102, 685, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 0, 344, 0, 0,
	0, 0, 0, 816, 1532, 0, 0, 1533, 0, 0,
	1535, 0, 0, 872, 873, 0, 0, 0, 0, 102,
	102, 882, 0, 0, 446, 0, 0, 888, 0, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 303, 674, 673, 683, 684, 676, 677, 678, 679,
	680, 681, 682, 675, 0, 0, 685, 0, 0, 0,
	0, 0, 923, 0, 0, 625, 0, 0, 0, 0,
	102, 0, 625, 625, 625, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1575, 344, 0, 0, 0, 0,
	625, 0, 0, 0, 0, 625, 625, 625, 0, 625,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 625, 625, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 0, 102, 102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 102, 102, 0, 0, 0,
	0, 0, 0, 1035, 0, 0, 0, 0, 0, 0,
	0, 1041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 0, 1070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 0, 102, 0,
	0, 102, 102, 102, 303, 0, 0, 0, 0, 0,
	102, 457, 0, 0, 0, 457, 0, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 0, 1060, 0, 0, 0,
	789, 0, 0, 0, 789, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 1159, 1160, 1161,
	1162, 1163, 0, 1166, 1167, 0, 0, 1168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1171, 0, 0, 1172, 0, 782,
	102, 0, 1174, 0, 0, 0, 0, 0, 102, 1179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 625, 0, 625, 0,
	102, 0, 0, 0, 0, 0, 0, 303, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	777, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 0, 810, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 102, 0,
	102, 0, 0, 0, 0, 102, 0, 102, 102, 102,
	303, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	303, 0, 0, 102, 0, 0, 0, 0, 0, 35,
	36, 69, 38, 39, 0, 0, 0, 0, 0, 1198,
	0, 0, 418, 0, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 40, 59, 60, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	102, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 303, 0,
	789, 0, 0, 0, 0, 102, 1261, 1262, 0, 457,
	789, 789, 789, 789, 789, 0, 457, 457, 457, 0,
	0, 0, 0, 380, 0, 102, 0, 1060, 0, 1288,
	0, 0, 0, 0, 457, 789, 0, 0, 0, 457,
	457, 457, 0, 457, 457, 0, 42, 43, 45, 44,
	47, 0, 61, 0, 0, 457, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 328, 0, 48, 72, 71, 0, 0,
	57, 58, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 51, 0, 52,
	53, 54, 55, 0, 0, 0, 625, 0, 440, 0,
	0, 448, 0, 0, 0, 0, 301, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 457, 0, 0, 0, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 997, 1411, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1001, 1002, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 70, 0, 1028, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 777, 0, 0,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 1422, 0, 34, 0,
	0, 1472, 0, 0, 0, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	457, 0, 457, 65, 0, 0, 0, 64, 66, 67,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 457,
	0, 0, 301, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1180, 0, 1182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1536, 1537, 1538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 301, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 0, 0, 0, 0, 1611,
	0, 0, 0, 997, 0, 301, 301, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1607, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1655, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 301, 0,
	457, 0, 0, 0, 0, 301, 0, 0, 301, 0,
	0, 301, 0, 0, 0, 892, 0, 0, 0, 0,
	1678, 457, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 457, 0, 997,
	0, 0, 1424, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 457, 0, 457, 1453, 0, 0, 0,
	0, 0, 0, 440, 892, 0, 0, 0, 440, 440,
	0, 0, 440, 440, 440, 0, 0, 0, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 440, 440,
	440, 440, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 1482, 1483, 1484, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 892, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 301, 1065, 0, 0, 301, 301, 0,
	0, 301, 1073, 892, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 457, 0, 0, 0, 0, 0, 0,
	457, 301, 301, 301, 301, 301, 0, 301, 301, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 301, 0, 301, 0, 0, 301, 0, 1176, 1177,
	0, 0, 0, 301, 0, 0, 0, 1581, 1582, 0,
	1583, 0, 0, 0, 0, 1490, 0, 1490, 1490, 1490,
	0, 0, 0, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 1612, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 457,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 997, 0, 1653, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 301, 0, 0,
	0, 0, 0, 0, 0, 1659, 998, 301, 301, 301,
	301, 301, 0, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 0, 0, 301, 1490, 0, 0, 1065, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 998, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 998, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 568, 556, 0, 513, 571,
	485, 503, 579, 504, 507, 544, 470, 526, 196, 501,
	0, 489, 465, 497, 466, 487, 515, 136, 519, 484,
	558, 529, 570, 166, 0, 490, 577, 168, 535, 0,
	247, 183, 0, 0, 0, 517, 560, 524, 553, 512,
	545, 475, 534, 572, 502, 542, 573, 0, 0, 0,
	103, 104, 105, 0, 1093, 1094, 0, 998, 0, 0,
	0, 126, 0, 539, 567, 499, 541, 543, 581, 464,
	536, 301, 468, 471, 578, 563, 493, 494, 1304, 0,
	0, 0, 0, 0, 0, 516, 525, 550, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 533,
	0, 0, 0, 472, 469, 0, 0, 0, 0, 514,
	0, 0, 0, 474, 0, 492, 551, 0, 462, 145,
	555, 562, 511, 304, 566, 509, 508, 569, 215, 0,
	252, 148, 165, 122, 162, 107, 118, 0, 147, 193,
	224, 228, 559, 488, 498, 130, 495, 226, 203, 268,
	532, 205, 225, 169, 258, 216, 267, 277, 278, 255,
	275, 282, 243, 111, 254, 266, 127, 237, 0, 0,
	0, 113, 264, 250, 181, 158, 159, 112, 0, 222,
	135, 143, 132, 195, 261, 262, 131, 285, 119, 274,
	115, 120, 273, 189, 257, 265, 182, 174, 114, 263,
	180, 173, 164, 139, 150, 213, 171, 214, 151, 185,
	184, 186, 0, 467, 0, 248, 271, 286, 124, 483,
	256, 280, 281, 0, 217, 125, 144, 138, 212, 142,
	187, 121, 153, 245, 163, 170, 221, 284, 202, 227,
	128, 270, 246, 479, 482, 477, 478, 527, 528, 574,
	575, 576, 552, 473, 0, 480, 481, 0, 557, 564,
	565, 531, 106, 116, 167, 283, 219, 141, 272, 463,
	476, 134, 486, 0, 0, 500, 505, 506, 518, 520,
	521, 522, 523, 530, 537, 538, 540, 546, 547, 548,
	549, 554, 561, 580, 108, 109, 117, 123, 129, 133,
	137, 140, 146, 149, 152, 154, 155, 156, 161, 172,
	176, 177, 178, 179, 190, 191, 192, 194, 197, 198,
	199, 200, 201, 204, 206, 207, 208, 209, 210, 211,
	220, 223, 229, 230, 231, 232, 233, 234, 236, 239,
	240, 241, 242, 249, 253, 259, 260, 269, 276, 279,
	0, 0, 0, 0, 110, 160, 175, 235, 238, 244,
	251, 0, 0, 0, 496, 218, 188, 157, 568, 556,
	0, 513, 571, 485, 503, 579, 504, 507, 544, 470,
	526, 196, 501, 0, 489, 465, 497, 466, 487, 515,
	136, 519, 484, 558, 529, 570, 166, 0, 490, 577,
	168, 535, 0, 247, 183, 0, 0, 0, 517, 560,
	524, 553, 512, 545, 475, 534, 572, 502, 542, 573,
	0, 0, 0, 103, 104, 105, 0, 1093, 1094, 0,
	0, 0, 0, 0, 126, 0, 539, 567, 499, 541,
	543, 581, 464, 536, 0, 468, 471, 578, 563, 493,
	494, 0, 0, 0, 0, 0, 0, 0, 516, 525,
	550, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 533, 0, 0, 0, 472, 469, 0, 0,
	0, 0, 514, 0, 0, 0, 474, 0, 492, 551,
	0, 462, 145, 555, 562, 511, 304, 566, 509, 508,
	569, 215, 0, 252, 148, 165, 122, 162, 107, 118,
	0, 147, 193, 224, 228, 559, 488, 498, 130, 495,
	226, 203, 268, 532, 205, 225, 169, 258, 216, 267,
	277, 278, 255, 275, 282, 243, 111, 254, 266, 127,
	237, 0, 0, 0, 113, 264, 250, 181, 158, 159,
	112, 0, 222, 135, 143, 132, 195, 261, 262, 131,
	285, 119, 274, 115, 120, 273, 189, 257, 265, 182,
	174, 114, 263, 180, 173, 164, 139, 150, 213, 171,
	214, 151, 185, 184, 186, 0, 467, 0, 248, 271,
	286, 124, 483, 256, 280, 281, 0, 217, 125, 144,
	138, 212, 142, 187, 121, 153, 245, 163, 170, 221,
	284, 202, 227, 128, 270, 246, 479, 482, 477, 478,
	527, 528, 574, 575, 576, 552, 473, 0, 480, 481,
	0, 557, 564, 565, 531, 106, 116, 167, 283, 219,
	141, 272, 463, 476, 134, 486, 0, 0, 500, 505,
	506, 518, 520, 521, 522, 523, 530, 537, 538, 540,
	546, 547, 548, 549, 554, 561, 580, 108, 109, 117,
	123, 129, 133, 137, 140, 146, 149, 152, 154, 155,
	156, 161, 172, 176, 177, 178, 179, 190, 191, 192,
	194, 197, 198, 199, 200, 201, 204, 206, 207, 208,
	209, 210, 211, 220, 223, 229, 230, 231, 232, 233,
	234, 236, 239, 240, 241, 242, 249, 253, 259, 260,
	269, 276, 279, 0, 0, 0, 0, 110, 160, 175,
	235, 238, 244, 251, 0, 0, 0, 496, 218, 188,
	157, 568, 556, 0, 513, 571, 485, 503, 579, 504,
	507, 544, 470, 526, 196, 501, 0, 489, 465, 497,
	466, 487, 515, 136, 519, 484, 558, 529, 570, 166,
	0, 490, 577, 168, 535, 0, 247, 183, 0, 0,
	0, 517, 560, 524, 553, 512, 545, 475, 534, 572,
	502, 542, 573, 68, 0, 0, 103, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 539,
	567, 499, 541, 543, 581, 464, 536, 0, 468, 471,
	578, 563, 493, 494, 0, 0, 0, 0, 0, 0,
	0, 516, 525, 550, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 533, 0, 0, 0, 472,
	469, 0, 0, 0, 0, 514, 0, 0, 0, 474,
	0, 492, 551, 0, 462, 145, 555, 562, 511, 304,
	566, 509, 508, 569, 215, 0, 252, 148, 165, 122,
	162, 107, 118, 0, 147, 193, 224, 228, 559, 488,
	498, 130, 495, 226, 203, 268, 532, 205, 225, 169,
	258, 216, 267, 277, 278, 255, 275, 282, 243, 111,
	254, 266, 127, 237, 0, 0, 0, 113, 264, 250,
	181, 158, 159, 112, 0, 222, 135, 143, 132, 195,
	261, 262, 131, 285, 119, 274, 115, 120, 273, 189,
	257, 265, 182, 174, 114, 263, 180, 173, 164, 139,
	150, 213, 171, 214, 151, 185, 184, 186, 0, 467,
	0, 248, 271, 286, 124, 483, 256, 280, 281, 0,
	217, 125, 144, 138, 212, 142, 187, 121, 153, 245,
	163, 170, 221, 284, 202, 227, 128, 270, 246, 479,
	482, 477, 478, 527, 528, 574, 575, 576, 552, 473,
	0, 480, 481, 0, 557, 564, 565, 531, 106, 116,
	167, 283, 219, 141, 272, 463, 476, 134, 486, 0,
	0, 500, 505, 506, 518, 520, 521, 522, 523, 530,
	537, 538, 540, 546, 547, 548, 549, 554, 561, 580,
	108, 109, 117, 123, 129, 133, 137, 140, 146, 149,
	152, 154, 155, 156, 161, 172, 176, 177, 178, 179,
	190, 191, 192, 194, 197, 198, 199, 200, 201, 204,
	206, 207, 208, 209, 210, 211, 220, 223, 229, 230,
	231, 232, 233, 234, 236, 239, 240, 241, 242, 249,
	253, 259, 260, 269, 276, 279, 0, 0, 0, 0,
	110, 160, 175, 235, 238, 244, 251, 0, 0, 0,
	496, 218, 188, 157, 568, 556, 0, 513, 571, 485,
	503, 579, 504, 507, 544, 470, 526, 196, 501, 0,
	489, 465, 497, 466, 487, 515, 136, 519, 484, 558,
	529, 570, 166, 0, 490, 577, 168, 535, 0, 247,
	183, 0, 0, 0, 517, 560, 524, 553, 512, 545,
	475, 534, 572, 502, 542, 573, 0, 0, 0, 103,
	104, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 539, 567, 499, 541, 543, 581, 464, 536,
	0, 468, 471, 578, 563, 493, 494, 0, 0, 0,
	0, 0, 0, 0, 516, 525, 550, 510, 0, 0,
	0, 0, 0, 0, 1415, 0, 491, 0, 533, 0,
	0, 0, 472, 469, 0, 0, 0, 0, 514, 0,
	0, 0, 474, 0, 492, 551, 0, 462, 145, 555,
	562, 511, 304, 566, 509, 508, 569, 215, 0, 252,
	148, 165, 122, 162, 107, 118, 0, 147, 193, 224,
	228, 559, 488, 498, 130, 495, 226, 203, 268, 532,
	205, 225, 169, 258, 216, 267, 277, 278, 255, 275,
	282, 243, 111, 254, 266, 127, 237, 0, 0, 0,
	113, 264, 250, 181, 158, 159, 112, 0, 222, 135,
	143, 132, 195, 261, 262, 131, 285, 119, 274, 115,
	120, 273, 189, 257, 265, 182, 174, 114, 263, 180,
	173, 164, 139, 150, 213, 171, 214, 151, 185, 184,
	186, 0, 467, 0, 248, 271, 286, 124, 483, 256,
	280, 281, 0, 217, 125, 144, 138, 212, 142, 187,
	121, 153, 245, 163, 170, 221, 284, 202, 227, 128,
	270, 246, 479, 482, 477, 478, 527, 528, 574, 575,
	576, 552, 473, 0, 480, 481, 0, 557, 564, 565,
	531, 106, 116, 167, 283, 219, 141, 272, 463, 476,
	134, 486, 0, 0, 500, 505, 506, 518, 520, 521,
	522, 523, 530, 537, 538, 540, 546, 547, 548, 549,
	554, 561, 580, 108, 109, 117, 123, 129, 133, 137,
	140, 146, 149, 152, 154, 155, 156, 161, 172, 176,
	177, 178, 179, 190, 191, 192, 194, 197, 198, 199,
	200, 201, 204, 206, 207, 208, 209, 210, 211, 220,
	223, 229, 230, 231, 232, 233, 234, 236, 239, 240,
	241, 242, 249, 253, 259, 260, 269, 276, 279, 0,
	0, 0, 0, 110, 160, 175, 235, 238, 244, 251,
	0, 0, 0, 496, 218, 188, 157, 568, 556, 0,
	513, 571, 485, 503, 579, 504, 507, 544, 470, 526,
	196, 501, 0, 489, 465, 497, 466, 487, 515, 136,
	519, 484, 558, 529, 570, 166, 0, 490, 577, 168,
	535, 0, 247, 183, 0, 0, 0, 517, 560, 524,
	553, 512, 545, 475, 534, 572, 502, 542, 573, 0,
	0, 0, 103, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 539, 567, 499, 541, 543,
	581, 464, 536, 0, 468, 471, 578, 563, 493, 494,
	0, 0, 0, 0, 0, 0, 0, 516, 525, 550,
	510, 0, 0, 0, 0, 0, 0, 1074, 0, 491,
	0, 533, 0, 0, 0, 472, 469, 0, 0, 0,
	0, 514, 0, 0, 0, 474, 0, 492, 551, 0,
	462, 145, 555, 562, 511, 304, 566, 509, 508, 569,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 559, 488, 498, 130, 495, 226,
	203, 268, 532, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 467, 0, 248, 271, 286,
	124, 483, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 479, 482, 477, 478, 527,
	528, 574, 575, 576, 552, 473, 0, 480, 481, 0,
	557, 564, 565, 531, 106, 116, 167, 283, 219, 141,
	272, 463, 476, 134, 486, 0, 0, 500, 505, 506,
	518, 520, 521, 522, 523, 530, 537, 538, 540, 546,
	547, 548, 549, 554, 561, 580, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 0, 110, 160, 175, 235,
	238, 244, 251, 0, 0, 0, 496, 218, 188, 157,
	568, 556, 0, 513, 571, 485, 503, 579, 504, 507,
	544, 470, 526, 196, 501, 0, 489, 465, 497, 466,
	487, 515, 136, 519, 484, 558, 529, 570, 166, 0,
	490, 577, 168, 535, 0, 247, 183, 0, 0, 0,
	517, 560, 524, 553, 512, 545, 475, 534, 572, 502,
	542, 573, 0, 0, 0, 103, 104, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 539, 567,
	499, 541, 543, 581, 464, 536, 0, 468, 471, 578,
	563, 493, 494, 0, 0, 0, 0, 0, 0, 0,
	516, 525, 550, 510, 0, 0, 0, 0, 0, 0,
	1037, 0, 491, 0, 533, 0, 0, 0, 472, 469,
	0, 0, 0, 0, 514, 0, 0, 0, 474, 0,
	492, 551, 0, 462, 145, 555, 562, 511, 304, 566,
	509, 508, 569, 215, 0, 252, 148, 165, 122, 162,
	107, 118, 0, 147, 193, 224, 228, 559, 488, 498,
	130, 495, 226, 203, 268, 532, 205, 225, 169, 258,
	216, 267, 277, 278, 255, 275, 282, 243, 111, 254,
	266, 127, 237, 0, 0, 0, 113, 264, 250, 181,
	158, 159, 112, 0, 222, 135, 143, 132, 195, 261,
	262, 131, 285, 119, 274, 115, 120, 273, 189, 257,
	265, 182, 174, 114, 263, 180, 173, 164, 139, 150,
	213, 171, 214, 151, 185, 184, 186, 0, 467, 0,
	248, 271, 286, 124, 483, 256, 280, 281, 0, 217,
	125, 144, 138, 212, 142, 187, 121, 153, 245, 163,
	170, 221, 284, 202, 227, 128, 270, 246, 479, 482,
	477, 478, 527, 528, 574, 575, 576, 552, 473, 0,
	480, 481, 0, 557, 564, 565, 531, 106, 116, 167,
	283, 219, 141, 272, 463, 476, 134, 486, 0, 0,
	500, 505, 506, 518, 520, 521, 522, 523, 530, 537,
	538, 540, 546, 547, 548, 549, 554, 561, 580, 108,
	109, 117, 123, 129, 133, 137, 140, 146, 149, 152,
	154, 155, 156, 161, 172, 176, 177, 178, 179, 190,
	191, 192, 194, 197, 198, 199, 200, 201, 204, 206,
	207, 208, 209, 210, 211, 220, 223, 229, 230, 231,
	232, 233, 234, 236, 239, 240, 241, 242, 249, 253,
	259, 260, 269, 276, 279, 0, 0, 0, 0, 110,
	160, 175, 235, 238, 244, 251, 0, 0, 0, 496,
	218, 188, 157, 568, 556, 0, 513, 571, 485, 503,
	579, 504, 507, 544, 470, 526, 196, 501, 0, 489,
	465, 497, 466, 487, 515, 136, 519, 484, 558, 529,
	570, 166, 0, 490, 577, 168, 535, 0, 247, 183,
	0, 0, 0, 517, 560, 524, 553, 512, 545, 475,
	534, 572, 502, 542, 573, 0, 0, 0, 103, 104,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 539, 567, 499, 541, 543, 581, 464, 536, 0,
	468, 471, 578, 563, 493, 494, 0, 0, 0, 0,
	0, 0, 0, 516, 525, 550, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 533, 0, 0,
	0, 472, 469, 0, 0, 0, 0, 514, 0, 0,
	0, 474, 0, 492, 551, 0, 462, 145, 555, 562,
	511, 304, 566, 509, 508, 569, 215, 0, 252, 148,
	165, 122, 162, 107, 118, 0, 147, 193, 224, 228,
	559, 488, 498, 130, 495, 226, 203, 268, 532, 205,
	225, 169, 258, 216, 267, 277, 278, 255, 275, 282,
	243, 111, 254, 266, 127, 237, 0, 0, 0, 113,
	264, 250, 181, 158, 159, 112, 0, 222, 135, 143,
	132, 195, 261, 262, 131, 285, 119, 274, 115, 120,
	273, 189, 257, 265, 182, 174, 114, 263, 180, 173,
	164, 139, 150, 213, 171, 214, 151, 185, 184, 186,
	0, 467, 0, 248, 271, 286, 124, 483, 256, 280,
	281, 0, 217, 125, 144, 138, 212, 142, 187, 121,
	153, 245, 163, 170, 221, 284, 202, 227, 128, 270,
	246, 479, 482, 477, 478, 527, 528, 574, 575, 576,
	552, 473, 0, 480, 481, 0, 557, 564, 565, 531,
	106, 116, 167, 283, 219, 141, 272, 463, 476, 134,
	486, 0, 0, 500, 505, 506, 518, 520, 521, 522,
	523, 530, 537, 538, 540, 546, 547, 548, 549, 554,
	561, 580, 108, 109, 117, 123, 129, 133, 137, 140,
	146, 149, 152, 154, 155, 156, 161, 172, 176, 177,
	178, 179, 190, 191, 192, 194, 197, 198, 199, 200,
	201, 204, 206, 207, 208, 209, 210, 211, 220, 223,
	229, 230, 231, 232, 233, 234, 236, 239, 240, 241,
	242, 249, 253, 259, 260, 269, 276, 279, 0, 0,
	0, 0, 110, 160, 175, 235, 238, 244, 251, 0,
	0, 0, 496, 218, 188, 157, 568, 556, 0, 513,
	571, 485, 503, 579, 504, 507, 544, 470, 526, 196,
	501, 0, 489, 465, 497, 466, 487, 515, 136, 519,
	484, 558, 529, 570, 166, 0, 490, 577, 168, 535,
	0, 247, 183, 0, 0, 0, 517, 560, 524, 553,
	512, 545, 475, 534, 572, 502, 542, 573, 0, 0,
	0, 103, 104, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 539, 567, 499, 541, 543, 581,
	464, 536, 0, 468, 471, 578, 563, 493, 494, 0,
	0, 0, 0, 0, 0, 0, 516, 525, 550, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	533, 0, 0, 0, 472, 469, 0, 0, 0, 0,
	514, 0, 0, 0, 474, 0, 492, 551, 0, 462,
	145, 555, 562, 511, 304, 566, 509, 508, 569, 215,
	0, 252, 148, 165, 122, 162, 107, 118, 0, 147,
	193, 224, 228, 559, 488, 498, 130, 495, 226, 203,
	268, 532, 205, 225, 169, 258, 216, 267, 277, 278,
	255, 275, 282, 243, 111, 254, 266, 127, 237, 0,
	0, 0, 113, 264, 250, 181, 158, 159, 112, 0,
	222, 135, 143, 132, 195, 261, 262, 131, 285, 119,
	274, 115, 460, 273, 189, 257, 265, 182, 174, 114,
	263, 180, 173, 164, 139, 150, 213, 171, 214, 151,
	185, 184, 186, 0, 467, 0, 248, 271, 286, 124,
	483, 256, 280, 281, 0, 217, 125, 144, 138, 212,
	142, 461, 459, 153, 245, 163, 170, 221, 284, 202,
	227, 128, 270, 246, 479, 482, 477, 478, 527, 528,
	574, 575, 576, 552, 473, 0, 480, 481, 0, 557,
	564, 565, 531, 106, 116, 167, 283, 219, 141, 272,
	463, 476, 134, 486, 0, 0, 500, 505, 506, 518,
	520, 521, 522, 523, 530, 537, 538, 540, 546, 547,
	548, 549, 554, 561, 580, 108, 109, 117, 123, 129,
	133, 137, 140, 146, 149, 152, 154, 155, 156, 161,
	172, 176, 177, 178, 179, 190, 191, 192, 194, 197,
	198, 199, 200, 201, 204, 206, 207, 208, 209, 210,
	211, 220, 223, 229, 230, 231, 232, 233, 234, 236,
	239, 240, 241, 242, 249, 253, 259, 260, 269, 276,
	279, 0, 0, 0, 0, 110, 160, 175, 235, 238,
	244, 251, 0, 0, 0, 496, 218, 188, 157, 568,
	556, 0, 513, 571, 485, 503, 579, 504, 507, 544,
	470, 526, 196, 501, 0, 489, 465, 497, 466, 487,
	515, 136, 519, 484, 558, 529, 570, 166, 0, 490,
	577, 168, 535, 0, 247, 183, 0, 0, 0, 517,
	560, 524, 553, 512, 545, 475, 534, 572, 502, 542,
	573, 0, 0, 0, 103, 104, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 539, 567, 499,
	541, 543, 581, 464, 536, 0, 468, 471, 578, 563,
	493, 494, 0, 0, 0, 0, 0, 0, 0, 516,
	525, 550, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 533, 0, 0, 0, 472, 469, 0,
	0, 0, 0, 514, 0, 0, 0, 474, 0, 492,
	551, 0, 462, 145, 555, 562, 511, 304, 566, 509,
	508, 569, 215, 0, 252, 148, 165, 122, 162, 107,
	118, 0, 147, 193, 224, 228, 559, 488, 498, 130,
	495, 226, 203, 268, 532, 205, 225, 169, 258, 216,
	267, 277, 278, 255, 275, 282, 243, 111, 254, 801,
	127, 237, 0, 0, 0, 113, 264, 250, 181, 158,
	159, 112, 0, 222, 135, 143, 132, 195, 261, 262,
	131, 285, 119, 274, 115, 460, 273, 189, 257, 265,
	182, 174, 114, 263, 180, 173, 164, 139, 150, 213,
	171, 214, 151, 185, 184, 186, 0, 467, 0, 248,
	271, 286, 124, 483, 256, 280, 281, 0, 217, 125,
	144, 138, 212, 142, 461, 459, 153, 245, 163, 170,
	221, 284, 202, 227, 128, 270, 246, 479, 482, 477,
	478, 527, 528, 574, 575, 576, 552, 473, 0, 480,
	481, 0, 557, 564, 565, 531, 106, 116, 167, 283,
	219, 141, 272, 463, 476, 134, 486, 0, 0, 500,
	505, 506, 518, 520, 521, 522, 523, 530, 537, 538,
	540, 546, 547, 548, 549, 554, 561, 580, 108, 109,
	117, 123, 129, 133, 137, 140, 146, 149, 152, 154,
	155, 156, 161, 172, 176, 177, 178, 179, 190, 191,
	192, 194, 197, 198, 199, 200, 201, 204, 206, 207,
	208, 209, 210, 211, 220, 223, 229, 230, 231, 232,
	233, 234, 236, 239, 240, 241, 242, 249, 253, 259,
	260, 269, 276, 279, 0, 0, 0, 0, 110, 160,
	175, 235, 238, 244, 251, 0, 0, 0, 496, 218,
	188, 157, 568, 556, 0, 513, 571, 485, 503, 579,
	504, 507, 544, 470, 526, 196, 501, 0, 489, 465,
	497, 466, 487, 515, 136, 519, 484, 558, 529, 570,
	166, 0, 490, 577, 168, 535, 0, 247, 183, 0,
	0, 0, 517, 560, 524, 553, 512, 545, 475, 534,
	572, 502, 542, 573, 0, 0, 0, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	539, 567, 499, 541, 543, 581, 464, 536, 0, 468,
	471, 578, 563, 493, 494, 0, 0, 0, 0, 0,
	0, 0, 516, 525, 550, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 533, 0, 0, 0,
	472, 469, 0, 0, 0, 0, 514, 0, 0, 0,
	474, 0, 492, 551, 0, 462, 145, 555, 562, 511,
	304, 566, 509, 508, 569, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 559,
	488, 498, 130, 495, 226, 203, 268, 532, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 451, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 460, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	467, 0, 248, 271, 286, 124, 483, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 461, 459, 454,
	453, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	479, 482, 477, 478, 527, 528, 574, 575, 576, 552,
	473, 0, 480, 481, 0, 557, 564, 565, 531, 106,
	116, 167, 283, 219, 141, 272, 463, 476, 134, 486,
	0, 0, 500, 505, 506, 518, 520, 521, 522, 523,
	530, 537, 538, 540, 546, 547, 548, 549, 554, 561,
	580, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	0, 110, 160, 175, 235, 238, 244, 251, 0, 0,
	0, 496, 218, 188, 157, 196, 0, 0, 969, 0,
	349, 0, 0, 0, 136, 0, 348, 0, 0, 0,
	166, 0, 970, 392, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 383, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 103, 104, 105,
	370, 369, 372, 373, 374, 375, 0, 0, 126, 371,
	376, 377, 378, 0, 0, 0, 0, 346, 363, 0,
	391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 361, 438, 0, 0, 0, 406, 0, 362, 0,
	0, 355, 356, 358, 357, 359, 364, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 405, 0, 0,
	304, 0, 0, 403, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	393, 404, 399, 400, 397, 398, 396, 395, 394, 407,
	385, 386, 387, 388, 390, 0, 401, 402, 389, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	0, 110, 160, 175, 235, 238, 244, 251, 0, 0,
	196, 0, 218, 188, 157, 349, 0, 0, 0, 136,
	0, 348, 0, 0, 0, 166, 0, 0, 392, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 383,
	384, 0, 0, 0, 0, 0, 0, 1084, 0, 68,
	0, 0, 103, 104, 105, 370, 369, 372, 373, 374,
	375, 0, 0, 126, 371, 376, 377, 378, 1085, 0,
	0, 0, 346, 363, 0, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 361, 0, 0, 0,
	0, 406, 0, 362, 0, 0, 355, 356, 358, 357,
	359, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 405, 0, 0, 304, 0, 0, 403, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 393, 404, 399, 400, 397,
	398, 396, 395, 394, 407, 385, 386, 387, 388, 390,
	0, 401, 402, 389, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 0, 110, 160, 175, 235,
	238, 244, 251, 0, 0, 196, 0, 218, 188, 157,
	349, 0, 0, 0, 136, 0, 348, 0, 0, 0,
	166, 0, 0, 392, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 383, 384, 0, 0, 0, 0,
	0, 0, 1081, 0, 68, 0, 0, 103, 104, 105,
	370, 369, 372, 373, 374, 375, 0, 0, 126, 371,
	376, 377, 378, 1082, 0, 0, 0, 346, 363, 0,
	391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 361, 0, 0, 0, 0, 406, 0, 362, 0,
	0, 355, 356, 358, 357, 359, 364, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 405, 0, 0,
	304, 0, 0, 403, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	393, 404, 399, 400, 397, 398, 396, 395, 394, 407,
	385, 386, 387, 388, 390, 0, 401, 402, 389, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	0, 110, 160, 175, 235, 238, 244, 251, 0, 0,
	196, 0, 218, 188, 157, 349, 0, 0, 0, 136,
	0, 348, 0, 0, 0, 166, 0, 0, 392, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 383,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 426, 103, 104, 105, 370, 369, 372, 373, 374,
	375, 0, 0, 126, 371, 376, 377, 378, 0, 0,
	0, 0, 346, 363, 0, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 361, 0, 0, 0,
	0, 406, 0, 362, 0, 0, 355, 356, 358, 357,
	359, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 405, 0, 0, 304, 0, 0, 403, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 393, 404, 399, 400, 397,
	398, 396, 395, 394, 407, 385, 386, 387, 388, 390,
	0, 401, 402, 389, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 0, 110, 160, 175, 235,
	238, 244, 251, 0, 0, 196, 0, 218, 188, 157,
	349, 0, 0, 0, 136, 0, 348, 0, 0, 0,
	166, 0, 0, 392, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 383, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 103, 104, 105,
	370, 369, 372, 373, 374, 375, 0, 0, 126, 371,
	376, 377, 378, 0, 0, 0, 0, 346, 363, 0,
	391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 361, 438, 0, 0, 0, 406, 0, 362, 0,
	0, 355, 356, 358, 357, 359, 364, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 405, 0, 0,
	304, 0, 0, 403, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	393, 404, 399, 400, 397, 398, 396, 395, 394, 407,
	385, 386, 387, 388, 390, 0, 401, 402, 389, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	0, 110, 160, 175, 235, 238, 244, 251, 0, 0,
	196, 0, 218, 188, 157, 349, 0, 0, 0, 136,
	0, 348, 0, 0, 0, 166, 0, 0, 392, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 383,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 103, 104, 105, 370, 987, 372, 373, 374,
	375, 0, 0, 126, 371, 376, 377, 378, 0, 0,
	0, 0, 346, 363, 0, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 361, 438, 0, 0,
	0, 406, 0, 362, 0, 0, 355, 356, 358, 357,
	359, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 405, 0, 0, 304, 0, 0, 403, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 393, 404, 399, 400, 397,
	398, 396, 395, 394, 407, 385, 386, 387, 388, 390,
	0, 401, 402, 389, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 0, 110, 160, 175, 235,
	238, 244, 251, 0, 0, 196, 0, 218, 188, 157,
	349, 0, 0, 0, 136, 0, 348, 0, 0, 0,
	166, 0, 0, 392, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 383, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 103, 104, 105,
	370, 984, 372, 373, 374, 375, 0, 0, 126, 371,
	376, 377, 378, 0, 0, 0, 0, 346, 363, 0,
	391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 361, 438, 0, 0, 0, 406, 0, 362, 0,
	0, 355, 356, 358, 357, 359, 364, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 405, 0, 0,
	304, 0, 0, 403, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	393, 404, 399, 400, 397, 398, 396, 395, 394, 407,
	385, 386, 387, 388, 390, 0, 401, 402, 389, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 419, 0,
	0, 110, 160, 175, 235, 238, 244, 251, 0, 0,
	196, 0, 218, 188, 157, 349, 0, 0, 0, 136,
	0, 348, 0, 0, 0, 166, 0, 0, 392, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 383,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 103, 104, 105, 370, 369, 372, 373, 374,
	375, 0, 0, 126, 371, 376, 377, 378, 0, 0,
	0, 0, 346, 363, 0, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 361, 0, 0, 0,
	0, 406, 0, 362, 0, 0, 355, 356, 358, 357,
	359, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 405, 0, 0, 304, 0, 0, 403, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 393, 404, 399, 400, 397,
	398, 396, 395, 394, 407, 385, 386, 387, 388, 390,
	0, 401, 402, 389, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 0, 110, 160, 175, 235,
	238, 244, 251, 0, 0, 196, 0, 218, 188, 157,
	349, 0, 0, 0, 136, 0, 348, 0, 0, 0,
	166, 0, 0, 392, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 383, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 103, 104, 105,
	370, 369, 372, 373, 374, 375, 0, 0, 126, 371,
	376, 377, 378, 0, 0, 0, 0, 346, 363, 0,
	391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 361, 0, 0, 0, 0, 406, 0, 362, 0,
	0, 355, 356, 358, 357, 359, 364, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 405, 0, 0,
	304, 0, 0, 403, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	393, 404, 399, 400, 397, 398, 396, 395, 394, 407,
	385, 386, 387, 388, 390, 0, 401, 402, 389, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	196, 110, 160, 175, 235, 238, 244, 251, 0, 136,
	0, 0, 218, 188, 157, 166, 0, 0, 392, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 383,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 103, 104, 105, 370, 369, 372, 373, 374,
	375, 0, 0, 126, 371, 376, 377, 378, 0, 0,
	0, 0, 0, 363, 0, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 361, 0, 0, 0,
	0, 406, 0, 362, 0, 0, 355, 356, 358, 357,
	359, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 405, 0, 0, 304, 0, 0, 403, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 1685, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 393, 404, 399, 400, 397,
	398, 396, 395, 394, 407, 385, 386, 387, 388, 390,
	0, 401, 402, 389, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 196, 110, 160, 175, 235,
	238, 244, 251, 0, 136, 0, 0, 218, 188, 157,
	166, 0, 0, 392, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 383, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 426, 103, 104, 105,
	370, 369, 372, 373, 374, 375, 0, 0, 126, 371,
	376, 377, 378, 0, 0, 0, 0, 0, 363, 0,
	391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 361, 0, 0, 0, 0, 406, 0, 362, 0,
	0, 355, 356, 358, 357, 359, 364, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 405, 0, 0,
	304, 0, 0, 403, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	393, 404, 399, 400, 397, 398, 396, 395, 394, 407,
	385, 386, 387, 388, 390, 0, 401, 402, 389, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	196, 110, 160, 175, 235, 238, 244, 251, 0, 136,
	0, 0, 218, 188, 157, 166, 0, 0, 392, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 383,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 103, 104, 105, 370, 369, 372, 373, 374,
	375, 0, 0, 126, 371, 376, 377, 378, 0, 0,
	0, 0, 0, 363, 0, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 361, 0, 0, 0,
	0, 406, 0, 362, 0, 0, 355, 356, 358, 357,
	359, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 405, 0, 0, 304, 0, 0, 403, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 393, 404, 399, 400, 397,
	398, 396, 395, 394, 407, 385, 386, 387, 388, 390,
	0, 401, 402, 389, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 196, 110, 160, 175, 235,
	238, 244, 251, 0, 136, 0, 0, 218, 188, 157,
	166, 0, 0, 0, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 674, 673, 683, 684,
	676, 677, 678, 679, 680, 681, 682, 675, 0, 0,
	685, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 0, 0,
	304, 0, 0, 0, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	0, 110, 160, 175, 235, 238, 244, 251, 0, 0,
	0, 196, 218, 188, 157, 776, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	168, 0, 0, 247, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 0, 778, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	663, 664, 662, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 665, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 0, 0, 0, 304, 0, 0, 0,
	0, 215, 0, 252, 148, 165, 122, 162, 107, 118,
	0, 147, 193, 224, 228, 0, 0, 0, 130, 0,
	226, 203, 268, 0, 205, 225, 169, 258, 216, 267,
	277, 278, 255, 275, 282, 243, 111, 254, 266, 127,
	237, 0, 0, 0, 113, 264, 250, 181, 158, 159,
	112, 0, 222, 135, 143, 132, 195, 261, 262, 131,
	285, 119, 274, 115, 120, 273, 189, 257, 265, 182,
	174, 114, 263, 180, 173, 164, 139, 150, 213, 171,
	214, 151, 185, 184, 186, 0, 0, 0, 248, 271,
	286, 124, 0, 256, 280, 281, 0, 217, 125, 144,
	138, 212, 142, 187, 121, 153, 245, 163, 170, 221,
	284, 202, 227, 128, 270, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 116, 167, 283, 219,
	141, 272, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 109, 117,
	123, 129, 133, 137, 140, 146, 149, 152, 154, 155,
	156, 161, 172, 176, 177, 178, 179, 190, 191, 192,
	194, 197, 198, 199, 200, 201, 204, 206, 207, 208,
	209, 210, 211, 220, 223, 229, 230, 231, 232, 233,
	234, 236, 239, 240, 241, 242, 249, 253, 259, 260,
	269, 276, 279, 0, 0, 0, 196, 110, 160, 175,
	235, 238, 244, 251, 0, 136, 0, 0, 218, 188,
	157, 166, 0, 0, 0, 168, 0, 0, 247, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 97, 98,
	0, 94, 0, 0, 0, 99, 215, 0, 252, 148,
	165, 122, 162, 107, 118, 0, 147, 193, 224, 228,
	0, 0, 0, 130, 0, 226, 203, 268, 0, 205,
	225, 169, 258, 216, 267, 277, 278, 255, 275, 282,
	243, 111, 254, 266, 127, 237, 0, 0, 0, 113,
	264, 250, 181, 158, 159, 112, 0, 222, 135, 143,
	132, 195, 261, 262, 131, 285, 119, 274, 115, 120,
	273, 189, 257, 265, 182, 174, 114, 263, 180, 173,
	164, 139, 150, 213, 171, 214, 151, 185, 184, 186,
	0, 0, 0, 248, 271, 286, 124, 0, 256, 280,
	281, 0, 217, 125, 144, 138, 212, 142, 187, 121,
	153, 245, 163, 170, 221, 284, 202, 227, 128, 270,
	246, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 116, 167, 283, 219, 141, 272, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 109, 117, 123, 129, 133, 137, 140,
	146, 149, 152, 154, 155, 156, 161, 172, 176, 177,
	178, 179, 190, 191, 192, 194, 197, 198, 199, 200,
	201, 204, 206, 207, 208, 209, 210, 211, 220, 223,
	229, 230, 231, 232, 233, 234, 236, 239, 240, 241,
	242, 249, 253, 259, 260, 269, 276, 279, 35, 0,
	0, 0, 110, 160, 175, 235, 238, 244, 251, 0,
	196, 0, 0, 218, 188, 157, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 103, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 0, 304, 0, 0, 0, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 0, 110, 160, 175, 235,
	238, 244, 251, 0, 0, 0, 64, 218, 188, 157,
	196, 0, 0, 0, 1064, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 1066, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 0, 304, 0, 0, 0, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 35, 0, 0, 0, 110, 160, 175, 235,
	238, 244, 251, 0, 196, 0, 0, 218, 188, 157,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 168, 0, 0, 247, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 103, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 0, 304,
	0, 0, 0, 0, 215, 0, 252, 148, 165, 122,
	162, 107, 118, 0, 147, 193, 224, 228, 0, 0,
	0, 130, 0, 226, 203, 268, 0, 205, 225, 169,
	258, 216, 267, 277, 278, 255, 275, 282, 243, 111,
	254, 266, 127, 237, 0, 0, 0, 113, 264, 250,
	181, 158, 159, 112, 0, 222, 135, 143, 132, 195,
	261, 262, 131, 285, 119, 274, 115, 120, 273, 189,
	257, 265, 182, 174, 114, 263, 180, 173, 164, 139,
	150, 213, 171, 214, 151, 185, 184, 186, 0, 0,
	0, 248, 271, 286, 124, 0, 256, 280, 281, 0,
	217, 125, 144, 138, 212, 142, 187, 121, 153, 245,
	163, 170, 221, 284, 202, 227, 128, 270, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 116,
	167, 283, 219, 141, 272, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 109, 117, 123, 129, 133, 137, 140, 146, 149,
	152, 154, 155, 156, 161, 172, 176, 177, 178, 179,
	190, 191, 192, 194, 197, 198, 199, 200, 201, 204,
	206, 207, 208, 209, 210, 211, 220, 223, 229, 230,
	231, 232, 233, 234, 236, 239, 240, 241, 242, 249,
	253, 259, 260, 269, 276, 279, 0, 0, 0, 0,
	110, 160, 175, 235, 238, 244, 251, 0, 0, 0,
	196, 218, 188, 157, 1064, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 1066, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 0, 304, 0, 0, 0, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 1062, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 196, 110, 160, 175, 235,
	238, 244, 251, 0, 136, 0, 0, 218, 188, 157,
	166, 0, 0, 0, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 0, 1029, 0, 0, 1030, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 0, 0,
	304, 0, 0, 0, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	196, 110, 160, 175, 235, 238, 244, 251, 0, 136,
	0, 812, 218, 188, 157, 166, 0, 0, 0, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 811, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 0, 304, 0, 0, 0, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 196, 110, 160, 175, 235,
	238, 244, 251, 0, 136, 0, 0, 218, 188, 157,
	166, 0, 0, 0, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 426, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 0, 0,
	304, 0, 0, 0, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	196, 110, 160, 175, 235, 238, 244, 251, 0, 136,
	0, 0, 218, 188, 157, 166, 0, 0, 0, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 103, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 0, 304, 0, 0, 0, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 196, 110, 160, 175, 235,
	238, 244, 251, 0, 136, 0, 0, 218, 188, 157,
	166, 0, 0, 0, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 1066, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 0, 0,
	304, 0, 0, 0, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	196, 110, 160, 175, 235, 238, 244, 251, 0, 136,
	0, 0, 218, 188, 157, 166, 0, 0, 0, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 1183, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 0, 304, 0, 0, 0, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 196, 110, 160, 175, 235,
	238, 244, 251, 781, 136, 0, 0, 218, 188, 157,
	166, 0, 0, 0, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 0, 0,
	304, 0, 0, 0, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	196, 110, 160, 175, 235, 238, 244, 251, 0, 136,
	0, 0, 218, 188, 157, 166, 0, 0, 0, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 778, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 0, 304, 0, 0, 0, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 0, 110, 160, 175, 235,
	238, 244, 251, 443, 0, 0, 0, 218, 188, 157,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 0, 304, 0, 0, 0, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 196, 110, 160, 175, 235,
	238, 244, 251, 0, 136, 0, 0, 218, 188, 157,
	166, 0, 0, 0, 168, 0, 0, 247, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 299, 0,
	304, 0, 0, 0, 0, 215, 0, 252, 148, 165,
	122, 162, 107, 118, 0, 147, 193, 224, 228, 0,
	0, 0, 130, 0, 226, 203, 268, 0, 205, 225,
	169, 258, 216, 267, 277, 278, 255, 275, 282, 243,
	111, 254, 266, 127, 237, 0, 0, 0, 113, 264,
	250, 181, 158, 159, 112, 0, 222, 135, 143, 132,
	195, 261, 262, 131, 285, 119, 274, 115, 120, 273,
	189, 257, 265, 182, 174, 114, 263, 180, 173, 164,
	139, 150, 213, 171, 214, 151, 185, 184, 186, 0,
	0, 0, 248, 271, 286, 124, 0, 256, 280, 281,
	0, 217, 125, 144, 138, 212, 142, 187, 121, 153,
	245, 163, 170, 221, 284, 202, 227, 128, 270, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 167, 283, 219, 141, 272, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 133, 137, 140, 146,
	149, 152, 154, 155, 156, 161, 172, 176, 177, 178,
	179, 190, 191, 192, 194, 197, 198, 199, 200, 201,
	204, 206, 207, 208, 209, 210, 211, 220, 223, 229,
	230, 231, 232, 233, 234, 236, 239, 240, 241, 242,
	249, 253, 259, 260, 269, 276, 279, 0, 0, 0,
	196, 110, 160, 175, 235, 238, 244, 251, 0, 136,
	0, 0, 218, 188, 157, 166, 0, 0, 0, 168,
	0, 0, 247, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 0, 304, 0, 0, 0, 0,
	215, 0, 252, 148, 165, 122, 162, 107, 118, 0,
	147, 193, 224, 228, 0, 0, 0, 130, 0, 226,
	203, 268, 0, 205, 225, 169, 258, 216, 267, 277,
	278, 255, 275, 282, 243, 111, 254, 266, 127, 237,
	0, 0, 0, 113, 264, 250, 181, 158, 159, 112,
	0, 222, 135, 143, 132, 195, 261, 262, 131, 285,
	119, 274, 115, 120, 273, 189, 257, 265, 182, 174,
	114, 263, 180, 173, 164, 139, 150, 213, 171, 214,
	151, 185, 184, 186, 0, 0, 0, 248, 271, 286,
	124, 0, 256, 280, 281, 0, 217, 125, 144, 138,
	212, 142, 187, 121, 153, 245, 163, 170, 221, 284,
	202, 227, 128, 270, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 167, 283, 219, 141,
	272, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 133, 137, 140, 146, 149, 152, 154, 155, 156,
	161, 172, 176, 177, 178, 179, 190, 191, 192, 194,
	197, 198, 199, 200, 201, 204, 206, 207, 208, 209,
	210, 211, 220, 223, 229, 230, 231, 232, 233, 234,
	236, 239, 240, 241, 242, 249, 253, 259, 260, 269,
	276, 279, 0, 0, 0, 0, 110, 160, 175, 235,
	238, 244, 251, 0, 0, 0, 0, 218, 188, 157,
}

var yyPact = [...]int{
	2673, -1000, -299, 1112, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1040, 860, -1000, -1000, -1000, -1000, -1000,
	-1000, 378, 12968, 41, 178, 28, 17857, 174, -24, 18202,
	-1000, 64, -1000, 51, 18202, 60, -23, -1000, -1000, -42,
	-43, -1000, 10887, -273, -1000, 539, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 854, 1032, 1033,
	1050, 721, 1106, -1000, 9467, 137, 137, 17512, 7687, -1000,
	-1000, 435, 18202, 172, 18202, -110, 133, 133, 133, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 162, 18202, 645,
	645, 299, -1000, 18202, 130, 645, 130, 130, 130, 18202,
	-1000, 221, -1000, -1000, -1000, 18202, 645, 974, 372, 94,
	5076, -1000, 567, -1000, 5076, 71, 5076, -6, 1063, 76,
	18, -1000, 645, -71, -1000, -1000, -1000, -1000, -1000, -1000,
	152, -1000, -1000, 18202, -69, 159, 366, -1000, -1000, -1000,
	-1000, -1000, -1000, 674, 538, -1000, 10887, 1668, 770, 770,
	-1000, -1000, 206, -1000, -1000, 11922, 11922, 11922, 11922, 11922,
	11922, 11922, 11922, 11922, 11922, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 770,
	219, -1000, 10532, 770, 770, 770, 770, 770, 770, 770,
	770, 10887, 770, 770, 770, 770, 770, 770, 770, 770,
	770, 770, 770, 770, 770, 770, 770, 770, -1000, -1000,
	-266, -276, 18202, -1000, 18202, 587, 1040, -1000, 860, -1000,
	-1000, -1000, 977, 10887, 10887, 1040, -1000, 937, 9467, -1000,
	-1000, 1039, -1000, -1000, -1000, -1000, 432, 1077, -1000, 12623,
	218, 16807, 15772, 18202, 795, 755, -1000, -1000, 216, 801,
	7314, -82, -1000, -1000, -1000, 182, 15082, -1000, -1000, -1000,
	973, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 729, 18202, -1000, 353, -1000, 645, 5076, 155,
	645, 383, 645, 18202, 18202, 5076, 5076, 5076, 84, 118,
	111, 18202, 800, 141, 18202, 1018, 887, 18202, 645, 645,
	-1000, 6568, -1000, 5076, 372, -1000, 585, 10887, 5076, 5076,
	5076, 18202, 5076, 5076, -1000, -1000, -1000, 364, 352, -1000,
	-1000, -1000, -1000, -1000, 5076, 5076, -1000, 1076, 355, -1000,
	-1000, -1000, -1000, 10887, 276, -1000, 882, -1000, -1000, -79,
	59, -1000, 18202, -1000, 1112, -1000, -1000, -1000, -129, -1000,
	-1000, 10887, 10887, 10887, 10887, 570, 278, 11922, 544, 363,
	11922, 11922, 11922, 11922, 11922, 11922, 11922, 11922, 11922, 11922,
	11922, 11922, 11922, 11922, 11922, 632, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 645, -1000, 1100, 616, 616, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 12267, 8047,
	6568, 721, 712, 1040, 9467, 9467, 10887, 10887, 10177, 9822,
	9467, 979, 374, 538, 18202, -1000, -1000, 11577, -1000, -1000,
	-1000, -1000, -1000, 593, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 18202, 18202, 9467, 9467, 9467, 9467, 9467, 645, 645,
	645, 645, 564, -1000, -1000, 1033, 721, 1039, -1000, 1094,
	272, 398, 799, -1000, 412, 1033, 14737, 851, -1000, 1039,
	-1000, -1000, -1000, 18202, -1000, -1000, 17152, -1000, -1000, 6195,
	97, 18202, -1000, 725, 911, -1000, -1000, -1000, 1027, 13322,
	14392, 97, 657, 15772, 18202, -1000, -1000, 15772, 18202, 5822,
	6941, -82, -1000, 739, -1000, -88, -63, 8757, 8402, 231,
	-1000, -1000, -1000, -1000, 4703, 332, 644, 519, -15, -1000,
	-1000, -1000, 808, -1000, 808, 808, 808, 808, 25, 25,
	25, 25, -1000, -1000, -1000, -1000, -1000, 866, 864, -1000,
	808, 808, 808, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 862, 862, 862, 816, 816, 871, -1000, 18202, 5076,
	1016, 5076, -1000, 119, -1000, -1000, -1000, 18202, 18202, 18202,
	18202, 18202, 193, 18202, 18202, 798, -1000, 18202, 5076, -1000,
	-1000, 215, -1000, -1000, -1000, -1000, -1000, 538, -1000, -1000,
	-1000, -1000, -1000, -1000, 18202, -1000, -1000, 18202, -1000, 16807,
	-1000, -1000, 18202, 372, 18202, 18202, 538, -1000, 577, 18202,
	-1000, 18202, -1000, 16462, -1000, -1000, -1000, -1000, 538, 278,
	437, 344, -1000, -1000, 600, -1000, -1000, 2183, -1000, -1000,
	-1000, -1000, 544, 11922, 11922, 11922, 923, 2183, 1937, 881,
	794, 240, 404, 404, 233, 233, 233, 233, 233, 473,
	473, -1000, -1000, -1000, 593, -1000, -1000, -1000, 593, 9467,
	9467, 775, 770, 213, -1000, 854, -1000, -1000, 1033, 704,
	704, 331, 581, 311, 1075, 704, 308, 1069, 704, 704,
	9467, -1000, -1000, 387, -1000, 10887, 593, -1000, 212, -1000,
	1730, 749, 745, 704, 593, 593, 704, 704, -257, -1000,
	645, -1000, 654, -1000, 343, -1000, 977, -1000, -1000, 933,
	10887, 10887, 10887, -1000, -1000, -1000, 977, 1043, -1000, 943,
	942, 1056, 9467, 15772, 1039, -1000, -1000, -1000, 211, 766,
	770, -1000, 18202, 15772, 15772, 15772, 15772, 15772, -1000, 924,
	910, -1000, 922, 902, 898, 18202, -1000, 706, 593, 721,
	13322, 223, 770, -1000, 16117, -1000, -1000, 1056, 15772, 756,
	-1000, 756, -1000, 210, -1000, -1000, 739, -82, -74, -1000,
	-1000, -1000, -1000, 538, -1000, -1000, 538, -1000, 640, 735,
	4330, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 861, 645,
	-1000, 1009, 259, 237, 645, 1007, -1000, -1000, -1000, 976,
	-1000, 408, -38, -1000, -1000, 522, 25, 25, -1000, -1000,
	231, 967, 231, 231, 231, 573, 573, -1000, -1000, -1000,
	-1000, 491, -1000, -1000, -1000, 489, -1000, 879, 18202, 5076,
	-1000, -1000, -1000, -1000, 264, 264, 256, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 96, 869,
	-1000, -1000, -1000, -1000, 45, 83, 140, -1000, 5076, -1000,
	6568, 355, 372, 835, 355, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 923, 2183,
	1904, -1000, 11922, 11922, -1000, -1000, 704, 704, 9467, 6568,
	1040, 977, -1000, -1000, 153, 632, 153, 11922, 11922, -1000,
	11922, 11922, -1000, -128, 848, 354, -1000, 10887, 569, -1000,
	6568, -1000, 11922, 11922, -1000, -1000, -1000, -1000, -1000, 568,
	-1000, -1000, -1000, -1000, 564, -1000, -1000, 340, -1000, 616,
	-1000, 930, 538, 538, -1000, -1000, 18202, -1000, -1000, -1000,
	-1000, 1054, 10887, -1000, 731, -1000, 5449, 878, 18202, 770,
	1112, 14036, 18202, 797, -1000, 326, 911, 831, 877, 773,
	-1000, -1000, -1000, -1000, 908, -1000, 899, -1000, -1000, -1000,
	-1000, -1000, -1000, 721, -1000, 171, 170, 169, 18202, -1000,
	1040, 756, -1000, -1000, 250, -1000, -1000, -93, -68, -1000,
	-1000, -1000, 4703, -1000, 4703, 18202, 113, -1000, 645, 645,
	-1000, -1000, 820, 875, 11922, -1000, -1000, -1000, 626, 231,
	231, -1000, 338, -1000, -1000, -1000, 701, -1000, 699, 723,
	695, 18202, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 18202, -1000, -1000, -1000, -1000, -1000, 18202, -139, 645,
	18202, 18202, 18202, 18202, -1000, 209, 372, -1000, 372, 18202,
	372, -1000, 11922, 2183, 2183, -1000, -1000, 593, -1000, 1033,
	-1000, 593, 808, 808, -1000, 808, 816, -1000, 808, 50,
	808, 49, 593, 593, 2089, 1968, 1857, 1702, 770, -119,
	-1000, 538, 10887, -1000, 1813, 1755, 566, -1000, 616, -1000,
	-1000, -1000, 1045, 1042, 538, -1000, -1000, 980, 754, 665,
	-1000, -1000, 9112, 688, 194, 686, -1000, 1056, 18202, 10887,
	-1000, -1000, 10887, 814, -1000, 10887, -1000, -1000, -1000, 1040,
	770, 770, 770, 686, 1033, -1000, -1000, -1000, -1000, 4330,
	-1000, 681, -1000, 808, -1000, -1000, -1000, 18202, -3, 1093,
	2183, -1000, -1000, -1000, -1000, -1000, 25, 554, 25, 476,
	-1000, 453, 5076, -1000, -1000, -1000, -1000, 1012, -1000, 6568,
	-1000, -1000, 807, 870, -1000, -1000, 6568, -1000, -1000, 679,
	-1000, -1000, 2183, -1000, 977, -1000, -1000, 161, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11922, 11922, 11922, 11922,
	11922, 1033, 547, 538, 11922, 11922, -1000, -1000, -1000, 10887,
	10887, 993, -1000, 770, -1000, 769, 18202, 18202, -1000, 18202,
	1040, -1000, 538, 538, 18202, 538, 15427, 18202, 18202, 13682,
	-1000, 208, 18202, -1000, 676, 243, -1000, -131, 231, -1000,
	231, 611, 598, -1000, 770, 715, -1000, 318, 18202, 18202,
	-1000, -1000, 18202, -1000, -1000, -1000, 1730, 1730, 1730, 1730,
	93, 593, -1000, 1730, 1730, 538, 674, 1086, -1000, 770,
	1112, 192, -1000, -1000, 1033, 671, 663, -1000, 663, 663,
	223, 208, -1000, 645, 289, 543, -1000, 102, 421, 987,
	-1000, 978, -1000, -1000, -1000, -1000, -1000, 95, 6568, 4703,
	661, -1000, -1000, -1000, -1000, -1000, -1000, 593, 88, -143,
	-1000, -1000, -1000, 18202, 665, 18202, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 440, -1000, -1000, 18202, -1000, 542,
	-1000, -1000, 639, -1000, 18202, -1000, -1000, 869, -1000, 929,
	-137, -146, 633, -1000, -1000, 804, -1000, -1000, 95, 940,
	-139, -1000, 927, -1000, 18202, -1000, 91, -1000, -140, 609,
	89, -144, 874, 770, -163, 873, -1000, 1067, 11232, -1000,
	-1000, 1084, 225, 225, 1730, 593, -1000, -1000, -1000, 117,
	561, -1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1333, 1331, 59, 64, 66, 1330, 1329, 1328, 113,
	110, 102, 1327, 1326, 1325, 1324, 1322, 1320, 1319, 1318,
	1317, 1314, 1313, 1312, 1311, 1307, 1302, 1301, 1300, 1299,
	1298, 1295, 1294, 1121, 1293, 1292, 1291, 1290, 1288, 78,
	1287, 80, 1286, 1285, 1284, 1283, 1282, 1281, 1280, 1279,
	1277, 41, 756, 39, 65, 1276, 62, 804, 33, 56,
	71, 68, 1275, 34, 1274, 1273, 85, 1272, 1271, 57,
	1269, 1268, 1649, 70, 77, 1265, 9, 24, 1264, 1261,
	1260, 1256, 19, 163, 1255, 1253, 14, 1252, 1250, 105,
	1249, 69, 23, 13, 18, 22, 1246, 67, 1244, 8,
	1243, 63, 1242, 1241, 1240, 1239, 17, 1237, 61, 1236,
	20, 46, 1235, 36, 1234, 76, 32, 26, 7, 1233,
	1231, 25, 82, 53, 73, 1225, 1224, 585, 1223, 938,
	45, 1222, 1221, 120, 40, 1219, 121, 367, 1216, 1215,
	1214, 1212, 30, 1110, 2170, 263, 75, 1207, 1204, 1202,
	2773, 37, 54, 16, 1197, 1194, 1193, 44, 42, 48,
	1192, 1191, 38, 1190, 1189, 1186, 1184, 1183, 1181, 1180,
	123, 1178, 1177, 1176, 109, 21, 1175, 1174, 72, 27,
	1173, 1172, 1170, 52, 74, 1168, 1167, 58, 1166, 81,
	29, 1164, 1163, 1159, 1158, 1156, 31, 10, 1155, 15,
	1154, 11, 1147, 28, 1143, 3, 1138, 6, 1137, 2,
	0, 1136, 5, 1135, 1132, 49, 1, 1130, 4, 35,
	1129, 1128, 1126, 1124, 1123, 1716, 12, 84, 1111, 87,
}

var yyR1 = [...]int{
	0, 223, 224, 224, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 210, 210, 210, 213, 214,
	20, 3, 3, 3, 3, 2, 2, 8, 4, 5,
	5, 9, 9, 42, 42, 10, 11, 11, 11, 11,
	227, 227, 66, 66, 67, 67, 115, 115, 12, 13,
	13, 124, 124, 123, 123, 123, 125, 125, 125, 125,
	160, 160, 14, 14, 14, 14, 14, 14, 14, 38,
	38, 32, 32, 32, 32, 35, 35, 35, 50, 50,
	50, 212, 212, 211, 209, 209, 208, 208, 207, 21,
	192, 194, 194, 193, 193, 193, 193, 184, 163, 163,
	163, 163, 166, 166, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 165, 165, 165, 165, 165, 167, 167,
	167, 167, 167, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 169, 169,
	169, 169, 169, 169, 169, 169, 183, 183, 170, 170,
	178, 178, 179, 179, 179, 176, 176, 177, 177, 180,
	180, 180, 172, 172, 173, 173, 181, 181, 174, 174,
	174, 175, 175, 175, 182, 182, 182, 182, 182, 171,
	171, 185, 185, 202, 202, 201, 201, 201, 34, 191,
	191, 198, 198, 198, 198, 198, 188, 188, 188, 189,
	189, 187, 187, 190, 190, 200, 200, 199, 186, 186,
	203, 203, 203, 203, 217, 218, 216, 216, 216, 216,
	216, 195, 195, 195, 196, 196, 196, 197, 197, 197,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 206, 204, 204, 205, 205, 16, 22, 22, 17,
	17, 17, 17, 17, 18, 18, 23, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 131, 131,
	133, 133, 129, 129, 132, 132, 130, 130, 130, 134,
	134, 134, 135, 135, 161, 161, 161, 25, 25, 27,
	27, 28, 29, 29, 155, 155, 156, 156, 30, 31,
	43, 43, 43, 43, 43, 43, 45, 45, 45, 7,
	7, 7, 7, 44, 44, 44, 6, 6, 26, 26,
	26, 26, 19, 228, 39, 40, 40, 41, 41, 41,
	47, 47, 47, 46, 46, 46, 53, 53, 55, 55,
	55, 55, 55, 56, 56, 56, 56, 56, 56, 52,
	52, 54, 54, 54, 54, 147, 147, 147, 146, 146,
	58, 58, 59, 59, 60, 60, 61, 61, 61, 61,
	98, 75, 75, 114, 114, 113, 113, 116, 116, 62,
	62, 62, 62, 63, 63, 64, 64, 65, 65, 154,
	154, 153, 153, 153, 152, 152, 68, 68, 68, 70,
	69, 69, 69, 69, 71, 71, 73, 73, 72, 72,
	72, 72, 74, 76, 76, 76, 76, 76, 77, 77,
	57, 57, 57, 57, 57, 57, 57, 57, 128, 128,
	79, 79, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 90, 90, 90, 90, 90, 90, 80, 80,
	80, 80, 80, 80, 80, 51, 51, 91, 91, 91,
	97, 92, 92, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 87, 87, 87,
	87, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	229, 229, 89, 88, 88, 88, 88, 88, 88, 88,
	48, 48, 48, 48, 48, 159, 159, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	102, 102, 49, 49, 100, 100, 101, 103, 103, 99,
	99, 99, 82, 82, 82, 82, 82, 82, 82, 82,
	84, 84, 84, 104, 104, 105, 105, 106, 106, 107,
	107, 108, 109, 109, 109, 110, 110, 110, 110, 111,
	111, 111, 81, 81, 81, 81, 112, 112, 112, 112,
	117, 117, 93, 93, 95, 95, 94, 96, 118, 118,
	121, 119, 119, 119, 122, 122, 122, 122, 122, 122,
	122, 120, 120, 120, 149, 149, 149, 126, 126, 136,
	136, 137, 137, 127, 127, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 139, 139, 139, 140, 140,
	141, 141, 141, 148, 148, 144, 144, 145, 145, 150,
	150, 151, 151, 219, 220, 221, 221, 222, 222, 222,
	33, 36, 36, 37, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 225, 226, 157, 158,
	158, 158,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	2, 4, 6, 6, 7, 4, 6, 5, 8, 1,
	3, 7, 8, 1, 1, 10, 8, 7, 6, 6,
	1, 1, 1, 3, 1, 3, 0, 4, 3, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 8, 4, 6, 5, 5, 0,
	1, 4, 5, 7, 4, 5, 4, 3, 1, 1,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 2, 4, 1, 3, 3, 3, 8, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 2, 0, 2, 1, 2, 1, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 3, 2, 3, 1,
	10, 11, 11, 12, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 7, 7, 7, 7, 4, 5, 4, 4, 7,
	5, 5, 5, 12, 7, 5, 9, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 3, 3, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 3,
	4, 4, 4, 4, 4, 4, 3, 2, 7, 2,
	3, 4, 3, 7, 5, 4, 2, 4, 4, 3,
	3, 5, 2, 6, 4, 3, 7, 4, 1, 1,
	0, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 5, 0, 1, 0, 1, 2, 3,
	0, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 5, 3, 2, 2,
	3, 3, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 1,
	2, 3, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 3, 7, 0, 3, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	5, 7, 3, 0, 5, 4, 5, 5, 0, 2,
	1, 3, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 5,
	6, 4, 4, 6, 6, 6, 8, 8, 8, 8,
	9, 8, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 5, 4, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 0, 1, 0, 1, 3,
	5, 2, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int{
	-1000, -223, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -32, -35, -33,
	-34, -36, -37, -4, -225, 6, 7, -42, 9, 10,
	30, -21, 123, 124, 126, 125, 159, 127, 152, 53,
	173, 174, 176, 177, 178, 179, -45, 157, 158, 31,
	32, 129, 34, -38, 374, 370, 375, 376, 57, 8,
	262, 154, 153, 25, 377, -224, 378, -41, 5, -106,
	15, -3, -39, -228, -39, -39, -39, -39, -39, -192,
	-194, 57, 96, -141, 133, 77, 254, 130, 131, 137,
	-144, -210, -143, 60, 61, 62, 272, 145, 304, 305,
	364, 173, 187, 181, 208, 200, 273, 306, 146, 198,
	201, 241, 143, 307, 228, 235, 71, 176, 250, 308,
	155, 196, 192, 309, 281, 190, 27, 310, 237, 213,
	311, 277, 239, 191, 236, 129, 312, 148, 141, 313,
	214, 218, 314, 242, 315, 316, 317, 377, 185, 186,
	365, 318, 144, 244, 212, 142, 33, 274, 37, 163,
	245, 216, 319, 211, 207, 366, 320, 321, 322, 323,
	210, 184, 206, 41, 220, 219, 221, 240, 376, 203,
	324, 325, 326, 149, 327, 193, 18, 328, 329, 330,
	331, 332, 248, 158, 333, 161, 334, 335, 336, 337,
	338, 339, 238, 215, 217, 138, 165, 234, 375, 276,
	340, 246, 189, 341, 150, 162, 157, 249, 151, 342,
	343, 344, 345, 346, 347, 367, 348, 177, 368, 349,
	350, 351, 352, 172, 369, 243, 252, 40, 225, 353,
	183, 370, 140, 354, 174, 169, 230, 204, 164, 355,
	356, 194, 195, 209, 182, 205, 175, 166, 159, 357,
	251, 226, 278, 202, 199, 170, 358, 167, 168, 359,
	231, 232, 171, 275, 247, 197, 227, -127, 133, 254,
	130, 232, 135, 131, 131, 132, 133, 254, 130, 131,
	-72, -150, -210, -143, 133, 131, 114, 201, 241, 123,
	229, 237, -133, 238, 165, -161, 131, -129, 228, 231,
	232, 171, 364, 175, 239, 243, 242, 233, -150, 175,
	-155, 180, -144, 178, -129, -43, 360, 127, -157, -157,
	230, 230, -157, -92, -57, -78, 80, -83, 29, 23,
	-82, -79, -99, -96, -97, 114, 115, 117, 116, 118,
	103, 104, 111, 81, 119, -87, -85, -86, -88, 64,
	63, 72, 65, 66, 67, 68, 73, 74, 75, -144,
	-150, -94, -225, 47, 48, 263, 264, 265, 266, 271,
	267, 83, 36, 253, 261, 260, 259, 257, 258, 255,
	256, 269, 270, 136, 254, 130, 109, 262, -210, -143,
	364, 371, -39, 65, -39, -39, -5, -4, -225, 6,
	20, 21, -110, 17, 16, -226, 59, -47, -55, 42,
	43, -56, 21, 35, 46, 44, -40, -54, 105, -57,
	-150, -127, -127, 11, -66, -67, -72, -74, -150, -119,
	-160, 175, -122, 243, 242, -145, -120, -144, -142, 241,
	201, 240, 128, 279, 79, 22, 24, 223, 82, 114,
	16, 83, 113, 263, 123, 51, 280, 255, 256, 253,
	265, 266, 254, 229, 29, 10, 282, 25, 153, 21,
	35, 107, 125, 86, 87, 156, 374, 23, 154, 75,
	285, 19, 54, 11, 13, 286, 287, 14, 136, 135,
	98, 132, 49, 8, 119, 26, 95, 45, 288, 28,
	289, 290, 291, 292, 47, 96, 17, 257, 258, 31,
	293, 271, 160, 109, 52, 38, 80, 294, 295, 73,
	296, 76, 55, 77, 15, 50, 297, 298, 299, 300,
	97, 126, 262, 48, 301, 130, 6, 268, 30, 152,
	46, 302, 131, 85, 269, 270, 134, 74, 5, 137,
	32, 9, 53, 56, 259, 260, 261, 36, 84, 12,
	303, 78, -193, 96, -184, -210, -72, 132, -72, 262,
	-137, 136, -137, -137, 131, -72, -210, -210, 123, 125,
	128, 55, -22, -72, -136, 136, -210, -136, -136, -136,
	-72, 120, -72, -210, 30, -134, 96, 12, 254, -210,
	165, 131, 166, 133, -158, -225, -145, -188, -210, 8,
	132, 33, 144, -158, 169, 170, -158, -132, -131, 235,
	236, 230, 234, 12, 170, 230, 168, -190, -210, 244,
	134, -144, -133, -7, -3, -10, -9, -11, 88, -157,
	-157, 58, 79, 77, 78, 95, -57, -80, 98, 80,
	96, 97, 82, 100, 99, 110, 103, 104, 105, 106,
	107, 108, 109, 101, 102, 113, 88, 89, 90, 91,
	92, 93, 94, -128, -225, -97, -225, 121, 122, -83,
	-83, -83, -83, -83, -83, -83, -83, -83, -83, -225,
	120, -2, -92, -4, -225, -225, -225, -225, -225, -225,
	-225, -225, -102, -57, -225, -229, -89, -225, -229, -89,
	-229, -89, -229, -225, -229, -89, -229, -89, -229, -229,
	-89, -225, -225, -225, -225, -225, -225, -225, 366, 367,
	372, 373, -72, -72, 64, -106, -3, -39, -111, 19,
	31, -57, -107, -108, -57, -106, 38, -52, -54, -56,
	42, 43, 70, 11, -147, -146, 22, -144, 64, 120,
	-73, 26, -72, -59, -60, -61, -62, -75, -98, -225,
	-72, -72, -66, -227, 58, 11, 56, -227, 58, 120,
	58, 175, -122, -124, -123, 244, 246, 88, 134, -149,
	-144, 64, 29, 30, 59, 58, -72, -163, -166, -168,
	-167, -169, -164, -165, 198, 199, 114, 202, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 30, 155,
	194, 195, 196, 197, 214, 215, 216, 217, 218, 219,
	220, 221, 181, 200, 273, 182, 183, 184, 185, 186,
	187, 189, 190, 191, 192, 193, -210, -158, 133, -210,
	80, -210, -72, -72, -158, -158, -158, 167, 167, 131,
	131, 172, -72, 58, 134, -66, 23, 55, -72, -210,
	-210, -151, -150, -142, -158, -134, 64, -57, -158, -158,
	-158, -72, -158, -158, -189, 11, 98, -189, -134, -39,
	-158, -158, 11, -130, 11, 98, -57, -135, 96, 55,
	245, -156, 178, -72, 212, 361, 362, 363, -57, -57,
	-57, -57, -90, 73, 80, 74, 75, -83, -91, -94,
	-97, 69, 98, 96, 97, 82, -83, -83, -83, -83,
	-83, -83, -83, -83, -83, -83, -83, -83, -83, -83,
	-83, -159, -210, 64, -210, -82, -82, -144, -53, 21,
	35, -52, -145, -151, -142, -41, -226, -226, -106, -52,
	-52, -57, -57, -99, 64, -52, -99, 64, -52, -52,
	-46, 21, 35, -100, -101, 84, -99, -144, -150, -226,
	-83, -144, -144, -52, -53, -53, -52, -52, -190, -190,
	-210, -210, -222, -219, -213, 61, -110, -226, 9, 98,
	58, 18, 58, -109, 24, 25, -110, -84, -144, 65,
	68, -58, 58, 11, -56, -72, -146, 105, -151, -115,
	161, -72, 30, 58, -68, -70, -69, -71, 45, 49,
	51, 46, 47, 48, 52, -154, 22, -59, -33, -3,
	-225, -153, 161, -152, 22, -150, 64, -115, 56, -59,
	-72, -59, -74, -150, 105, -122, -124, 58, 245, 247,
	248, 55, 76, -57, 55, 76, -57, -175, 113, -195,
	-196, -197, -145, 64, 65, -184, -185, -186, -198, 147,
	-203, 138, 140, 137, -187, 148, 132, 28, 59, -180,
	73, 80, -176, 226, -170, 57, -170, -170, -170, -170,
	-174, 201, -174, -174, -174, 57, 57, -170, -170, -170,
	-178, 57, -178, -178, -179, 57, -179, -148, 56, -72,
	-158, 23, -158, -138, 128, 125, 126, -206, 124, 223,
	201, 71, 29, 15, 263, 161, 278, -210, 162, -72,
	-72, -72, -72, -72, 128, 125, -72, -72, -72, -158,
	120, -72, -72, -73, -72, -134, -150, -150, 64, -72,
	-144, -44, -144, 64, 73, 74, 75, -91, -83, -83,
	-83, -51, 156, 79, -226, -226, -52, -52, -225, 120,
	-5, -110, -226, -226, 58, 56, 22, 11, 11, -226,
	11, 11, -226, -226, -52, -103, -101, 86, -57, -226,
	120, -226, 58, 58, -226, -226, -226, -226, -226, -50,
	365, 369, 368, -210, 58, -221, -220, -214, 62, 88,
	-111, 40, -57, -57, -108, -111, -126, 19, 11, 36,
	36, -77, 12, -54, -59, -56, 120, -81, 30, 36,
	-3, -225, -225, -118, -121, -99, -60, -61, -61, -60,
	-61, 45, 45, 45, 50, 45, 50, 45, -69, -150,
	-226, -226, -226, -3, -76, 53, 135, 54, -225, -152,
	-77, -59, -77, -77, 120, -123, -125, 249, 246, 252,
	-210, 64, 58, -197, 88, 57, -210, 28, -187, -187,
	-190, -190, 28, -172, 29, 73, -177, 227, 65, -174,
	-174, -175, 30, -175, -175, -175, -183, 64, -183, 65,
	65, 55, -144, -158, -157, -215, 143, 139, 147, 148,
	141, 60, 61, 62, 132, 28, 138, 140, 161, 137,
	-215, -139, -140, 134, 22, 132, 28, 161, -212, 56,
	167, 223, 167, 134, -158, -151, -130, -134, -114, 57,
	-130, -51, 79, -83, -83, -226, -226, -53, -145, -106,
	-111, -162, 114, 198, 155, 196, 192, 212, 203, 225,
	194, 226, -159, -162, -83, -83, -83, -83, 272, -106,
	87, -57, 85, -145, -83, -83, 64, -219, 88, -82,
	41, -72, -104, 13, -57, 105, -117, 55, -118, -93,
	-95, -94, -225, -112, -144, -116, -144, -58, 58, 88,
	-64, -63, 55, 56, -65, 55, -63, 45, 45, -226,
	132, 132, 132, -116, -106, -77, 246, 250, 251, -196,
	-197, -200, -199, -144, -203, -190, -190, 57, -173, 55,
	-83, 59, -175, -175, -210, 114, 59, 58, 59, 58,
	59, 58, -72, -157, -157, -72, -157, -144, -209, 275,
	-211, -210, -144, -144, -144, -72, 120, -134, -134, -113,
	-144, -134, -83, -226, -110, -226, -170, -170, -170, -179,
	-170, 186, -170, 186, -226, -226, 19, 19, 19, 19,
	-225, -49, 268, -57, 58, 58, 64, -82, -105, 14,
	16, 27, -117, 58, -226, -226, 58, 120, -226, 58,
	-77, -121, -57, -57, 57, -57, -225, -225, -225, -226,
	-110, 59, 58, -170, -113, -181, 223, 9, -174, 64,
	-174, 65, 65, -158, 26, -208, -207, -145, 57, 56,
	-151, 59, 58, -111, -174, -210, -83, -83, -83, -83,
	-83, -110, 64, -83, -83, -57, -92, 28, -95, 36,
	-3, -144, -144, -144, -106, -113, -113, -226, -113, -113,
	-153, -202, -201, 56, 142, 71, -199, 59, -182, 138,
	28, 137, -86, -175, -175, 59, 59, -225, 58, 88,
	-113, -72, -144, -226, -226, -226, -226, -48, 98, 275,
	-226, -226, -226, 9, -93, 120, -110, 59, -226, -226,
	-226, -76, -201, -210, -191, 88, 64, 150, -171, 71,
	28, 28, -204, -205, 161, -207, -197, 59, -226, 273,
	52, 276, -118, -144, 65, -72, 64, -226, 58, -144,
	-212, 41, 274, 277, 57, -205, 36, -209, 41, -113,
	163, 275, 59, 164, 276, -217, -218, 55, -225, 277,
	-218, 55, 10, 9, -83, 160, -216, 151, 146, 149,
	30, -216, -226, -226, 145, 29, 73,
}

var yyDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 647, 0, 383, 383, 383, 383, 383,
	383, 0, 720, 703, 0, 0, 0, 0, -2, 348,
	349, 0, 351, -2, 0, 0, -2, 1048, 1048, 0,
	0, 1048, 0, 0, 383, 0, 383, 383, 1046, 53,
	54, 366, 367, 368, 90, 1, 3, 0, 387, 655,
	0, 0, -2, 385, 0, 703, 703, 0, 0, 82,
	83, 0, 0, 0, 1035, 0, 701, 701, 701, 721,
	722, 725, 726, 35, 36, 37, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 0, 0, 0,
	0, 0, 704, 0, 699, 0, 699, 699, 699, 0,
	295, 468, 729, 730, 1035, 0, 0, 0, 339, 0,
	1049, 307, 0, 309, 1049, 0, 1049, 0, 316, 0,
	0, 322, 223, 0, 331, 345, 346, 333, 347, 350,
	0, 355, 358, 0, 330, 0, 0, 365, 378, 379,
	1048, 1048, 382, 40, 521, 480, 0, 486, 488, 0,
	523, 524, 525, 526, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 554, 555, 556, 632,
	633, 634, 635, 636, 637, 638, 639, 490, 491, 629,
	0, 677, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 590, 590, 590, 590, 590, 590, 590,
	590, 0, 0, 0, 0, 0, 0, 0, -2, -2,
	0, 0, 0, 208, 741, 0, 647, 49, 0, 383,
	388, 389, 659, 0, 0, 647, 1047, 0, 0, -2,
	-2, 399, 405, 406, 407, 408, 384, 0, 411, 415,
	0, 0, 0, 0, 0, 0, 62, 64, 468, 68,
	0, 1024, 681, -2, -2, 0, 0, 727, 728, -2,
	878, -2, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 0, 0, 113, 0, 111, 0, 1049, 0,
	0, 0, 0, 0, 0, 1049, 1049, 1049, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	294, 0, 296, 1049, 339, 299, 0, 0, 1049, 1049,
	1049, 0, 1049, 1049, 306, 1050, 1051, 0, 339, 383,
	216, 217, 218, 310, 1049, 1049, 312, 0, 336, 334,
	335, 328, 329, 0, 342, 319, 320, 325, 224, 0,
	356, 359, 0, 377, 369, 370, 371, 372, 0, 380,
	381, 0, 0, 0, 0, 0, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 508, 509, 510, 511,
	512, 513, 514, 487, 0, 501, 0, 0, 0, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 0, 396,
	0, 0, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 393, 0, 621, 0, 574, 582, 0, 575, 583,
	576, 584, 577, 0, 578, 585, 579, 586, 580, 581,
	587, 0, 0, 0, 396, 396, 0, 0, 223, 223,
	0, 97, 737, 742, 743, 655, 0, 398, 41, 0,
	0, 656, 648, 649, 652, 655, 0, 420, 409, 400,
	403, 404, 386, 0, 412, 416, 0, 418, 419, 0,
	66, 0, 467, 0, 422, 424, 425, 426, 449, 0,
	451, -2, 0, 0, 0, 60, 61, 0, 0, 0,
	0, 1024, 682, 70, 71, 0, 0, 0, 0, 191,
	694, 695, 696, 692, 241, 0, 0, 179, 175, 119,
	120, 121, 168, 123, 168, 168, 168, 168, 188, 188,
	188, 188, 151, 152, 153, 154, 155, 0, 0, 138,
	168, 168, 168, 142, 158, 159, 160, 161, 162, 163,
	164, 165, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 170, 170, 170, 172, 172, 723, 85, 0, 1049,
	0, 1049, 109, 0, 255, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 700, 0, 1049, 292,
	293, 469, 731, 732, 297, 298, 340, 341, 300, 301,
	302, 303, 304, 305, 0, 219, 220, 0, 324, 0,
	311, 315, 0, 339, 0, 0, 317, 318, 0, 0,
	327, 0, 357, 373, 361, 362, 363, 364, 522, 481,
	482, 483, 485, 502, 0, 504, 506, 492, 493, 517,
	518, 519, 0, 0, 0, 0, 515, 497, 0, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 537, 538,
	539, 542, 605, 606, 0, 540, 541, 552, 0, 0,
	0, 397, 630, 0, -2, 0, 520, 676, 655, 0,
	0, 0, 0, 525, 632, 0, 525, 632, 0, 0,
	0, 394, 395, 627, 624, 0, 0, 629, 0, 591,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 94,
	0, 96, 735, 738, 0, 38, 659, 50, 660, 0,
	0, 0, 0, 651, 653, 654, 659, 0, 640, 0,
	0, 478, 0, 0, 401, 47, 417, 413, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 456, 0,
	0, 459, 0, 0, 0, 0, 450, 0, 0, 0,
	0, 473, 963, 452, 0, 454, 455, 478, 0, 478,
	63, 478, 65, 0, 472, 683, 69, 0, 0, 74,
	75, 684, 685, 686, 687, 688, 689, 690, 0, 110,
	242, 244, 247, 248, 249, 114, 115, 116, 0, 0,
	229, 0, 0, 223, 223, 0, 221, 222, 112, 182,
	180, 0, 177, 176, 122, 0, 188, 188, 145, 146,
	191, 0, 191, 191, 191, 0, 0, 139, 140, 141,
	133, 0, 134, 135, 136, 0, 137, 0, 0, 1049,
	87, 702, 88, 1048, 0, 0, 715, 256, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 0, 101,
	260, 262, 261, 265, 0, 0, 0, 287, 1049, 291,
	0, 336, 339, 433, 336, 314, 337, 338, 343, 321,
	353, 376, 374, 375, 503, 505, 507, 494, 515, 498,
	0, 495, 0, 0, 489, 557, 0, 0, 396, 0,
	647, 659, 561, 562, 0, 0, 0, 0, 0, 598,
	0, 0, 599, 0, 647, 0, 625, 0, 0, 573,
	0, 592, 0, 0, 593, 594, 595, 596, 597, 92,
	98, 99, 100, 95, 0, 740, 736, 0, 39, 0,
	43, 0, 657, 658, 650, 42, 0, 697, 698, 641,
	642, 643, 0, 410, 421, 402, 0, 670, 0, 0,
	663, 0, 0, 420, 678, 0, 423, 445, 447, 0,
	442, 457, 458, 460, 0, 462, 0, 464, 465, 427,
	428, 429, 430, 0, 431, 0, 0, 0, 0, 453,
	647, 478, 58, 59, 0, 72, 73, 0, 0, 79,
	192, 193, 0, 245, 0, 0, 0, 211, 223, 223,
	214, 215, 0, 184, 0, 181, 118, 178, 0, 191,
	191, 147, 0, 148, 149, 150, 0, 166, 0, 0,
	0, 0, 724, 86, 250, 1048, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
	1048, 0, 1048, 716, 717, 718, 719, 0, 104, 0,
	0, 0, 0, 0, 290, 470, 339, 323, 339, 0,
	339, 496, 0, 516, 499, 558, 559, 0, 631, 655,
	45, 0, 168, 168, 610, 168, 172, 613, 168, 615,
	168, 618, 0, 0, 0, 0, 0, 0, 0, 622,
	572, 628, 0, 630, 0, 0, 0, 739, 0, 733,
	661, 44, 645, 0, 479, 414, 51, 0, 670, 662,
	672, 674, 0, 0, 666, 0, 437, 478, 0, 0,
	439, 446, 0, 0, 440, 0, 441, 461, 463, -2,
	0, 0, 0, 0, 655, 57, 76, 77, 78, 243,
	246, 0, 225, 168, 228, 212, 213, 0, 186, 0,
	183, 169, 143, 144, 189, 190, 188, 0, 188, 0,
	173, 0, 1049, 251, 252, 253, 254, 0, 259, 0,
	102, 103, 0, 0, 264, 288, 0, 308, 326, 0,
	435, 313, 500, 560, 659, 563, 607, 188, 611, 612,
	614, 616, 617, 619, 565, 564, 0, 0, 0, 0,
	0, 655, 0, 626, 0, 0, 93, 734, 48, 0,
	0, 0, 52, 0, 675, 0, 0, 0, 67, 0,
	647, 679, 680, 443, 0, 448, 0, 0, 0, 451,
	56, 202, 0, 227, 0, 194, 187, 0, 191, 167,
	191, 0, 0, 84, 0, 105, 106, 0, 0, 0,
	471, 434, 0, 46, 608, 609, 0, 0, 0, 0,
	600, 0, 623, 0, 0, 646, 644, 0, 673, 0,
	665, 668, 667, 438, 655, 0, 0, 475, 0, 0,
	473, 201, 203, 0, 209, 0, 226, 0, 199, 0,
	196, 198, 185, 156, 157, 171, 174, 0, 0, 0,
	0, 266, 436, 566, 568, 567, 569, 0, 0, 0,
	571, 588, 589, 0, 664, 0, 55, 444, 474, 476,
	477, 432, 204, 205, 0, 210, 207, 0, 117, 0,
	195, 197, 0, 282, 0, 107, 108, 101, 570, 0,
	0, 0, 671, 669, 206, 0, 200, 281, 0, 0,
	104, 601, 0, 604, 0, 283, 0, 263, 602, 0,
	0, 0, 230, 0, 0, 231, 232, 0, 0, 603,
	233, 0, 0, 0, 0, 0, 234, 236, 237, 0,
	0, 235, 284, 285, 238, 239, 240,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 378,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:365
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:370
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:375
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:408
		{
			setParseTree(yylex, nil)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:422
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:428
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:434
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:440
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:446
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:454
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:458
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:462
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:485
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:493
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:499
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:507
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:513
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:517
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:524
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:536
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:548
		{
			yyVAL.str = InsertStr
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.str = ReplaceStr
		}
	case 55:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:558
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), OrderBy: yyDollar[9].orderBy, Limit: yyDollar[10].limit}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:564
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:568
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:572
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:576
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:581
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:582
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:586
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:590
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:600
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:605
		{
			yyVAL.partitions = nil
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:609
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:615
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:621
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:625
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:631
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:635
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:641
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:645
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:655
		{
			yyVAL.str = RepeatableRead
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:659
		{
			yyVAL.str = ReadCommitted
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:663
		{
			yyVAL.str = ReadUncommitted
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:667
		{
			yyVAL.str = Serializable
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:673
		{
			yyVAL.str = SessionStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:677
		{
			yyVAL.str = GlobalStr
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:683
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:688
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:694
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:699
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:703
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:707
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:711
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:716
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:726
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:731
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str}
		}
	case 93:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:736
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str, KeyFilePath: string(yyDollar[6].bytes), KeyEnvVar: string(yyDollar[7].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:741
		{
			yyVAL.statement = &AuthRevoke{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:747
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: yyDollar[5].colIdent.GetRawVal()}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:752
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:757
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.str = InteractiveStr
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.str = ServiceAccountStr
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:771
		{
			yyVAL.str = ServiceAccountStr
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:777
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:787
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:792
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:808
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:814
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:820
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:827
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:834
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:838
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:849
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:853
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:857
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 117:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:863
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1040
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1085
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1090
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1095
		{
			yyVAL.sqlVal = nil
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1099
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1104
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1108
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1116
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1120
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1126
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1134
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1143
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1153
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1157
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1161
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1166
		{
			yyVAL.optVal = nil
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1175
		{
			yyVAL.optVal = nil
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1179
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1184
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1193
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1206
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1210
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1214
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1219
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1223
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1235
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1240
		{
			yyVAL.sqlVal = nil
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1244
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1250
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1254
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1260
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1264
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1270
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1274
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1285
		{
			yyVAL.statement = &Sleep{Duration: NewIntVal(yyDollar[2].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1291
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1301
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1305
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1309
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1313
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1317
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1323
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1327
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1331
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1338
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1342
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1348
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1352
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1357
		{
			yyVAL.str = ""
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1361
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1367
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1371
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1377
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1383
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1387
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 230:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1394
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 231:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1398
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 232:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1402
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 233:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1406
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1412
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1418
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1424
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1432
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1436
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1440
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1445
		{
			yyVAL.str = ""
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1449
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1453
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.str = yyDollar[1].str
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1465
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1469
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1479
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1483
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1489
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1493
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1501
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1506
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1557
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 264:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1613
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1623
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 284:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1629
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 285:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1633
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1639
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1645
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1649
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1657
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 290:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1665
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1670
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1678
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1682
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1688
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1697
		{
			yyVAL.statement = &OtherRead{}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1708
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1718
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1739
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1743
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1747
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1751
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1756
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1760
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1764
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1768
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1772
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1777
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1795
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1799
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1804
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1808
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1812
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1816
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1820
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1837
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), ShowTablesOpt: showTablesOpt}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1842
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: yyDollar[3].str}
		}
	case 326:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1847
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Comments: Comments(yyDollar[4].bytes2), Type: string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt, Columns: yyDollar[6].columns}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1853
		{
			yyVAL.statement = &Show{Type: "TRANSACTION_ISOLATION_LEVEL"}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1869
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = "extended "
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1879
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1883
		{
			yyVAL.str = "full "
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1899
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1903
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1907
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1913
		{
			yyVAL.showFilter = nil
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1917
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1921
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1927
		{
			yyVAL.showFilter = nil
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1931
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1937
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.str = SessionStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1945
		{
			yyVAL.str = GlobalStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1951
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1961
		{
			yyVAL.statement = &Begin{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1965
		{
			yyVAL.statement = &Begin{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = &Commit{}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1977
		{
			yyVAL.statement = &Rollback{}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1981
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1986
		{
			yyVAL.empty = struct{}{}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1988
		{
			yyVAL.empty = struct{}{}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1991
		{
			yyVAL.empty = struct{}{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1993
		{
			yyVAL.empty = struct{}{}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1998
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2004
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2009
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2013
		{
			yyVAL.str = JSONStr
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.str = TreeStr
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2021
		{
			yyVAL.str = VitessStr
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2025
		{
			yyVAL.str = TraditionalStr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = AnalyzeStr
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2039
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2043
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2053
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = ""
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.str = ""
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2074
		{
			yyVAL.str = ""
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2080
		{
			yyVAL.statement = &DescribeTable{Full: string(yyDollar[2].str), Extended: string(yyDollar[3].str), Table: yyDollar[4].tableName}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2084
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2094
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2098
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2102
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2112
		{
			setAllowComments(yylex, true)
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2116
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2122
		{
			yyVAL.bytes2 = nil
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2126
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = UnionStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2136
		{
			yyVAL.str = UnionAllStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = UnionDistinctStr
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2145
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2153
		{
			yyVAL.str = SQLCacheStr
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2158
		{
			yyVAL.str = ""
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.str = DistinctStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.str = DistinctStr
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2171
		{
			yyVAL.selectExprs = nil
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2175
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2180
		{
			yyVAL.strs = nil
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2188
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2192
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2196
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = SQLCacheStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = DistinctStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = DistinctStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = StraightJoinHint
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2228
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2242
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2250
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2255
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2259
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2263
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2275
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2279
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2285
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2289
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2299
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2303
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2307
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2311
		{
			exec := yyDollar[2].statement.(*Exec)
			yyVAL.tableExpr = &ExecSubquery{Exec: exec}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2318
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2328
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2333
		{
			yyVAL.columns = nil
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2337
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2344
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2371
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2375
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2379
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2383
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2389
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2391
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2395
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2397
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2401
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2403
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2406
		{
			yyVAL.empty = struct{}{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2408
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2411
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2426
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2432
		{
			yyVAL.str = JoinStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2436
		{
			yyVAL.str = JoinStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2440
		{
			yyVAL.str = JoinStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2446
		{
			yyVAL.str = StraightJoinStr
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			yyVAL.str = LeftJoinStr
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2456
		{
			yyVAL.str = LeftJoinStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2460
		{
			yyVAL.str = RightJoinStr
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2464
		{
			yyVAL.str = RightJoinStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2470
		{
			yyVAL.str = NaturalJoinStr
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2474
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2484
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2488
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2494
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2498
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2502
		{
			yyVAL.tableName = TableName{QualifierSecond: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 471:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2506
		{
			yyVAL.tableName = TableName{QualifierThird: yyDollar[1].tableIdent, QualifierSecond: yyDollar[3].tableIdent, Qualifier: yyDollar[5].tableIdent, Name: yyDollar[7].tableIdent}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2512
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2517
		{
			yyVAL.indexHints = nil
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2521
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2525
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2529
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2533
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = nil
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2548
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2552
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2556
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2576
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2582
		{
			yyVAL.str = ""
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2586
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2592
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2596
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2644
		{
			yyVAL.str = IsNullStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			yyVAL.str = IsNotNullStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2652
		{
			yyVAL.str = IsTrueStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2656
		{
			yyVAL.str = IsNotTrueStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2660
		{
			yyVAL.str = IsFalseStr
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.str = IsNotFalseStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.str = EqualStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2674
		{
			yyVAL.str = LessThanStr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.str = GreaterThanStr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2682
		{
			yyVAL.str = LessEqualStr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.str = GreaterEqualStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.str = NotEqualStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2694
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = nil
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2709
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2717
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2723
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2729
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2733
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2747
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2751
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2755
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2759
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2763
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2767
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2771
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2775
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2787
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2791
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2799
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2835
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2839
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2869
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2887
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 560:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 563:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 565:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 567:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2933
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 568:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2937
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 569:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2941
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 570:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 571:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2980
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2990
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3010
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3014
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3024
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3029
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3033
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 589:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3037
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3057
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3061
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3065
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3069
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3073
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3077
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3081
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3087
		{
			yyVAL.str = ""
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3091
		{
			yyVAL.str = BooleanModeStr
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3095
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 603:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3099
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3103
		{
			yyVAL.str = QueryExpansionStr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3119
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3123
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3127
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3135
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3139
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3149
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3153
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3157
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3161
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3169
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3174
		{
			yyVAL.expr = nil
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3178
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3183
		{
			yyVAL.str = string("")
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3187
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3193
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3197
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3203
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3208
		{
			yyVAL.expr = nil
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3212
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3222
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3226
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3232
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3236
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3252
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3256
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3260
		{
			yyVAL.expr = &NullVal{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3266
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3275
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3279
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3284
		{
			yyVAL.exprs = nil
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3288
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3293
		{
			yyVAL.expr = nil
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3297
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3302
		{
			yyVAL.orderBy = nil
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3306
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3312
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3316
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3322
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3327
		{
			yyVAL.str = AscScr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3331
		{
			yyVAL.str = AscScr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3335
		{
			yyVAL.str = DescScr
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3340
		{
			yyVAL.limit = nil
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3344
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3348
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3352
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3357
		{
			yyVAL.str = ""
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3361
		{
			yyVAL.str = ForUpdateStr
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3365
		{
			yyVAL.str = ShareModeStr
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3378
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3382
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 664:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3386
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3390
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3396
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3400
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3404
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 669:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3408
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3413
		{
			yyVAL.updateExprs = nil
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3417
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3423
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3427
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3433
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3437
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3443
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3459
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3463
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3469
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3475
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3479
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3484
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3490
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3494
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3498
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3502
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3506
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3510
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3521
		{
			yyVAL.bytes = []byte("charset")
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3528
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3532
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3536
		{
			yyVAL.expr = &Default{}
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3545
		{
			yyVAL.byt = 0
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3547
		{
			yyVAL.byt = 1
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3550
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3552
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3555
		{
			yyVAL.str = ""
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3557
		{
			yyVAL.str = IgnoreStr
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3561
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3563
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3565
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3571
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3573
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3575
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3577
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3579
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3582
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3584
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3586
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3590
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3592
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3595
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3597
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3599
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3602
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3604
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3608
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3612
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3619
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3625
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3629
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3636
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3642
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3648
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3654
		{
			yyVAL.execVarDefOpt = nil
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3656
		{
			rv := yyDollar[1].execVarDef
			yyVAL.execVarDefOpt = &rv
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3662
		{
			yyVAL.execVarDefs = nil
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3664
		{
			yyVAL.execVarDefs = []ExecVarDef{yyDollar[1].execVarDef}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3668
		{
			yyVAL.execVarDefs = append(yyDollar[1].execVarDefs, yyDollar[3].execVarDef)
		}
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3675
		{
			yyVAL.statement = NewExec(yyDollar[2].bytes2, yyDollar[3].tableName, yyDollar[4].execVarDefs, yyDollar[5].execVarDefOpt)
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3681
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, TableName{}, true)
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3685
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, yyDollar[3].tableName, false)
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3691
		{
			yyVAL.statement = NewNativeQuery(yyDollar[2].bytes2, string(yyDollar[3].bytes))
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4020
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4029
		{
			decNesting(yylex)
		}
	case 1048:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4034
		{
			skipToEnd(yylex)
		}
	case 1049:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4039
		{
			skipToEnd(yylex)
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4043
		{
			skipToEnd(yylex)
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4047
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
