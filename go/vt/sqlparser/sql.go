// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "strings"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:55
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	execsubquery         *ExecSubquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	execVarDef           ExecVarDef
	execVarDefOpt        *ExecVarDef
	execVarDefs          []ExecVarDef
	listArgsConcat       []ListArg
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688
const AUTH = 57689
const INTERACTIVE = 57690
const LOGIN = 57691
const REVOKE = 57692
const SA = 57693
const SERVICEACCOUNT = 57694
const SLEEP = 57695
const MATERIALIZED = 57696
const TEMP = 57697
const TEMPORARY = 57698
const REFRESH = 57699
const JSON_ARRAY_ELEMENTS_TEXT = 57700
const JSON_EACH = 57701
const UNNEST = 57702
const REGISTRY = 57703
const PULL = 57704
const LIST = 57705
const EXEC = 57706
const PURGE = 57707
const NATIVEQUERY = 57708
const STACKQL = 57709

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"AUTH",
	"INTERACTIVE",
	"LOGIN",
	"REVOKE",
	"SA",
	"SERVICEACCOUNT",
	"SLEEP",
	"MATERIALIZED",
	"TEMP",
	"TEMPORARY",
	"REFRESH",
	"JSON_ARRAY_ELEMENTS_TEXT",
	"JSON_EACH",
	"UNNEST",
	"REGISTRY",
	"PULL",
	"LIST",
	"EXEC",
	"PURGE",
	"NATIVEQUERY",
	"STACKQL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	364, 98,
	378, 98,
	-2, 35,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	169, 358,
	170, 358,
	230, 346,
	234, 346,
	235, 346,
	236, 346,
	-2, 344,
	-1, 54,
	134, 368,
	-2, 366,
	-1, 57,
	6, 374,
	8, 374,
	9, 374,
	10, 374,
	57, 374,
	262, 374,
	-2, 346,
	-1, 72,
	57, 57,
	-2, 55,
	-1, 85,
	38, 404,
	-2, 412,
	-1, 106,
	133, 87,
	-2, 964,
	-1, 107,
	132, 1043,
	-2, 85,
	-1, 108,
	132, 1044,
	-2, 86,
	-1, 366,
	80, 913,
	82, 913,
	88, 913,
	89, 913,
	90, 913,
	91, 913,
	92, 913,
	93, 913,
	94, 913,
	96, 913,
	97, 913,
	98, 913,
	99, 913,
	100, 913,
	101, 913,
	102, 913,
	103, 913,
	104, 913,
	105, 913,
	106, 913,
	107, 913,
	108, 913,
	109, 913,
	110, 913,
	113, 913,
	120, 913,
	121, 913,
	122, 913,
	-2, 506,
	-1, 426,
	120, 753,
	-2, 749,
	-1, 427,
	120, 754,
	-2, 750,
	-1, 447,
	38, 405,
	-2, 417,
	-1, 448,
	38, 406,
	-2, 418,
	-1, 471,
	88, 1031,
	-2, 83,
	-1, 472,
	88, 934,
	-2, 84,
	-1, 477,
	88, 901,
	134, 901,
	-2, 715,
	-1, 479,
	88, 972,
	134, 972,
	-2, 717,
	-1, 797,
	1, 426,
	5, 426,
	11, 426,
	12, 426,
	13, 426,
	14, 426,
	15, 426,
	17, 426,
	19, 426,
	31, 426,
	55, 426,
	58, 426,
	59, 426,
	268, 426,
	385, 426,
	-2, 503,
	-1, 818,
	57, 579,
	-2, 946,
	-1, 819,
	57, 580,
	-2, 947,
	-1, 820,
	56, 65,
	58, 65,
	-2, 69,
	-1, 1008,
	120, 756,
	-2, 752,
}

const yyPrivate = 57344

const yyLast = 19755

var yyAct = [...]int{
	426, 1740, 1730, 1697, 1406, 1530, 1646, 1308, 1330, 1610,
	1130, 370, 441, 1469, 385, 1502, 924, 1470, 476, 1098,
	399, 734, 1309, 82, 1466, 1126, 781, 1159, 1541, 634,
	1173, 1129, 1139, 1475, 356, 80, 368, 1153, 1481, 1068,
	1049, 995, 365, 1002, 109, 1430, 946, 1383, 317, 1143,
	1372, 317, 1235, 816, 833, 1099, 109, 84, 3, 1296,
	1083, 808, 791, 786, 34, 1029, 972, 435, 804, 1169,
	372, 832, 465, 799, 645, 1076, 449, 622, 600, 937,
	462, 99, 822, 607, 747, 361, 685, 79, 428, 470,
	434, 317, 109, 355, 357, 601, 317, 360, 317, 666,
	897, 315, 429, 1094, 772, 773, 748, 324, 957, 1274,
	7, 809, 1276, 1275, 85, 330, 327, 770, 771, 6,
	444, 1733, 5, 1717, 334, 1728, 1705, 1725, 310, 312,
	307, 308, 309, 1531, 1716, 1704, 1447, 1564, 605, 36,
	1496, 71, 73, 40, 464, 436, 111, 112, 113, 602,
	455, 604, 87, 88, 89, 90, 91, 1344, 332, 668,
	1343, 1118, 1119, 1345, 339, 1117, 473, 1196, 341, 1497,
	1498, 411, 953, 417, 418, 415, 416, 414, 413, 412,
	430, 1195, 432, 433, 665, 609, 610, 419, 420, 834,
	70, 835, 303, 342, 325, 301, 1363, 305, 660, 345,
	359, 358, 661, 658, 659, 1152, 1599, 1431, 111, 112,
	113, 1160, 111, 112, 113, 1555, 1553, 640, 1408, 642,
	349, 336, 328, 1194, 337, 338, 345, 955, 351, 347,
	329, 331, 342, 663, 326, 344, 343, 911, 912, 653,
	654, 1410, 909, 1005, 1727, 1724, 664, 1691, 1433, 1698,
	1405, 639, 641, 311, 1748, 1077, 1144, 958, 959, 960,
	1672, 695, 694, 704, 705, 697, 698, 699, 700, 701,
	702, 703, 696, 910, 1409, 706, 1191, 1188, 1189, 913,
	1187, 623, 1654, 1647, 305, 1435, 608, 1439, 836, 1434,
	1411, 1432, 916, 1744, 304, 669, 1437, 1180, 1649, 1331,
	1333, 777, 317, 614, 615, 1436, 626, 317, 606, 624,
	1491, 1490, 1489, 1198, 1201, 317, 302, 1402, 1438, 1440,
	648, 603, 1146, 1404, 317, 632, 354, 612, 638, 109,
	1393, 647, 611, 109, 837, 109, 323, 306, 313, 1208,
	637, 667, 1207, 718, 719, 650, 1679, 1113, 1580, 1160,
	1146, 1538, 109, 1193, 1340, 613, 1703, 340, 1301, 1264,
	621, 1254, 1389, 1390, 1391, 1243, 1127, 1251, 629, 1648,
	313, 1214, 111, 112, 113, 1192, 828, 631, 619, 803,
	732, 1332, 111, 112, 113, 630, 706, 625, 1056, 627,
	628, 1655, 1653, 678, 679, 72, 695, 694, 704, 705,
	697, 698, 699, 700, 701, 702, 703, 696, 1689, 1742,
	706, 673, 1743, 951, 1741, 1197, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 1145, 1403, 300, 1401,
	1199, 317, 636, 317, 1392, 1663, 1479, 1673, 716, 1397,
	1394, 1385, 1395, 1388, 649, 1384, 616, 1146, 617, 1386,
	1387, 618, 696, 1236, 1145, 706, 651, 686, 109, 778,
	317, 317, 317, 1396, 676, 735, 1457, 947, 671, 109,
	1284, 718, 719, 674, 938, 109, 675, 718, 719, 111,
	112, 113, 677, 684, 774, 1449, 775, 1011, 699, 700,
	701, 702, 703, 696, 1030, 779, 706, 750, 752, 754,
	756, 758, 760, 761, 111, 112, 113, 1149, 1030, 436,
	1261, 94, 788, 806, 1150, 820, 635, 459, 460, 751,
	753, 643, 757, 759, 1361, 762, 792, 695, 694, 704,
	705, 697, 698, 699, 700, 701, 702, 703, 696, 901,
	599, 706, 821, 473, 797, 1693, 826, 111, 112, 113,
	95, 1145, 795, 780, 948, 1749, 1142, 1140, 831, 1141,
	690, 939, 693, 70, 807, 970, 1138, 1144, 707, 708,
	709, 710, 711, 712, 713, 975, 691, 692, 689, 695,
	694, 704, 705, 697, 698, 699, 700, 701, 702, 703,
	696, 1061, 1062, 706, 1708, 1605, 1249, 1058, 1248, 1750,
	317, 1515, 1604, 1376, 895, 1051, 1375, 317, 900, 686,
	902, 317, 1364, 317, 109, 109, 109, 682, 683, 681,
	317, 938, 636, 317, 686, 431, 317, 1710, 922, 923,
	1690, 317, 1626, 109, 681, 684, 686, 1057, 109, 109,
	109, 317, 109, 109, 682, 683, 681, 1602, 686, 926,
	684, 1568, 1455, 845, 109, 109, 682, 683, 681, 686,
	899, 1373, 684, 928, 903, 1222, 905, 979, 683, 681,
	929, 776, 317, 914, 684, 1011, 464, 941, 1660, 920,
	1279, 977, 978, 976, 1283, 684, 1659, 898, 1467, 686,
	790, 1478, 686, 1511, 934, 904, 81, 682, 683, 681,
	682, 683, 681, 917, 921, 1451, 635, 996, 939, 1147,
	973, 1297, 966, 968, 969, 684, 998, 1478, 684, 967,
	1250, 1228, 1229, 1230, 1107, 956, 823, 940, 1616, 1726,
	109, 971, 1712, 1011, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 1007,
	1011, 1008, 1018, 1021, 1576, 999, 1000, 1080, 1031, 1013,
	974, 1616, 1701, 942, 109, 109, 680, 686, 1662, 1009,
	1519, 667, 667, 1045, 1046, 682, 683, 681, 317, 111,
	112, 113, 735, 997, 111, 112, 113, 1080, 1347, 1348,
	109, 1053, 1035, 684, 111, 112, 113, 317, 1278, 1616,
	1011, 109, 111, 112, 113, 1116, 317, 1006, 1616, 1681,
	1039, 1040, 1063, 1616, 1651, 317, 317, 317, 1616, 1615,
	1075, 824, 1008, 317, 317, 1595, 1594, 317, 317, 317,
	109, 1052, 1070, 111, 112, 113, 1103, 1047, 1582, 1011,
	1579, 1011, 1521, 1520, 109, 601, 36, 926, 1517, 1518,
	1072, 1517, 1516, 1267, 652, 1266, 655, 1069, 1011, 1078,
	1080, 1011, 680, 1011, 844, 843, 825, 1069, 827, 1071,
	1043, 1044, 1096, 36, 1073, 70, 1633, 1109, 1006, 1478,
	388, 387, 390, 391, 392, 393, 1161, 1162, 1163, 389,
	394, 1155, 1156, 1157, 1158, 824, 1106, 70, 317, 1079,
	1111, 109, 1115, 109, 473, 317, 1200, 1166, 1167, 1168,
	317, 317, 317, 317, 317, 823, 317, 317, 1131, 1114,
	317, 109, 317, 1134, 70, 1175, 1108, 1080, 83, 1059,
	1110, 1070, 438, 915, 829, 335, 1718, 1612, 317, 1154,
	825, 317, 823, 317, 36, 1587, 317, 1174, 317, 317,
	1507, 1179, 1418, 317, 1178, 109, 1351, 109, 1185, 1482,
	1483, 1171, 1172, 1202, 1203, 1204, 1205, 1206, 1303, 1209,
	1210, 1069, 1170, 1211, 1304, 1213, 1219, 1407, 1069, 1165,
	1014, 1015, 1164, 70, 1020, 1023, 1024, 1567, 1613, 1177,
	1735, 1215, 1731, 352, 1216, 70, 806, 973, 1509, 1218,
	1485, 1085, 1088, 1089, 1090, 1086, 1223, 1087, 1091, 1038,
	1467, 1217, 1041, 1042, 1377, 1566, 952, 919, 1320, 1318,
	1232, 1233, 1234, 1321, 1319, 1488, 1245, 450, 695, 694,
	704, 705, 697, 698, 699, 700, 701, 702, 703, 696,
	1487, 451, 706, 1231, 1317, 1316, 1277, 974, 793, 794,
	453, 1722, 452, 789, 1715, 427, 695, 694, 704, 705,
	697, 698, 699, 700, 701, 702, 703, 696, 1459, 1286,
	706, 317, 1720, 1295, 436, 1294, 1290, 1244, 1026, 1368,
	1285, 317, 317, 317, 317, 317, 1322, 1360, 1089, 1090,
	782, 1310, 1027, 317, 1260, 842, 633, 1695, 317, 110,
	1694, 317, 783, 318, 1631, 1358, 318, 1353, 317, 1574,
	1608, 110, 694, 704, 705, 697, 698, 699, 700, 701,
	702, 703, 696, 1289, 1183, 706, 918, 1524, 1346, 1379,
	109, 1181, 1298, 1093, 1305, 906, 907, 908, 896, 1352,
	1349, 457, 1311, 667, 667, 1314, 318, 110, 1300, 1335,
	442, 318, 1323, 318, 927, 1328, 1329, 439, 440, 931,
	932, 933, 1573, 935, 936, 1293, 1336, 443, 1338, 1572,
	1339, 1341, 83, 1292, 1299, 943, 944, 1463, 109, 1297,
	662, 317, 1255, 1365, 1366, 1367, 1252, 1369, 1370, 1371,
	945, 1354, 1355, 1312, 1313, 796, 1315, 1737, 1736, 1737,
	1677, 1600, 1055, 438, 1131, 362, 81, 1095, 29, 86,
	78, 1337, 109, 1, 109, 317, 1374, 1048, 1280, 1281,
	1729, 1382, 697, 698, 699, 700, 701, 702, 703, 696,
	1282, 1414, 706, 926, 1380, 1050, 1398, 1532, 1609, 1381,
	1190, 1696, 1356, 1357, 109, 1645, 1416, 1240, 1241, 1501,
	996, 704, 705, 697, 698, 699, 700, 701, 702, 703,
	696, 1137, 1415, 706, 1128, 1419, 93, 598, 1428, 1258,
	92, 1688, 1429, 646, 1136, 1135, 1652, 1598, 1148, 1422,
	1423, 1007, 1448, 1008, 1362, 1420, 1426, 1151, 1508, 1359,
	1692, 1441, 317, 850, 1443, 1444, 1442, 1445, 1446, 848,
	849, 847, 109, 852, 851, 846, 333, 109, 109, 1453,
	1454, 1468, 468, 954, 348, 1310, 1092, 1460, 1427, 838,
	1456, 1458, 1176, 798, 96, 1471, 1085, 1088, 1089, 1090,
	1086, 1400, 1087, 1091, 1399, 109, 1482, 1483, 1186, 1452,
	950, 656, 657, 714, 1291, 1461, 103, 1342, 1477, 109,
	474, 109, 109, 1486, 467, 667, 667, 318, 1417, 1473,
	1494, 1500, 318, 1060, 444, 785, 1571, 1462, 1492, 1514,
	318, 1259, 744, 450, 1028, 813, 1427, 371, 317, 318,
	1499, 965, 815, 386, 110, 1504, 383, 451, 110, 384,
	110, 1512, 1513, 1064, 447, 448, 453, 1495, 452, 1302,
	317, 688, 369, 1510, 363, 812, 109, 110, 1533, 109,
	109, 109, 317, 1084, 1082, 1081, 463, 1484, 1525, 109,
	1480, 811, 1182, 1131, 1184, 1131, 810, 446, 817, 1273,
	1563, 1522, 1671, 1526, 445, 1528, 1025, 1523, 57, 1225,
	353, 1546, 1212, 39, 38, 1539, 454, 1540, 64, 1543,
	32, 31, 28, 1527, 1505, 1506, 30, 27, 22, 21,
	20, 19, 18, 24, 1544, 1537, 1551, 17, 16, 1548,
	1549, 15, 1550, 620, 42, 1552, 33, 1554, 1561, 26,
	25, 14, 13, 12, 11, 10, 318, 9, 318, 8,
	1310, 4, 672, 1575, 1569, 23, 733, 2, 0, 0,
	109, 1584, 0, 0, 0, 0, 687, 1593, 109, 0,
	1349, 0, 0, 110, 0, 318, 318, 318, 0, 0,
	0, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	110, 0, 109, 0, 0, 0, 1597, 1583, 0, 317,
	0, 1596, 362, 0, 1601, 0, 1603, 0, 0, 0,
	1619, 745, 0, 0, 0, 1614, 0, 926, 695, 694,
	704, 705, 697, 698, 699, 700, 701, 702, 703, 696,
	0, 0, 706, 1617, 1131, 0, 1625, 1618, 0, 0,
	109, 109, 1607, 109, 784, 787, 0, 0, 109, 0,
	109, 109, 109, 317, 1632, 1630, 109, 1471, 0, 0,
	0, 1620, 1621, 1622, 1623, 1624, 1611, 1638, 0, 1627,
	1628, 1650, 1644, 109, 317, 1656, 1639, 109, 1640, 1642,
	1643, 0, 0, 0, 0, 0, 0, 1657, 0, 1658,
	0, 0, 0, 0, 0, 0, 1634, 0, 0, 0,
	0, 1664, 0, 0, 0, 0, 0, 1678, 1687, 0,
	0, 1680, 1686, 1685, 1471, 318, 0, 0, 0, 0,
	0, 0, 318, 109, 109, 0, 318, 1665, 318, 110,
	110, 110, 1699, 0, 1700, 318, 0, 0, 318, 0,
	109, 318, 400, 35, 0, 1706, 318, 0, 110, 1310,
	0, 0, 317, 110, 110, 110, 318, 110, 110, 109,
	0, 0, 0, 0, 0, 0, 1714, 1560, 0, 110,
	110, 0, 0, 0, 0, 0, 1719, 0, 35, 109,
	1721, 0, 0, 0, 0, 0, 0, 318, 1421, 0,
	0, 0, 1734, 1412, 0, 1413, 0, 1611, 1131, 1745,
	0, 0, 0, 0, 0, 1709, 0, 1723, 695, 694,
	704, 705, 697, 698, 699, 700, 701, 702, 703, 696,
	0, 0, 706, 437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1738, 0, 0, 930, 0,
	0, 0, 0, 0, 0, 110, 0, 695, 694, 704,
	705, 697, 698, 699, 700, 701, 702, 703, 696, 0,
	0, 706, 0, 0, 949, 0, 0, 695, 694, 704,
	705, 697, 698, 699, 700, 701, 702, 703, 696, 110,
	110, 706, 961, 962, 963, 964, 0, 1559, 0, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1558, 0, 110, 0, 0, 0, 0,
	0, 0, 318, 0, 0, 0, 110, 0, 0, 0,
	0, 318, 0, 0, 0, 0, 0, 0, 0, 0,
	318, 318, 318, 0, 0, 0, 0, 0, 318, 318,
	1016, 1017, 318, 318, 318, 110, 0, 0, 0, 0,
	0, 0, 397, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 1034, 695, 694, 704,
	705, 697, 698, 699, 700, 701, 702, 703, 696, 0,
	0, 706, 0, 695, 694, 704, 705, 697, 698, 699,
	700, 701, 702, 703, 696, 0, 105, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 350, 0,
	0, 0, 0, 318, 0, 0, 110, 0, 110, 0,
	318, 0, 0, 0, 0, 318, 318, 318, 318, 318,
	0, 318, 318, 0, 0, 318, 110, 318, 1122, 1125,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 318, 0, 0, 318, 0, 318, 1237,
	0, 318, 0, 318, 318, 0, 0, 0, 318, 0,
	110, 644, 110, 0, 0, 644, 0, 644, 0, 695,
	694, 704, 705, 697, 698, 699, 700, 701, 702, 703,
	696, 0, 0, 706, 0, 0, 35, 0, 0, 0,
	0, 0, 0, 0, 1606, 0, 0, 0, 0, 715,
	717, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 736, 737, 738, 739, 740, 741,
	742, 743, 0, 746, 749, 749, 749, 755, 749, 749,
	755, 749, 763, 764, 765, 766, 767, 768, 769, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	35, 0, 0, 0, 0, 0, 318, 437, 0, 0,
	0, 0, 0, 0, 0, 0, 318, 318, 318, 318,
	318, 0, 0, 814, 0, 0, 0, 0, 318, 0,
	0, 0, 0, 318, 0, 0, 318, 0, 0, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 1262, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
	1288, 787, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 475, 0, 475, 0, 0,
	0, 0, 0, 110, 0, 0, 318, 0, 0, 0,
	0, 0, 0, 0, 670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 110,
	318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 644, 644, 644, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 644, 0, 0, 0, 0,
	644, 644, 644, 0, 644, 644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 644, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 318, 0, 0,
	801, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 475, 110, 110, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 110, 0, 110, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 318, 0, 0, 0, 0,
	0, 110, 0, 0, 110, 110, 110, 318, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	1105, 0, 0, 0, 0, 814, 475, 475, 475, 814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	475, 475, 475, 0, 475, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 475, 475, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 35,
	0, 0, 0, 644, 0, 644, 0, 110, 0, 0,
	0, 0, 0, 1565, 318, 0, 0, 0, 0, 0,
	0, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 362, 0, 0, 0, 0, 0,
	0, 1585, 1001, 0, 1586, 475, 0, 1588, 0, 0,
	0, 0, 0, 0, 0, 110, 110, 0, 110, 1032,
	1010, 1012, 0, 110, 0, 110, 110, 110, 318, 0,
	0, 110, 0, 0, 0, 0, 1036, 1037, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 318,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 1054, 0, 0, 1242,
	0, 0, 437, 801, 0, 0, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1629, 362, 0, 0, 110, 110,
	0, 0, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 318, 0, 0,
	0, 0, 0, 814, 110, 0, 0, 0, 0, 1306,
	1307, 0, 0, 814, 814, 814, 814, 814, 0, 0,
	398, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 1334, 0, 0,
	814, 0, 0, 475, 0, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 316, 0,
	0, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1224, 0, 1226,
	0, 0, 0, 0, 0, 0, 0, 0, 458, 0,
	0, 466, 0, 0, 35, 0, 316, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 37,
	71, 73, 40, 0, 644, 0, 644, 0, 0, 0,
	0, 0, 0, 0, 0, 1238, 0, 76, 0, 1239,
	0, 0, 41, 60, 61, 0, 63, 0, 0, 0,
	0, 1246, 1247, 0, 0, 0, 0, 1253, 0, 0,
	1256, 1257, 0, 0, 0, 50, 0, 0, 1263, 70,
	0, 0, 1265, 0, 0, 1268, 1269, 1270, 1271, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1032, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 1326, 1327, 0, 43, 44, 46, 45, 48,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 49, 75, 74, 0, 0, 58,
	59, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 52, 0, 53, 54,
	55, 56, 35, 0, 0, 0, 0, 0, 0, 0,
	1378, 0, 316, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 475, 0, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1562, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 1424, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1589, 1590, 1591, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 475, 0, 1032, 0, 0, 1474,
	1476, 316, 0, 316, 0, 644, 0, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1476, 0, 0,
	316, 316, 316, 0, 0, 1327, 0, 0, 0, 0,
	0, 475, 1493, 475, 1503, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 0, 0, 69, 0, 0, 1472,
	0, 35, 0, 65, 67, 68, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1661, 0, 0, 0, 0, 0, 0, 1529, 0,
	0, 1534, 1535, 1536, 0, 0, 0, 0, 0, 0,
	0, 1542, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1545, 0, 0, 0, 1547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1556, 1557,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1570, 0, 0,
	316, 1032, 0, 0, 0, 0, 0, 316, 0, 1577,
	1578, 316, 1581, 316, 0, 0, 0, 0, 0, 0,
	316, 0, 475, 316, 0, 0, 316, 0, 0, 1592,
	1542, 925, 0, 0, 0, 0, 0, 0, 0, 0,
	1732, 316, 0, 0, 0, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1635, 1636, 0, 1637, 0, 0, 0, 0,
	1542, 0, 1542, 1542, 1542, 0, 0, 0, 1503, 0,
	0, 0, 0, 0, 0, 0, 1641, 0, 0, 0,
	0, 0, 458, 925, 0, 1542, 0, 458, 458, 1666,
	0, 458, 458, 458, 0, 0, 0, 1033, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1667, 1668, 1669,
	1670, 0, 1674, 0, 1675, 1676, 458, 458, 458, 458,
	458, 0, 0, 0, 0, 0, 0, 1682, 316, 1683,
	1684, 0, 0, 0, 0, 475, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	1032, 0, 1707, 867, 925, 0, 316, 0, 1702, 0,
	0, 0, 0, 0, 0, 316, 1101, 1101, 0, 0,
	0, 1713, 0, 316, 316, 0, 0, 316, 1112, 925,
	0, 0, 0, 1711, 0, 0, 0, 0, 0, 0,
	0, 1542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1746, 1747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	316, 316, 316, 316, 316, 0, 316, 316, 0, 0,
	316, 0, 316, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 316, 0, 316, 0, 0, 316, 0, 1220, 1221,
	0, 0, 0, 316, 881, 884, 885, 886, 887, 888,
	889, 0, 890, 891, 892, 893, 894, 869, 870, 871,
	872, 853, 854, 882, 0, 856, 0, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 873, 874, 875,
	876, 877, 878, 879, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 458, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	458, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	1033, 316, 316, 316, 316, 316, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 316, 0,
	0, 1101, 0, 0, 0, 0, 458, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1033, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1033,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 584, 572, 0, 530,
	587, 502, 520, 595, 521, 524, 560, 488, 542, 208,
	518, 0, 506, 483, 514, 484, 504, 532, 145, 176,
	141, 574, 545, 586, 178, 0, 507, 593, 180, 551,
	0, 260, 195, 0, 0, 0, 534, 576, 540, 569,
	529, 561, 493, 550, 588, 519, 558, 589, 0, 0,
	0, 111, 112, 113, 0, 1132, 1133, 0, 1033, 0,
	0, 0, 134, 0, 555, 583, 516, 557, 559, 597,
	482, 552, 316, 486, 489, 594, 579, 510, 511, 1350,
	0, 0, 0, 0, 0, 0, 533, 541, 566, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 508, 0,
	549, 0, 0, 0, 490, 487, 0, 0, 0, 0,
	531, 0, 0, 0, 492, 0, 509, 567, 0, 480,
	154, 571, 578, 528, 322, 582, 526, 525, 585, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 575, 505, 515, 138, 512, 239, 215,
	281, 548, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 128, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 485, 0, 261, 284, 299, 132,
	501, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 497, 500, 495, 496, 543, 544,
	590, 591, 592, 568, 491, 0, 498, 499, 0, 573,
	580, 581, 547, 114, 124, 179, 296, 231, 150, 285,
	481, 494, 143, 503, 0, 0, 517, 522, 523, 535,
	536, 537, 538, 539, 546, 553, 554, 556, 562, 563,
	564, 565, 570, 577, 596, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 0, 0,
	0, 0, 513, 230, 200, 166, 584, 572, 0, 530,
	587, 502, 520, 595, 521, 524, 560, 488, 542, 208,
	518, 0, 506, 483, 514, 484, 504, 532, 145, 176,
	141, 574, 545, 586, 178, 0, 507, 593, 180, 551,
	0, 260, 195, 0, 0, 0, 534, 576, 540, 569,
	529, 561, 493, 550, 588, 519, 558, 589, 0, 0,
	0, 111, 112, 113, 0, 1132, 1133, 0, 0, 0,
	0, 0, 134, 0, 555, 583, 516, 557, 559, 597,
	482, 552, 0, 486, 489, 594, 579, 510, 511, 0,
	0, 0, 0, 0, 0, 0, 533, 541, 566, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 508, 0,
	549, 0, 0, 0, 490, 487, 0, 0, 0, 0,
	531, 0, 0, 0, 492, 0, 509, 567, 0, 480,
	154, 571, 578, 528, 322, 582, 526, 525, 585, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 575, 505, 515, 138, 512, 239, 215,
	281, 548, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 128, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 485, 0, 261, 284, 299, 132,
	501, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 497, 500, 495, 496, 543, 544,
	590, 591, 592, 568, 491, 0, 498, 499, 0, 573,
	580, 581, 547, 114, 124, 179, 296, 231, 150, 285,
	481, 494, 143, 503, 0, 0, 517, 522, 523, 535,
	536, 537, 538, 539, 546, 553, 554, 556, 562, 563,
	564, 565, 570, 577, 596, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 0, 0,
	0, 0, 513, 230, 200, 166, 584, 572, 0, 530,
	587, 502, 520, 595, 521, 524, 560, 488, 542, 208,
	518, 0, 506, 483, 514, 484, 504, 532, 145, 176,
	141, 574, 545, 586, 178, 0, 507, 593, 180, 551,
	0, 260, 195, 0, 0, 0, 534, 576, 540, 569,
	529, 561, 493, 550, 588, 519, 558, 589, 70, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 555, 583, 516, 557, 559, 597,
	482, 552, 0, 486, 489, 594, 579, 510, 511, 0,
	0, 0, 0, 0, 0, 0, 533, 541, 566, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 508, 0,
	549, 0, 0, 0, 490, 487, 0, 0, 0, 0,
	531, 0, 0, 0, 492, 0, 509, 567, 0, 480,
	154, 571, 578, 528, 322, 582, 526, 525, 585, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 575, 505, 515, 138, 512, 239, 215,
	281, 548, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 128, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 485, 0, 261, 284, 299, 132,
	501, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 497, 500, 495, 496, 543, 544,
	590, 591, 592, 568, 491, 0, 498, 499, 0, 573,
	580, 581, 547, 114, 124, 179, 296, 231, 150, 285,
	481, 494, 143, 503, 0, 0, 517, 522, 523, 535,
	536, 537, 538, 539, 546, 553, 554, 556, 562, 563,
	564, 565, 570, 577, 596, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 0, 0,
	0, 0, 513, 230, 200, 166, 584, 572, 0, 530,
	587, 502, 520, 595, 521, 524, 560, 488, 542, 208,
	518, 0, 506, 483, 514, 484, 504, 532, 145, 176,
	141, 574, 545, 586, 178, 0, 507, 593, 180, 551,
	0, 260, 195, 0, 0, 0, 534, 576, 540, 569,
	529, 561, 493, 550, 588, 519, 558, 589, 0, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 555, 583, 516, 557, 559, 597,
	482, 552, 0, 486, 489, 594, 579, 510, 511, 0,
	0, 0, 0, 0, 0, 0, 533, 541, 566, 527,
	0, 0, 0, 0, 0, 0, 1465, 0, 508, 0,
	549, 0, 0, 0, 490, 487, 0, 0, 0, 0,
	531, 0, 0, 0, 492, 0, 509, 567, 0, 480,
	154, 571, 578, 528, 322, 582, 526, 525, 585, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 575, 505, 515, 138, 512, 239, 215,
	281, 548, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 128, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 485, 0, 261, 284, 299, 132,
	501, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 497, 500, 495, 496, 543, 544,
	590, 591, 592, 568, 491, 0, 498, 499, 0, 573,
	580, 581, 547, 114, 124, 179, 296, 231, 150, 285,
	481, 494, 143, 503, 0, 0, 517, 522, 523, 535,
	536, 537, 538, 539, 546, 553, 554, 556, 562, 563,
	564, 565, 570, 577, 596, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 0, 0,
	0, 0, 513, 230, 200, 166, 584, 572, 0, 530,
	587, 502, 520, 595, 521, 524, 560, 488, 542, 208,
	518, 0, 506, 483, 514, 484, 504, 532, 145, 176,
	141, 574, 545, 586, 178, 0, 507, 593, 180, 551,
	0, 260, 195, 0, 0, 0, 534, 576, 540, 569,
	529, 561, 493, 550, 588, 519, 558, 589, 0, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 555, 583, 516, 557, 559, 597,
	482, 552, 0, 486, 489, 594, 579, 510, 511, 0,
	0, 0, 0, 0, 0, 0, 533, 541, 566, 527,
	0, 0, 0, 0, 0, 0, 1113, 0, 508, 0,
	549, 0, 0, 0, 490, 487, 0, 0, 0, 0,
	531, 0, 0, 0, 492, 0, 509, 567, 0, 480,
	154, 571, 578, 528, 322, 582, 526, 525, 585, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 575, 505, 515, 138, 512, 239, 215,
	281, 548, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 128, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 485, 0, 261, 284, 299, 132,
	501, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 497, 500, 495, 496, 543, 544,
	590, 591, 592, 568, 491, 0, 498, 499, 0, 573,
	580, 581, 547, 114, 124, 179, 296, 231, 150, 285,
	481, 494, 143, 503, 0, 0, 517, 522, 523, 535,
	536, 537, 538, 539, 546, 553, 554, 556, 562, 563,
	564, 565, 570, 577, 596, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 0, 0,
	0, 0, 513, 230, 200, 166, 584, 572, 0, 530,
	587, 502, 520, 595, 521, 524, 560, 488, 542, 208,
	518, 0, 506, 483, 514, 484, 504, 532, 145, 176,
	141, 574, 545, 586, 178, 0, 507, 593, 180, 551,
	0, 260, 195, 0, 0, 0, 534, 576, 540, 569,
	529, 561, 493, 550, 588, 519, 558, 589, 0, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 555, 583, 516, 557, 559, 597,
	482, 552, 0, 486, 489, 594, 579, 510, 511, 0,
	0, 0, 0, 0, 0, 0, 533, 541, 566, 527,
	0, 0, 0, 0, 0, 0, 1074, 0, 508, 0,
	549, 0, 0, 0, 490, 487, 0, 0, 0, 0,
	531, 0, 0, 0, 492, 0, 509, 567, 0, 480,
	154, 571, 578, 528, 322, 582, 526, 525, 585, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 575, 505, 515, 138, 512, 239, 215,
	281, 548, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 128, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 485, 0, 261, 284, 299, 132,
	501, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 497, 500, 495, 496, 543, 544,
	590, 591, 592, 568, 491, 0, 498, 499, 0, 573,
	580, 581, 547, 114, 124, 179, 296, 231, 150, 285,
	481, 494, 143, 503, 0, 0, 517, 522, 523, 535,
	536, 537, 538, 539, 546, 553, 554, 556, 562, 563,
	564, 565, 570, 577, 596, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 0, 0,
	0, 0, 513, 230, 200, 166, 584, 572, 0, 530,
	587, 502, 520, 595, 521, 524, 560, 488, 542, 208,
	518, 0, 506, 483, 514, 484, 504, 532, 145, 176,
	141, 574, 545, 586, 178, 0, 507, 593, 180, 551,
	0, 260, 195, 0, 0, 0, 534, 576, 540, 569,
	529, 561, 493, 550, 588, 519, 558, 589, 0, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 555, 583, 516, 557, 559, 597,
	482, 552, 0, 486, 489, 594, 579, 510, 511, 0,
	0, 0, 0, 0, 0, 0, 533, 541, 566, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 508, 0,
	549, 0, 0, 0, 490, 487, 0, 0, 0, 0,
	531, 0, 0, 0, 492, 0, 509, 567, 0, 480,
	154, 571, 578, 528, 322, 582, 526, 525, 585, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 575, 505, 515, 138, 512, 239, 215,
	281, 548, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 128, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 485, 0, 261, 284, 299, 132,
	501, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 497, 500, 495, 496, 543, 544,
	590, 591, 592, 568, 491, 0, 498, 499, 0, 573,
	580, 581, 547, 114, 124, 179, 296, 231, 150, 285,
	481, 494, 143, 503, 0, 0, 517, 522, 523, 535,
	536, 537, 538, 539, 546, 553, 554, 556, 562, 563,
	564, 565, 570, 577, 596, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 0, 0,
	0, 0, 513, 230, 200, 166, 584, 572, 0, 530,
	587, 502, 520, 595, 521, 524, 560, 488, 542, 208,
	518, 0, 506, 483, 514, 484, 504, 532, 145, 176,
	141, 574, 545, 586, 178, 0, 507, 593, 180, 551,
	0, 260, 195, 0, 0, 0, 534, 576, 540, 569,
	529, 561, 493, 550, 588, 519, 558, 589, 0, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 555, 583, 516, 557, 559, 597,
	482, 552, 0, 486, 489, 594, 579, 510, 511, 0,
	0, 0, 0, 0, 0, 0, 533, 541, 566, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 508, 0,
	549, 0, 0, 0, 490, 487, 0, 0, 0, 0,
	531, 0, 0, 0, 492, 0, 509, 567, 0, 480,
	154, 571, 578, 528, 322, 582, 526, 525, 585, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 575, 505, 515, 138, 512, 239, 215,
	281, 548, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 478, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 485, 0, 261, 284, 299, 132,
	501, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 479, 477, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 497, 500, 495, 496, 543, 544,
	590, 591, 592, 568, 491, 0, 498, 499, 0, 573,
	580, 581, 547, 114, 124, 179, 296, 231, 150, 285,
	481, 494, 143, 503, 0, 0, 517, 522, 523, 535,
	536, 537, 538, 539, 546, 553, 554, 556, 562, 563,
	564, 565, 570, 577, 596, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 0, 0,
	0, 0, 513, 230, 200, 166, 584, 572, 0, 530,
	587, 502, 520, 595, 521, 524, 560, 488, 542, 208,
	518, 0, 506, 483, 514, 484, 504, 532, 145, 176,
	141, 574, 545, 586, 178, 0, 507, 593, 180, 551,
	0, 260, 195, 0, 0, 0, 534, 576, 540, 569,
	529, 561, 493, 550, 588, 519, 558, 589, 0, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 555, 583, 516, 557, 559, 597,
	482, 552, 0, 486, 489, 594, 579, 510, 511, 0,
	0, 0, 0, 0, 0, 0, 533, 541, 566, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 508, 0,
	549, 0, 0, 0, 490, 487, 0, 0, 0, 0,
	531, 0, 0, 0, 492, 0, 509, 567, 0, 480,
	154, 571, 578, 528, 322, 582, 526, 525, 585, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 575, 505, 515, 138, 512, 239, 215,
	281, 548, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 830, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 478, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 485, 0, 261, 284, 299, 132,
	501, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 479, 477, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 497, 500, 495, 496, 543, 544,
	590, 591, 592, 568, 491, 0, 498, 499, 0, 573,
	580, 581, 547, 114, 124, 179, 296, 231, 150, 285,
	481, 494, 143, 503, 0, 0, 517, 522, 523, 535,
	536, 537, 538, 539, 546, 553, 554, 556, 562, 563,
	564, 565, 570, 577, 596, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 0, 0,
	0, 0, 513, 230, 200, 166, 584, 572, 0, 530,
	587, 502, 520, 595, 521, 524, 560, 488, 542, 208,
	518, 0, 506, 483, 514, 484, 504, 532, 145, 176,
	141, 574, 545, 586, 178, 0, 507, 593, 180, 551,
	0, 260, 195, 0, 0, 0, 534, 576, 540, 569,
	529, 561, 493, 550, 588, 519, 558, 589, 0, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 555, 583, 516, 557, 559, 597,
	482, 552, 0, 486, 489, 594, 579, 510, 511, 0,
	0, 0, 0, 0, 0, 0, 533, 541, 566, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 508, 0,
	549, 0, 0, 0, 490, 487, 0, 0, 0, 0,
	531, 0, 0, 0, 492, 0, 509, 567, 0, 480,
	154, 571, 578, 528, 322, 582, 526, 525, 585, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 575, 505, 515, 138, 512, 239, 215,
	281, 548, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 469, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 478, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 485, 0, 261, 284, 299, 132,
	501, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 479, 477, 472, 471, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 497, 500, 495, 496, 543, 544,
	590, 591, 592, 568, 491, 0, 498, 499, 0, 573,
	580, 581, 547, 114, 124, 179, 296, 231, 150, 285,
	481, 494, 143, 503, 0, 0, 517, 522, 523, 535,
	536, 537, 538, 539, 546, 553, 554, 556, 562, 563,
	564, 565, 570, 577, 596, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 0, 0,
	0, 0, 513, 230, 200, 166, 208, 0, 0, 1003,
	0, 367, 0, 0, 0, 145, 176, 366, 0, 0,
	0, 178, 0, 1004, 410, 180, 0, 0, 260, 195,
	0, 0, 0, 0, 0, 401, 402, 0, 0, 0,
	0, 0, 0, 0, 0, 70, 0, 0, 111, 112,
	113, 388, 387, 390, 391, 392, 393, 0, 0, 134,
	389, 394, 395, 396, 0, 0, 0, 0, 364, 381,
	0, 409, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 379, 456, 0, 0, 0, 424, 0, 380,
	0, 0, 373, 374, 376, 375, 377, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 423, 0,
	0, 322, 0, 0, 421, 0, 227, 0, 265, 157,
	177, 130, 171, 115, 126, 0, 156, 205, 236, 241,
	0, 0, 0, 138, 0, 239, 215, 281, 0, 217,
	238, 181, 271, 228, 280, 290, 291, 268, 288, 295,
	256, 119, 267, 279, 135, 250, 0, 0, 0, 121,
	277, 263, 193, 167, 168, 120, 0, 234, 144, 152,
	140, 207, 274, 275, 139, 298, 127, 287, 123, 128,
	286, 201, 270, 278, 194, 186, 122, 276, 192, 185,
	173, 148, 159, 225, 183, 226, 160, 197, 196, 198,
	0, 0, 0, 261, 284, 299, 132, 0, 269, 293,
	294, 0, 229, 133, 153, 147, 224, 151, 199, 129,
	162, 258, 172, 182, 233, 297, 214, 240, 136, 283,
	259, 411, 422, 417, 418, 415, 416, 414, 413, 412,
	425, 403, 404, 405, 406, 408, 0, 419, 420, 407,
	114, 124, 179, 296, 231, 150, 285, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 142, 146, 149,
	155, 158, 161, 163, 164, 165, 170, 184, 188, 189,
	190, 191, 202, 203, 204, 206, 209, 210, 211, 212,
	213, 216, 218, 219, 220, 221, 222, 223, 232, 235,
	242, 243, 244, 245, 246, 247, 249, 252, 253, 254,
	255, 262, 266, 272, 273, 282, 289, 292, 0, 0,
	0, 0, 118, 169, 187, 248, 251, 257, 264, 319,
	320, 321, 237, 174, 175, 0, 0, 0, 208, 0,
	230, 200, 166, 367, 0, 0, 0, 145, 176, 366,
	0, 0, 0, 178, 0, 0, 410, 180, 0, 0,
	260, 195, 0, 0, 0, 0, 0, 401, 402, 0,
	0, 0, 0, 0, 0, 1123, 0, 70, 0, 0,
	111, 112, 113, 388, 387, 390, 391, 392, 393, 0,
	0, 134, 389, 394, 395, 396, 1124, 0, 0, 0,
	364, 381, 0, 409, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 379, 0, 0, 0, 0, 424,
	0, 380, 0, 0, 373, 374, 376, 375, 377, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	423, 0, 0, 322, 0, 0, 421, 0, 227, 0,
	265, 157, 177, 130, 171, 115, 126, 0, 156, 205,
	236, 241, 0, 0, 0, 138, 0, 239, 215, 281,
	0, 217, 238, 181, 271, 228, 280, 290, 291, 268,
	288, 295, 256, 119, 267, 279, 135, 250, 0, 0,
	0, 121, 277, 263, 193, 167, 168, 120, 0, 234,
	144, 152, 140, 207, 274, 275, 139, 298, 127, 287,
	123, 128, 286, 201, 270, 278, 194, 186, 122, 276,
	192, 185, 173, 148, 159, 225, 183, 226, 160, 197,
	196, 198, 0, 0, 0, 261, 284, 299, 132, 0,
	269, 293, 294, 0, 229, 133, 153, 147, 224, 151,
	199, 129, 162, 258, 172, 182, 233, 297, 214, 240,
	136, 283, 259, 411, 422, 417, 418, 415, 416, 414,
	413, 412, 425, 403, 404, 405, 406, 408, 0, 419,
	420, 407, 114, 124, 179, 296, 231, 150, 285, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 142,
	146, 149, 155, 158, 161, 163, 164, 165, 170, 184,
	188, 189, 190, 191, 202, 203, 204, 206, 209, 210,
	211, 212, 213, 216, 218, 219, 220, 221, 222, 223,
	232, 235, 242, 243, 244, 245, 246, 247, 249, 252,
	253, 254, 255, 262, 266, 272, 273, 282, 289, 292,
	0, 0, 0, 0, 118, 169, 187, 248, 251, 257,
	264, 319, 320, 321, 237, 174, 175, 0, 0, 0,
	208, 0, 230, 200, 166, 367, 0, 0, 0, 145,
	176, 366, 0, 0, 0, 178, 0, 0, 410, 180,
	0, 0, 260, 195, 0, 0, 0, 0, 0, 401,
	402, 0, 0, 0, 0, 0, 0, 1120, 0, 70,
	0, 0, 111, 112, 113, 388, 387, 390, 391, 392,
	393, 0, 0, 134, 389, 394, 395, 396, 1121, 0,
	0, 0, 364, 381, 0, 409, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 379, 0, 0, 0,
	0, 424, 0, 380, 0, 0, 373, 374, 376, 375,
	377, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 423, 0, 0, 322, 0, 0, 421, 0,
	227, 0, 265, 157, 177, 130, 171, 115, 126, 0,
	156, 205, 236, 241, 0, 0, 0, 138, 0, 239,
	215, 281, 0, 217, 238, 181, 271, 228, 280, 290,
	291, 268, 288, 295, 256, 119, 267, 279, 135, 250,
	0, 0, 0, 121, 277, 263, 193, 167, 168, 120,
	0, 234, 144, 152, 140, 207, 274, 275, 139, 298,
	127, 287, 123, 128, 286, 201, 270, 278, 194, 186,
	122, 276, 192, 185, 173, 148, 159, 225, 183, 226,
	160, 197, 196, 198, 0, 0, 0, 261, 284, 299,
	132, 0, 269, 293, 294, 0, 229, 133, 153, 147,
	224, 151, 199, 129, 162, 258, 172, 182, 233, 297,
	214, 240, 136, 283, 259, 411, 422, 417, 418, 415,
	416, 414, 413, 412, 425, 403, 404, 405, 406, 408,
	0, 419, 420, 407, 114, 124, 179, 296, 231, 150,
	285, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 125, 131,
	137, 142, 146, 149, 155, 158, 161, 163, 164, 165,
	170, 184, 188, 189, 190, 191, 202, 203, 204, 206,
	209, 210, 211, 212, 213, 216, 218, 219, 220, 221,
	222, 223, 232, 235, 242, 243, 244, 245, 246, 247,
	249, 252, 253, 254, 255, 262, 266, 272, 273, 282,
	289, 292, 0, 0, 0, 0, 118, 169, 187, 248,
	251, 257, 264, 319, 320, 321, 237, 174, 175, 0,
	0, 0, 208, 0, 230, 200, 166, 367, 0, 0,
	0, 145, 176, 366, 0, 0, 0, 178, 0, 0,
	410, 180, 0, 0, 260, 195, 0, 0, 0, 0,
	0, 401, 402, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 0, 1011, 111, 112, 113, 388, 387, 390,
	391, 392, 393, 0, 0, 134, 389, 394, 395, 396,
	0, 0, 0, 0, 364, 381, 0, 409, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 379, 0,
	0, 0, 0, 424, 0, 380, 0, 0, 373, 374,
	376, 375, 377, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 423, 0, 0, 322, 0, 0,
	421, 0, 227, 0, 265, 157, 177, 130, 171, 115,
	126, 0, 156, 205, 236, 241, 0, 0, 0, 138,
	0, 239, 215, 281, 0, 217, 238, 181, 271, 228,
	280, 290, 291, 268, 288, 295, 256, 119, 267, 279,
	135, 250, 0, 0, 0, 121, 277, 263, 193, 167,
	168, 120, 0, 234, 144, 152, 140, 207, 274, 275,
	139, 298, 127, 287, 123, 128, 286, 201, 270, 278,
	194, 186, 122, 276, 192, 185, 173, 148, 159, 225,
	183, 226, 160, 197, 196, 198, 0, 0, 0, 261,
	284, 299, 132, 0, 269, 293, 294, 0, 229, 133,
	153, 147, 224, 151, 199, 129, 162, 258, 172, 182,
	233, 297, 214, 240, 136, 283, 259, 411, 422, 417,
	418, 415, 416, 414, 413, 412, 425, 403, 404, 405,
	406, 408, 0, 419, 420, 407, 114, 124, 179, 296,
	231, 150, 285, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	125, 131, 137, 142, 146, 149, 155, 158, 161, 163,
	164, 165, 170, 184, 188, 189, 190, 191, 202, 203,
	204, 206, 209, 210, 211, 212, 213, 216, 218, 219,
	220, 221, 222, 223, 232, 235, 242, 243, 244, 245,
	246, 247, 249, 252, 253, 254, 255, 262, 266, 272,
	273, 282, 289, 292, 0, 0, 0, 0, 118, 169,
	187, 248, 251, 257, 264, 319, 320, 321, 237, 174,
	175, 0, 0, 0, 208, 0, 230, 200, 166, 367,
	0, 0, 0, 145, 176, 366, 0, 0, 0, 178,
	0, 0, 410, 180, 0, 0, 260, 195, 0, 0,
	0, 0, 0, 401, 402, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 0, 0, 111, 112, 113, 388,
	387, 390, 391, 392, 393, 0, 0, 134, 389, 394,
	395, 396, 0, 0, 0, 0, 364, 381, 0, 409,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	379, 456, 0, 0, 0, 424, 0, 380, 0, 0,
	373, 374, 376, 375, 377, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 423, 0, 0, 322,
	0, 0, 421, 0, 227, 0, 265, 157, 177, 130,
	171, 115, 126, 0, 156, 205, 236, 241, 0, 0,
	0, 138, 0, 239, 215, 281, 0, 217, 238, 181,
	271, 228, 280, 290, 291, 268, 288, 295, 256, 119,
	267, 279, 135, 250, 0, 0, 0, 121, 277, 263,
	193, 167, 168, 120, 0, 234, 144, 152, 140, 207,
	274, 275, 139, 298, 127, 287, 123, 128, 286, 201,
	270, 278, 194, 186, 122, 276, 192, 185, 173, 148,
	159, 225, 183, 226, 160, 197, 196, 198, 0, 0,
	0, 261, 284, 299, 132, 0, 269, 293, 294, 0,
	229, 133, 153, 147, 224, 151, 199, 129, 162, 258,
	172, 182, 233, 297, 214, 240, 136, 283, 259, 411,
	422, 417, 418, 415, 416, 414, 413, 412, 425, 403,
	404, 405, 406, 408, 0, 419, 420, 407, 114, 124,
	179, 296, 231, 150, 285, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 117, 125, 131, 137, 142, 146, 149, 155, 158,
	161, 163, 164, 165, 170, 184, 188, 189, 190, 191,
	202, 203, 204, 206, 209, 210, 211, 212, 213, 216,
	218, 219, 220, 221, 222, 223, 232, 235, 242, 243,
	244, 245, 246, 247, 249, 252, 253, 254, 255, 262,
	266, 272, 273, 282, 289, 292, 0, 0, 0, 0,
	118, 169, 187, 248, 251, 257, 264, 319, 320, 321,
	237, 174, 175, 0, 0, 0, 208, 0, 230, 200,
	166, 367, 0, 0, 0, 145, 176, 366, 0, 0,
	0, 178, 0, 0, 410, 180, 0, 0, 260, 195,
	0, 0, 0, 0, 0, 401, 402, 0, 0, 0,
	0, 0, 0, 0, 0, 70, 0, 0, 111, 112,
	113, 388, 1022, 390, 391, 392, 393, 0, 0, 134,
	389, 394, 395, 396, 0, 0, 0, 0, 364, 381,
	0, 409, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 379, 456, 0, 0, 0, 424, 0, 380,
	0, 0, 373, 374, 376, 375, 377, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 423, 0,
	0, 322, 0, 0, 421, 0, 227, 0, 265, 157,
	177, 130, 171, 115, 126, 0, 156, 205, 236, 241,
	0, 0, 0, 138, 0, 239, 215, 281, 0, 217,
	238, 181, 271, 228, 280, 290, 291, 268, 288, 295,
	256, 119, 267, 279, 135, 250, 0, 0, 0, 121,
	277, 263, 193, 167, 168, 120, 0, 234, 144, 152,
	140, 207, 274, 275, 139, 298, 127, 287, 123, 128,
	286, 201, 270, 278, 194, 186, 122, 276, 192, 185,
	173, 148, 159, 225, 183, 226, 160, 197, 196, 198,
	0, 0, 0, 261, 284, 299, 132, 0, 269, 293,
	294, 0, 229, 133, 153, 147, 224, 151, 199, 129,
	162, 258, 172, 182, 233, 297, 214, 240, 136, 283,
	259, 411, 422, 417, 418, 415, 416, 414, 413, 412,
	425, 403, 404, 405, 406, 408, 0, 419, 420, 407,
	114, 124, 179, 296, 231, 150, 285, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 142, 146, 149,
	155, 158, 161, 163, 164, 165, 170, 184, 188, 189,
	190, 191, 202, 203, 204, 206, 209, 210, 211, 212,
	213, 216, 218, 219, 220, 221, 222, 223, 232, 235,
	242, 243, 244, 245, 246, 247, 249, 252, 253, 254,
	255, 262, 266, 272, 273, 282, 289, 292, 0, 0,
	0, 0, 118, 169, 187, 248, 251, 257, 264, 319,
	320, 321, 237, 174, 175, 0, 0, 0, 208, 0,
	230, 200, 166, 367, 0, 0, 0, 145, 176, 366,
	0, 0, 0, 178, 0, 0, 410, 180, 0, 0,
	260, 195, 0, 0, 0, 0, 0, 401, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 0, 0,
	111, 112, 113, 388, 1019, 390, 391, 392, 393, 0,
	0, 134, 389, 394, 395, 396, 0, 0, 0, 0,
	364, 381, 0, 409, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 379, 456, 0, 0, 0, 424,
	0, 380, 0, 0, 373, 374, 376, 375, 377, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	423, 0, 0, 322, 0, 0, 421, 0, 227, 0,
	265, 157, 177, 130, 171, 115, 126, 0, 156, 205,
	236, 241, 0, 0, 0, 138, 0, 239, 215, 281,
	0, 217, 238, 181, 271, 228, 280, 290, 291, 268,
	288, 295, 256, 119, 267, 279, 135, 250, 0, 0,
	0, 121, 277, 263, 193, 167, 168, 120, 0, 234,
	144, 152, 140, 207, 274, 275, 139, 298, 127, 287,
	123, 128, 286, 201, 270, 278, 194, 186, 122, 276,
	192, 185, 173, 148, 159, 225, 183, 226, 160, 197,
	196, 198, 0, 0, 0, 261, 284, 299, 132, 0,
	269, 293, 294, 0, 229, 133, 153, 147, 224, 151,
	199, 129, 162, 258, 172, 182, 233, 297, 214, 240,
	136, 283, 259, 411, 422, 417, 418, 415, 416, 414,
	413, 412, 425, 403, 404, 405, 406, 408, 0, 419,
	420, 407, 114, 124, 179, 296, 231, 150, 285, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 142,
	146, 149, 155, 158, 161, 163, 164, 165, 170, 184,
	188, 189, 190, 191, 202, 203, 204, 206, 209, 210,
	211, 212, 213, 216, 218, 219, 220, 221, 222, 223,
	232, 235, 242, 243, 244, 245, 246, 247, 249, 252,
	253, 254, 255, 262, 266, 272, 273, 282, 289, 292,
	0, 0, 0, 0, 118, 169, 187, 248, 251, 257,
	264, 319, 320, 321, 237, 174, 175, 438, 0, 0,
	0, 0, 230, 200, 166, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 367, 0, 0, 0, 145, 176,
	366, 0, 0, 0, 178, 0, 0, 410, 180, 0,
	0, 260, 195, 0, 0, 0, 0, 0, 401, 402,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 111, 112, 113, 388, 387, 390, 391, 392, 393,
	0, 0, 134, 389, 394, 395, 396, 0, 0, 0,
	0, 364, 381, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 379, 0, 0, 0, 0,
	424, 0, 380, 0, 0, 373, 374, 376, 375, 377,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 423, 0, 0, 322, 0, 0, 421, 0, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 0, 0, 0, 138, 0, 239, 215,
	281, 0, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 128, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 0, 0, 261, 284, 299, 132,
	0, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 411, 422, 417, 418, 415, 416,
	414, 413, 412, 425, 403, 404, 405, 406, 408, 0,
	419, 420, 407, 114, 124, 179, 296, 231, 150, 285,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 0, 0,
	0, 208, 0, 230, 200, 166, 367, 0, 0, 0,
	145, 176, 366, 0, 0, 0, 178, 0, 0, 410,
	180, 0, 0, 260, 195, 0, 0, 0, 0, 0,
	401, 402, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 0, 111, 112, 113, 388, 387, 390, 391,
	392, 393, 0, 0, 134, 389, 394, 395, 396, 0,
	0, 0, 0, 364, 381, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 379, 0, 0,
	0, 0, 424, 0, 380, 0, 0, 373, 374, 376,
	375, 377, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 423, 0, 0, 322, 0, 0, 421,
	0, 227, 0, 265, 157, 177, 130, 171, 115, 126,
	0, 156, 205, 236, 241, 0, 0, 0, 138, 0,
	239, 215, 281, 0, 217, 238, 181, 271, 228, 280,
	290, 291, 268, 288, 295, 256, 119, 267, 279, 135,
	250, 0, 0, 0, 121, 277, 263, 193, 167, 168,
	120, 0, 234, 144, 152, 140, 207, 274, 275, 139,
	298, 127, 287, 123, 128, 286, 201, 270, 278, 194,
	186, 122, 276, 192, 185, 173, 148, 159, 225, 183,
	226, 160, 197, 196, 198, 0, 0, 0, 261, 284,
	299, 132, 0, 269, 293, 294, 0, 229, 133, 153,
	147, 224, 151, 199, 129, 162, 258, 172, 182, 233,
	297, 214, 240, 136, 283, 259, 411, 422, 417, 418,
	415, 416, 414, 413, 412, 425, 403, 404, 405, 406,
	408, 0, 419, 420, 407, 114, 124, 179, 296, 231,
	150, 285, 0, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 117, 125,
	131, 137, 142, 146, 149, 155, 158, 161, 163, 164,
	165, 170, 184, 188, 189, 190, 191, 202, 203, 204,
	206, 209, 210, 211, 212, 213, 216, 218, 219, 220,
	221, 222, 223, 232, 235, 242, 243, 244, 245, 246,
	247, 249, 252, 253, 254, 255, 262, 266, 272, 273,
	282, 289, 292, 0, 0, 0, 0, 118, 169, 187,
	248, 251, 257, 264, 319, 320, 321, 237, 174, 175,
	208, 0, 0, 0, 0, 230, 200, 166, 0, 145,
	176, 141, 0, 0, 0, 178, 0, 0, 410, 180,
	0, 0, 260, 195, 0, 0, 0, 0, 0, 401,
	402, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	0, 0, 111, 112, 113, 388, 387, 390, 391, 392,
	393, 0, 0, 134, 389, 394, 395, 396, 0, 0,
	0, 0, 0, 381, 0, 409, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 379, 0, 0, 0,
	0, 424, 0, 380, 0, 0, 373, 374, 376, 375,
	377, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 423, 0, 0, 322, 0, 0, 421, 0,
	227, 0, 265, 157, 177, 130, 171, 115, 126, 0,
	156, 205, 236, 241, 0, 0, 0, 138, 0, 239,
	215, 281, 1739, 217, 238, 181, 271, 228, 280, 290,
	291, 268, 288, 295, 256, 119, 267, 279, 135, 250,
	0, 0, 0, 121, 277, 263, 193, 167, 168, 120,
	0, 234, 144, 152, 140, 207, 274, 275, 139, 298,
	127, 287, 123, 128, 286, 201, 270, 278, 194, 186,
	122, 276, 192, 185, 173, 148, 159, 225, 183, 226,
	160, 197, 196, 198, 0, 0, 0, 261, 284, 299,
	132, 0, 269, 293, 294, 0, 229, 133, 153, 147,
	224, 151, 199, 129, 162, 258, 172, 182, 233, 297,
	214, 240, 136, 283, 259, 411, 422, 417, 418, 415,
	416, 414, 413, 412, 425, 403, 404, 405, 406, 408,
	0, 419, 420, 407, 114, 124, 179, 296, 231, 150,
	285, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 125, 131,
	137, 142, 146, 149, 155, 158, 161, 163, 164, 165,
	170, 184, 188, 189, 190, 191, 202, 203, 204, 206,
	209, 210, 211, 212, 213, 216, 218, 219, 220, 221,
	222, 223, 232, 235, 242, 243, 244, 245, 246, 247,
	249, 252, 253, 254, 255, 262, 266, 272, 273, 282,
	289, 292, 0, 0, 0, 0, 118, 169, 187, 248,
	251, 257, 264, 319, 320, 321, 237, 174, 175, 208,
	0, 0, 0, 0, 230, 200, 166, 0, 145, 176,
	141, 0, 0, 0, 178, 0, 0, 410, 180, 0,
	0, 260, 195, 0, 0, 0, 0, 0, 401, 402,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	1011, 111, 112, 113, 388, 387, 390, 391, 392, 393,
	0, 0, 134, 389, 394, 395, 396, 0, 0, 0,
	0, 0, 381, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 379, 0, 0, 0, 0,
	424, 0, 380, 0, 0, 373, 374, 376, 375, 377,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 423, 0, 0, 322, 0, 0, 421, 0, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 0, 0, 0, 138, 0, 239, 215,
	281, 0, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 128, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 0, 0, 261, 284, 299, 132,
	0, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 411, 422, 417, 418, 415, 416,
	414, 413, 412, 425, 403, 404, 405, 406, 408, 0,
	419, 420, 407, 114, 124, 179, 296, 231, 150, 285,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 208, 0,
	0, 0, 0, 230, 200, 166, 0, 145, 176, 141,
	0, 0, 0, 178, 0, 0, 410, 180, 0, 0,
	260, 195, 0, 0, 0, 0, 0, 401, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 0, 0,
	111, 112, 113, 388, 387, 390, 391, 392, 393, 0,
	0, 134, 389, 394, 395, 396, 0, 0, 0, 0,
	0, 381, 0, 409, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 379, 0, 0, 0, 0, 424,
	0, 380, 0, 0, 373, 374, 376, 375, 377, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	423, 0, 0, 322, 0, 0, 421, 0, 227, 0,
	265, 157, 177, 130, 171, 115, 126, 0, 156, 205,
	236, 241, 0, 0, 0, 138, 0, 239, 215, 281,
	0, 217, 238, 181, 271, 228, 280, 290, 291, 268,
	288, 295, 256, 119, 267, 279, 135, 250, 0, 0,
	0, 121, 277, 263, 193, 167, 168, 120, 0, 234,
	144, 152, 140, 207, 274, 275, 139, 298, 127, 287,
	123, 128, 286, 201, 270, 278, 194, 186, 122, 276,
	192, 185, 173, 148, 159, 225, 183, 226, 160, 197,
	196, 198, 0, 0, 0, 261, 284, 299, 132, 0,
	269, 293, 294, 0, 229, 133, 153, 147, 224, 151,
	199, 129, 162, 258, 172, 182, 233, 297, 214, 240,
	136, 283, 259, 411, 422, 417, 418, 415, 416, 414,
	413, 412, 425, 403, 404, 405, 406, 408, 0, 419,
	420, 407, 114, 124, 179, 296, 231, 150, 285, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 142,
	146, 149, 155, 158, 161, 163, 164, 165, 170, 184,
	188, 189, 190, 191, 202, 203, 204, 206, 209, 210,
	211, 212, 213, 216, 218, 219, 220, 221, 222, 223,
	232, 235, 242, 243, 244, 245, 246, 247, 249, 252,
	253, 254, 255, 262, 266, 272, 273, 282, 289, 292,
	0, 0, 0, 0, 118, 169, 187, 248, 251, 257,
	264, 319, 320, 321, 237, 174, 175, 208, 0, 0,
	0, 0, 230, 200, 166, 0, 145, 176, 141, 0,
	0, 0, 178, 0, 0, 410, 180, 0, 0, 260,
	195, 0, 0, 0, 0, 0, 401, 402, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 0, 111,
	112, 113, 388, 730, 390, 391, 392, 393, 0, 0,
	134, 389, 394, 395, 396, 0, 0, 0, 0, 0,
	381, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 378, 379, 0, 0, 0, 0, 424, 0,
	380, 0, 0, 373, 374, 376, 375, 377, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 423,
	0, 0, 322, 0, 0, 421, 0, 227, 0, 265,
	157, 177, 130, 171, 115, 126, 0, 156, 205, 236,
	241, 0, 0, 0, 138, 0, 239, 215, 281, 0,
	217, 238, 181, 271, 228, 280, 290, 291, 268, 288,
	295, 256, 119, 267, 279, 135, 250, 0, 0, 0,
	121, 277, 263, 193, 167, 168, 120, 0, 234, 144,
	152, 140, 207, 274, 275, 139, 298, 127, 287, 123,
	128, 286, 201, 270, 278, 194, 186, 122, 276, 192,
	185, 173, 148, 159, 225, 183, 226, 160, 197, 196,
	198, 0, 0, 0, 261, 284, 299, 132, 0, 269,
	293, 294, 0, 229, 133, 153, 147, 224, 151, 199,
	129, 162, 258, 172, 182, 233, 297, 214, 240, 136,
	283, 259, 411, 422, 417, 418, 415, 416, 414, 413,
	412, 425, 403, 404, 405, 406, 408, 0, 419, 420,
	407, 114, 124, 179, 296, 231, 150, 285, 0, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 117, 125, 131, 137, 142, 146,
	149, 155, 158, 161, 163, 164, 165, 170, 184, 188,
	189, 190, 191, 202, 203, 204, 206, 209, 210, 211,
	212, 213, 216, 218, 219, 220, 221, 222, 223, 232,
	235, 242, 243, 244, 245, 246, 247, 249, 252, 253,
	254, 255, 262, 266, 272, 273, 282, 289, 292, 0,
	0, 0, 0, 118, 169, 187, 248, 251, 257, 264,
	319, 320, 321, 237, 174, 175, 208, 0, 0, 0,
	0, 230, 200, 166, 0, 145, 176, 141, 0, 0,
	0, 178, 0, 0, 0, 180, 0, 0, 260, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 695, 694, 704,
	705, 697, 698, 699, 700, 701, 702, 703, 696, 0,
	0, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 322, 0, 0, 0, 0, 227, 0, 265, 157,
	177, 130, 171, 115, 126, 0, 156, 205, 236, 241,
	0, 0, 0, 138, 0, 239, 215, 281, 0, 217,
	238, 181, 271, 228, 280, 290, 291, 268, 288, 295,
	256, 119, 267, 279, 135, 250, 0, 0, 0, 121,
	277, 263, 193, 167, 168, 120, 0, 234, 144, 152,
	140, 207, 274, 275, 139, 298, 127, 287, 123, 128,
	286, 201, 270, 278, 194, 186, 122, 276, 192, 185,
	173, 148, 159, 225, 183, 226, 160, 197, 196, 198,
	0, 0, 0, 261, 284, 299, 132, 0, 269, 293,
	294, 0, 229, 133, 153, 147, 224, 151, 199, 129,
	162, 258, 172, 182, 233, 297, 214, 240, 136, 283,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 124, 179, 296, 231, 150, 285, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 142, 146, 149,
	155, 158, 161, 163, 164, 165, 170, 184, 188, 189,
	190, 191, 202, 203, 204, 206, 209, 210, 211, 212,
	213, 216, 218, 219, 220, 221, 222, 223, 232, 235,
	242, 243, 244, 245, 246, 247, 249, 252, 253, 254,
	255, 262, 266, 272, 273, 282, 289, 292, 0, 0,
	0, 0, 118, 169, 187, 248, 251, 257, 264, 319,
	320, 321, 237, 174, 175, 208, 0, 0, 0, 800,
	230, 200, 166, 0, 145, 176, 141, 0, 0, 0,
	178, 0, 0, 0, 180, 0, 0, 260, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 113,
	0, 802, 0, 0, 0, 0, 686, 0, 134, 0,
	0, 0, 0, 0, 682, 683, 681, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 684, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	322, 0, 0, 0, 0, 227, 0, 265, 157, 177,
	130, 171, 115, 126, 0, 156, 205, 236, 241, 0,
	0, 0, 138, 0, 239, 215, 281, 0, 217, 238,
	181, 271, 228, 280, 290, 291, 268, 288, 295, 256,
	119, 267, 279, 135, 250, 0, 0, 0, 121, 277,
	263, 193, 167, 168, 120, 0, 234, 144, 152, 140,
	207, 274, 275, 139, 298, 127, 287, 123, 128, 286,
	201, 270, 278, 194, 186, 122, 276, 192, 185, 173,
	148, 159, 225, 183, 226, 160, 197, 196, 198, 0,
	0, 0, 261, 284, 299, 132, 0, 269, 293, 294,
	0, 229, 133, 153, 147, 224, 151, 199, 129, 162,
	258, 172, 182, 233, 297, 214, 240, 136, 283, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	124, 179, 296, 231, 150, 285, 0, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 117, 125, 131, 137, 142, 146, 149, 155,
	158, 161, 163, 164, 165, 170, 184, 188, 189, 190,
	191, 202, 203, 204, 206, 209, 210, 211, 212, 213,
	216, 218, 219, 220, 221, 222, 223, 232, 235, 242,
	243, 244, 245, 246, 247, 249, 252, 253, 254, 255,
	262, 266, 272, 273, 282, 289, 292, 0, 0, 0,
	0, 118, 169, 187, 248, 251, 257, 264, 319, 320,
	321, 237, 174, 175, 208, 0, 0, 0, 0, 230,
	200, 166, 0, 145, 176, 141, 0, 0, 0, 178,
	0, 0, 0, 180, 0, 0, 260, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 112, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 101, 102, 0, 97,
	0, 0, 0, 104, 227, 0, 265, 157, 177, 130,
	171, 115, 126, 0, 156, 205, 236, 241, 0, 0,
	0, 138, 0, 239, 215, 281, 0, 217, 238, 181,
	271, 228, 280, 290, 291, 268, 288, 295, 256, 119,
	267, 279, 135, 250, 0, 0, 0, 121, 277, 263,
	193, 167, 168, 120, 0, 234, 144, 152, 140, 207,
	274, 275, 139, 298, 127, 287, 123, 128, 286, 201,
	270, 278, 194, 186, 122, 276, 192, 185, 173, 148,
	159, 225, 183, 226, 160, 197, 196, 198, 0, 0,
	0, 261, 284, 299, 132, 0, 269, 293, 294, 0,
	229, 133, 153, 147, 224, 151, 199, 129, 162, 258,
	172, 182, 233, 297, 214, 240, 136, 283, 259, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 114, 124,
	179, 296, 231, 150, 285, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 117, 125, 131, 137, 142, 146, 149, 155, 158,
	161, 163, 164, 165, 170, 184, 188, 189, 190, 191,
	202, 203, 204, 206, 209, 210, 211, 212, 213, 216,
	218, 219, 220, 221, 222, 223, 232, 235, 242, 243,
	244, 245, 246, 247, 249, 252, 253, 254, 255, 262,
	266, 272, 273, 282, 289, 292, 0, 0, 0, 0,
	118, 169, 187, 248, 251, 257, 264, 106, 107, 108,
	237, 174, 175, 36, 0, 0, 0, 0, 230, 200,
	166, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 176, 141, 0, 0, 0,
	178, 0, 0, 0, 180, 0, 0, 260, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 0, 111, 112, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	322, 0, 0, 0, 0, 227, 0, 265, 157, 177,
	130, 171, 115, 126, 0, 156, 205, 236, 241, 0,
	0, 0, 138, 0, 239, 215, 281, 0, 217, 238,
	181, 271, 228, 280, 290, 291, 268, 288, 295, 256,
	119, 267, 279, 135, 250, 0, 0, 0, 121, 277,
	263, 193, 167, 168, 120, 0, 234, 144, 152, 140,
	207, 274, 275, 139, 298, 127, 287, 123, 128, 286,
	201, 270, 278, 194, 186, 122, 276, 192, 185, 173,
	148, 159, 225, 183, 226, 160, 197, 196, 198, 0,
	0, 0, 261, 284, 299, 132, 0, 269, 293, 294,
	0, 229, 133, 153, 147, 224, 151, 199, 129, 162,
	258, 172, 182, 233, 297, 214, 240, 136, 283, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	124, 179, 296, 231, 150, 285, 0, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 117, 125, 131, 137, 142, 146, 149, 155,
	158, 161, 163, 164, 165, 170, 184, 188, 189, 190,
	191, 202, 203, 204, 206, 209, 210, 211, 212, 213,
	216, 218, 219, 220, 221, 222, 223, 232, 235, 242,
	243, 244, 245, 246, 247, 249, 252, 253, 254, 255,
	262, 266, 272, 273, 282, 289, 292, 0, 0, 0,
	0, 118, 169, 187, 248, 251, 257, 264, 319, 320,
	321, 237, 818, 819, 0, 0, 0, 0, 65, 230,
	200, 166, 208, 0, 0, 0, 1100, 0, 0, 0,
	0, 145, 176, 141, 0, 0, 0, 178, 0, 0,
	0, 180, 0, 0, 260, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 112, 113, 0, 1102, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 322, 0, 0,
	0, 0, 227, 0, 265, 157, 177, 130, 171, 115,
	126, 0, 156, 205, 236, 241, 0, 0, 0, 138,
	0, 239, 215, 281, 0, 217, 238, 181, 271, 228,
	280, 290, 291, 268, 288, 295, 256, 119, 267, 279,
	135, 250, 0, 0, 0, 121, 277, 263, 193, 167,
	168, 120, 0, 234, 144, 152, 140, 207, 274, 275,
	139, 298, 127, 287, 123, 128, 286, 201, 270, 278,
	194, 186, 122, 276, 192, 185, 173, 148, 159, 225,
	183, 226, 160, 197, 196, 198, 0, 0, 0, 261,
	284, 299, 132, 0, 269, 293, 294, 0, 229, 133,
	153, 147, 224, 151, 199, 129, 162, 258, 172, 182,
	233, 297, 214, 240, 136, 283, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 124, 179, 296,
	231, 150, 285, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	125, 131, 137, 142, 146, 149, 155, 158, 161, 163,
	164, 165, 170, 184, 188, 189, 190, 191, 202, 203,
	204, 206, 209, 210, 211, 212, 213, 216, 218, 219,
	220, 221, 222, 223, 232, 235, 242, 243, 244, 245,
	246, 247, 249, 252, 253, 254, 255, 262, 266, 272,
	273, 282, 289, 292, 0, 0, 0, 0, 118, 169,
	187, 248, 251, 257, 264, 319, 320, 321, 237, 174,
	175, 36, 0, 0, 0, 0, 230, 200, 166, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 176, 141, 0, 0, 0, 178, 0,
	0, 0, 180, 0, 0, 260, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 0, 111, 112, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 322, 0,
	0, 0, 0, 227, 0, 265, 157, 177, 130, 171,
	115, 126, 0, 156, 205, 236, 241, 0, 0, 0,
	138, 0, 239, 215, 281, 0, 217, 238, 181, 271,
	228, 280, 290, 291, 268, 288, 295, 256, 119, 267,
	279, 135, 250, 0, 0, 0, 121, 277, 263, 193,
	167, 168, 120, 0, 234, 144, 152, 140, 207, 274,
	275, 139, 298, 127, 287, 123, 128, 286, 201, 270,
	278, 194, 186, 122, 276, 192, 185, 173, 148, 159,
	225, 183, 226, 160, 197, 196, 198, 0, 0, 0,
	261, 284, 299, 132, 0, 269, 293, 294, 0, 229,
	133, 153, 147, 224, 151, 199, 129, 162, 258, 172,
	182, 233, 297, 214, 240, 136, 283, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 124, 179,
	296, 231, 150, 285, 0, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	117, 125, 131, 137, 142, 146, 149, 155, 158, 161,
	163, 164, 165, 170, 184, 188, 189, 190, 191, 202,
	203, 204, 206, 209, 210, 211, 212, 213, 216, 218,
	219, 220, 221, 222, 223, 232, 235, 242, 243, 244,
	245, 246, 247, 249, 252, 253, 254, 255, 262, 266,
	272, 273, 282, 289, 292, 0, 0, 0, 0, 118,
	169, 187, 248, 251, 257, 264, 319, 320, 321, 237,
	174, 175, 208, 0, 0, 0, 1100, 230, 200, 166,
	0, 145, 176, 141, 0, 0, 0, 178, 0, 0,
	0, 180, 0, 0, 260, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 112, 113, 0, 1102, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 322, 0, 0,
	0, 0, 227, 0, 265, 157, 177, 130, 171, 115,
	126, 0, 156, 205, 236, 241, 0, 0, 0, 138,
	0, 239, 215, 281, 0, 1104, 238, 181, 271, 228,
	280, 290, 291, 268, 288, 295, 256, 119, 267, 279,
	135, 250, 0, 0, 0, 121, 277, 263, 193, 167,
	168, 120, 0, 234, 144, 152, 140, 207, 274, 275,
	139, 298, 127, 287, 123, 128, 286, 201, 270, 278,
	194, 186, 122, 276, 192, 185, 173, 148, 159, 225,
	183, 226, 160, 197, 196, 198, 0, 0, 0, 261,
	284, 299, 132, 0, 269, 293, 294, 0, 229, 133,
	153, 147, 224, 151, 199, 129, 162, 258, 172, 182,
	233, 297, 214, 240, 136, 283, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 124, 179, 296,
	231, 150, 285, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	125, 131, 137, 142, 146, 149, 155, 158, 161, 163,
	164, 165, 170, 184, 188, 189, 190, 191, 202, 203,
	204, 206, 209, 210, 211, 212, 213, 216, 218, 219,
	220, 221, 222, 223, 232, 235, 242, 243, 244, 245,
	246, 247, 249, 252, 253, 254, 255, 262, 266, 272,
	273, 282, 289, 292, 0, 0, 0, 0, 118, 169,
	187, 248, 251, 257, 264, 319, 320, 321, 237, 174,
	175, 208, 0, 0, 0, 0, 230, 200, 166, 0,
	145, 176, 141, 0, 0, 0, 178, 0, 0, 0,
	180, 0, 0, 260, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 112, 113, 0, 0, 1066, 0,
	0, 1067, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 322, 0, 0, 0,
	0, 227, 0, 265, 157, 177, 130, 171, 115, 126,
	0, 156, 205, 236, 241, 0, 0, 0, 138, 0,
	239, 215, 281, 0, 217, 238, 181, 271, 228, 280,
	290, 291, 268, 288, 295, 256, 119, 267, 279, 135,
	250, 0, 0, 0, 121, 277, 263, 193, 167, 168,
	120, 0, 234, 144, 152, 140, 207, 274, 275, 139,
	298, 127, 287, 123, 128, 286, 201, 270, 278, 194,
	186, 122, 276, 192, 185, 173, 148, 159, 225, 183,
	226, 160, 197, 196, 198, 0, 0, 0, 261, 284,
	299, 132, 0, 269, 293, 294, 0, 229, 133, 153,
	147, 224, 151, 199, 129, 162, 258, 172, 182, 233,
	297, 214, 240, 136, 283, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 124, 179, 296, 231,
	150, 285, 0, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 117, 125,
	131, 137, 142, 146, 149, 155, 158, 161, 163, 164,
	165, 170, 184, 188, 189, 190, 191, 202, 203, 204,
	206, 209, 210, 211, 212, 213, 216, 218, 219, 220,
	221, 222, 223, 232, 235, 242, 243, 244, 245, 246,
	247, 249, 252, 253, 254, 255, 262, 266, 272, 273,
	282, 289, 292, 0, 0, 0, 0, 118, 169, 187,
	248, 251, 257, 264, 319, 320, 321, 237, 174, 175,
	208, 0, 0, 0, 0, 230, 200, 166, 0, 145,
	176, 141, 0, 0, 0, 178, 0, 0, 0, 180,
	0, 0, 260, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1011, 111, 112, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 322, 0, 0, 0, 0,
	227, 0, 265, 157, 177, 130, 171, 115, 126, 0,
	156, 205, 236, 241, 0, 0, 0, 138, 0, 239,
	215, 281, 0, 217, 238, 181, 271, 228, 280, 290,
	291, 268, 288, 295, 256, 119, 267, 279, 135, 250,
	0, 0, 0, 121, 277, 263, 193, 167, 168, 120,
	0, 234, 144, 152, 140, 207, 274, 275, 139, 298,
	127, 287, 123, 128, 286, 201, 270, 278, 194, 186,
	122, 276, 192, 185, 173, 148, 159, 225, 183, 226,
	160, 197, 196, 198, 0, 0, 0, 261, 284, 299,
	132, 0, 269, 293, 294, 0, 229, 133, 153, 147,
	224, 151, 199, 129, 162, 258, 172, 182, 233, 297,
	214, 240, 136, 283, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 114, 124, 179, 296, 231, 150,
	285, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 125, 131,
	137, 142, 146, 149, 155, 158, 161, 163, 164, 165,
	170, 184, 188, 189, 190, 191, 202, 203, 204, 206,
	209, 210, 211, 212, 213, 216, 218, 219, 220, 221,
	222, 223, 232, 235, 242, 243, 244, 245, 246, 247,
	249, 252, 253, 254, 255, 262, 266, 272, 273, 282,
	289, 292, 0, 0, 0, 0, 118, 169, 187, 248,
	251, 257, 264, 319, 320, 321, 237, 174, 175, 208,
	0, 0, 0, 0, 230, 200, 166, 0, 145, 176,
	141, 0, 0, 0, 178, 0, 0, 0, 180, 0,
	0, 260, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 322, 0, 0, 0, 0, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 0, 0, 0, 138, 0, 239, 215,
	281, 0, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 128, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 0, 0, 261, 284, 299, 132,
	0, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 124, 179, 296, 231, 150, 285,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 818, 819, 208, 0,
	0, 0, 0, 230, 200, 166, 0, 145, 176, 141,
	0, 0, 0, 178, 0, 0, 0, 180, 0, 0,
	260, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 112, 113, 0, 1102, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 322, 0, 0, 0, 0, 227, 0,
	265, 157, 177, 130, 171, 115, 126, 0, 156, 205,
	236, 241, 0, 0, 0, 138, 0, 239, 215, 281,
	0, 217, 238, 181, 271, 228, 280, 290, 291, 268,
	288, 295, 256, 119, 267, 279, 135, 250, 0, 0,
	0, 121, 277, 263, 193, 167, 168, 120, 0, 234,
	144, 152, 140, 207, 274, 275, 139, 298, 127, 287,
	123, 128, 286, 201, 270, 278, 194, 186, 122, 276,
	192, 185, 173, 148, 159, 225, 183, 226, 160, 197,
	196, 198, 0, 0, 0, 261, 284, 299, 132, 0,
	269, 293, 294, 0, 229, 133, 153, 147, 224, 151,
	199, 129, 162, 258, 172, 182, 233, 297, 214, 240,
	136, 283, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 124, 179, 296, 231, 150, 285, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 142,
	146, 149, 155, 158, 161, 163, 164, 165, 170, 184,
	188, 189, 190, 191, 202, 203, 204, 206, 209, 210,
	211, 212, 213, 216, 218, 219, 220, 221, 222, 223,
	232, 235, 242, 243, 244, 245, 246, 247, 249, 252,
	253, 254, 255, 262, 266, 272, 273, 282, 289, 292,
	0, 0, 0, 0, 118, 169, 187, 248, 251, 257,
	264, 319, 320, 321, 237, 174, 175, 208, 0, 0,
	0, 0, 230, 200, 166, 0, 145, 176, 141, 0,
	0, 0, 178, 0, 0, 0, 180, 0, 0, 260,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 0, 111,
	112, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 322, 0, 0, 0, 0, 227, 0, 265,
	157, 177, 130, 171, 115, 126, 0, 156, 205, 236,
	241, 0, 0, 0, 138, 0, 239, 215, 281, 0,
	217, 238, 181, 271, 228, 280, 290, 291, 268, 288,
	295, 256, 119, 267, 279, 135, 250, 0, 0, 0,
	121, 277, 263, 193, 167, 168, 120, 0, 234, 144,
	152, 140, 207, 274, 275, 139, 298, 127, 287, 123,
	128, 286, 201, 270, 278, 194, 186, 122, 276, 192,
	185, 173, 148, 159, 225, 183, 226, 160, 197, 196,
	198, 0, 0, 0, 261, 284, 299, 132, 0, 269,
	293, 294, 0, 229, 133, 153, 147, 224, 151, 199,
	129, 162, 258, 172, 182, 233, 297, 214, 240, 136,
	283, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 124, 179, 296, 231, 150, 285, 0, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 117, 125, 131, 137, 142, 146,
	149, 155, 158, 161, 163, 164, 165, 170, 184, 188,
	189, 190, 191, 202, 203, 204, 206, 209, 210, 211,
	212, 213, 216, 218, 219, 220, 221, 222, 223, 232,
	235, 242, 243, 244, 245, 246, 247, 249, 252, 253,
	254, 255, 262, 266, 272, 273, 282, 289, 292, 0,
	0, 0, 0, 118, 169, 187, 248, 251, 257, 264,
	319, 320, 321, 237, 174, 175, 208, 0, 0, 0,
	0, 230, 200, 166, 0, 145, 176, 141, 0, 0,
	0, 178, 0, 0, 0, 180, 0, 0, 260, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	113, 0, 1227, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 322, 0, 0, 0, 0, 227, 0, 265, 157,
	177, 130, 171, 115, 126, 0, 156, 205, 236, 241,
	0, 0, 0, 138, 0, 239, 215, 281, 0, 217,
	238, 181, 271, 228, 280, 290, 291, 268, 288, 295,
	256, 119, 267, 279, 135, 250, 0, 0, 0, 121,
	277, 263, 193, 167, 168, 120, 0, 234, 144, 152,
	140, 207, 274, 275, 139, 298, 127, 287, 123, 128,
	286, 201, 270, 278, 194, 186, 122, 276, 192, 185,
	173, 148, 159, 225, 183, 226, 160, 197, 196, 198,
	0, 0, 0, 261, 284, 299, 132, 0, 269, 293,
	294, 0, 229, 133, 153, 147, 224, 151, 199, 129,
	162, 258, 172, 182, 233, 297, 214, 240, 136, 283,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 124, 179, 296, 231, 150, 285, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 142, 146, 149,
	155, 158, 161, 163, 164, 165, 170, 184, 188, 189,
	190, 191, 202, 203, 204, 206, 209, 210, 211, 212,
	213, 216, 218, 219, 220, 221, 222, 223, 232, 235,
	242, 243, 244, 245, 246, 247, 249, 252, 253, 254,
	255, 262, 266, 272, 273, 282, 289, 292, 0, 0,
	0, 0, 118, 169, 187, 248, 251, 257, 264, 319,
	320, 321, 237, 174, 175, 208, 0, 0, 0, 0,
	230, 200, 166, 805, 145, 176, 141, 0, 0, 0,
	178, 0, 0, 0, 180, 0, 0, 260, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	322, 0, 0, 0, 0, 227, 0, 265, 157, 177,
	130, 171, 115, 126, 0, 156, 205, 236, 241, 0,
	0, 0, 138, 0, 239, 215, 281, 0, 217, 238,
	181, 271, 228, 280, 290, 291, 268, 288, 295, 256,
	119, 267, 279, 135, 250, 0, 0, 0, 121, 277,
	263, 193, 167, 168, 120, 0, 234, 144, 152, 140,
	207, 274, 275, 139, 298, 127, 287, 123, 128, 286,
	201, 270, 278, 194, 186, 122, 276, 192, 185, 173,
	148, 159, 225, 183, 226, 160, 197, 196, 198, 0,
	0, 0, 261, 284, 299, 132, 0, 269, 293, 294,
	0, 229, 133, 153, 147, 224, 151, 199, 129, 162,
	258, 172, 182, 233, 297, 214, 240, 136, 283, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	124, 179, 296, 231, 150, 285, 0, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 117, 125, 131, 137, 142, 146, 149, 155,
	158, 161, 163, 164, 165, 170, 184, 188, 189, 190,
	191, 202, 203, 204, 206, 209, 210, 211, 212, 213,
	216, 218, 219, 220, 221, 222, 223, 232, 235, 242,
	243, 244, 245, 246, 247, 249, 252, 253, 254, 255,
	262, 266, 272, 273, 282, 289, 292, 0, 0, 0,
	0, 118, 169, 187, 248, 251, 257, 264, 319, 320,
	321, 237, 174, 175, 208, 0, 0, 0, 0, 230,
	200, 166, 0, 145, 176, 141, 0, 0, 0, 178,
	0, 0, 0, 180, 0, 0, 260, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 112, 113, 0,
	802, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 322,
	0, 0, 0, 0, 227, 0, 265, 157, 177, 130,
	171, 115, 126, 0, 156, 205, 236, 241, 0, 0,
	0, 138, 0, 239, 215, 281, 0, 217, 238, 181,
	271, 228, 280, 290, 291, 268, 288, 295, 256, 119,
	267, 279, 135, 250, 0, 0, 0, 121, 277, 263,
	193, 167, 168, 120, 0, 234, 144, 152, 140, 207,
	274, 275, 139, 298, 127, 287, 123, 128, 286, 201,
	270, 278, 194, 186, 122, 276, 192, 185, 173, 148,
	159, 225, 183, 226, 160, 197, 196, 198, 0, 0,
	0, 261, 284, 299, 132, 0, 269, 293, 294, 0,
	229, 133, 153, 147, 224, 151, 199, 129, 162, 258,
	172, 182, 233, 297, 214, 240, 136, 283, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 114, 124,
	179, 296, 231, 150, 285, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 117, 125, 131, 137, 142, 146, 149, 155, 158,
	161, 163, 164, 165, 170, 184, 188, 189, 190, 191,
	202, 203, 204, 206, 209, 210, 211, 212, 213, 216,
	218, 219, 220, 221, 222, 223, 232, 235, 242, 243,
	244, 245, 246, 247, 249, 252, 253, 254, 255, 262,
	266, 272, 273, 282, 289, 292, 0, 0, 0, 0,
	118, 169, 187, 248, 251, 257, 264, 319, 320, 321,
	237, 174, 175, 208, 0, 0, 0, 0, 230, 200,
	166, 0, 145, 176, 841, 0, 0, 0, 178, 0,
	0, 0, 180, 0, 0, 260, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 112, 113, 0, 840,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 322, 0,
	0, 0, 0, 227, 0, 265, 157, 177, 130, 171,
	115, 126, 0, 156, 205, 236, 241, 0, 0, 0,
	138, 0, 239, 215, 281, 0, 217, 238, 181, 271,
	228, 280, 290, 291, 268, 288, 295, 256, 119, 267,
	279, 135, 250, 0, 0, 0, 121, 277, 263, 193,
	167, 168, 120, 0, 234, 144, 152, 140, 207, 274,
	275, 139, 298, 127, 287, 123, 128, 286, 201, 270,
	278, 194, 186, 122, 276, 192, 185, 173, 148, 159,
	225, 183, 226, 160, 197, 196, 198, 0, 0, 0,
	261, 284, 299, 132, 0, 269, 293, 294, 0, 229,
	133, 153, 147, 224, 151, 199, 129, 162, 258, 172,
	182, 233, 297, 214, 240, 136, 283, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 124, 179,
	296, 231, 150, 285, 0, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	117, 125, 131, 137, 142, 146, 149, 155, 158, 161,
	163, 164, 165, 170, 184, 188, 189, 190, 191, 202,
	203, 204, 206, 209, 210, 211, 212, 213, 216, 218,
	219, 220, 221, 222, 223, 232, 235, 242, 243, 244,
	245, 246, 247, 249, 252, 253, 254, 255, 262, 266,
	272, 273, 282, 289, 292, 0, 0, 0, 0, 118,
	169, 187, 248, 251, 257, 264, 319, 320, 321, 237,
	174, 175, 0, 461, 0, 0, 0, 230, 200, 166,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	176, 141, 0, 0, 0, 178, 0, 0, 0, 180,
	0, 0, 260, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 112, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 322, 0, 0, 0, 0,
	227, 0, 265, 157, 177, 130, 171, 115, 126, 0,
	156, 205, 236, 241, 0, 0, 0, 138, 0, 239,
	215, 281, 0, 217, 238, 181, 271, 228, 280, 290,
	291, 268, 288, 295, 256, 119, 267, 279, 135, 250,
	0, 0, 0, 121, 277, 263, 193, 167, 168, 120,
	0, 234, 144, 152, 140, 207, 274, 275, 139, 298,
	127, 287, 123, 128, 286, 201, 270, 278, 194, 186,
	122, 276, 192, 185, 173, 148, 159, 225, 183, 226,
	160, 197, 196, 198, 0, 0, 0, 261, 284, 299,
	132, 0, 269, 293, 294, 0, 229, 133, 153, 147,
	224, 151, 199, 129, 162, 258, 172, 182, 233, 297,
	214, 240, 136, 283, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 114, 124, 179, 296, 231, 150,
	285, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 125, 131,
	137, 142, 146, 149, 155, 158, 161, 163, 164, 165,
	170, 184, 188, 189, 190, 191, 202, 203, 204, 206,
	209, 210, 211, 212, 213, 216, 218, 219, 220, 221,
	222, 223, 232, 235, 242, 243, 244, 245, 246, 247,
	249, 252, 253, 254, 255, 262, 266, 272, 273, 282,
	289, 292, 0, 0, 0, 0, 118, 169, 187, 248,
	251, 257, 264, 319, 320, 321, 237, 174, 175, 208,
	0, 0, 0, 0, 230, 200, 166, 0, 145, 176,
	141, 0, 0, 0, 178, 0, 0, 0, 180, 0,
	0, 260, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 314, 0, 322, 0, 0, 0, 0, 227,
	0, 265, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 0, 0, 0, 138, 0, 239, 215,
	281, 0, 217, 238, 181, 271, 228, 280, 290, 291,
	268, 288, 295, 256, 119, 267, 279, 135, 250, 0,
	0, 0, 121, 277, 263, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 274, 275, 139, 298, 127,
	287, 123, 128, 286, 201, 270, 278, 194, 186, 122,
	276, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 0, 0, 261, 284, 299, 132,
	0, 269, 293, 294, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 258, 172, 182, 233, 297, 214,
	240, 136, 283, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 124, 179, 296, 231, 150, 285,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 247, 249,
	252, 253, 254, 255, 262, 266, 272, 273, 282, 289,
	292, 0, 0, 0, 0, 118, 169, 187, 248, 251,
	257, 264, 319, 320, 321, 237, 174, 175, 208, 0,
	0, 0, 0, 230, 200, 166, 0, 145, 176, 141,
	0, 0, 0, 178, 0, 0, 0, 180, 0, 0,
	260, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 112, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 322, 0, 0, 0, 0, 227, 0,
	265, 157, 177, 130, 171, 115, 126, 0, 156, 205,
	236, 241, 0, 0, 0, 138, 0, 239, 215, 281,
	0, 217, 238, 181, 271, 228, 280, 290, 291, 268,
	288, 295, 256, 119, 267, 279, 135, 250, 0, 0,
	0, 121, 277, 263, 193, 167, 168, 120, 0, 234,
	144, 152, 140, 207, 274, 275, 139, 298, 127, 287,
	123, 128, 286, 201, 270, 278, 194, 186, 122, 276,
	192, 185, 173, 148, 159, 225, 183, 226, 160, 197,
	196, 198, 0, 0, 0, 261, 284, 299, 132, 0,
	269, 293, 294, 0, 229, 133, 153, 147, 224, 151,
	199, 129, 162, 258, 172, 182, 233, 297, 214, 240,
	136, 283, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 124, 179, 296, 231, 150, 285, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 142,
	146, 149, 155, 158, 161, 163, 164, 165, 170, 184,
	188, 189, 190, 191, 202, 203, 204, 206, 209, 210,
	211, 212, 213, 216, 218, 219, 220, 221, 222, 223,
	232, 235, 242, 243, 244, 245, 246, 247, 249, 252,
	253, 254, 255, 262, 266, 272, 273, 282, 289, 292,
	0, 0, 0, 0, 118, 169, 187, 248, 251, 257,
	264, 319, 320, 321, 237, 174, 175, 0, 0, 0,
	0, 0, 230, 200, 166,
}

var yyPact = [...]int{
	2882, -1000, -298, 1201, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1157, 867, -1000, -1000, -1000, -1000,
	-1000, -1000, 454, 13586, 62, 206, -1, 19011, 205, -7,
	19370, -1000, 54, -1000, 40, 19370, 50, -34, -1000, -1000,
	-29, -30, -1000, 11073, -276, -1000, 560, -1000, -1000, -281,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	926, 1137, 1133, 1151, 1201, 1352, -1000, 9616, 149, 149,
	18652, 7801, -1000, -1000, 444, 19370, 189, 19370, -124, 175,
	150, 150, 150, 201, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	196, 19370, 742, 742, 323, -1000, 19370, 145, 742, 145,
	173, 145, 145, -1000, 19370, -1000, 265, -1000, -1000, -1000,
	-1000, -1000, -1000, 19370, 742, 1066, 420, 86, 5141, -1000,
	312, -1000, 5141, 70, 5141, -32, 1168, 63, 16, -1000,
	742, -85, -1000, -1000, -1000, -1000, -1000, -1000, 161, -1000,
	-1000, 19370, -46, 133, 394, -1000, -1000, -1000, -1000, -1000,
	-1000, 708, 623, -1000, 11073, 480, 818, 818, -1000, -1000,
	222, -1000, -1000, 12150, 12150, 12150, 12150, 12150, 12150, 12150,
	12150, 12150, 12509, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 818, 260, -1000,
	10711, 818, 818, 818, 818, 818, 818, 818, 818, 11073,
	818, 818, 818, 818, 818, 818, 818, 818, 818, 818,
	818, 818, 818, 818, 818, 818, -1000, -1000, -249, -275,
	19370, -1000, 19370, 607, 168, 1157, -1000, 867, -1000, -1000,
	-1000, 1071, 11073, 11073, 926, 1015, 9616, -1000, -1000, 1006,
	-1000, -1000, -1000, -1000, 482, 1184, -1000, 13227, 259, 17567,
	16131, 19370, 884, 810, -1000, -1000, 256, 876, 7421, -55,
	-1000, -1000, -1000, 200, 18285, -1000, -1000, -1000, 1065, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 806, 19370,
	-1000, 3543, -1000, 742, 1116, -33, 19370, 742, 459, 742,
	19370, 150, 19370, 5141, 5141, 5141, 75, 106, 107, 19370,
	875, 158, 19370, 1103, 962, 19370, 145, 742, 742, -1000,
	6661, -1000, 5141, 420, -1000, 606, 11073, 5141, 5141, 5141,
	19370, 5141, 5141, -1000, -1000, -1000, 463, 610, -1000, -1000,
	-1000, -1000, -1000, 5141, 5141, -1000, 1179, 456, -1000, -1000,
	-1000, -1000, 11073, 317, -1000, 961, -1000, -1000, -73, 49,
	-1000, 19370, -1000, 1201, -1000, -1000, -1000, -104, -1000, -1000,
	11073, 11073, 11073, 11073, 639, 496, -1000, 388, 12150, 506,
	585, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150,
	12150, 12150, 12150, 12150, 12150, 12150, 719, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 742, -1000, 1197, 817, 817,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 12868,
	-1000, 8168, 6661, 691, 804, 1157, 9616, 9616, 11073, 11073,
	10340, 9978, 9616, 1057, 410, 623, 19370, -1000, -1000, 11791,
	-1000, -1000, -1000, -1000, -1000, 616, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19370, 19370, 9616, 9616, 9616, 9616, 9616,
	742, 742, 742, 773, 544, -1000, -1000, 19370, 1133, 691,
	1006, -1000, 1193, 290, 579, 871, -1000, 567, 1157, 15413,
	920, -1000, 1006, -1000, -1000, -1000, 19370, 496, -1000, -1000,
	17926, -1000, -1000, 6281, 94, 19370, -1000, 869, 956, -1000,
	-1000, -1000, -1000, 1111, 13957, 14324, 15054, 818, -1000, -1000,
	94, 668, 16131, 19370, -1000, -1000, 16131, 19370, 5901, 7041,
	-55, -1000, 747, -1000, -80, -86, 8892, 8530, 253, -1000,
	-1000, -1000, -1000, 4761, 419, 650, 434, -21, -1000, -1000,
	-1000, 882, -1000, 882, 882, 882, 882, 10, 10, 10,
	10, -1000, -1000, -1000, -1000, -1000, 925, 922, -1000, 882,
	882, 882, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	915, 915, 915, 890, 890, 933, 867, 19370, 164, 1109,
	5141, 1101, 5141, -1000, 19370, 152, -1000, -1000, -1000, 19370,
	19370, 19370, 19370, 19370, 214, 19370, 19370, 857, -1000, 19370,
	5141, 19370, -1000, -1000, 251, -1000, -1000, -1000, -1000, -1000,
	623, -1000, -1000, -1000, -1000, -1000, -1000, 19370, -1000, -1000,
	19370, -1000, 17567, -1000, -1000, 19370, 420, 19370, 19370, 623,
	-1000, 601, 19370, -1000, 19370, -1000, 17208, -1000, -1000, -1000,
	-1000, 623, 388, 590, 555, -1000, -1000, 648, -1000, -1000,
	-1000, 1708, -1000, -1000, -1000, -1000, 506, 12150, 12150, 12150,
	297, 1708, 1920, 1150, 1012, 273, 383, 383, 342, 342,
	342, 342, 342, 1119, 1119, -1000, -1000, -1000, 616, -1000,
	-1000, -1000, 616, 9616, 9616, 809, 818, 245, -1000, 926,
	-1000, -1000, -1000, 1133, 799, 799, 540, 698, 356, 1175,
	799, 350, 1171, 799, 799, 9616, -1000, -1000, 424, -1000,
	11073, 616, -1000, 239, -1000, 428, 797, 795, 799, 616,
	616, 799, 799, -256, -1000, 734, -1000, -1000, 622, -1000,
	382, -1000, -1000, 1071, -1000, -1000, 1029, 11073, 11073, 11073,
	-1000, -1000, -1000, 1133, 1154, -1000, 1039, 1037, 1167, 9616,
	16131, 1006, -1000, -1000, -1000, 238, 938, 818, -1000, 19370,
	16131, 16849, 16849, 16131, 16849, -1000, 1000, 999, -1000, 974,
	973, 1041, 19370, -1000, 802, 616, 691, 13957, -1000, -1000,
	16490, -1000, -1000, 246, 818, 9616, 1167, 16131, 699, -1000,
	699, -1000, 234, -1000, -1000, 747, -55, -89, -1000, -1000,
	-1000, -1000, 623, -1000, -1000, 623, -1000, 724, 731, 4381,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 899, 742, -1000,
	1079, 294, 322, 742, 1077, -1000, -1000, -1000, 1058, -1000,
	451, -31, -1000, -1000, 547, 10, 10, -1000, -1000, 253,
	1049, 253, 253, 253, 597, 597, -1000, -1000, -1000, -1000,
	541, -1000, -1000, -1000, 538, -1000, 959, 19370, 1201, 1107,
	19370, 867, -1000, -1000, -1000, -1000, -1000, 302, 302, 295,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 89, 921, -1000, -1000, -1000, -1000, 51, 74, 156,
	-1000, 5141, -1000, 5141, 6661, 456, 420, 895, 456, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 297, 1708, 1649, -1000, 12150, 12150, -1000, -1000,
	799, 799, 9616, 6661, 1157, 1071, -1000, -1000, 93, 719,
	93, 12150, 12150, -1000, 12150, 12150, -1000, -136, 913, 398,
	-1000, 11073, 620, -1000, 6661, -1000, 12150, 12150, -1000, -1000,
	-1000, -1000, -1000, 588, -1000, -1000, -1000, -1000, -1000, 544,
	-1000, -1000, 378, -1000, 817, -1000, 1027, 623, 623, -1000,
	1071, 19370, -1000, -1000, -1000, -1000, 1164, 11073, -1000, 729,
	-1000, 5521, 955, 19370, 818, 1201, 14695, 19370, 821, -1000,
	348, 956, 904, 945, 1281, -1000, -1000, -1000, -1000, 995,
	-1000, 980, -1000, -1000, -1000, -1000, -1000, -1000, 691, -1000,
	-1000, 180, 179, 178, 19370, 616, 1157, 699, -1000, -1000,
	242, -1000, -1000, -106, -81, -1000, -1000, -1000, 4761, -1000,
	4761, 19370, 108, -1000, 742, 742, -1000, -1000, 893, 943,
	12150, -1000, -1000, -1000, 634, 253, 253, -1000, 487, -1000,
	-1000, -1000, 793, -1000, 790, 712, 784, 19370, -1000, 867,
	1105, 1201, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19370,
	-1000, -1000, -1000, -1000, -1000, 19370, -142, 742, 19370, 19370,
	19370, 19370, -1000, -1000, 231, 420, -1000, 420, 19370, 420,
	-1000, 12150, 1708, 1708, -1000, -1000, 616, -1000, 1133, -1000,
	616, 882, 882, -1000, 882, 890, -1000, 882, 30, 882,
	29, 616, 616, 1824, 1808, 1688, 1459, 818, -131, -1000,
	623, 11073, -1000, 957, 929, 587, -1000, 817, -1000, -1000,
	616, -1000, 1155, 1146, 623, -1000, -1000, 1082, 633, 696,
	-1000, -1000, 9254, 782, 228, 780, -1000, 1167, 19370, 11073,
	-1000, -1000, 11073, 888, -1000, 11073, -1000, -1000, -1000, 818,
	818, 818, 780, -1000, 1133, -1000, -1000, -1000, -1000, 4381,
	-1000, 767, -1000, 882, -1000, -1000, -1000, 19370, -17, 1192,
	1708, -1000, -1000, -1000, -1000, -1000, 10, 583, 10, 537,
	-1000, 530, 5141, 1201, 867, -1000, -1000, -1000, -1000, 1084,
	-1000, 6661, -1000, -1000, 880, 932, -1000, -1000, 6661, -1000,
	-1000, 760, -1000, -1000, 1708, -1000, 1071, -1000, -1000, 148,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12150, 12150,
	12150, 12150, 12150, 1133, 568, 623, 12150, 12150, -1000, -1000,
	-1000, -1000, 11073, 11073, 1076, -1000, 818, -1000, 840, 19370,
	19370, -1000, 19370, 1157, -1000, 623, 623, 19370, 623, 15772,
	19370, 19370, 14324, -1000, 227, 19370, -1000, 755, 254, -1000,
	-82, 253, -1000, 253, 627, 619, -1000, 1201, 818, 710,
	-1000, 347, 19370, 19370, -1000, -1000, 19370, -1000, -1000, -1000,
	428, 428, 428, 428, 162, 616, -1000, 428, 428, 623,
	708, 1191, -1000, 818, 1201, 226, -1000, -1000, 1133, 750,
	741, -1000, 741, 741, 246, 227, -1000, 742, 320, 566,
	-1000, 97, 474, 1072, -1000, 1069, -1000, -1000, -1000, -1000,
	-1000, 88, 6661, 4761, 703, -1000, -1000, -1000, -1000, -1000,
	-1000, 616, 83, -150, -1000, -1000, -1000, 19370, 696, 19370,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 529, -1000,
	-1000, 19370, -1000, 563, -1000, -1000, 674, -1000, 19370, -1000,
	-1000, 921, -1000, 1013, -140, -154, 659, -1000, -1000, 879,
	-1000, -1000, 88, 1036, -142, -1000, 1010, -1000, 19370, -1000,
	82, -1000, -148, 670, 80, -151, 937, 818, -156, 935,
	-1000, 1188, 11432, -1000, -1000, 1190, 263, 263, 428, 616,
	-1000, -1000, -1000, 109, 526, -1000, -1000, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]int{
	0, 1497, 1496, 57, 64, 67, 1495, 1492, 1491, 122,
	119, 110, 1489, 1487, 1485, 1484, 1483, 1482, 1481, 1480,
	1479, 1476, 1474, 1473, 1471, 1468, 1467, 1463, 1462, 1461,
	1460, 1459, 1458, 1457, 1207, 1456, 1452, 1451, 1450, 1448,
	114, 1446, 35, 1444, 1443, 1440, 1439, 1438, 1436, 1434,
	1432, 1430, 1429, 1428, 52, 243, 43, 62, 1427, 76,
	1141, 39, 103, 61, 111, 1426, 1421, 38, 1420, 1417,
	80, 1416, 1415, 60, 1414, 1413, 53, 68, 72, 1405,
	8, 59, 1404, 1402, 1401, 1399, 36, 42, 1393, 1389,
	14, 1386, 1383, 106, 1382, 1381, 66, 21, 13, 20,
	17, 1377, 70, 1375, 11, 1374, 65, 1372, 1371, 1367,
	1366, 23, 1365, 63, 1363, 12, 26, 1359, 28, 1358,
	75, 33, 24, 7, 1354, 1350, 22, 89, 54, 71,
	1347, 81, 1346, 1344, 428, 1343, 935, 46, 1342, 1341,
	115, 29, 1340, 77, 83, 1338, 1334, 1331, 1324, 18,
	1055, 1892, 74, 73, 1323, 1322, 1319, 2770, 16, 55,
	19, 1316, 1314, 1313, 34, 521, 41, 1312, 1306, 45,
	1305, 1304, 1303, 1301, 1300, 1299, 1293, 37, 1290, 1289,
	1288, 27, 25, 1287, 1284, 69, 30, 1278, 1277, 1276,
	50, 78, 1275, 1274, 49, 1273, 79, 99, 1271, 1270,
	1267, 1266, 1264, 31, 10, 1261, 15, 1249, 6, 1245,
	32, 1241, 3, 1240, 9, 1238, 5, 0, 1237, 4,
	1235, 1230, 47, 1, 1220, 2, 40, 1219, 1218, 1217,
	86, 1213, 1210, 1682, 1906, 82, 1209, 84,
}

var yyR1 = [...]int{
	0, 231, 232, 232, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 217, 217, 217, 220,
	221, 20, 3, 3, 3, 3, 2, 2, 8, 4,
	5, 5, 9, 9, 43, 43, 44, 44, 10, 11,
	11, 11, 11, 235, 235, 70, 70, 71, 71, 120,
	120, 12, 13, 13, 129, 129, 128, 128, 128, 130,
	130, 130, 130, 167, 167, 132, 132, 131, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 21, 39, 39,
	33, 33, 33, 33, 36, 36, 36, 36, 36, 36,
	52, 52, 52, 219, 219, 218, 216, 216, 215, 215,
	214, 22, 22, 199, 201, 201, 200, 200, 200, 200,
	191, 170, 170, 170, 170, 173, 173, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 172, 172, 172, 172,
	172, 174, 174, 174, 174, 174, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 176, 176, 176, 176, 176, 176, 176, 176, 190,
	190, 177, 177, 185, 185, 186, 186, 186, 183, 183,
	184, 184, 187, 187, 187, 179, 179, 180, 180, 188,
	188, 181, 181, 181, 182, 182, 182, 189, 189, 189,
	189, 189, 178, 178, 192, 192, 209, 209, 208, 208,
	208, 35, 198, 198, 205, 205, 205, 205, 205, 195,
	195, 195, 196, 196, 194, 194, 197, 197, 207, 207,
	206, 193, 193, 210, 210, 210, 210, 224, 225, 223,
	223, 223, 223, 223, 202, 202, 202, 203, 203, 203,
	204, 204, 204, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 213, 211, 211, 212, 212, 16,
	23, 23, 17, 17, 17, 17, 17, 17, 18, 18,
	24, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 138, 138, 140, 140, 136, 136, 139, 139,
	137, 137, 137, 141, 141, 141, 142, 142, 168, 168,
	168, 26, 26, 28, 28, 29, 30, 30, 162, 162,
	163, 163, 31, 32, 45, 45, 45, 45, 45, 45,
	47, 47, 47, 7, 7, 7, 7, 46, 46, 46,
	6, 6, 27, 27, 27, 27, 19, 236, 40, 41,
	41, 42, 42, 42, 49, 49, 49, 48, 48, 48,
	56, 56, 58, 58, 58, 58, 58, 59, 59, 59,
	59, 59, 59, 55, 55, 57, 57, 57, 57, 57,
	154, 154, 154, 153, 153, 61, 61, 62, 62, 63,
	63, 63, 66, 64, 64, 64, 64, 103, 79, 79,
	119, 119, 118, 118, 121, 121, 65, 65, 65, 65,
	67, 67, 68, 68, 69, 69, 161, 161, 160, 160,
	160, 159, 159, 72, 72, 72, 74, 73, 73, 73,
	73, 75, 75, 77, 77, 76, 76, 76, 76, 78,
	80, 80, 80, 80, 80, 81, 81, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 135, 135, 83, 83,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	95, 95, 95, 95, 95, 95, 84, 84, 84, 84,
	84, 84, 84, 54, 54, 96, 96, 96, 230, 230,
	102, 97, 97, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 94, 53,
	53, 91, 91, 91, 91, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 237, 237, 93, 92, 92, 92,
	92, 92, 92, 92, 50, 50, 50, 50, 50, 166,
	166, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 107, 107, 51, 51, 105, 105,
	106, 108, 108, 104, 104, 104, 86, 86, 86, 86,
	86, 86, 86, 86, 88, 88, 88, 109, 109, 110,
	110, 111, 111, 112, 112, 113, 114, 114, 114, 115,
	115, 115, 115, 116, 116, 116, 85, 85, 85, 85,
	117, 117, 117, 117, 122, 122, 98, 98, 100, 100,
	99, 101, 123, 123, 126, 124, 124, 124, 127, 127,
	127, 127, 127, 127, 127, 125, 125, 125, 156, 156,
	156, 133, 133, 143, 143, 144, 144, 134, 134, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	146, 146, 147, 147, 148, 148, 148, 155, 155, 151,
	151, 152, 152, 157, 157, 158, 158, 226, 227, 228,
	228, 229, 229, 229, 34, 37, 37, 38, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 233, 234, 164, 165,
	165, 165,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 2, 4, 8, 6, 7, 4, 6, 5, 8,
	1, 3, 7, 8, 1, 1, 1, 1, 10, 8,
	7, 6, 6, 1, 1, 1, 3, 1, 3, 0,
	4, 3, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 2, 2,
	8, 5, 7, 6, 8, 5, 5, 4, 0, 1,
	4, 5, 7, 4, 5, 5, 4, 4, 4, 3,
	1, 1, 1, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 5, 4, 2, 4, 1, 3, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 3,
	2, 3, 1, 10, 11, 11, 12, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 7, 7, 4, 5,
	4, 4, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 6, 4, 4, 3, 2,
	3, 4, 4, 3, 4, 4, 4, 4, 4, 4,
	3, 2, 7, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 4, 3, 3, 5, 2, 6, 4, 3,
	7, 4, 1, 1, 0, 1, 0, 1, 1, 1,
	0, 2, 2, 0, 2, 2, 0, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 5, 0, 1,
	0, 1, 2, 3, 0, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	5, 3, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 1, 2, 3, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 2, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 2, 1, 3, 3, 3, 3, 3, 7,
	0, 3, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 5, 7, 3,
	0, 5, 4, 5, 5, 0, 2, 1, 3, 3,
	3, 2, 3, 2, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 1, 2,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 3, 2, 1, 1, 1, 1, 4, 1,
	1, 4, 5, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 8, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 5, 4,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 0,
	1, 0, 1, 3, 5, 2, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int{
	-1000, -231, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -24, -25, -26, -28, -29,
	-30, -31, -32, -6, -27, -19, -20, -33, -36, -34,
	-35, -37, -38, -21, -4, -233, 6, 7, -43, -44,
	10, 30, -22, 123, 124, 126, 125, 159, 127, 152,
	53, 173, 174, 176, 177, 178, 179, -47, 157, 158,
	31, 32, 129, 34, -39, 381, 370, 382, 383, 374,
	57, 8, 262, 9, 154, 153, 25, 384, -232, 385,
	-42, 5, -111, 15, -3, -40, -236, -40, -40, -40,
	-40, -40, -199, -201, 57, 96, -148, 133, 77, -131,
	254, 130, 131, -132, 137, -151, 371, 372, 373, -217,
	-150, 60, 61, 62, 272, 145, 304, 305, 364, 173,
	187, 181, 208, 200, 273, 306, 146, 198, 201, 241,
	143, 307, 228, 235, 71, 176, 250, 308, 155, 196,
	192, 29, 309, 281, 190, 27, 310, 237, 213, 311,
	277, 239, 191, 236, 129, 312, 148, 141, 313, 214,
	218, 314, 242, 315, 316, 317, 384, 185, 186, 365,
	318, 144, 244, 212, 375, 376, 28, 142, 33, 274,
	37, 163, 245, 216, 319, 211, 207, 366, 320, 321,
	322, 323, 210, 184, 206, 41, 220, 219, 221, 240,
	383, 203, 324, 325, 326, 149, 327, 193, 18, 328,
	329, 330, 331, 332, 248, 158, 333, 161, 334, 335,
	336, 337, 338, 339, 238, 215, 217, 138, 165, 234,
	382, 276, 340, 246, 189, 341, 150, 374, 162, 157,
	249, 151, 342, 343, 344, 345, 346, 347, 367, 348,
	177, 368, 349, 350, 351, 352, 172, 369, 243, 252,
	40, 225, 353, 183, 370, 140, 354, 174, 169, 230,
	204, 164, 355, 356, 194, 195, 209, 182, 205, 175,
	166, 159, 357, 251, 226, 278, 202, 199, 170, 358,
	167, 168, 359, 231, 232, 171, 275, 247, 197, 227,
	-134, 133, 254, 130, 232, 135, 131, 131, 132, 133,
	-131, 254, 130, 371, 131, -76, -157, -217, -150, 371,
	372, 373, 133, 131, 114, 201, 241, 123, 229, 237,
	-140, 238, 165, -168, 131, -136, 228, 231, 232, 171,
	364, 175, 239, 243, 242, 233, -157, 175, -162, 180,
	-151, 178, -136, -45, 360, 127, -164, -164, 230, 230,
	-164, -97, -60, -82, 80, -87, 29, 23, -86, -83,
	-104, -101, -102, 114, 115, 117, 116, 118, 103, 104,
	111, 81, 119, -91, -89, -90, -92, 64, 63, 72,
	65, 66, 67, 68, 73, 74, 75, -151, -157, -99,
	-233, 47, 48, 263, 264, 265, 266, 271, 267, 83,
	36, 253, 261, 260, 259, 257, 258, 255, 256, 269,
	270, 136, 254, 130, 109, 262, -217, -150, 364, 378,
	-40, 65, -40, -40, 371, -5, -4, -233, 6, 20,
	21, -115, 17, 16, -42, -49, -58, 42, 43, -59,
	21, 35, 46, 44, -41, -57, 105, -60, -157, -134,
	-134, 11, -70, -71, -76, -78, -157, -124, -167, 175,
	-127, 243, 242, -152, -125, -151, -149, 241, 201, 240,
	128, 279, 79, 22, 24, 223, 82, 114, 16, 83,
	113, 263, 123, 51, 280, 255, 256, 253, 265, 266,
	254, 229, 10, 282, 25, 153, 21, 35, 107, 125,
	86, 87, 156, 381, 23, 154, 75, 285, 19, 54,
	11, 13, 286, 287, 14, 136, 135, 98, 132, 49,
	8, 119, 26, 95, 45, 288, 289, 290, 291, 292,
	47, 96, 17, 257, 258, 31, 293, 271, 160, 109,
	52, 38, 80, 294, 295, 73, 296, 76, 55, 77,
	15, 50, 297, 298, 299, 300, 97, 126, 262, 48,
	301, 130, 6, 268, 30, 152, 46, 302, 131, 85,
	269, 270, 134, 74, 5, 137, 32, 9, 53, 56,
	259, 260, 261, 36, 84, 12, 303, 78, -200, 96,
	-191, -217, -76, 132, -76, 262, 133, -144, 136, -144,
	-144, 131, 131, -76, -217, -217, 123, 125, 128, 55,
	-23, -76, -143, 136, -217, -143, 133, -143, -143, -76,
	120, -76, -217, 30, -141, 96, 12, 254, -217, 165,
	131, 166, 133, -165, -233, -152, -195, -217, 8, 132,
	33, 144, -165, 169, 170, -165, -139, -138, 235, 236,
	230, 234, 12, 170, 230, 168, -197, -217, 244, 134,
	-151, -140, -7, -3, -10, -9, -11, 88, -164, -164,
	58, 79, 77, 78, 95, -230, 69, -60, -84, 98,
	80, 96, 97, 82, 100, 99, 110, 103, 104, 105,
	106, 107, 108, 109, 101, 102, 113, 88, 89, 90,
	91, 92, 93, 94, -135, -233, -102, -233, 121, 122,
	-87, -87, -87, -87, -87, -87, -87, -87, -87, -87,
	64, -233, 120, -2, -97, -4, -233, -233, -233, -233,
	-233, -233, -233, -233, -107, -60, -233, -237, -93, -233,
	-237, -93, -237, -93, -237, -233, -237, -93, -237, -93,
	-237, -237, -93, -233, -233, -233, -233, -233, -233, -233,
	366, 367, 379, 380, -76, -76, 64, 133, -111, -3,
	-40, -116, 19, 31, -60, -112, -113, -60, -5, 38,
	-55, -57, -59, 42, 43, 70, 11, -230, -154, -153,
	22, -151, 64, 120, -77, 26, -76, -62, -63, -64,
	-65, -66, -79, -103, -233, -94, -76, -53, 375, 376,
	-76, -70, -235, 58, 11, 56, -235, 58, 120, 58,
	175, -127, -129, -128, 244, 246, 88, 134, -156, -151,
	64, 29, 30, 59, 58, -76, -170, -173, -175, -174,
	-176, -171, -172, 198, 199, 114, 202, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 30, 155, 194,
	195, 196, 197, 214, 215, 216, 217, 218, 219, 220,
	221, 181, 200, 273, 182, 183, 184, 185, 186, 187,
	189, 190, 191, 192, 193, -217, 22, 133, -131, -76,
	-217, 80, -217, -76, -144, -76, -165, -165, -165, 167,
	167, 131, 131, 172, -76, 58, 134, -70, 23, 55,
	-76, -143, -217, -217, -158, -157, -149, -165, -141, 64,
	-60, -165, -165, -165, -76, -165, -165, -196, 11, 98,
	-196, -141, -40, -165, -165, 11, -137, 11, 98, -60,
	-142, 96, 55, 245, -163, 178, -76, 212, 361, 362,
	363, -60, -60, -60, -60, -95, 73, 80, 74, 75,
	69, -87, -96, -99, -102, 69, 98, 96, 97, 82,
	-87, -87, -87, -87, -87, -87, -87, -87, -87, -87,
	-87, -87, -87, -87, -87, -166, -217, 64, -217, -86,
	-86, -151, -56, 21, 35, -55, -152, -158, -149, -42,
	-234, 59, -234, -111, -55, -55, -60, -60, -104, 64,
	-55, -104, 64, -55, -55, -48, 21, 35, -105, -106,
	84, -104, -151, -157, -234, -87, -151, -151, -55, -56,
	-56, -55, -55, -197, -197, -217, -217, 64, -229, -226,
	-220, 61, -76, -115, -234, 9, 98, 58, 18, 58,
	-114, 24, 25, -111, -88, -151, 65, 68, -61, 58,
	11, -59, -76, -153, 105, -158, -120, 161, -76, 30,
	58, -72, -74, -73, -75, 45, 49, 51, 46, 47,
	48, 52, -161, 22, -62, -34, -3, -233, -160, -159,
	22, -157, 64, -160, 161, -233, -120, 56, -62, -76,
	-62, -78, -157, 105, -127, -129, 58, 245, 247, 248,
	55, 76, -60, 55, 76, -60, -182, 113, -202, -203,
	-204, -152, 64, 65, -191, -192, -193, -205, 147, -210,
	138, 140, 137, -194, 148, 132, 28, 59, -187, 73,
	80, -183, 226, -177, 57, -177, -177, -177, -177, -181,
	201, -181, -181, -181, 57, 57, -177, -177, -177, -185,
	57, -185, -185, -186, 57, -186, -155, 56, -3, -76,
	133, 22, -165, 23, -165, -76, -145, 128, 125, 126,
	-213, 124, 223, 201, 71, 29, 15, 263, 161, 278,
	-217, 162, -76, -76, -76, -76, -76, 128, 125, -76,
	-76, -76, -165, -76, 120, -76, -76, -77, -76, -141,
	-157, -157, 64, -76, -151, -46, -151, 64, 73, 74,
	75, -96, -87, -87, -87, -54, 156, 79, -234, -234,
	-55, -55, -233, 120, -5, -115, -234, -234, 58, 56,
	22, 11, 11, -234, 11, 11, -234, -234, -55, -108,
	-106, 86, -60, -234, 120, -234, 58, 58, -234, -234,
	-234, -234, -234, -52, 365, 369, 368, -217, 64, 58,
	-228, -227, -221, 62, 88, -116, 40, -60, -60, -113,
	-115, -133, 19, 11, 36, 36, -81, 12, -57, -62,
	-59, 120, -85, 30, 36, -3, -233, -233, -123, -126,
	-104, -63, -64, -64, -63, -64, 45, 45, 45, 50,
	45, 50, 45, -73, -157, -234, -234, -234, -3, -159,
	-80, 53, 135, 54, -233, -56, -81, -62, -81, -81,
	120, -128, -130, 249, 246, 252, -217, 64, 58, -204,
	88, 57, -217, 28, -194, -194, -197, -197, 28, -179,
	29, 73, -184, 227, 65, -181, -181, -182, 30, -182,
	-182, -182, -190, 64, -190, 65, 65, 55, -151, 22,
	-76, -3, -164, -222, 143, 139, 147, 148, 141, 60,
	61, 62, 132, 28, 138, 140, 161, 137, -222, -146,
	-147, 134, 22, 132, 28, 161, -219, 56, 167, 223,
	167, 134, -165, -165, -158, -137, -141, -119, 57, -137,
	-54, 79, -87, -87, -234, -234, -56, -152, -111, -116,
	-169, 114, 198, 155, 196, 192, 212, 203, 225, 194,
	226, -166, -169, -87, -87, -87, -87, 272, -111, 87,
	-60, 85, -152, -87, -87, 64, -226, 88, -86, 41,
	-116, -76, -109, 13, -60, 105, -122, 55, -123, -98,
	-100, -99, -233, -117, -151, -121, -151, -61, 58, 88,
	-68, -67, 55, 56, -69, 55, -67, 45, 45, 132,
	132, 132, -121, -234, -111, -81, 246, 250, 251, -203,
	-204, -207, -206, -151, -210, -197, -197, 57, -180, 55,
	-87, 59, -182, -182, -217, 114, 59, 58, 59, 58,
	59, 58, -76, -3, 22, -164, -164, -76, -164, -151,
	-216, 275, -218, -217, -151, -151, -151, -76, 120, -141,
	-141, -118, -151, -141, -87, -234, -115, -234, -177, -177,
	-177, -186, -177, 186, -177, 186, -234, -234, 19, 19,
	19, 19, -233, -51, 268, -60, 58, 58, 64, -86,
	-234, -110, 14, 16, 27, -122, 58, -234, -234, 58,
	120, -234, 58, -81, -126, -60, -60, 57, -60, -233,
	-233, -233, -234, -115, 59, 58, -177, -118, -188, 223,
	9, -181, 64, -181, 65, 65, -165, -3, 26, -215,
	-214, -152, 57, 56, -158, 59, 58, -116, -181, -217,
	-87, -87, -87, -87, -87, -115, 64, -87, -87, -60,
	-97, 28, -100, 36, -3, -151, -151, -151, -111, -118,
	-118, -234, -118, -118, -160, -209, -208, 56, 142, 71,
	-206, 59, -189, 138, 28, 137, -90, -182, -182, 59,
	59, -233, 58, 88, -118, -76, -151, -234, -234, -234,
	-234, -50, 98, 275, -234, -234, -234, 9, -98, 120,
	-115, 59, -234, -234, -234, -80, -208, -217, -198, 88,
	64, 150, -178, 71, 28, 28, -211, -212, 161, -214,
	-204, 59, -234, 273, 52, 276, -123, -151, 65, -76,
	64, -234, 58, -151, -219, 41, 274, 277, 57, -212,
	36, -216, 41, -118, 163, 275, 59, 164, 276, -224,
	-225, 55, -233, 277, -225, 55, 10, 9, -87, 160,
	-223, 151, 146, 149, 30, -223, -234, -234, 145, 29,
	73,
}

var yyDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 671, 0, 397, 397, 397, 397,
	397, 397, 0, 744, 727, 0, 0, 0, 0, -2,
	362, 363, 0, 365, -2, 0, 0, -2, 1078, 1078,
	0, 0, 1078, 0, 0, 397, 0, 397, 397, 0,
	1076, 54, -2, 56, 380, 381, 382, 99, 1, 3,
	0, 401, 679, 0, 0, -2, 399, 0, 727, 727,
	0, 0, 88, 89, 0, 0, 0, 1065, 0, 0,
	725, 725, 725, 0, 745, 746, -2, -2, -2, 749,
	750, 36, 37, 38, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	0, 0, 0, 0, 0, 728, 0, 723, 0, 723,
	0, 723, 723, 87, 0, 309, 485, 753, 754, 964,
	1043, 1044, 1065, 0, 0, 0, 353, 0, 1079, 321,
	0, 323, 1079, 0, 1079, 0, 330, 0, 0, 336,
	236, 0, 345, 359, 360, 347, 361, 364, 0, 369,
	372, 0, 344, 0, 0, 379, 392, 393, 1078, 1078,
	396, 41, 541, 497, 0, 504, -2, 0, 543, 544,
	545, 546, 547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 575, 576, 577, 656, 657, 658,
	659, 660, 661, 662, 663, 508, 509, 653, 0, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 644,
	0, 614, 614, 614, 614, 614, 614, 614, 614, 0,
	0, 0, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 221, 765, 0, 0, 671, 50, 0, 397, 402,
	403, 683, 0, 0, 0, 0, 0, -2, -2, 413,
	419, 420, 421, 422, 398, 0, 425, 430, 0, 0,
	0, 0, 0, 0, 65, 67, 485, 71, 0, 1054,
	705, -2, -2, 0, 0, 751, 752, -2, 900, -2,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 0, 0,
	126, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 725, 0, 1079, 1079, 1079, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 0, 723, 0, 0, 308,
	0, 310, 1079, 353, 313, 0, 0, 1079, 1079, 1079,
	0, 1079, 1079, 320, 1080, 1081, 0, 353, 397, 229,
	230, 231, 324, 1079, 1079, 326, 0, 350, 348, 349,
	342, 343, 0, 356, 333, 334, 339, 237, 0, 370,
	373, 0, 391, 383, 384, 385, 386, 0, 394, 395,
	0, 0, 0, 0, 0, 503, 538, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 528,
	529, 530, 531, 532, 505, 0, 519, 0, 0, 0,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 0,
	573, 410, 0, 0, 0, 671, 0, 0, 0, 0,
	0, 0, 0, 407, 0, 645, 0, 598, 606, 0,
	599, 607, 600, 608, 601, 0, 602, 609, 603, 610,
	604, 605, 611, 0, 0, 0, 410, 410, 0, 0,
	236, 236, 0, 109, 761, 766, 767, 0, 679, 0,
	412, 42, 0, 0, 680, 672, 673, 676, 671, 0,
	435, 423, 414, 417, 418, 400, 0, -2, 427, 431,
	0, 433, 434, 0, 69, 0, 484, 0, 437, 439,
	440, 441, 443, 466, 0, 468, 468, 0, -2, -2,
	-2, 0, 0, 0, 63, 64, 0, 0, 0, 0,
	1054, 706, 73, 74, 0, 0, 0, 0, 204, 718,
	719, 720, 716, 254, 0, 0, 192, 188, 132, 133,
	134, 181, 136, 181, 181, 181, 181, 201, 201, 201,
	201, 164, 165, 166, 167, 168, 0, 0, 151, 181,
	181, 181, 155, 171, 172, 173, 174, 175, 176, 177,
	178, 137, 138, 139, 140, 141, 142, 143, 144, 145,
	183, 183, 183, 185, 185, 747, 0, 0, 0, 0,
	1079, 0, 1079, 121, 0, 0, 268, 270, 271, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 724, 0,
	1079, 0, 306, 307, 486, 755, 756, 311, 312, 354,
	355, 314, 315, 316, 317, 318, 319, 0, 232, 233,
	0, 338, 0, 325, 329, 0, 353, 0, 0, 331,
	332, 0, 0, 341, 0, 371, 387, 375, 376, 377,
	378, 542, 498, 499, 500, 502, 520, 0, 522, 524,
	539, 510, 511, 535, 536, 537, 0, 0, 0, 0,
	533, 515, 0, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 562, 629, 630, 0, 560,
	561, 572, 0, 0, 0, 411, 654, 0, -2, 0,
	540, 1077, 700, 679, 0, 0, 0, 0, 545, 656,
	0, 545, 656, 0, 0, 0, 408, 409, 651, 648,
	0, 0, 653, 0, 615, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 103, 106, 107, 108, 759, 762,
	0, 39, 97, 683, 51, 684, 0, 0, 0, 0,
	675, 677, 678, 679, 0, 664, 0, 0, 495, 0,
	0, 415, 48, 432, 428, 0, 0, 0, 483, 0,
	0, 0, 0, 0, 0, 473, 0, 0, 476, 0,
	0, 0, 0, 467, 0, 0, 0, 0, 442, 469,
	0, 471, 472, 490, 990, 410, 495, 0, 495, 66,
	495, 68, 0, 489, 707, 72, 0, 0, 77, 78,
	708, 709, 710, 711, 712, 713, 714, 0, 123, 255,
	257, 260, 261, 262, 127, 128, 129, 0, 0, 242,
	0, 0, 236, 236, 0, 234, 235, 125, 195, 193,
	0, 190, 189, 135, 0, 201, 201, 158, 159, 204,
	0, 204, 204, 204, 0, 0, 152, 153, 154, 146,
	0, 147, 148, 149, 0, 150, 0, 0, 91, 0,
	0, 0, 95, 726, 96, 122, 1078, 0, 0, 739,
	269, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 0, 113, 273, 275, 274, 278, 0, 0, 0,
	300, 1079, 304, 1079, 0, 350, 353, 450, 350, 328,
	351, 352, 357, 335, 367, 390, 388, 389, 521, 523,
	525, 512, 533, 516, 0, 513, 0, 0, 507, 581,
	0, 0, 410, 0, 671, 683, 585, 586, 0, 0,
	0, 0, 0, 622, 0, 0, 623, 0, 671, 0,
	649, 0, 0, 597, 0, 616, 0, 0, 617, 618,
	619, 620, 621, 101, 110, 111, 112, 104, 105, 0,
	764, 760, 0, 40, 0, 44, 0, 681, 682, 674,
	683, 0, 721, 722, 665, 666, 667, 0, 424, 436,
	416, 0, 694, 0, 0, 687, 0, 0, 435, 702,
	0, 438, 462, 464, 0, 459, 474, 475, 477, 0,
	479, 0, 481, 482, 444, 445, 446, 447, 0, 470,
	448, 0, 0, 0, 0, 0, 671, 495, 61, 62,
	0, 75, 76, 0, 0, 82, 205, 206, 0, 258,
	0, 0, 0, 224, 236, 236, 227, 228, 0, 197,
	0, 194, 131, 191, 0, 204, 204, 160, 0, 161,
	162, 163, 0, 179, 0, 0, 0, 0, 748, 0,
	0, 93, 263, 1078, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 292, 293, 1078, 0,
	1078, 740, 741, 742, 743, 0, 116, 0, 0, 0,
	0, 0, 303, 305, 487, 353, 337, 353, 0, 353,
	514, 0, 534, 517, 582, 583, 0, 655, 679, 46,
	0, 181, 181, 634, 181, 185, 637, 181, 639, 181,
	642, 0, 0, 0, 0, 0, 0, 0, 646, 596,
	652, 0, 654, 0, 0, 0, 763, 0, 757, 685,
	44, 45, 669, 0, 496, 429, 52, 0, 694, 686,
	696, 698, 0, 0, 690, 0, 454, 495, 0, 0,
	456, 463, 0, 0, 457, 0, 458, 478, 480, 0,
	0, 0, 0, 578, 679, 60, 79, 80, 81, 256,
	259, 0, 238, 181, 241, 225, 226, 0, 199, 0,
	196, 182, 156, 157, 202, 203, 201, 0, 201, 0,
	186, 0, 1079, 92, 0, 264, 265, 266, 267, 0,
	272, 0, 114, 115, 0, 0, 277, 301, 0, 322,
	340, 0, 452, 327, 518, 584, 683, 587, 631, 201,
	635, 636, 638, 640, 641, 643, 589, 588, 0, 0,
	0, 0, 0, 679, 0, 650, 0, 0, 102, 758,
	43, 49, 0, 0, 0, 53, 0, 699, 0, 0,
	0, 70, 0, 671, 703, 704, 460, 0, 465, 0,
	0, 0, 468, 59, 215, 0, 240, 0, 207, 200,
	0, 204, 180, 204, 0, 0, 90, 94, 0, 117,
	118, 0, 0, 0, 488, 451, 0, 47, 632, 633,
	0, 0, 0, 0, 624, 0, 647, 0, 0, 670,
	668, 0, 697, 0, 689, 692, 691, 455, 679, 0,
	0, 492, 0, 0, 490, 214, 216, 0, 222, 0,
	239, 0, 212, 0, 209, 211, 198, 169, 170, 184,
	187, 0, 0, 0, 0, 279, 453, 590, 592, 591,
	593, 0, 0, 0, 595, 612, 613, 0, 688, 0,
	58, 461, 491, 493, 494, 449, 217, 218, 0, 223,
	220, 0, 130, 0, 208, 210, 0, 295, 0, 119,
	120, 113, 594, 0, 0, 0, 695, 693, 219, 0,
	213, 294, 0, 0, 116, 625, 0, 628, 0, 296,
	0, 276, 626, 0, 0, 0, 243, 0, 0, 244,
	245, 0, 0, 627, 246, 0, 0, 0, 0, 0,
	247, 249, 250, 0, 0, 248, 297, 298, 251, 252,
	253,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 385,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:379
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:384
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:385
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:389
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:423
		{
			setParseTree(yylex, nil)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:429
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:433
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:437
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:449
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:461
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:469
		{
			yyVAL.selStmt = Unionize(yyDollar[2].selStmt, yyDollar[4].selStmt, yyDollar[3].str, yyDollar[5].orderBy, yyDollar[6].limit, yyDollar[7].str)
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:473
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:477
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:500
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:508
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:514
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:522
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:528
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:539
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:551
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
			yyVAL.str = InsertStr
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.str = ReplaceStr
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
			yyVAL.str = UpdateStr
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:577
		{
			yyVAL.str = ReplaceStr
		}
	case 58:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &Update{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), OrderBy: yyDollar[9].orderBy, Limit: yyDollar[10].limit}
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:589
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 60:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:593
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:597
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:601
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:606
		{
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:607
		{
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:611
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:615
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:621
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:625
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:630
		{
			yyVAL.partitions = nil
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:634
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:640
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:646
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:650
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:656
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:670
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:674
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			yyVAL.str = RepeatableRead
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:684
		{
			yyVAL.str = ReadCommitted
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:688
		{
			yyVAL.str = ReadUncommitted
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:692
		{
			yyVAL.str = Serializable
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:698
		{
			yyVAL.str = SessionStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.str = GlobalStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.str = TempStr
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:712
		{
			yyVAL.str = TemporaryStr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.str = MaterializedStr
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:724
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:729
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 90:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:735
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:740
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName(), SelectStatement: yyDollar[5].selStmt}
		}
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:744
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName(), SelectStatement: yyDollar[7].selStmt, OrReplace: true}
		}
	case 93:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:748
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[4].tableName.ToViewName(), SelectStatement: yyDollar[6].selStmt, Modifier: yyDollar[2].str}
		}
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:752
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[6].tableName.ToViewName(), SelectStatement: yyDollar[8].selStmt, OrReplace: true, Modifier: yyDollar[4].str}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:756
		{
			var notExists bool
			if yyDollar[3].byt != 0 {
				notExists = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: notExists}
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:764
		{
			var notExists bool
			if yyDollar[3].byt != 0 {
				notExists = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: notExists}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:774
		{
			yyVAL.statement = &RefreshMaterializedView{ViewName: yyDollar[4].tableName}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:779
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:783
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:789
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:794
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str}
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:799
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str, KeyFilePath: string(yyDollar[6].bytes), KeyEnvVar: string(yyDollar[7].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:804
		{
			yyVAL.statement = &AuthRevoke{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:810
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: yyDollar[5].colIdent.GetRawVal()}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:815
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: string(yyDollar[5].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:820
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:825
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:830
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: string(yyDollar[4].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:835
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.str = InteractiveStr
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:845
		{
			yyVAL.str = ServiceAccountStr
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			yyVAL.str = ServiceAccountStr
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:855
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:859
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:870
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:875
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:886
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:892
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:898
		{
			var notExists bool
			if yyDollar[3].byt != 0 {
				notExists = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: notExists}
			setDDL(yylex, yyVAL.ddl)
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:907
		{
			var notExists bool
			if yyDollar[4].byt != 0 {
				notExists = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[5].tableName, IfNotExists: notExists, Modifier: yyDollar[2].str}
			setDDL(yylex, yyVAL.ddl)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:918
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:925
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:929
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:935
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:940
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:944
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:948
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 130:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:954
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:965
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:976
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1065
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1073
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1136
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1181
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1186
		{
			yyVAL.sqlVal = nil
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1190
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1195
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1199
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1207
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1211
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1217
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1225
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1229
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1234
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1238
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1244
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1252
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1257
		{
			yyVAL.optVal = nil
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1261
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1266
		{
			yyVAL.optVal = nil
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1270
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1275
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1284
		{
			yyVAL.str = ""
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1288
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1297
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1301
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1305
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1310
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1314
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1322
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1326
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1331
		{
			yyVAL.sqlVal = nil
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1335
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1341
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1345
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1351
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1355
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1361
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1365
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1370
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &Sleep{Duration: NewIntVal(yyDollar[2].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1382
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1386
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1392
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1396
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1400
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1404
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1408
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1414
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1418
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1422
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1433
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1439
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1443
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1448
		{
			yyVAL.str = ""
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1452
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1458
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1462
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1468
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1474
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1478
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 243:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1485
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 244:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1489
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 245:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1493
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 246:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1497
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1503
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1509
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1515
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1519
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1523
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1527
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1531
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1536
		{
			yyVAL.str = ""
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1540
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1544
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1552
		{
			yyVAL.str = yyDollar[1].str
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1556
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1560
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1566
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1592
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1597
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 272:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1618
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1630
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1640
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1661
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1704
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1710
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1714
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 297:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1720
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 298:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1724
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1730
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1736
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1740
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1748
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists, Modifier: "table"}
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1756
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1761
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1769
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[5].tableName.ToViewName()}, IfExists: exists, Modifier: yyDollar[2].str}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1777
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1796
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1802
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1807
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1812
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1817
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1822
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1826
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1830
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1834
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1838
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1842
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1846
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1850
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1863
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1871
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1876
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1886
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1894
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1898
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1903
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1907
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1911
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1915
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1919
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1936
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), ShowTablesOpt: showTablesOpt}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1941
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: yyDollar[3].str}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1946
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Comments: Comments(yyDollar[4].bytes2), Type: string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt, Columns: yyDollar[6].columns}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1952
		{
			yyVAL.statement = &Show{Type: "TRANSACTION_ISOLATION_LEVEL"}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1968
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.str = "extended "
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.str = ""
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1982
		{
			yyVAL.str = "full "
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1988
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1992
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1998
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2002
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2006
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2012
		{
			yyVAL.showFilter = nil
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2016
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2020
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2026
		{
			yyVAL.showFilter = nil
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2030
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2036
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = SessionStr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.str = GlobalStr
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2050
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2054
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.statement = &Begin{}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &Begin{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.statement = &Commit{}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2076
		{
			yyVAL.statement = &Rollback{}
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2080
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2085
		{
			yyVAL.empty = struct{}{}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.empty = struct{}{}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2090
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2092
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2097
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2103
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2108
		{
			yyVAL.str = ""
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2112
		{
			yyVAL.str = JSONStr
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2116
		{
			yyVAL.str = TreeStr
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.str = VitessStr
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2124
		{
			yyVAL.str = TraditionalStr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.str = AnalyzeStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2148
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2156
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2165
		{
			yyVAL.str = ""
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.str = ""
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2179
		{
			yyVAL.statement = &DescribeTable{Full: string(yyDollar[2].str), Extended: string(yyDollar[3].str), Table: yyDollar[4].tableName}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2183
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2207
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2211
		{
			setAllowComments(yylex, true)
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2215
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2221
		{
			yyVAL.bytes2 = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2231
		{
			yyVAL.str = UnionStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.str = UnionAllStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2239
		{
			yyVAL.str = UnionDistinctStr
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = ""
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.str = SQLCacheStr
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2257
		{
			yyVAL.str = ""
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.str = DistinctStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2265
		{
			yyVAL.str = DistinctStr
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2270
		{
			yyVAL.selectExprs = nil
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2279
		{
			yyVAL.strs = nil
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2287
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2291
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2295
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.str = SQLCacheStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.str = DistinctStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.str = DistinctStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2317
		{
			yyVAL.str = StraightJoinHint
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2321
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2327
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2331
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2337
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2341
		{
			concatamer := ListArgConcatamer(yyDollar[2].listArgsConcat)
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: NewColIdent(concatamer.String())}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2346
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2354
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2359
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2363
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2367
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2374
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2379
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2383
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2389
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2393
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2404
		{
			yyVAL.tableExpr = &TableValuedFuncTableExpr{FuncExpr: yyDollar[1].expr, As: yyDollar[2].tableIdent}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2410
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2414
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2418
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2422
		{
			exec := yyDollar[2].statement.(*Exec)
			yyVAL.tableExpr = &ExecSubquery{Exec: exec}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2435
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 449:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2439
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2444
		{
			yyVAL.columns = nil
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2448
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2455
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2465
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2482
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2486
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2490
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2494
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2500
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2502
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2506
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2508
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2512
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2517
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2519
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2522
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2526
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2530
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2537
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = JoinStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2547
		{
			yyVAL.str = JoinStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2551
		{
			yyVAL.str = JoinStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2557
		{
			yyVAL.str = StraightJoinStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.str = LeftJoinStr
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2567
		{
			yyVAL.str = LeftOuterJoinStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2571
		{
			yyVAL.str = RightJoinStr
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2575
		{
			yyVAL.str = RightOuterJoinStr
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2581
		{
			yyVAL.str = NaturalJoinStr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2585
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2595
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2599
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2609
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2613
		{
			yyVAL.tableName = TableName{QualifierSecond: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 488:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2617
		{
			yyVAL.tableName = TableName{QualifierThird: yyDollar[1].tableIdent, QualifierSecond: yyDollar[3].tableIdent, Qualifier: yyDollar[5].tableIdent, Name: yyDollar[7].tableIdent}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2623
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2628
		{
			yyVAL.indexHints = nil
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2632
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2636
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2640
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2644
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = nil
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = &UnaryCastConcatamerExpr{Expr: yyDollar[1].expr, CastConcatamer: ListArgConcatamer(yyDollar[2].listArgsConcat)}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2691
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2697
		{
			yyVAL.str = ""
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2701
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2707
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2729
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2733
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2737
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2741
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 518:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2759
		{
			yyVAL.str = IsNullStr
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2763
		{
			yyVAL.str = IsNotNullStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2767
		{
			yyVAL.str = IsTrueStr
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2771
		{
			yyVAL.str = IsNotTrueStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2775
		{
			yyVAL.str = IsFalseStr
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2779
		{
			yyVAL.str = IsNotFalseStr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2785
		{
			yyVAL.str = EqualStr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.str = LessThanStr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.str = GreaterThanStr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2797
		{
			yyVAL.str = LessEqualStr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.str = GreaterEqualStr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.str = NotEqualStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = nil
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2824
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2828
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2832
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2837
		{
			yyVAL.listArgsConcat = []ListArg{ListArg(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2841
		{
			yyVAL.listArgsConcat = append(yyDollar[1].listArgsConcat, ListArg(yyDollar[2].bytes))
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2847
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2857
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2867
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2887
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2963
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2989
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2993
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			inputStr := string(yyDollar[2].bytes)
			stringList := strings.Split(inputStr, " ")
			if len(stringList) != 2 {
				yylex.Error("the interval string '" + inputStr + "' is not valid")
				return 1
			}
			stringExpr := NewStrVal([]byte(stringList[0]))
			yyVAL.expr = &IntervalExpr{Expr: stringExpr, Unit: stringList[1]}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3018
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(yyDollar[1].str), Exprs: yyDollar[3].selectExprs}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3024
		{
			yyVAL.str = JsonArrayElementsTextStr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3028
		{
			yyVAL.str = JsonEachStr
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3046
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3050
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3060
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3064
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3068
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 588:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3072
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 589:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3076
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 590:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3080
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 591:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3084
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 592:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3088
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 593:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 594:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 595:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3108
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3118
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3122
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3126
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3131
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3136
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3141
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3152
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3157
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3161
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3165
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3170
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3175
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3180
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 612:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3184
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 613:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3188
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3198
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3208
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3212
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3216
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3220
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3224
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3228
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3232
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3238
		{
			yyVAL.str = ""
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3242
		{
			yyVAL.str = BooleanModeStr
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3246
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 627:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3250
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3254
		{
			yyVAL.str = QueryExpansionStr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3260
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3264
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3270
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3274
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3278
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3282
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3286
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3290
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3300
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3308
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3312
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3316
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3320
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3325
		{
			yyVAL.expr = nil
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3329
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3334
		{
			yyVAL.str = string("")
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3338
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3344
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3348
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3354
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3359
		{
			yyVAL.expr = nil
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3363
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3369
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3373
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3377
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3383
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3387
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3391
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3395
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3399
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3403
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3407
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3411
		{
			yyVAL.expr = &NullVal{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3417
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3426
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3430
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3435
		{
			yyVAL.exprs = nil
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3439
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3444
		{
			yyVAL.expr = nil
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3448
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3453
		{
			yyVAL.orderBy = nil
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3457
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3463
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3467
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3473
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3478
		{
			yyVAL.str = AscScr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3482
		{
			yyVAL.str = AscScr
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3486
		{
			yyVAL.str = DescScr
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3491
		{
			yyVAL.limit = nil
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3495
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3499
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3503
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3508
		{
			yyVAL.str = ""
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3512
		{
			yyVAL.str = ForUpdateStr
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3516
		{
			yyVAL.str = ShareModeStr
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3529
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3533
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3537
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3541
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3547
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3551
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3555
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3559
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3564
		{
			yyVAL.updateExprs = nil
		}
	case 695:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3568
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3574
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3578
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3584
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3588
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3594
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3600
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3610
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3614
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3620
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3626
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3630
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3635
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3641
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3645
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3649
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3653
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3657
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3661
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3665
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3672
		{
			yyVAL.bytes = []byte("charset")
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3679
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3683
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3687
		{
			yyVAL.expr = &Default{}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3696
		{
			yyVAL.byt = 0
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3698
		{
			yyVAL.byt = 1
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3701
		{
			yyVAL.byt = 0
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3703
		{
			yyVAL.byt = 1
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3706
		{
			yyVAL.str = ""
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3708
		{
			yyVAL.str = IgnoreStr
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3712
		{
			yyVAL.empty = struct{}{}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3714
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3716
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3718
		{
			yyVAL.empty = struct{}{}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3720
		{
			yyVAL.empty = struct{}{}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3722
		{
			yyVAL.empty = struct{}{}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3724
		{
			yyVAL.empty = struct{}{}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3726
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3728
		{
			yyVAL.empty = struct{}{}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3730
		{
			yyVAL.empty = struct{}{}
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3733
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3735
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3737
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3741
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3743
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3746
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3748
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3750
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3753
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3755
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3759
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3763
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3770
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3776
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3780
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3787
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3793
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3799
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3805
		{
			yyVAL.execVarDefOpt = nil
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3807
		{
			rv := yyDollar[1].execVarDef
			yyVAL.execVarDefOpt = &rv
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3813
		{
			yyVAL.execVarDefs = nil
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3815
		{
			yyVAL.execVarDefs = []ExecVarDef{yyDollar[1].execVarDef}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3819
		{
			yyVAL.execVarDefs = append(yyDollar[1].execVarDefs, yyDollar[3].execVarDef)
		}
	case 764:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3826
		{
			yyVAL.statement = NewExec(yyDollar[2].bytes2, yyDollar[3].tableName, yyDollar[4].execVarDefs, yyDollar[5].execVarDefOpt)
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3832
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, TableName{}, true)
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3836
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, yyDollar[3].tableName, false)
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3842
		{
			yyVAL.statement = NewNativeQuery(yyDollar[2].bytes2, string(yyDollar[3].bytes))
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4177
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4186
		{
			decNesting(yylex)
		}
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4191
		{
			skipToEnd(yylex)
		}
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4196
		{
			skipToEnd(yylex)
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4200
		{
			skipToEnd(yylex)
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4204
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
