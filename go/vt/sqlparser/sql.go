// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	execsubquery         *ExecSubquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	execVarDef           ExecVarDef
	execVarDefOpt        *ExecVarDef
	execVarDefs          []ExecVarDef
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688
const AUTH = 57689
const INTERACTIVE = 57690
const LOGIN = 57691
const REVOKE = 57692
const SA = 57693
const SERVICEACCOUNT = 57694
const SLEEP = 57695
const REGISTRY = 57696
const PULL = 57697
const LIST = 57698
const EXEC = 57699
const STACKQL = 57700

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"AUTH",
	"INTERACTIVE",
	"LOGIN",
	"REVOKE",
	"SA",
	"SERVICEACCOUNT",
	"SLEEP",
	"REGISTRY",
	"PULL",
	"LIST",
	"EXEC",
	"STACKQL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	364, 87,
	371, 87,
	-2, 32,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	169, 340,
	170, 340,
	230, 328,
	234, 328,
	235, 328,
	236, 328,
	-2, 326,
	-1, 51,
	134, 350,
	-2, 348,
	-1, 54,
	6, 356,
	8, 356,
	9, 356,
	10, 356,
	57, 356,
	262, 356,
	-2, 328,
	-1, 78,
	38, 386,
	-2, 394,
	-1, 401,
	120, 722,
	-2, 718,
	-1, 402,
	120, 723,
	-2, 719,
	-1, 420,
	38, 387,
	-2, 399,
	-1, 421,
	38, 388,
	-2, 400,
	-1, 444,
	88, 991,
	-2, 78,
	-1, 445,
	88, 901,
	-2, 79,
	-1, 450,
	88, 869,
	-2, 684,
	-1, 452,
	88, 935,
	-2, 686,
	-1, 779,
	56, 60,
	58, 60,
	-2, 64,
	-1, 960,
	120, 725,
	-2, 721,
	-1, 1421,
	5, 643,
	17, 643,
	19, 643,
	31, 643,
	59, 643,
	-2, 426,
}

const yyPrivate = 57344

const yyLast = 18046

var yyAct = [...]int{
	401, 1657, 1460, 1340, 1538, 1667, 345, 1471, 1624, 1245,
	1574, 1401, 617, 1069, 1046, 1434, 746, 1073, 1246, 360,
	702, 1266, 449, 374, 1402, 1116, 1072, 878, 638, 1398,
	77, 3, 1082, 1102, 1413, 1407, 331, 343, 1233, 998,
	413, 97, 1173, 1363, 900, 296, 1317, 1308, 296, 1086,
	792, 1048, 947, 97, 422, 606, 1042, 1031, 751, 756,
	753, 347, 980, 31, 407, 924, 1112, 772, 791, 1024,
	575, 954, 763, 773, 443, 768, 78, 438, 891, 73,
	72, 336, 435, 781, 296, 97, 330, 957, 576, 296,
	715, 296, 75, 332, 740, 741, 335, 446, 33, 34,
	65, 36, 37, 716, 1212, 910, 595, 1214, 1213, 403,
	300, 80, 81, 82, 83, 84, 404, 69, 7, 303,
	738, 739, 38, 57, 58, 306, 60, 310, 6, 5,
	1660, 1644, 1655, 1632, 1652, 1461, 1643, 408, 1380, 405,
	428, 1631, 1494, 580, 1428, 47, 1429, 1430, 386, 64,
	392, 393, 390, 391, 389, 388, 387, 292, 288, 289,
	290, 308, 1064, 1065, 394, 395, 1135, 315, 793, 33,
	794, 65, 36, 37, 1063, 317, 1280, 334, 284, 1279,
	1134, 282, 1281, 286, 333, 632, 99, 100, 101, 633,
	630, 631, 320, 1299, 1095, 1528, 637, 301, 1103, 1485,
	99, 100, 101, 1483, 1342, 324, 322, 908, 326, 625,
	626, 99, 100, 101, 635, 40, 41, 43, 42, 45,
	64, 59, 1133, 1344, 312, 304, 866, 313, 314, 320,
	864, 867, 1654, 305, 307, 317, 1651, 302, 319, 318,
	1625, 1339, 1025, 1618, 46, 68, 67, 1671, 1675, 55,
	56, 44, 1087, 596, 911, 912, 913, 612, 636, 614,
	1343, 582, 865, 1582, 286, 48, 49, 1364, 50, 51,
	52, 53, 868, 1267, 1269, 1130, 1127, 1128, 1575, 1126,
	285, 291, 1345, 296, 587, 588, 871, 855, 296, 1089,
	597, 611, 613, 1577, 296, 640, 340, 1336, 1089, 1424,
	296, 604, 283, 1338, 610, 97, 1423, 619, 1366, 97,
	1422, 97, 1137, 1140, 578, 585, 299, 639, 287, 329,
	1607, 99, 100, 101, 687, 688, 1192, 97, 1600, 664,
	663, 673, 674, 666, 667, 668, 669, 670, 671, 672,
	665, 1103, 592, 675, 1509, 1368, 1468, 1372, 1276, 1367,
	1147, 1365, 1132, 1146, 66, 1268, 1370, 1238, 1202, 644,
	316, 1181, 1630, 1669, 1576, 1369, 1670, 1152, 1668, 787,
	649, 650, 1583, 1581, 1131, 825, 767, 700, 1371, 1373,
	609, 664, 663, 673, 674, 666, 667, 668, 669, 670,
	671, 672, 665, 1088, 1089, 675, 615, 598, 599, 600,
	1189, 602, 1088, 1070, 685, 675, 296, 1337, 1096, 1335,
	589, 1059, 590, 905, 1136, 591, 668, 669, 670, 671,
	672, 665, 901, 1004, 675, 66, 99, 100, 101, 1138,
	87, 97, 892, 296, 296, 296, 687, 688, 1174, 703,
	744, 665, 97, 655, 675, 1616, 1591, 647, 97, 931,
	99, 100, 101, 642, 446, 654, 652, 645, 646, 813,
	652, 1382, 63, 929, 930, 928, 62, 70, 743, 88,
	1411, 620, 655, 1390, 1221, 795, 655, 757, 718, 720,
	722, 724, 726, 728, 729, 648, 574, 745, 981, 857,
	771, 719, 721, 1297, 725, 727, 622, 730, 1088, 608,
	826, 1092, 1620, 1085, 1083, 1601, 1084, 755, 1093, 902,
	687, 688, 760, 1081, 1087, 281, 790, 780, 1635, 893,
	785, 892, 608, 99, 100, 101, 839, 842, 843, 844,
	845, 846, 847, 1534, 848, 849, 850, 851, 852, 827,
	828, 829, 830, 811, 812, 840, 981, 814, 1199, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 831,
	832, 833, 834, 835, 836, 837, 838, 666, 667, 668,
	669, 670, 671, 672, 665, 296, 1676, 675, 1533, 853,
	97, 1312, 856, 607, 858, 296, 296, 97, 97, 97,
	99, 100, 101, 296, 1311, 621, 296, 432, 433, 296,
	876, 877, 1300, 296, 406, 97, 607, 623, 893, 581,
	97, 97, 97, 296, 97, 97, 1637, 1187, 841, 1186,
	1677, 919, 921, 922, 1617, 880, 97, 97, 920, 1166,
	1167, 1168, 1006, 1327, 1554, 1009, 1010, 1531, 653, 654,
	652, 1498, 1388, 296, 1447, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 1309, 655, 64, 99, 100,
	101, 882, 653, 654, 652, 1323, 1324, 1325, 1160, 927,
	1384, 883, 1005, 1216, 1188, 895, 948, 1220, 872, 1000,
	655, 417, 925, 1544, 1653, 950, 1639, 417, 653, 654,
	652, 653, 654, 652, 653, 654, 652, 896, 894, 97,
	1544, 1628, 1588, 583, 584, 624, 655, 627, 1587, 655,
	1443, 1399, 655, 958, 1410, 969, 972, 1544, 417, 1090,
	926, 982, 1053, 960, 782, 951, 952, 1410, 959, 653,
	654, 652, 97, 97, 99, 100, 101, 1326, 949, 639,
	639, 996, 1331, 1328, 1319, 1329, 1322, 655, 1318, 1027,
	703, 1505, 1320, 1321, 64, 97, 99, 100, 101, 74,
	1283, 651, 296, 1234, 964, 97, 1330, 994, 995, 1590,
	296, 1544, 1608, 1544, 1579, 1544, 1543, 1028, 296, 296,
	958, 961, 296, 296, 1001, 1451, 296, 296, 296, 97,
	960, 1028, 965, 966, 1011, 1023, 971, 974, 975, 1284,
	402, 446, 97, 576, 1524, 1523, 990, 991, 1044, 1028,
	880, 1062, 1019, 417, 1074, 1511, 417, 1508, 417, 1453,
	1452, 989, 1449, 1450, 992, 993, 663, 673, 674, 666,
	667, 668, 669, 670, 671, 672, 665, 1021, 1054, 675,
	1234, 98, 1056, 1449, 1448, 297, 1017, 417, 297, 1052,
	1104, 1105, 1106, 98, 1028, 417, 296, 97, 1061, 97,
	778, 1139, 1018, 1060, 1057, 296, 296, 296, 296, 296,
	76, 296, 296, 1077, 1205, 296, 97, 1204, 1118, 651,
	417, 802, 801, 1017, 297, 98, 1410, 782, 1007, 297,
	1645, 297, 296, 870, 788, 296, 1540, 296, 1097, 410,
	296, 783, 296, 296, 33, 294, 1516, 296, 97, 1017,
	97, 1117, 659, 1017, 662, 1439, 1114, 1115, 1414, 1415,
	676, 677, 678, 679, 680, 681, 682, 1351, 660, 661,
	658, 664, 663, 673, 674, 666, 667, 668, 669, 670,
	671, 672, 665, 1287, 437, 675, 784, 1341, 786, 577,
	64, 579, 925, 783, 923, 64, 1157, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 1155, 33, 1113, 1108, 854, 363, 362, 365,
	366, 367, 368, 861, 862, 863, 364, 369, 1107, 1541,
	926, 1120, 1662, 1658, 1169, 1441, 1417, 296, 784, 1399,
	782, 881, 1313, 1561, 906, 1183, 885, 886, 887, 874,
	889, 890, 311, 1420, 986, 1257, 1419, 1254, 1222, 296,
	1258, 33, 897, 898, 64, 408, 1182, 1253, 1227, 296,
	296, 296, 296, 296, 1247, 1255, 1259, 1649, 1037, 1038,
	1256, 296, 1198, 1178, 1179, 1240, 296, 1642, 1392, 1223,
	296, 1241, 754, 1647, 296, 1242, 1033, 1036, 1037, 1038,
	1034, 1232, 1035, 1039, 1196, 1231, 1226, 327, 1304, 747,
	977, 1282, 64, 97, 1237, 1236, 1265, 1235, 800, 1503,
	1296, 748, 1288, 297, 978, 1074, 639, 639, 297, 605,
	1285, 1272, 1622, 1274, 297, 1275, 1248, 1260, 1621, 1251,
	297, 1271, 1559, 1249, 1250, 98, 1252, 1294, 1289, 98,
	1273, 98, 1536, 1277, 1292, 1293, 1303, 423, 1305, 1306,
	1307, 97, 97, 1123, 873, 1041, 414, 98, 411, 412,
	1502, 424, 1301, 1302, 1290, 1291, 423, 1230, 758, 759,
	426, 415, 425, 586, 76, 1229, 1501, 1395, 594, 1234,
	424, 97, 634, 296, 601, 1193, 1310, 420, 421, 426,
	603, 425, 1316, 1190, 673, 674, 666, 667, 668, 669,
	670, 671, 672, 665, 1332, 880, 675, 1664, 1663, 410,
	1347, 899, 97, 761, 1664, 1605, 1529, 1003, 948, 74,
	1043, 29, 79, 71, 1360, 1, 997, 1217, 1348, 1218,
	1362, 1352, 1656, 1219, 999, 1462, 297, 1537, 1129, 1623,
	1349, 1573, 1433, 1353, 1080, 1385, 1071, 86, 573, 85,
	1098, 1099, 1100, 1101, 1615, 960, 1170, 1171, 1172, 296,
	959, 98, 1375, 297, 297, 297, 1109, 1110, 1111, 97,
	1374, 618, 98, 1361, 97, 97, 1079, 1247, 98, 1078,
	1400, 1360, 1359, 1122, 1580, 1124, 1389, 1381, 1527, 1391,
	1091, 1298, 1094, 1440, 1295, 1403, 742, 1619, 808, 806,
	807, 97, 1151, 805, 810, 809, 1491, 804, 309, 441,
	907, 323, 1040, 796, 1409, 97, 1418, 97, 97, 1119,
	762, 639, 639, 770, 89, 779, 1334, 1074, 1333, 1074,
	1125, 904, 628, 629, 1432, 1446, 1425, 683, 1228, 1278,
	447, 1431, 1427, 440, 296, 1444, 1445, 1350, 1405, 1437,
	1438, 1436, 1008, 750, 1500, 1033, 1036, 1037, 1038, 1034,
	1394, 1035, 1039, 1426, 296, 1414, 1415, 1197, 712, 979,
	97, 776, 1463, 97, 97, 97, 296, 346, 918, 361,
	358, 359, 97, 1012, 1455, 1239, 664, 663, 673, 674,
	666, 667, 668, 669, 670, 671, 672, 665, 657, 1456,
	675, 1458, 344, 338, 775, 297, 1032, 1030, 1029, 436,
	98, 1416, 1412, 774, 1016, 297, 297, 98, 98, 98,
	419, 1211, 1493, 297, 1481, 1599, 297, 418, 976, 297,
	54, 1163, 1476, 297, 1469, 98, 1470, 328, 1473, 35,
	98, 98, 98, 297, 98, 98, 427, 1247, 61, 28,
	30, 27, 22, 21, 20, 19, 98, 98, 1499, 1513,
	1504, 18, 97, 24, 17, 803, 16, 15, 593, 39,
	97, 26, 25, 297, 1074, 859, 860, 1526, 14, 1285,
	13, 12, 11, 869, 10, 97, 437, 9, 8, 875,
	4, 643, 97, 23, 701, 2, 0, 1522, 0, 296,
	1512, 1355, 1356, 888, 1539, 0, 0, 0, 0, 0,
	1547, 0, 1530, 0, 1532, 0, 1376, 1377, 0, 1378,
	1379, 880, 0, 1545, 0, 0, 1542, 0, 0, 98,
	0, 1386, 1387, 909, 0, 0, 375, 32, 0, 97,
	97, 0, 97, 1546, 0, 0, 0, 97, 1315, 97,
	97, 97, 296, 1558, 1567, 97, 1568, 1570, 1571, 1403,
	1560, 0, 98, 98, 1553, 0, 1572, 0, 1562, 32,
	1578, 97, 296, 0, 1585, 97, 1586, 1346, 1592, 1584,
	0, 0, 0, 1566, 0, 98, 0, 0, 0, 0,
	0, 0, 297, 0, 0, 98, 0, 0, 0, 0,
	297, 0, 0, 1606, 0, 0, 1614, 0, 297, 297,
	409, 0, 297, 297, 1613, 1403, 297, 297, 297, 98,
	0, 97, 97, 1442, 1612, 1626, 0, 0, 0, 0,
	0, 0, 98, 1539, 1074, 0, 0, 0, 97, 1627,
	0, 0, 1247, 0, 0, 1633, 0, 0, 0, 296,
	0, 0, 1020, 0, 0, 0, 97, 0, 0, 0,
	1026, 0, 1641, 985, 0, 0, 0, 417, 0, 0,
	0, 0, 0, 1055, 1648, 0, 97, 0, 1646, 0,
	0, 1474, 0, 1650, 0, 0, 297, 98, 1661, 98,
	0, 0, 0, 0, 0, 297, 297, 297, 297, 297,
	1672, 297, 297, 0, 0, 297, 98, 664, 663, 673,
	674, 666, 667, 668, 669, 670, 671, 672, 665, 0,
	0, 675, 297, 0, 0, 297, 1497, 297, 0, 0,
	297, 0, 297, 297, 0, 0, 0, 297, 98, 0,
	98, 416, 0, 0, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 1142, 1143, 1144, 1145,
	0, 1148, 1149, 0, 0, 1150, 0, 664, 663, 673,
	674, 666, 667, 668, 669, 670, 671, 672, 665, 0,
	0, 675, 1153, 0, 0, 1154, 0, 770, 1496, 0,
	1156, 0, 0, 0, 0, 0, 0, 1161, 0, 0,
	0, 0, 0, 1478, 1479, 0, 1480, 0, 1490, 1482,
	0, 1484, 0, 0, 0, 1548, 1549, 1550, 1551, 1552,
	0, 0, 0, 1555, 1556, 430, 0, 297, 0, 664,
	663, 673, 674, 666, 667, 668, 669, 670, 671, 672,
	665, 616, 0, 675, 0, 616, 0, 616, 0, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	297, 297, 297, 297, 0, 32, 0, 0, 0, 0,
	0, 297, 0, 0, 1525, 0, 297, 0, 684, 686,
	297, 1535, 0, 0, 297, 0, 337, 1215, 664, 663,
	673, 674, 666, 667, 668, 669, 670, 671, 672, 665,
	0, 0, 675, 98, 0, 0, 0, 0, 0, 699,
	0, 0, 372, 704, 705, 706, 707, 708, 709, 710,
	711, 0, 714, 717, 717, 717, 723, 717, 717, 723,
	717, 731, 732, 733, 734, 735, 736, 737, 1489, 0,
	0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
	0, 98, 98, 96, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 0, 0,
	777, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	0, 98, 0, 297, 0, 0, 1665, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 448, 0, 664,
	663, 673, 674, 666, 667, 668, 669, 670, 671, 672,
	665, 0, 98, 675, 0, 0, 0, 0, 664, 663,
	673, 674, 666, 667, 668, 669, 670, 671, 672, 665,
	0, 0, 675, 0, 664, 663, 673, 674, 666, 667,
	668, 669, 670, 671, 672, 665, 0, 0, 675, 0,
	0, 0, 0, 0, 0, 0, 1175, 0, 0, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 98, 98, 664, 663, 673, 674,
	666, 667, 668, 669, 670, 671, 672, 665, 0, 0,
	675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 616, 98, 98, 1393,
	0, 0, 0, 616, 616, 616, 664, 663, 673, 674,
	666, 667, 668, 669, 670, 671, 672, 665, 0, 0,
	675, 616, 0, 0, 297, 0, 616, 616, 616, 0,
	616, 616, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 616, 616, 297, 656, 0, 0, 0, 0,
	98, 0, 0, 98, 98, 98, 297, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 1454, 0, 0, 0, 0, 0,
	713, 0, 0, 0, 0, 0, 0, 448, 0, 0,
	0, 448, 0, 448, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 641,
	749, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1045, 0, 0, 0, 777, 0,
	0, 0, 777, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	98, 0, 98, 765, 0, 0, 0, 98, 0, 98,
	98, 98, 297, 0, 448, 98, 0, 0, 0, 0,
	797, 0, 0, 0, 0, 962, 963, 0, 0, 0,
	0, 98, 297, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 616, 0, 616, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1002, 0,
	0, 0, 616, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1593, 0, 884, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 914, 915, 916,
	917, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 448, 0, 0, 1180, 0, 0, 409, 448,
	448, 448, 0, 0, 0, 0, 0, 0, 0, 1636,
	0, 0, 0, 0, 0, 0, 0, 448, 0, 0,
	0, 0, 448, 448, 448, 0, 448, 448, 0, 0,
	0, 0, 967, 968, 0, 0, 0, 0, 448, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 777, 0, 0, 0, 0,
	0, 1243, 1244, 0, 0, 777, 777, 777, 777, 777,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1045, 0, 1270, 0, 0, 0, 0, 0,
	777, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 448, 1176, 0, 0, 0, 1177, 0,
	0, 1068, 0, 0, 0, 0, 0, 983, 0, 1184,
	1185, 0, 0, 0, 0, 1191, 0, 0, 1194, 1195,
	0, 0, 0, 0, 987, 988, 1201, 0, 0, 0,
	1203, 0, 0, 1206, 1207, 1208, 1209, 1210, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 765, 0, 0,
	448, 0, 0, 0, 0, 0, 0, 616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 448, 0, 0, 0, 373, 1262, 1263, 1264, 0,
	0, 0, 0, 0, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 0, 0, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 448,
	0, 448, 0, 0, 0, 0, 0, 0, 1404, 0,
	32, 0, 0, 0, 0, 0, 431, 0, 448, 439,
	0, 0, 0, 0, 295, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1162, 0, 1164, 0, 0, 0, 0, 0, 0, 0,
	0, 1224, 1225, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 1357, 1358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	1519, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 448, 0, 0, 295, 0,
	0, 616, 0, 295, 0, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 1383, 0, 1477, 0, 0,
	0, 0, 0, 1314, 448, 0, 0, 0, 1486, 1487,
	0, 0, 1404, 0, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1396, 0, 0, 448, 0, 0, 0, 0, 1506, 1507,
	0, 1510, 0, 1589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 0, 0, 448, 0, 0, 0, 1404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 295,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 448, 0, 983, 0, 0, 1406, 1408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1569, 1408, 0, 0, 0, 0, 0, 0,
	0, 1659, 0, 0, 0, 0, 0, 448, 0, 448,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 1595, 1596, 1597, 1598, 0, 1602, 0, 1603,
	1604, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 0, 1609, 0, 1610, 1611, 0, 1514, 0, 0,
	1515, 0, 0, 1517, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 1464, 1465, 1466, 0, 0,
	0, 0, 0, 1629, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 0, 0, 0, 0, 0, 0, 1638, 0, 0,
	295, 295, 0, 0, 0, 0, 0, 0, 295, 0,
	0, 295, 0, 0, 295, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 0,
	0, 0, 0, 983, 0, 0, 0, 1557, 337, 1673,
	1674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 448, 0, 0, 0, 295, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 448, 0, 0,
	0, 0, 0, 0, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 879, 0, 0, 0,
	431, 431, 0, 0, 431, 431, 431, 0, 0, 0,
	984, 1563, 1564, 0, 1565, 0, 0, 0, 0, 1472,
	0, 1472, 1472, 1472, 0, 0, 0, 1435, 0, 431,
	431, 431, 431, 431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 1594, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 0, 0,
	0, 0, 0, 879, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 295, 1050, 0, 0, 295, 295, 0,
	0, 295, 1058, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 448, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 983, 0,
	1634, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 295, 295, 295, 295, 0, 295, 295, 0, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 0, 0,
	295, 0, 295, 0, 0, 295, 0, 1158, 1159, 0,
	0, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 431, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 295, 295, 295, 295, 295, 0,
	0, 0, 0, 0, 0, 0, 1261, 0, 0, 0,
	0, 295, 0, 0, 0, 1050, 0, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 559, 547,
	0, 504, 562, 476, 494, 570, 495, 498, 535, 461,
	517, 191, 492, 0, 480, 456, 488, 457, 478, 506,
	132, 510, 475, 549, 520, 561, 162, 0, 481, 568,
	164, 526, 0, 241, 179, 0, 0, 0, 508, 551,
	515, 544, 503, 536, 466, 525, 563, 493, 533, 564,
	0, 0, 0, 99, 100, 101, 0, 1075, 1076, 0,
	0, 984, 0, 0, 122, 0, 530, 558, 490, 532,
	534, 572, 455, 527, 295, 459, 462, 569, 554, 484,
	485, 1286, 0, 0, 0, 0, 0, 0, 507, 516,
	541, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	482, 0, 524, 0, 0, 0, 463, 460, 0, 0,
	0, 0, 505, 0, 0, 0, 465, 0, 483, 542,
	0, 453, 141, 546, 553, 502, 298, 557, 500, 499,
	560, 210, 0, 246, 144, 161, 118, 158, 103, 114,
	0, 143, 188, 218, 222, 550, 479, 489, 126, 486,
	220, 198, 262, 523, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 107, 248, 260, 123,
	231, 0, 0, 0, 109, 258, 244, 177, 154, 155,
	108, 0, 216, 131, 139, 128, 190, 255, 256, 127,
	279, 115, 268, 111, 116, 267, 184, 251, 259, 178,
	170, 110, 257, 176, 169, 160, 135, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 458, 0, 242, 265,
	280, 120, 474, 250, 274, 275, 0, 212, 121, 140,
	134, 207, 138, 183, 117, 149, 239, 159, 166, 215,
	278, 197, 221, 124, 264, 240, 470, 473, 468, 469,
	518, 519, 565, 566, 567, 543, 464, 0, 471, 472,
	0, 548, 555, 556, 522, 102, 112, 163, 277, 213,
	137, 266, 454, 467, 130, 477, 0, 0, 491, 496,
	497, 509, 511, 512, 513, 514, 521, 528, 529, 531,
	537, 538, 539, 540, 545, 552, 571, 104, 105, 113,
	119, 125, 129, 133, 136, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 0, 0, 106, 156, 171,
	229, 232, 238, 245, 0, 0, 0, 487, 153, 559,
	547, 0, 504, 562, 476, 494, 570, 495, 498, 535,
	461, 517, 191, 492, 0, 480, 456, 488, 457, 478,
	506, 132, 510, 475, 549, 520, 561, 162, 0, 481,
	568, 164, 526, 0, 241, 179, 0, 0, 0, 508,
	551, 515, 544, 503, 536, 466, 525, 563, 493, 533,
	564, 0, 0, 0, 99, 100, 101, 0, 1075, 1076,
	0, 0, 0, 0, 0, 122, 0, 530, 558, 490,
	532, 534, 572, 455, 527, 0, 459, 462, 569, 554,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 507,
	516, 541, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 482, 0, 524, 0, 0, 0, 463, 460, 0,
	0, 0, 0, 505, 0, 0, 0, 465, 0, 483,
	542, 0, 453, 141, 546, 553, 502, 298, 557, 500,
	499, 560, 210, 0, 246, 144, 161, 118, 158, 103,
	114, 0, 143, 188, 218, 222, 550, 479, 489, 126,
	486, 220, 198, 262, 523, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 107, 248, 260,
	123, 231, 0, 0, 0, 109, 258, 244, 177, 154,
	155, 108, 0, 216, 131, 139, 128, 190, 255, 256,
	127, 279, 115, 268, 111, 116, 267, 184, 251, 259,
	178, 170, 110, 257, 176, 169, 160, 135, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 458, 0, 242,
	265, 280, 120, 474, 250, 274, 275, 0, 212, 121,
	140, 134, 207, 138, 183, 117, 149, 239, 159, 166,
	215, 278, 197, 221, 124, 264, 240, 470, 473, 468,
	469, 518, 519, 565, 566, 567, 543, 464, 0, 471,
	472, 0, 548, 555, 556, 522, 102, 112, 163, 277,
	213, 137, 266, 454, 467, 130, 477, 0, 0, 491,
	496, 497, 509, 511, 512, 513, 514, 521, 528, 529,
	531, 537, 538, 539, 540, 545, 552, 571, 104, 105,
	113, 119, 125, 129, 133, 136, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 106, 156,
	171, 229, 232, 238, 245, 0, 0, 0, 487, 153,
	559, 547, 0, 504, 562, 476, 494, 570, 495, 498,
	535, 461, 517, 191, 492, 0, 480, 456, 488, 457,
	478, 506, 132, 510, 475, 549, 520, 561, 162, 0,
	481, 568, 164, 526, 0, 241, 179, 0, 0, 0,
	508, 551, 515, 544, 503, 536, 466, 525, 563, 493,
	533, 564, 64, 0, 0, 99, 100, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 530, 558,
	490, 532, 534, 572, 455, 527, 0, 459, 462, 569,
	554, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	507, 516, 541, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 482, 0, 524, 0, 0, 0, 463, 460,
	0, 0, 0, 0, 505, 0, 0, 0, 465, 0,
	483, 542, 0, 453, 141, 546, 553, 502, 298, 557,
	500, 499, 560, 210, 0, 246, 144, 161, 118, 158,
	103, 114, 0, 143, 188, 218, 222, 550, 479, 489,
	126, 486, 220, 198, 262, 523, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 107, 248,
	260, 123, 231, 0, 0, 0, 109, 258, 244, 177,
	154, 155, 108, 0, 216, 131, 139, 128, 190, 255,
	256, 127, 279, 115, 268, 111, 116, 267, 184, 251,
	259, 178, 170, 110, 257, 176, 169, 160, 135, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 458, 0,
	242, 265, 280, 120, 474, 250, 274, 275, 0, 212,
	121, 140, 134, 207, 138, 183, 117, 149, 239, 159,
	166, 215, 278, 197, 221, 124, 264, 240, 470, 473,
	468, 469, 518, 519, 565, 566, 567, 543, 464, 0,
	471, 472, 0, 548, 555, 556, 522, 102, 112, 163,
	277, 213, 137, 266, 454, 467, 130, 477, 0, 0,
	491, 496, 497, 509, 511, 512, 513, 514, 521, 528,
	529, 531, 537, 538, 539, 540, 545, 552, 571, 104,
	105, 113, 119, 125, 129, 133, 136, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 0, 0, 106,
	156, 171, 229, 232, 238, 245, 0, 0, 0, 487,
	153, 559, 547, 0, 504, 562, 476, 494, 570, 495,
	498, 535, 461, 517, 191, 492, 0, 480, 456, 488,
	457, 478, 506, 132, 510, 475, 549, 520, 561, 162,
	0, 481, 568, 164, 526, 0, 241, 179, 0, 0,
	0, 508, 551, 515, 544, 503, 536, 466, 525, 563,
	493, 533, 564, 0, 0, 0, 99, 100, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 530,
	558, 490, 532, 534, 572, 455, 527, 0, 459, 462,
	569, 554, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 507, 516, 541, 501, 0, 0, 0, 0, 0,
	0, 1397, 0, 482, 0, 524, 0, 0, 0, 463,
	460, 0, 0, 0, 0, 505, 0, 0, 0, 465,
	0, 483, 542, 0, 453, 141, 546, 553, 502, 298,
	557, 500, 499, 560, 210, 0, 246, 144, 161, 118,
	158, 103, 114, 0, 143, 188, 218, 222, 550, 479,
	489, 126, 486, 220, 198, 262, 523, 200, 219, 165,
	252, 211, 261, 271, 272, 249, 269, 276, 237, 107,
	248, 260, 123, 231, 0, 0, 0, 109, 258, 244,
	177, 154, 155, 108, 0, 216, 131, 139, 128, 190,
	255, 256, 127, 279, 115, 268, 111, 116, 267, 184,
	251, 259, 178, 170, 110, 257, 176, 169, 160, 135,
	146, 208, 167, 209, 147, 181, 180, 182, 0, 458,
	0, 242, 265, 280, 120, 474, 250, 274, 275, 0,
	212, 121, 140, 134, 207, 138, 183, 117, 149, 239,
	159, 166, 215, 278, 197, 221, 124, 264, 240, 470,
	473, 468, 469, 518, 519, 565, 566, 567, 543, 464,
	0, 471, 472, 0, 548, 555, 556, 522, 102, 112,
	163, 277, 213, 137, 266, 454, 467, 130, 477, 0,
	0, 491, 496, 497, 509, 511, 512, 513, 514, 521,
	528, 529, 531, 537, 538, 539, 540, 545, 552, 571,
	104, 105, 113, 119, 125, 129, 133, 136, 142, 145,
	148, 150, 151, 152, 157, 168, 172, 173, 174, 175,
	185, 186, 187, 189, 192, 193, 194, 195, 196, 199,
	201, 202, 203, 204, 205, 206, 214, 217, 223, 224,
	225, 226, 227, 228, 230, 233, 234, 235, 236, 243,
	247, 253, 254, 263, 270, 273, 0, 0, 0, 0,
	106, 156, 171, 229, 232, 238, 245, 0, 0, 0,
	487, 153, 559, 547, 0, 504, 562, 476, 494, 570,
	495, 498, 535, 461, 517, 191, 492, 0, 480, 456,
	488, 457, 478, 506, 132, 510, 475, 549, 520, 561,
	162, 0, 481, 568, 164, 526, 0, 241, 179, 0,
	0, 0, 508, 551, 515, 544, 503, 536, 466, 525,
	563, 493, 533, 564, 0, 0, 0, 99, 100, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	530, 558, 490, 532, 534, 572, 455, 527, 0, 459,
	462, 569, 554, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 507, 516, 541, 501, 0, 0, 0, 0,
	0, 0, 1059, 0, 482, 0, 524, 0, 0, 0,
	463, 460, 0, 0, 0, 0, 505, 0, 0, 0,
	465, 0, 483, 542, 0, 453, 141, 546, 553, 502,
	298, 557, 500, 499, 560, 210, 0, 246, 144, 161,
	118, 158, 103, 114, 0, 143, 188, 218, 222, 550,
	479, 489, 126, 486, 220, 198, 262, 523, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	107, 248, 260, 123, 231, 0, 0, 0, 109, 258,
	244, 177, 154, 155, 108, 0, 216, 131, 139, 128,
	190, 255, 256, 127, 279, 115, 268, 111, 116, 267,
	184, 251, 259, 178, 170, 110, 257, 176, 169, 160,
	135, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	458, 0, 242, 265, 280, 120, 474, 250, 274, 275,
	0, 212, 121, 140, 134, 207, 138, 183, 117, 149,
	239, 159, 166, 215, 278, 197, 221, 124, 264, 240,
	470, 473, 468, 469, 518, 519, 565, 566, 567, 543,
	464, 0, 471, 472, 0, 548, 555, 556, 522, 102,
	112, 163, 277, 213, 137, 266, 454, 467, 130, 477,
	0, 0, 491, 496, 497, 509, 511, 512, 513, 514,
	521, 528, 529, 531, 537, 538, 539, 540, 545, 552,
	571, 104, 105, 113, 119, 125, 129, 133, 136, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 106, 156, 171, 229, 232, 238, 245, 0, 0,
	0, 487, 153, 559, 547, 0, 504, 562, 476, 494,
	570, 495, 498, 535, 461, 517, 191, 492, 0, 480,
	456, 488, 457, 478, 506, 132, 510, 475, 549, 520,
	561, 162, 0, 481, 568, 164, 526, 0, 241, 179,
	0, 0, 0, 508, 551, 515, 544, 503, 536, 466,
	525, 563, 493, 533, 564, 0, 0, 0, 99, 100,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 530, 558, 490, 532, 534, 572, 455, 527, 0,
	459, 462, 569, 554, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 507, 516, 541, 501, 0, 0, 0,
	0, 0, 0, 1022, 0, 482, 0, 524, 0, 0,
	0, 463, 460, 0, 0, 0, 0, 505, 0, 0,
	0, 465, 0, 483, 542, 0, 453, 141, 546, 553,
	502, 298, 557, 500, 499, 560, 210, 0, 246, 144,
	161, 118, 158, 103, 114, 0, 143, 188, 218, 222,
	550, 479, 489, 126, 486, 220, 198, 262, 523, 200,
	219, 165, 252, 211, 261, 271, 272, 249, 269, 276,
	237, 107, 248, 260, 123, 231, 0, 0, 0, 109,
	258, 244, 177, 154, 155, 108, 0, 216, 131, 139,
	128, 190, 255, 256, 127, 279, 115, 268, 111, 116,
	267, 184, 251, 259, 178, 170, 110, 257, 176, 169,
	160, 135, 146, 208, 167, 209, 147, 181, 180, 182,
	0, 458, 0, 242, 265, 280, 120, 474, 250, 274,
	275, 0, 212, 121, 140, 134, 207, 138, 183, 117,
	149, 239, 159, 166, 215, 278, 197, 221, 124, 264,
	240, 470, 473, 468, 469, 518, 519, 565, 566, 567,
	543, 464, 0, 471, 472, 0, 548, 555, 556, 522,
	102, 112, 163, 277, 213, 137, 266, 454, 467, 130,
	477, 0, 0, 491, 496, 497, 509, 511, 512, 513,
	514, 521, 528, 529, 531, 537, 538, 539, 540, 545,
	552, 571, 104, 105, 113, 119, 125, 129, 133, 136,
	142, 145, 148, 150, 151, 152, 157, 168, 172, 173,
	174, 175, 185, 186, 187, 189, 192, 193, 194, 195,
	196, 199, 201, 202, 203, 204, 205, 206, 214, 217,
	223, 224, 225, 226, 227, 228, 230, 233, 234, 235,
	236, 243, 247, 253, 254, 263, 270, 273, 0, 0,
	0, 0, 106, 156, 171, 229, 232, 238, 245, 0,
	0, 0, 487, 153, 559, 547, 0, 504, 562, 476,
	494, 570, 495, 498, 535, 461, 517, 191, 492, 0,
	480, 456, 488, 457, 478, 506, 132, 510, 475, 549,
	520, 561, 162, 0, 481, 568, 164, 526, 0, 241,
	179, 0, 0, 0, 508, 551, 515, 544, 503, 536,
	466, 525, 563, 493, 533, 564, 0, 0, 0, 99,
	100, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 530, 558, 490, 532, 534, 572, 455, 527,
	0, 459, 462, 569, 554, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 507, 516, 541, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 482, 0, 524, 0,
	0, 0, 463, 460, 0, 0, 0, 0, 505, 0,
	0, 0, 465, 0, 483, 542, 0, 453, 141, 546,
	553, 502, 298, 557, 500, 499, 560, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 550, 479, 489, 126, 486, 220, 198, 262, 523,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 458, 0, 242, 265, 280, 120, 474, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 470, 473, 468, 469, 518, 519, 565, 566,
	567, 543, 464, 0, 471, 472, 0, 548, 555, 556,
	522, 102, 112, 163, 277, 213, 137, 266, 454, 467,
	130, 477, 0, 0, 491, 496, 497, 509, 511, 512,
	513, 514, 521, 528, 529, 531, 537, 538, 539, 540,
	545, 552, 571, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 106, 156, 171, 229, 232, 238, 245,
	0, 0, 0, 487, 153, 559, 547, 0, 504, 562,
	476, 494, 570, 495, 498, 535, 461, 517, 191, 492,
	0, 480, 456, 488, 457, 478, 506, 132, 510, 475,
	549, 520, 561, 162, 0, 481, 568, 164, 526, 0,
	241, 179, 0, 0, 0, 508, 551, 515, 544, 503,
	536, 466, 525, 563, 493, 533, 564, 0, 0, 0,
	99, 100, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 530, 558, 490, 532, 534, 572, 455,
	527, 0, 459, 462, 569, 554, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 507, 516, 541, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 482, 0, 524,
	0, 0, 0, 463, 460, 0, 0, 0, 0, 505,
	0, 0, 0, 465, 0, 483, 542, 0, 453, 141,
	546, 553, 502, 298, 557, 500, 499, 560, 210, 0,
	246, 144, 161, 118, 158, 103, 114, 0, 143, 188,
	218, 222, 550, 479, 489, 126, 486, 220, 198, 262,
	523, 200, 219, 165, 252, 211, 261, 271, 272, 249,
	269, 276, 237, 107, 248, 260, 123, 231, 0, 0,
	0, 109, 258, 244, 177, 154, 155, 108, 0, 216,
	131, 139, 128, 190, 255, 256, 127, 279, 115, 268,
	111, 451, 267, 184, 251, 259, 178, 170, 110, 257,
	176, 169, 160, 135, 146, 208, 167, 209, 147, 181,
	180, 182, 0, 458, 0, 242, 265, 280, 120, 474,
	250, 274, 275, 0, 212, 121, 140, 134, 207, 138,
	452, 450, 149, 239, 159, 166, 215, 278, 197, 221,
	124, 264, 240, 470, 473, 468, 469, 518, 519, 565,
	566, 567, 543, 464, 0, 471, 472, 0, 548, 555,
	556, 522, 102, 112, 163, 277, 213, 137, 266, 454,
	467, 130, 477, 0, 0, 491, 496, 497, 509, 511,
	512, 513, 514, 521, 528, 529, 531, 537, 538, 539,
	540, 545, 552, 571, 104, 105, 113, 119, 125, 129,
	133, 136, 142, 145, 148, 150, 151, 152, 157, 168,
	172, 173, 174, 175, 185, 186, 187, 189, 192, 193,
	194, 195, 196, 199, 201, 202, 203, 204, 205, 206,
	214, 217, 223, 224, 225, 226, 227, 228, 230, 233,
	234, 235, 236, 243, 247, 253, 254, 263, 270, 273,
	0, 0, 0, 0, 106, 156, 171, 229, 232, 238,
	245, 0, 0, 0, 487, 153, 559, 547, 0, 504,
	562, 476, 494, 570, 495, 498, 535, 461, 517, 191,
	492, 0, 480, 456, 488, 457, 478, 506, 132, 510,
	475, 549, 520, 561, 162, 0, 481, 568, 164, 526,
	0, 241, 179, 0, 0, 0, 508, 551, 515, 544,
	503, 536, 466, 525, 563, 493, 533, 564, 0, 0,
	0, 99, 100, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 530, 558, 490, 532, 534, 572,
	455, 527, 0, 459, 462, 569, 554, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 507, 516, 541, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 482, 0,
	524, 0, 0, 0, 463, 460, 0, 0, 0, 0,
	505, 0, 0, 0, 465, 0, 483, 542, 0, 453,
	141, 546, 553, 502, 298, 557, 500, 499, 560, 210,
	0, 246, 144, 161, 118, 158, 103, 114, 0, 143,
	188, 218, 222, 550, 479, 489, 126, 486, 220, 198,
	262, 523, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 107, 248, 789, 123, 231, 0,
	0, 0, 109, 258, 244, 177, 154, 155, 108, 0,
	216, 131, 139, 128, 190, 255, 256, 127, 279, 115,
	268, 111, 451, 267, 184, 251, 259, 178, 170, 110,
	257, 176, 169, 160, 135, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 458, 0, 242, 265, 280, 120,
	474, 250, 274, 275, 0, 212, 121, 140, 134, 207,
	138, 452, 450, 149, 239, 159, 166, 215, 278, 197,
	221, 124, 264, 240, 470, 473, 468, 469, 518, 519,
	565, 566, 567, 543, 464, 0, 471, 472, 0, 548,
	555, 556, 522, 102, 112, 163, 277, 213, 137, 266,
	454, 467, 130, 477, 0, 0, 491, 496, 497, 509,
	511, 512, 513, 514, 521, 528, 529, 531, 537, 538,
	539, 540, 545, 552, 571, 104, 105, 113, 119, 125,
	129, 133, 136, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 0, 0, 106, 156, 171, 229, 232,
	238, 245, 0, 0, 0, 487, 153, 559, 547, 0,
	504, 562, 476, 494, 570, 495, 498, 535, 461, 517,
	191, 492, 0, 480, 456, 488, 457, 478, 506, 132,
	510, 475, 549, 520, 561, 162, 0, 481, 568, 164,
	526, 0, 241, 179, 0, 0, 0, 508, 551, 515,
	544, 503, 536, 466, 525, 563, 493, 533, 564, 0,
	0, 0, 99, 100, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 530, 558, 490, 532, 534,
	572, 455, 527, 0, 459, 462, 569, 554, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 507, 516, 541,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 482,
	0, 524, 0, 0, 0, 463, 460, 0, 0, 0,
	0, 505, 0, 0, 0, 465, 0, 483, 542, 0,
	453, 141, 546, 553, 502, 298, 557, 500, 499, 560,
	210, 0, 246, 144, 161, 118, 158, 103, 114, 0,
	143, 188, 218, 222, 550, 479, 489, 126, 486, 220,
	198, 262, 523, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 107, 248, 442, 123, 231,
	0, 0, 0, 109, 258, 244, 177, 154, 155, 108,
	0, 216, 131, 139, 128, 190, 255, 256, 127, 279,
	115, 268, 111, 451, 267, 184, 251, 259, 178, 170,
	110, 257, 176, 169, 160, 135, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 458, 0, 242, 265, 280,
	120, 474, 250, 274, 275, 0, 212, 121, 140, 134,
	207, 138, 452, 450, 445, 444, 159, 166, 215, 278,
	197, 221, 124, 264, 240, 470, 473, 468, 469, 518,
	519, 565, 566, 567, 543, 464, 0, 471, 472, 0,
	548, 555, 556, 522, 102, 112, 163, 277, 213, 137,
	266, 454, 467, 130, 477, 0, 0, 491, 496, 497,
	509, 511, 512, 513, 514, 521, 528, 529, 531, 537,
	538, 539, 540, 545, 552, 571, 104, 105, 113, 119,
	125, 129, 133, 136, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 106, 156, 171, 229,
	232, 238, 245, 0, 0, 191, 487, 153, 955, 0,
	342, 0, 0, 0, 132, 0, 341, 0, 0, 0,
	162, 0, 956, 385, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 99, 100, 101,
	363, 362, 365, 366, 367, 368, 0, 0, 122, 364,
	369, 370, 371, 0, 0, 0, 0, 339, 356, 0,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 429, 0, 0, 0, 399, 0, 355, 0,
	0, 348, 349, 351, 350, 352, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 398, 0, 0,
	298, 0, 0, 396, 0, 210, 0, 246, 144, 161,
	118, 158, 103, 114, 0, 143, 188, 218, 222, 0,
	0, 0, 126, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	107, 248, 260, 123, 231, 0, 0, 0, 109, 258,
	244, 177, 154, 155, 108, 0, 216, 131, 139, 128,
	190, 255, 256, 127, 279, 115, 268, 111, 116, 267,
	184, 251, 259, 178, 170, 110, 257, 176, 169, 160,
	135, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 120, 0, 250, 274, 275,
	0, 212, 121, 140, 134, 207, 138, 183, 117, 149,
	239, 159, 166, 215, 278, 197, 221, 124, 264, 240,
	386, 397, 392, 393, 390, 391, 389, 388, 387, 400,
	378, 379, 380, 381, 383, 0, 394, 395, 382, 102,
	112, 163, 277, 213, 137, 266, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 113, 119, 125, 129, 133, 136, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 106, 156, 171, 229, 232, 238, 245, 191, 0,
	0, 0, 153, 342, 0, 0, 0, 132, 0, 341,
	0, 0, 0, 162, 0, 0, 385, 164, 0, 0,
	241, 179, 0, 0, 0, 0, 0, 376, 377, 0,
	0, 0, 0, 0, 0, 1066, 0, 64, 0, 0,
	99, 100, 101, 363, 362, 365, 366, 367, 368, 0,
	0, 122, 364, 369, 370, 371, 1067, 0, 0, 0,
	339, 356, 0, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 354, 0, 0, 0, 0, 399,
	0, 355, 0, 0, 348, 349, 351, 350, 352, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	398, 0, 0, 298, 0, 0, 396, 0, 210, 0,
	246, 144, 161, 118, 158, 103, 114, 0, 143, 188,
	218, 222, 0, 0, 0, 126, 0, 220, 198, 262,
	0, 200, 219, 165, 252, 211, 261, 271, 272, 249,
	269, 276, 237, 107, 248, 260, 123, 231, 0, 0,
	0, 109, 258, 244, 177, 154, 155, 108, 0, 216,
	131, 139, 128, 190, 255, 256, 127, 279, 115, 268,
	111, 116, 267, 184, 251, 259, 178, 170, 110, 257,
	176, 169, 160, 135, 146, 208, 167, 209, 147, 181,
	180, 182, 0, 0, 0, 242, 265, 280, 120, 0,
	250, 274, 275, 0, 212, 121, 140, 134, 207, 138,
	183, 117, 149, 239, 159, 166, 215, 278, 197, 221,
	124, 264, 240, 386, 397, 392, 393, 390, 391, 389,
	388, 387, 400, 378, 379, 380, 381, 383, 0, 394,
	395, 382, 102, 112, 163, 277, 213, 137, 266, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 113, 119, 125, 129,
	133, 136, 142, 145, 148, 150, 151, 152, 157, 168,
	172, 173, 174, 175, 185, 186, 187, 189, 192, 193,
	194, 195, 196, 199, 201, 202, 203, 204, 205, 206,
	214, 217, 223, 224, 225, 226, 227, 228, 230, 233,
	234, 235, 236, 243, 247, 253, 254, 263, 270, 273,
	0, 0, 0, 0, 106, 156, 171, 229, 232, 238,
	245, 191, 0, 0, 0, 153, 342, 0, 0, 0,
	132, 0, 341, 0, 0, 0, 162, 0, 0, 385,
	164, 0, 0, 241, 179, 0, 0, 0, 0, 0,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 417, 99, 100, 101, 363, 362, 365, 366,
	367, 368, 0, 0, 122, 364, 369, 370, 371, 0,
	0, 0, 0, 339, 356, 0, 384, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 399, 0, 355, 0, 0, 348, 349, 351,
	350, 352, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 398, 0, 0, 298, 0, 0, 396,
	0, 210, 0, 246, 144, 161, 118, 158, 103, 114,
	0, 143, 188, 218, 222, 0, 0, 0, 126, 0,
	220, 198, 262, 0, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 107, 248, 260, 123,
	231, 0, 0, 0, 109, 258, 244, 177, 154, 155,
	108, 0, 216, 131, 139, 128, 190, 255, 256, 127,
	279, 115, 268, 111, 116, 267, 184, 251, 259, 178,
	170, 110, 257, 176, 169, 160, 135, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 0, 0, 242, 265,
	280, 120, 0, 250, 274, 275, 0, 212, 121, 140,
	134, 207, 138, 183, 117, 149, 239, 159, 166, 215,
	278, 197, 221, 124, 264, 240, 386, 397, 392, 393,
	390, 391, 389, 388, 387, 400, 378, 379, 380, 381,
	383, 0, 394, 395, 382, 102, 112, 163, 277, 213,
	137, 266, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 113,
	119, 125, 129, 133, 136, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 0, 0, 106, 156, 171,
	229, 232, 238, 245, 191, 0, 0, 0, 153, 342,
	0, 0, 0, 132, 0, 341, 0, 0, 0, 162,
	0, 0, 385, 164, 0, 0, 241, 179, 0, 0,
	0, 0, 0, 376, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 99, 100, 101, 363,
	362, 365, 366, 367, 368, 0, 0, 122, 364, 369,
	370, 371, 0, 0, 0, 0, 339, 356, 0, 384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 429, 0, 0, 0, 399, 0, 355, 0, 0,
	348, 349, 351, 350, 352, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 398, 0, 0, 298,
	0, 0, 396, 0, 210, 0, 246, 144, 161, 118,
	158, 103, 114, 0, 143, 188, 218, 222, 0, 0,
	0, 126, 0, 220, 198, 262, 0, 200, 219, 165,
	252, 211, 261, 271, 272, 249, 269, 276, 237, 107,
	248, 260, 123, 231, 0, 0, 0, 109, 258, 244,
	177, 154, 155, 108, 0, 216, 131, 139, 128, 190,
	255, 256, 127, 279, 115, 268, 111, 116, 267, 184,
	251, 259, 178, 170, 110, 257, 176, 169, 160, 135,
	146, 208, 167, 209, 147, 181, 180, 182, 0, 0,
	0, 242, 265, 280, 120, 0, 250, 274, 275, 0,
	212, 121, 140, 134, 207, 138, 183, 117, 149, 239,
	159, 166, 215, 278, 197, 221, 124, 264, 240, 386,
	397, 392, 393, 390, 391, 389, 388, 387, 400, 378,
	379, 380, 381, 383, 0, 394, 395, 382, 102, 112,
	163, 277, 213, 137, 266, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 113, 119, 125, 129, 133, 136, 142, 145,
	148, 150, 151, 152, 157, 168, 172, 173, 174, 175,
	185, 186, 187, 189, 192, 193, 194, 195, 196, 199,
	201, 202, 203, 204, 205, 206, 214, 217, 223, 224,
	225, 226, 227, 228, 230, 233, 234, 235, 236, 243,
	247, 253, 254, 263, 270, 273, 0, 0, 0, 0,
	106, 156, 171, 229, 232, 238, 245, 191, 0, 0,
	0, 153, 342, 0, 0, 0, 132, 0, 341, 0,
	0, 0, 162, 0, 0, 385, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 376, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 99,
	100, 101, 363, 973, 365, 366, 367, 368, 0, 0,
	122, 364, 369, 370, 371, 0, 0, 0, 0, 339,
	356, 0, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 429, 0, 0, 0, 399, 0,
	355, 0, 0, 348, 349, 351, 350, 352, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 398,
	0, 0, 298, 0, 0, 396, 0, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 0, 0, 0, 126, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 120, 0, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 386, 397, 392, 393, 390, 391, 389, 388,
	387, 400, 378, 379, 380, 381, 383, 0, 394, 395,
	382, 102, 112, 163, 277, 213, 137, 266, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 106, 156, 171, 229, 232, 238, 245,
	191, 0, 0, 0, 153, 342, 0, 0, 0, 132,
	0, 341, 0, 0, 0, 162, 0, 0, 385, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 99, 100, 101, 363, 970, 365, 366, 367,
	368, 0, 0, 122, 364, 369, 370, 371, 0, 0,
	0, 0, 339, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 429, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 398, 0, 0, 298, 0, 0, 396, 0,
	210, 0, 246, 144, 161, 118, 158, 103, 114, 0,
	143, 188, 218, 222, 0, 0, 0, 126, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 107, 248, 260, 123, 231,
	0, 0, 0, 109, 258, 244, 177, 154, 155, 108,
	0, 216, 131, 139, 128, 190, 255, 256, 127, 279,
	115, 268, 111, 116, 267, 184, 251, 259, 178, 170,
	110, 257, 176, 169, 160, 135, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	120, 0, 250, 274, 275, 0, 212, 121, 140, 134,
	207, 138, 183, 117, 149, 239, 159, 166, 215, 278,
	197, 221, 124, 264, 240, 386, 397, 392, 393, 390,
	391, 389, 388, 387, 400, 378, 379, 380, 381, 383,
	0, 394, 395, 382, 102, 112, 163, 277, 213, 137,
	266, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 113, 119,
	125, 129, 133, 136, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 410, 0, 0, 0, 106, 156, 171, 229,
	232, 238, 245, 0, 191, 0, 0, 153, 0, 342,
	0, 0, 0, 132, 0, 341, 0, 0, 0, 162,
	0, 0, 385, 164, 0, 0, 241, 179, 0, 0,
	0, 0, 0, 376, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 99, 100, 101, 363,
	362, 365, 366, 367, 368, 0, 0, 122, 364, 369,
	370, 371, 0, 0, 0, 0, 339, 356, 0, 384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 0, 0, 399, 0, 355, 0, 0,
	348, 349, 351, 350, 352, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 398, 0, 0, 298,
	0, 0, 396, 0, 210, 0, 246, 144, 161, 118,
	158, 103, 114, 0, 143, 188, 218, 222, 0, 0,
	0, 126, 0, 220, 198, 262, 0, 200, 219, 165,
	252, 211, 261, 271, 272, 249, 269, 276, 237, 107,
	248, 260, 123, 231, 0, 0, 0, 109, 258, 244,
	177, 154, 155, 108, 0, 216, 131, 139, 128, 190,
	255, 256, 127, 279, 115, 268, 111, 116, 267, 184,
	251, 259, 178, 170, 110, 257, 176, 169, 160, 135,
	146, 208, 167, 209, 147, 181, 180, 182, 0, 0,
	0, 242, 265, 280, 120, 0, 250, 274, 275, 0,
	212, 121, 140, 134, 207, 138, 183, 117, 149, 239,
	159, 166, 215, 278, 197, 221, 124, 264, 240, 386,
	397, 392, 393, 390, 391, 389, 388, 387, 400, 378,
	379, 380, 381, 383, 0, 394, 395, 382, 102, 112,
	163, 277, 213, 137, 266, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 113, 119, 125, 129, 133, 136, 142, 145,
	148, 150, 151, 152, 157, 168, 172, 173, 174, 175,
	185, 186, 187, 189, 192, 193, 194, 195, 196, 199,
	201, 202, 203, 204, 205, 206, 214, 217, 223, 224,
	225, 226, 227, 228, 230, 233, 234, 235, 236, 243,
	247, 253, 254, 263, 270, 273, 0, 0, 0, 0,
	106, 156, 171, 229, 232, 238, 245, 191, 0, 0,
	0, 153, 342, 0, 0, 0, 132, 0, 341, 0,
	0, 0, 162, 0, 0, 385, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 376, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 99,
	100, 101, 363, 362, 365, 366, 367, 368, 0, 0,
	122, 364, 369, 370, 371, 0, 0, 0, 0, 339,
	356, 0, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 0, 0, 399, 0,
	355, 0, 0, 348, 349, 351, 350, 352, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 398,
	0, 0, 298, 0, 0, 396, 0, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 0, 0, 0, 126, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 120, 0, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 386, 397, 392, 393, 390, 391, 389, 388,
	387, 400, 378, 379, 380, 381, 383, 0, 394, 395,
	382, 102, 112, 163, 277, 213, 137, 266, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 191, 0, 106, 156, 171, 229, 232, 238, 245,
	132, 0, 0, 0, 153, 0, 162, 0, 0, 385,
	164, 0, 0, 241, 179, 0, 0, 0, 0, 0,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 99, 100, 101, 363, 362, 365, 366,
	367, 368, 0, 0, 122, 364, 369, 370, 371, 0,
	0, 0, 0, 0, 356, 0, 384, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 399, 0, 355, 0, 0, 348, 349, 351,
	350, 352, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 398, 0, 0, 298, 0, 0, 396,
	0, 210, 0, 246, 144, 161, 118, 158, 103, 114,
	0, 143, 188, 218, 222, 0, 0, 0, 126, 0,
	220, 198, 262, 1666, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 107, 248, 260, 123,
	231, 0, 0, 0, 109, 258, 244, 177, 154, 155,
	108, 0, 216, 131, 139, 128, 190, 255, 256, 127,
	279, 115, 268, 111, 116, 267, 184, 251, 259, 178,
	170, 110, 257, 176, 169, 160, 135, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 0, 0, 242, 265,
	280, 120, 0, 250, 274, 275, 0, 212, 121, 140,
	134, 207, 138, 183, 117, 149, 239, 159, 166, 215,
	278, 197, 221, 124, 264, 240, 386, 397, 392, 393,
	390, 391, 389, 388, 387, 400, 378, 379, 380, 381,
	383, 0, 394, 395, 382, 102, 112, 163, 277, 213,
	137, 266, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 113,
	119, 125, 129, 133, 136, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 191, 0, 106, 156, 171,
	229, 232, 238, 245, 132, 0, 0, 0, 153, 0,
	162, 0, 0, 385, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 417, 99, 100, 101,
	363, 362, 365, 366, 367, 368, 0, 0, 122, 364,
	369, 370, 371, 0, 0, 0, 0, 0, 356, 0,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 399, 0, 355, 0,
	0, 348, 349, 351, 350, 352, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 398, 0, 0,
	298, 0, 0, 396, 0, 210, 0, 246, 144, 161,
	118, 158, 103, 114, 0, 143, 188, 218, 222, 0,
	0, 0, 126, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	107, 248, 260, 123, 231, 0, 0, 0, 109, 258,
	244, 177, 154, 155, 108, 0, 216, 131, 139, 128,
	190, 255, 256, 127, 279, 115, 268, 111, 116, 267,
	184, 251, 259, 178, 170, 110, 257, 176, 169, 160,
	135, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 120, 0, 250, 274, 275,
	0, 212, 121, 140, 134, 207, 138, 183, 117, 149,
	239, 159, 166, 215, 278, 197, 221, 124, 264, 240,
	386, 397, 392, 393, 390, 391, 389, 388, 387, 400,
	378, 379, 380, 381, 383, 0, 394, 395, 382, 102,
	112, 163, 277, 213, 137, 266, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 113, 119, 125, 129, 133, 136, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 191,
	0, 106, 156, 171, 229, 232, 238, 245, 132, 0,
	0, 0, 153, 0, 162, 0, 0, 385, 164, 0,
	0, 241, 179, 0, 0, 0, 0, 0, 376, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 99, 100, 101, 363, 362, 365, 366, 367, 368,
	0, 0, 122, 364, 369, 370, 371, 0, 0, 0,
	0, 0, 356, 0, 384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 0, 0,
	399, 0, 355, 0, 0, 348, 349, 351, 350, 352,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 398, 0, 0, 298, 0, 0, 396, 0, 210,
	0, 246, 144, 161, 118, 158, 103, 114, 0, 143,
	188, 218, 222, 0, 0, 0, 126, 0, 220, 198,
	262, 0, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 107, 248, 260, 123, 231, 0,
	0, 0, 109, 258, 244, 177, 154, 155, 108, 0,
	216, 131, 139, 128, 190, 255, 256, 127, 279, 115,
	268, 111, 116, 267, 184, 251, 259, 178, 170, 110,
	257, 176, 169, 160, 135, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 0, 0, 242, 265, 280, 120,
	0, 250, 274, 275, 0, 212, 121, 140, 134, 207,
	138, 183, 117, 149, 239, 159, 166, 215, 278, 197,
	221, 124, 264, 240, 386, 397, 392, 393, 390, 391,
	389, 388, 387, 400, 378, 379, 380, 381, 383, 0,
	394, 395, 382, 102, 112, 163, 277, 213, 137, 266,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 113, 119, 125,
	129, 133, 136, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 191, 0, 106, 156, 171, 229, 232,
	238, 245, 132, 0, 0, 0, 153, 0, 162, 0,
	0, 0, 164, 0, 0, 241, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 664, 663, 673, 674, 666, 667,
	668, 669, 670, 671, 672, 665, 0, 0, 675, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 298, 0,
	0, 0, 0, 210, 0, 246, 144, 161, 118, 158,
	103, 114, 0, 143, 188, 218, 222, 0, 0, 0,
	126, 0, 220, 198, 262, 0, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 107, 248,
	260, 123, 231, 0, 0, 0, 109, 258, 244, 177,
	154, 155, 108, 0, 216, 131, 139, 128, 190, 255,
	256, 127, 279, 115, 268, 111, 116, 267, 184, 251,
	259, 178, 170, 110, 257, 176, 169, 160, 135, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 0, 0,
	242, 265, 280, 120, 0, 250, 274, 275, 0, 212,
	121, 140, 134, 207, 138, 183, 117, 149, 239, 159,
	166, 215, 278, 197, 221, 124, 264, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 112, 163,
	277, 213, 137, 266, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 113, 119, 125, 129, 133, 136, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 0, 0, 106,
	156, 171, 229, 232, 238, 245, 0, 191, 0, 0,
	153, 764, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 101, 0, 766, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 653, 654, 652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 655, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 0, 0, 0, 126, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 120, 0, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 112, 163, 277, 213, 137, 266, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 191, 0, 106, 156, 171, 229, 232, 238, 245,
	132, 0, 0, 0, 153, 0, 162, 0, 0, 0,
	164, 0, 0, 241, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 93, 94, 0, 90, 0, 0, 0,
	95, 210, 0, 246, 144, 161, 118, 158, 103, 114,
	0, 143, 188, 218, 222, 0, 0, 0, 126, 0,
	220, 198, 262, 0, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 107, 248, 260, 123,
	231, 0, 0, 0, 109, 258, 244, 177, 154, 155,
	108, 0, 216, 131, 139, 128, 190, 255, 256, 127,
	279, 115, 268, 111, 116, 267, 184, 251, 259, 178,
	170, 110, 257, 176, 169, 160, 135, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 0, 0, 242, 265,
	280, 120, 0, 250, 274, 275, 0, 212, 121, 140,
	134, 207, 138, 183, 117, 149, 239, 159, 166, 215,
	278, 197, 221, 124, 264, 240, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 112, 163, 277, 213,
	137, 266, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 113,
	119, 125, 129, 133, 136, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 33, 0, 0, 0, 106, 156, 171,
	229, 232, 238, 245, 0, 191, 0, 0, 153, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 99, 100, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	298, 0, 0, 0, 0, 210, 0, 246, 144, 161,
	118, 158, 103, 114, 0, 143, 188, 218, 222, 0,
	0, 0, 126, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	107, 248, 260, 123, 231, 0, 0, 0, 109, 258,
	244, 177, 154, 155, 108, 0, 216, 131, 139, 128,
	190, 255, 256, 127, 279, 115, 268, 111, 116, 267,
	184, 251, 259, 178, 170, 110, 257, 176, 169, 160,
	135, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 120, 0, 250, 274, 275,
	0, 212, 121, 140, 134, 207, 138, 183, 117, 149,
	239, 159, 166, 215, 278, 197, 221, 124, 264, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	112, 163, 277, 213, 137, 266, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 113, 119, 125, 129, 133, 136, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 106, 156, 171, 229, 232, 238, 245, 0, 191,
	0, 62, 153, 1049, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 164, 0,
	0, 241, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 101, 0, 1051, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 298, 0, 0, 0, 0, 210,
	0, 246, 144, 161, 118, 158, 103, 114, 0, 143,
	188, 218, 222, 0, 0, 0, 126, 0, 220, 198,
	262, 0, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 107, 248, 260, 123, 231, 0,
	0, 0, 109, 258, 244, 177, 154, 155, 108, 0,
	216, 131, 139, 128, 190, 255, 256, 127, 279, 115,
	268, 111, 116, 267, 184, 251, 259, 178, 170, 110,
	257, 176, 169, 160, 135, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 0, 0, 242, 265, 280, 120,
	0, 250, 274, 275, 0, 212, 121, 140, 134, 207,
	138, 183, 117, 149, 239, 159, 166, 215, 278, 197,
	221, 124, 264, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 112, 163, 277, 213, 137, 266,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 113, 119, 125,
	129, 133, 136, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 33, 0, 0, 0, 106, 156, 171, 229, 232,
	238, 245, 0, 191, 0, 0, 153, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 164, 0, 0, 241, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 99, 100, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 298, 0,
	0, 0, 0, 210, 0, 246, 144, 161, 118, 158,
	103, 114, 0, 143, 188, 218, 222, 0, 0, 0,
	126, 0, 220, 198, 262, 0, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 107, 248,
	260, 123, 231, 0, 0, 0, 109, 258, 244, 177,
	154, 155, 108, 0, 216, 131, 139, 128, 190, 255,
	256, 127, 279, 115, 268, 111, 116, 267, 184, 251,
	259, 178, 170, 110, 257, 176, 169, 160, 135, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 0, 0,
	242, 265, 280, 120, 0, 250, 274, 275, 0, 212,
	121, 140, 134, 207, 138, 183, 117, 149, 239, 159,
	166, 215, 278, 197, 221, 124, 264, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 112, 163,
	277, 213, 137, 266, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 113, 119, 125, 129, 133, 136, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 0, 0, 106,
	156, 171, 229, 232, 238, 245, 0, 191, 0, 0,
	153, 1049, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 101, 0, 1051, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 0, 0, 0, 126, 0, 220, 198, 262, 0,
	1047, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 120, 0, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 112, 163, 277, 213, 137, 266, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 191, 0, 106, 156, 171, 229, 232, 238, 245,
	132, 0, 0, 0, 153, 0, 162, 0, 0, 0,
	164, 0, 0, 241, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 101, 0, 0, 1014, 0,
	0, 1015, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 298, 0, 0, 0,
	0, 210, 0, 246, 144, 161, 118, 158, 103, 114,
	0, 143, 188, 218, 222, 0, 0, 0, 126, 0,
	220, 198, 262, 0, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 107, 248, 260, 123,
	231, 0, 0, 0, 109, 258, 244, 177, 154, 155,
	108, 0, 216, 131, 139, 128, 190, 255, 256, 127,
	279, 115, 268, 111, 116, 267, 184, 251, 259, 178,
	170, 110, 257, 176, 169, 160, 135, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 0, 0, 242, 265,
	280, 120, 0, 250, 274, 275, 0, 212, 121, 140,
	134, 207, 138, 183, 117, 149, 239, 159, 166, 215,
	278, 197, 221, 124, 264, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 112, 163, 277, 213,
	137, 266, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 113,
	119, 125, 129, 133, 136, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 191, 0, 106, 156, 171,
	229, 232, 238, 245, 132, 0, 799, 0, 153, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 101,
	0, 798, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	298, 0, 0, 0, 0, 210, 0, 246, 144, 161,
	118, 158, 103, 114, 0, 143, 188, 218, 222, 0,
	0, 0, 126, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	107, 248, 260, 123, 231, 0, 0, 0, 109, 258,
	244, 177, 154, 155, 108, 0, 216, 131, 139, 128,
	190, 255, 256, 127, 279, 115, 268, 111, 116, 267,
	184, 251, 259, 178, 170, 110, 257, 176, 169, 160,
	135, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 120, 0, 250, 274, 275,
	0, 212, 121, 140, 134, 207, 138, 183, 117, 149,
	239, 159, 166, 215, 278, 197, 221, 124, 264, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	112, 163, 277, 213, 137, 266, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 113, 119, 125, 129, 133, 136, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 191,
	0, 106, 156, 171, 229, 232, 238, 245, 132, 0,
	0, 0, 153, 0, 162, 0, 0, 0, 164, 0,
	0, 241, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	417, 99, 100, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 298, 0, 0, 0, 0, 210,
	0, 246, 144, 161, 118, 158, 103, 114, 0, 143,
	188, 218, 222, 0, 0, 0, 126, 0, 220, 198,
	262, 0, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 107, 248, 260, 123, 231, 0,
	0, 0, 109, 258, 244, 177, 154, 155, 108, 0,
	216, 131, 139, 128, 190, 255, 256, 127, 279, 115,
	268, 111, 116, 267, 184, 251, 259, 178, 170, 110,
	257, 176, 169, 160, 135, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 0, 0, 242, 265, 280, 120,
	0, 250, 274, 275, 0, 212, 121, 140, 134, 207,
	138, 183, 117, 149, 239, 159, 166, 215, 278, 197,
	221, 124, 264, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 112, 163, 277, 213, 137, 266,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 113, 119, 125,
	129, 133, 136, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 191, 0, 106, 156, 171, 229, 232,
	238, 245, 132, 0, 0, 0, 153, 0, 162, 0,
	0, 0, 164, 0, 0, 241, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 99, 100, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 298, 0,
	0, 0, 0, 210, 0, 246, 144, 161, 118, 158,
	103, 114, 0, 143, 188, 218, 222, 0, 0, 0,
	126, 0, 220, 198, 262, 0, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 107, 248,
	260, 123, 231, 0, 0, 0, 109, 258, 244, 177,
	154, 155, 108, 0, 216, 131, 139, 128, 190, 255,
	256, 127, 279, 115, 268, 111, 116, 267, 184, 251,
	259, 178, 170, 110, 257, 176, 169, 160, 135, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 0, 0,
	242, 265, 280, 120, 0, 250, 274, 275, 0, 212,
	121, 140, 134, 207, 138, 183, 117, 149, 239, 159,
	166, 215, 278, 197, 221, 124, 264, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 112, 163,
	277, 213, 137, 266, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 113, 119, 125, 129, 133, 136, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 191, 0, 106,
	156, 171, 229, 232, 238, 245, 132, 0, 0, 0,
	153, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 101, 0, 1051, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 0, 0, 0, 126, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 120, 0, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 112, 163, 277, 213, 137, 266, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 191, 0, 106, 156, 171, 229, 232, 238, 245,
	132, 0, 0, 0, 153, 0, 162, 0, 0, 0,
	164, 0, 0, 241, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 101, 0, 1165, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 298, 0, 0, 0,
	0, 210, 0, 246, 144, 161, 118, 158, 103, 114,
	0, 143, 188, 218, 222, 0, 0, 0, 126, 0,
	220, 198, 262, 0, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 107, 248, 260, 123,
	231, 0, 0, 0, 109, 258, 244, 177, 154, 155,
	108, 0, 216, 131, 139, 128, 190, 255, 256, 127,
	279, 115, 268, 111, 116, 267, 184, 251, 259, 178,
	170, 110, 257, 176, 169, 160, 135, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 0, 0, 242, 265,
	280, 120, 0, 250, 274, 275, 0, 212, 121, 140,
	134, 207, 138, 183, 117, 149, 239, 159, 166, 215,
	278, 197, 221, 124, 264, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 112, 163, 277, 213,
	137, 266, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 113,
	119, 125, 129, 133, 136, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 0, 191, 106, 156, 171,
	229, 232, 238, 245, 769, 132, 0, 0, 153, 0,
	0, 162, 0, 0, 0, 164, 0, 0, 241, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 298, 0, 0, 0, 0, 210, 0, 246, 144,
	161, 118, 158, 103, 114, 0, 143, 188, 218, 222,
	0, 0, 0, 126, 0, 220, 198, 262, 0, 200,
	219, 165, 252, 211, 261, 271, 272, 249, 269, 276,
	237, 107, 248, 260, 123, 231, 0, 0, 0, 109,
	258, 244, 177, 154, 155, 108, 0, 216, 131, 139,
	128, 190, 255, 256, 127, 279, 115, 268, 111, 116,
	267, 184, 251, 259, 178, 170, 110, 257, 176, 169,
	160, 135, 146, 208, 167, 209, 147, 181, 180, 182,
	0, 0, 0, 242, 265, 280, 120, 0, 250, 274,
	275, 0, 212, 121, 140, 134, 207, 138, 183, 117,
	149, 239, 159, 166, 215, 278, 197, 221, 124, 264,
	240, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 112, 163, 277, 213, 137, 266, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 113, 119, 125, 129, 133, 136,
	142, 145, 148, 150, 151, 152, 157, 168, 172, 173,
	174, 175, 185, 186, 187, 189, 192, 193, 194, 195,
	196, 199, 201, 202, 203, 204, 205, 206, 214, 217,
	223, 224, 225, 226, 227, 228, 230, 233, 234, 235,
	236, 243, 247, 253, 254, 263, 270, 273, 0, 0,
	191, 0, 106, 156, 171, 229, 232, 238, 245, 132,
	0, 0, 0, 153, 0, 162, 0, 0, 0, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 101, 0, 766, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 298, 0, 0, 0, 0,
	210, 0, 246, 144, 161, 118, 158, 103, 114, 0,
	143, 188, 218, 222, 0, 0, 0, 126, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 107, 248, 260, 123, 231,
	0, 0, 0, 109, 258, 244, 177, 154, 155, 108,
	0, 216, 131, 139, 128, 190, 255, 256, 127, 279,
	115, 268, 111, 116, 267, 184, 251, 259, 178, 170,
	110, 257, 176, 169, 160, 135, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	120, 0, 250, 274, 275, 0, 212, 121, 140, 134,
	207, 138, 183, 117, 149, 239, 159, 166, 215, 278,
	197, 221, 124, 264, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 112, 163, 277, 213, 137,
	266, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 113, 119,
	125, 129, 133, 136, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 106, 156, 171, 229,
	232, 238, 245, 434, 0, 0, 0, 153, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 298, 0, 0, 0, 0,
	210, 0, 246, 144, 161, 118, 158, 103, 114, 0,
	143, 188, 218, 222, 0, 0, 0, 126, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 107, 248, 260, 123, 231,
	0, 0, 0, 109, 258, 244, 177, 154, 155, 108,
	0, 216, 131, 139, 128, 190, 255, 256, 127, 279,
	115, 268, 111, 116, 267, 184, 251, 259, 178, 170,
	110, 257, 176, 169, 160, 135, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	120, 0, 250, 274, 275, 0, 212, 121, 140, 134,
	207, 138, 183, 117, 149, 239, 159, 166, 215, 278,
	197, 221, 124, 264, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 112, 163, 277, 213, 137,
	266, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 113, 119,
	125, 129, 133, 136, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 191, 0, 106, 156, 171, 229,
	232, 238, 245, 132, 0, 0, 0, 153, 0, 162,
	0, 0, 0, 164, 0, 0, 241, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 293, 0, 298,
	0, 0, 0, 0, 210, 0, 246, 144, 161, 118,
	158, 103, 114, 0, 143, 188, 218, 222, 0, 0,
	0, 126, 0, 220, 198, 262, 0, 200, 219, 165,
	252, 211, 261, 271, 272, 249, 269, 276, 237, 107,
	248, 260, 123, 231, 0, 0, 0, 109, 258, 244,
	177, 154, 155, 108, 0, 216, 131, 139, 128, 190,
	255, 256, 127, 279, 115, 268, 111, 116, 267, 184,
	251, 259, 178, 170, 110, 257, 176, 169, 160, 135,
	146, 208, 167, 209, 147, 181, 180, 182, 0, 0,
	0, 242, 265, 280, 120, 0, 250, 274, 275, 0,
	212, 121, 140, 134, 207, 138, 183, 117, 149, 239,
	159, 166, 215, 278, 197, 221, 124, 264, 240, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 112,
	163, 277, 213, 137, 266, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 113, 119, 125, 129, 133, 136, 142, 145,
	148, 150, 151, 152, 157, 168, 172, 173, 174, 175,
	185, 186, 187, 189, 192, 193, 194, 195, 196, 199,
	201, 202, 203, 204, 205, 206, 214, 217, 223, 224,
	225, 226, 227, 228, 230, 233, 234, 235, 236, 243,
	247, 253, 254, 263, 270, 273, 0, 0, 191, 0,
	106, 156, 171, 229, 232, 238, 245, 132, 0, 0,
	0, 153, 0, 162, 0, 0, 0, 164, 0, 0,
	241, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 298, 0, 0, 0, 0, 210, 0,
	246, 144, 161, 118, 158, 103, 114, 0, 143, 188,
	218, 222, 0, 0, 0, 126, 0, 220, 198, 262,
	0, 200, 219, 165, 252, 211, 261, 271, 272, 249,
	269, 276, 237, 107, 248, 260, 123, 231, 0, 0,
	0, 109, 258, 244, 177, 154, 155, 108, 0, 216,
	131, 139, 128, 190, 255, 256, 127, 279, 115, 268,
	111, 116, 267, 184, 251, 259, 178, 170, 110, 257,
	176, 169, 160, 135, 146, 208, 167, 209, 147, 181,
	180, 182, 0, 0, 0, 242, 265, 280, 120, 0,
	250, 274, 275, 0, 212, 121, 140, 134, 207, 138,
	183, 117, 149, 239, 159, 166, 215, 278, 197, 221,
	124, 264, 240, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 112, 163, 277, 213, 137, 266, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 113, 119, 125, 129,
	133, 136, 142, 145, 148, 150, 151, 152, 157, 168,
	172, 173, 174, 175, 185, 186, 187, 189, 192, 193,
	194, 195, 196, 199, 201, 202, 203, 204, 205, 206,
	214, 217, 223, 224, 225, 226, 227, 228, 230, 233,
	234, 235, 236, 243, 247, 253, 254, 263, 270, 273,
	0, 0, 0, 0, 106, 156, 171, 229, 232, 238,
	245, 0, 0, 0, 0, 153,
}

var yyPact = [...]int{
	92, -1000, -296, 1184, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1129, 898, -1000, -1000, -1000, -1000, -1000, -1000, 373,
	12453, 48, 187, 27, 17326, 185, -4, 17670, -1000, 31,
	-1000, 25, 17670, 30, -41, -1000, -1000, -46, -53, -1000,
	10379, -255, -1000, 539, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 893, 1108, 1109, 1125, 754, 1115, -1000,
	8966, 129, 129, 16982, 7552, -1000, -1000, 390, 17670, 182,
	17670, -119, 125, 125, 125, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 184, 17670, 598, 598, 287, -1000, 17670, 117, 598,
	117, 117, 117, 17670, -1000, 281, -1000, -1000, -1000, 17670,
	598, 1059, 487, 126, 4955, -1000, 463, -1000, 4955, 40,
	4955, -45, 1140, 44, 28, -1000, 598, -1000, -1000, -1000,
	-1000, -1000, -1000, 161, -1000, -1000, 17670, -64, 163, 397,
	-1000, -1000, -1000, -1000, -1000, -1000, 703, 617, -1000, 10379,
	832, 697, 697, -1000, -1000, 203, -1000, -1000, 11411, 11411,
	11411, 11411, 11411, 11411, 11411, 11411, 11411, 11411, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 697, 257, -1000, 10026, 697, 697, 697, 697,
	697, 697, 697, 697, 10379, 697, 697, 697, 697, 697,
	697, 697, 697, 697, 697, 697, 697, 697, 697, 697,
	697, -1000, -1000, -246, -278, 17670, -1000, 1129, -1000, 898,
	-1000, -1000, -1000, 1050, 10379, 10379, 1129, -1000, 1014, 8966,
	-1000, -1000, 1096, -1000, -1000, -1000, -1000, 442, 1172, -1000,
	12109, 256, 16278, 15245, 17670, 942, 890, -1000, -1000, 249,
	836, 7181, -76, -1000, -1000, -1000, 387, 14557, -1000, -1000,
	-1000, 1048, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 823, 17670, -1000, 345, -1000, 598, 4955,
	154, 598, 409, 598, 17670, 17670, 4955, 4955, 4955, 63,
	95, 100, 17670, 835, 152, 17670, 1101, 954, 17670, 598,
	598, -1000, 6439, -1000, 4955, 487, -1000, 607, 10379, 4955,
	4955, 4955, 17670, 4955, 4955, -1000, -1000, -1000, 421, 510,
	-1000, -1000, -1000, -1000, -1000, 4955, 4955, -1000, 1170, 411,
	-1000, -1000, -1000, -1000, 10379, 317, -1000, 949, -1000, -1000,
	29, -1000, 17670, -1000, 1184, -1000, -1000, -1000, -107, -1000,
	-1000, 10379, 10379, 10379, 10379, 548, 348, 11411, 600, 367,
	11411, 11411, 11411, 11411, 11411, 11411, 11411, 11411, 11411, 11411,
	11411, 11411, 11411, 11411, 11411, 674, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 598, -1000, 1173, 914, 914, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 11755, 7907,
	6439, 754, 821, 1129, 8966, 8966, 10379, 10379, 9672, 9319,
	8966, 1049, 404, 617, 17670, -1000, -1000, 11067, -1000, -1000,
	-1000, -1000, -1000, 622, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 17670, 17670, 8966, 8966, 8966, 8966, 8966, 598, 598,
	598, -1000, 618, 1109, 754, 1096, -1000, 1178, 325, 614,
	830, -1000, 611, 1109, 14213, 851, -1000, 1096, -1000, -1000,
	-1000, 17670, -1000, -1000, 16622, -1000, -1000, 6068, 81, 17670,
	-1000, 719, 1011, -1000, -1000, -1000, 1103, 12807, 13869, 81,
	666, 15245, 17670, -1000, -1000, 15245, 17670, 5697, 6810, -76,
	-1000, 753, -1000, -71, -85, 8260, 290, -1000, -1000, -1000,
	-1000, 4584, 366, 660, 428, -32, -1000, -1000, -1000, 841,
	-1000, 841, 841, 841, 841, -3, -3, -3, -3, -1000,
	-1000, -1000, -1000, -1000, 931, 918, -1000, 841, 841, 841,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 917, 917,
	917, 854, 854, 935, -1000, 17670, 4955, 1100, 4955, -1000,
	151, -1000, -1000, -1000, 17670, 17670, 17670, 17670, 17670, 225,
	17670, 17670, 829, -1000, 17670, 4955, -1000, -1000, 247, -1000,
	-1000, -1000, -1000, -1000, 617, -1000, -1000, -1000, -1000, -1000,
	-1000, 17670, -1000, -1000, 17670, -1000, 16278, -1000, -1000, 17670,
	487, 17670, 17670, 617, -1000, 604, 17670, 17670, -1000, 15933,
	-1000, -1000, -1000, -1000, 617, 348, 377, 381, -1000, -1000,
	556, -1000, -1000, 1997, -1000, -1000, -1000, -1000, 600, 11411,
	11411, 11411, 282, 1997, 1947, 1063, 726, 292, 311, 311,
	331, 331, 331, 331, 331, 464, 464, -1000, -1000, -1000,
	622, -1000, -1000, -1000, 622, 8966, 8966, 825, 697, 241,
	-1000, 893, -1000, -1000, 1109, 788, 788, 561, 652, 389,
	1152, 788, 315, 1144, 788, 788, 8966, -1000, -1000, 462,
	-1000, 10379, 622, -1000, 238, -1000, 1578, 819, 816, 788,
	622, 622, 788, 788, -261, -1000, 17670, 615, -1000, 386,
	-1000, 1050, -1000, -1000, 1009, 10379, 10379, 10379, -1000, -1000,
	-1000, 1050, 1126, -1000, 1029, 1025, 1137, 8966, 15245, 1096,
	-1000, -1000, -1000, 237, 1015, 697, -1000, 17670, 15245, 15245,
	15245, 15245, 15245, -1000, 982, 972, -1000, 990, 970, 991,
	17670, -1000, 796, 622, 754, 12807, 220, 697, -1000, 15589,
	-1000, -1000, 1137, 15245, 751, -1000, 751, -1000, 228, -1000,
	-1000, 753, -76, -70, -1000, -1000, -1000, -1000, 617, -1000,
	696, 741, 4213, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	886, 598, -1000, 1080, 270, 261, 598, 1079, -1000, -1000,
	-1000, 1051, -1000, 420, -34, -1000, -1000, 537, -3, -3,
	-1000, -1000, 290, 1038, 290, 290, 290, 591, 591, -1000,
	-1000, -1000, -1000, 529, -1000, -1000, -1000, 516, -1000, 947,
	17670, 4955, -1000, -1000, -1000, -1000, 605, 605, 275, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	80, 891, -1000, -1000, -1000, -1000, 37, 56, 148, -1000,
	4955, -1000, 6439, 411, 487, 870, 411, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	282, 1997, 1870, -1000, 11411, 11411, -1000, -1000, 788, 788,
	8966, 6439, 1129, 1050, -1000, -1000, 153, 674, 153, 11411,
	11411, -1000, 11411, 11411, -1000, -134, 855, 374, -1000, 10379,
	585, -1000, 6439, -1000, 11411, 11411, -1000, -1000, -1000, -1000,
	-1000, 578, -1000, -1000, -1000, -1000, 618, -1000, -1000, 385,
	-1000, 914, -1000, 1007, 617, 617, -1000, -1000, 17670, -1000,
	-1000, -1000, -1000, 1134, 10379, -1000, 733, -1000, 5326, 944,
	17670, 697, 1184, 13515, 17670, 828, -1000, 382, 1011, 863,
	941, 1280, -1000, -1000, -1000, -1000, 971, -1000, 968, -1000,
	-1000, -1000, -1000, -1000, -1000, 754, -1000, 178, 174, 167,
	17670, -1000, 1129, 751, -1000, -1000, 306, -1000, -1000, -102,
	-104, -1000, -1000, -1000, 4584, -1000, 4584, 17670, 104, -1000,
	598, 598, -1000, -1000, 858, 940, 11411, -1000, -1000, -1000,
	651, 290, 290, -1000, 530, -1000, -1000, -1000, 785, -1000,
	764, 727, 761, 17670, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 17670, -1000, -1000, -1000, -1000, -1000, 17670,
	-140, 598, 17670, 17670, 17670, 17670, -1000, 226, 487, -1000,
	487, 17670, 487, -1000, 11411, 1997, 1997, -1000, -1000, 622,
	-1000, 1109, -1000, 622, 841, 841, -1000, 841, 854, -1000,
	841, 17, 841, 13, 622, 622, 1905, 1889, 1759, 1257,
	697, -126, -1000, 617, 10379, -1000, 1700, 1638, 577, -1000,
	914, -1000, -1000, -1000, 1132, 1114, 617, -1000, -1000, 1052,
	656, 693, -1000, -1000, 8613, 759, 224, 757, -1000, 1129,
	17670, 10379, -1000, -1000, 10379, 849, -1000, 10379, -1000, -1000,
	-1000, 1129, 697, 697, 697, 757, 1109, -1000, -1000, -1000,
	-1000, 4213, -1000, 746, -1000, 841, -1000, -1000, -1000, 17670,
	-28, 1177, 1997, -1000, -1000, -1000, -1000, -1000, -3, 573,
	-3, 513, -1000, 468, 4955, -1000, -1000, -1000, -1000, 1086,
	-1000, 6439, -1000, -1000, 839, 933, -1000, -1000, 6439, -1000,
	-1000, 717, -1000, -1000, 1997, -1000, 1050, -1000, -1000, 140,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11411, 11411,
	11411, 11411, 11411, 1109, 570, 617, 11411, 11411, -1000, -1000,
	-1000, 10379, 10379, 1074, -1000, 697, -1000, 967, 17670, 17670,
	-1000, 17670, 1109, -1000, 617, 617, 17670, 617, 14901, 17670,
	17670, 13161, -1000, 222, 17670, -1000, 715, 235, -1000, -105,
	290, -1000, 290, 649, 643, -1000, 697, 711, -1000, 358,
	17670, 17670, -1000, -1000, 17670, -1000, -1000, -1000, 1578, 1578,
	1578, 1578, 230, 622, -1000, 1578, 1578, 617, 703, 1176,
	-1000, 697, 1184, 200, -1000, -1000, -1000, 713, 659, -1000,
	659, 659, 220, 222, -1000, 598, 357, 560, -1000, 93,
	431, 1070, -1000, 1064, -1000, -1000, -1000, -1000, -1000, 79,
	6439, 4584, 642, -1000, -1000, -1000, -1000, -1000, -1000, 622,
	89, -143, -1000, -1000, -1000, 17670, 693, 17670, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 453, -1000, -1000, 17670, -1000,
	552, -1000, -1000, 628, -1000, 17670, -1000, -1000, 891, -1000,
	1006, -138, -146, 669, -1000, -1000, 833, -1000, -1000, 79,
	1017, -140, -1000, 996, -1000, 17670, -1000, 73, -1000, -141,
	625, 68, -144, 938, 697, -147, 937, -1000, 1168, 10723,
	-1000, -1000, 1175, 217, 217, 1578, 622, -1000, -1000, -1000,
	103, 547, -1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1465, 1464, 30, 63, 64, 1463, 1461, 1460, 129,
	128, 118, 1458, 1457, 1454, 1452, 1451, 1450, 1448, 1442,
	1441, 1439, 1438, 1437, 1436, 1434, 1433, 1431, 1425, 1424,
	1423, 1422, 1421, 1190, 1420, 1419, 1418, 76, 1416, 79,
	1409, 1407, 1401, 1400, 1398, 1397, 1395, 1392, 1391, 42,
	87, 71, 59, 1390, 54, 1795, 1384, 56, 67, 73,
	1383, 34, 1382, 1381, 82, 1379, 1378, 57, 1377, 1376,
	860, 75, 77, 1374, 21, 38, 1373, 1372, 1368, 1355,
	37, 296, 1353, 1351, 19, 1350, 1349, 103, 1348, 65,
	20, 11, 23, 24, 1347, 61, 1341, 6, 1339, 62,
	1338, 1337, 1330, 1324, 60, 1323, 58, 1322, 40, 16,
	1318, 7, 1317, 69, 35, 29, 9, 1313, 1310, 18,
	74, 50, 68, 1309, 1308, 515, 1307, 1012, 44, 1303,
	1302, 125, 55, 1301, 106, 609, 1300, 1298, 1296, 1294,
	22, 800, 1882, 12, 72, 1290, 1289, 1283, 2675, 27,
	51, 14, 1282, 1281, 1280, 36, 396, 52, 1279, 1278,
	43, 1277, 1275, 1274, 1273, 1270, 1269, 1268, 408, 1267,
	1264, 1263, 33, 13, 1262, 1261, 66, 25, 1260, 1258,
	1254, 47, 70, 1249, 1246, 49, 1241, 78, 28, 1224,
	1219, 1218, 1217, 1216, 26, 17, 1214, 15, 1212, 10,
	1211, 32, 1209, 8, 1208, 4, 1207, 2, 0, 1205,
	3, 1204, 1203, 46, 5, 1202, 1, 39, 1199, 1197,
	1196, 1195, 1193, 1506, 1633, 83, 1192, 90,
}

var yyR1 = [...]int{
	0, 221, 222, 222, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 208, 208, 208, 211, 212, 20, 3,
	3, 3, 3, 2, 2, 8, 4, 5, 5, 9,
	9, 40, 40, 10, 11, 11, 11, 11, 225, 225,
	64, 64, 65, 65, 113, 113, 12, 13, 13, 122,
	122, 121, 121, 121, 123, 123, 123, 123, 158, 158,
	14, 14, 14, 14, 14, 14, 14, 36, 36, 32,
	32, 32, 32, 35, 35, 48, 48, 48, 210, 210,
	209, 207, 207, 206, 206, 205, 21, 190, 192, 192,
	191, 191, 191, 191, 182, 161, 161, 161, 161, 164,
	164, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	163, 163, 163, 163, 163, 165, 165, 165, 165, 165,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 167, 167, 167, 167, 167,
	167, 167, 167, 181, 181, 168, 168, 176, 176, 177,
	177, 177, 174, 174, 175, 175, 178, 178, 178, 170,
	170, 171, 171, 179, 179, 172, 172, 172, 173, 173,
	173, 180, 180, 180, 180, 180, 169, 169, 183, 183,
	200, 200, 199, 199, 199, 34, 189, 189, 196, 196,
	196, 196, 196, 186, 186, 186, 187, 187, 185, 185,
	188, 188, 198, 198, 197, 184, 184, 201, 201, 201,
	201, 215, 216, 214, 214, 214, 214, 214, 193, 193,
	193, 194, 194, 194, 195, 195, 195, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 204, 202,
	202, 203, 203, 16, 22, 22, 17, 17, 17, 17,
	17, 18, 18, 23, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 129, 129, 131, 131, 127, 127,
	130, 130, 128, 128, 128, 132, 132, 132, 133, 133,
	159, 159, 159, 25, 25, 27, 27, 28, 29, 29,
	153, 153, 154, 154, 30, 31, 41, 41, 41, 41,
	41, 41, 43, 43, 43, 7, 7, 7, 7, 42,
	42, 42, 6, 6, 26, 26, 26, 26, 19, 226,
	37, 38, 38, 39, 39, 39, 45, 45, 45, 44,
	44, 44, 51, 51, 53, 53, 53, 53, 53, 54,
	54, 54, 54, 54, 54, 50, 50, 52, 52, 52,
	52, 145, 145, 145, 144, 144, 56, 56, 57, 57,
	58, 58, 59, 59, 59, 59, 96, 73, 73, 112,
	112, 111, 111, 114, 114, 60, 60, 60, 60, 61,
	61, 62, 62, 63, 63, 152, 152, 151, 151, 151,
	150, 150, 66, 66, 66, 68, 67, 67, 67, 67,
	69, 69, 71, 71, 70, 70, 70, 70, 72, 74,
	74, 74, 74, 74, 75, 75, 55, 55, 55, 55,
	55, 55, 55, 55, 126, 126, 77, 77, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 88, 88,
	88, 88, 88, 88, 78, 78, 78, 78, 78, 78,
	78, 49, 49, 89, 89, 89, 95, 90, 90, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 85, 85, 85, 85, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 227, 227, 87, 86,
	86, 86, 86, 86, 86, 86, 46, 46, 46, 46,
	46, 157, 157, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 100, 100, 47, 47,
	98, 98, 99, 101, 101, 97, 97, 97, 80, 80,
	80, 80, 80, 80, 80, 80, 82, 82, 82, 102,
	102, 103, 103, 104, 104, 105, 105, 106, 107, 107,
	107, 108, 108, 108, 108, 109, 109, 109, 79, 79,
	79, 79, 110, 110, 110, 110, 115, 115, 91, 91,
	93, 93, 92, 94, 116, 116, 119, 117, 117, 117,
	120, 120, 120, 120, 118, 118, 118, 147, 147, 147,
	124, 124, 134, 134, 135, 135, 125, 125, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 137, 137,
	137, 138, 138, 139, 139, 139, 146, 146, 142, 142,
	143, 143, 148, 148, 149, 149, 217, 218, 219, 219,
	220, 220, 220, 33, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 223, 224, 155, 156, 156, 156,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 2, 4,
	6, 6, 7, 4, 6, 5, 8, 1, 3, 7,
	8, 1, 1, 9, 8, 7, 6, 6, 1, 1,
	1, 3, 1, 3, 0, 4, 3, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 2, 8, 4, 6, 5, 5, 0, 1, 4,
	5, 7, 4, 5, 3, 1, 1, 1, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 2, 4,
	1, 3, 3, 3, 8, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 4,
	1, 2, 2, 3, 2, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	7, 7, 4, 5, 4, 4, 7, 5, 5, 5,
	12, 7, 5, 9, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 3, 3, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 3, 4, 4, 4,
	4, 4, 4, 3, 2, 7, 2, 3, 4, 3,
	7, 5, 4, 2, 4, 4, 3, 3, 5, 2,
	6, 4, 3, 7, 1, 1, 0, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 5,
	0, 1, 0, 1, 2, 3, 0, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 5, 3, 2, 2, 3, 3, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 1, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 3, 3, 7, 0,
	3, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 5, 7, 3, 0,
	5, 4, 5, 5, 0, 2, 1, 3, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 5, 6, 4, 4, 6,
	6, 6, 8, 8, 8, 8, 9, 8, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 8, 8, 0, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	5, 4, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 2, 3,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 0, 1,
	0, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -221, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -32, -35, -33,
	-34, -4, -223, 6, 7, -40, 9, 10, 30, -21,
	123, 124, 126, 125, 159, 127, 152, 53, 173, 174,
	176, 177, 178, 179, -43, 157, 158, 31, 32, 129,
	34, -36, 374, 370, 57, 8, 262, 154, 153, 25,
	375, -222, 376, -39, 5, -104, 15, -3, -37, -226,
	-37, -37, -37, -37, -37, -190, -192, 57, 96, -139,
	133, 77, 254, 130, 131, 137, -142, -208, -141, 60,
	61, 62, 272, 145, 304, 305, 364, 173, 187, 181,
	208, 200, 273, 306, 146, 198, 201, 241, 143, 307,
	228, 235, 71, 176, 250, 308, 155, 196, 192, 309,
	281, 190, 27, 310, 237, 213, 311, 277, 239, 191,
	236, 129, 312, 148, 141, 313, 214, 218, 314, 242,
	315, 316, 317, 375, 185, 186, 365, 318, 144, 244,
	212, 142, 33, 274, 37, 163, 245, 216, 319, 211,
	207, 366, 320, 321, 322, 323, 210, 184, 206, 41,
	220, 219, 221, 240, 203, 324, 325, 326, 149, 327,
	193, 18, 328, 329, 330, 331, 332, 248, 158, 333,
	161, 334, 335, 336, 337, 338, 339, 238, 215, 217,
	138, 165, 234, 276, 340, 246, 189, 341, 150, 162,
	157, 249, 151, 342, 343, 344, 345, 346, 347, 367,
	348, 177, 368, 349, 350, 351, 352, 172, 369, 243,
	252, 40, 225, 353, 183, 370, 140, 354, 174, 169,
	230, 204, 164, 355, 356, 194, 195, 209, 182, 205,
	175, 166, 159, 357, 251, 226, 278, 202, 199, 170,
	358, 167, 168, 359, 231, 232, 171, 275, 247, 197,
	227, -125, 133, 254, 130, 232, 135, 131, 131, 132,
	133, 254, 130, 131, -70, -148, -208, -141, 133, 131,
	114, 201, 241, 123, 229, 237, -131, 238, 165, -159,
	131, -127, 228, 231, 232, 171, 364, 239, 243, 242,
	233, -148, 175, -153, 180, -142, 178, -127, -41, 360,
	127, -155, -155, 230, 230, -155, -90, -55, -76, 80,
	-81, 29, 23, -80, -77, -97, -94, -95, 114, 115,
	117, 116, 118, 103, 104, 111, 81, 119, -85, -83,
	-84, -86, 64, 63, 72, 65, 66, 67, 68, 73,
	74, 75, -142, -148, -92, -223, 47, 48, 263, 264,
	265, 266, 271, 267, 83, 36, 253, 261, 260, 259,
	257, 258, 255, 256, 269, 270, 136, 254, 130, 109,
	262, -208, -141, 364, 371, -37, 65, -5, -4, -223,
	6, 20, 21, -108, 17, 16, -224, 59, -45, -53,
	42, 43, -54, 21, 35, 46, 44, -38, -52, 105,
	-55, -148, -125, -125, 11, -64, -65, -70, -72, -148,
	-117, -158, 175, -120, 243, 242, -143, -118, -142, -140,
	241, 201, 240, 128, 279, 79, 22, 24, 223, 82,
	114, 16, 83, 113, 263, 123, 51, 280, 255, 256,
	253, 265, 266, 254, 229, 29, 10, 282, 25, 153,
	21, 35, 107, 125, 86, 87, 156, 374, 23, 154,
	75, 285, 19, 54, 11, 13, 286, 287, 14, 136,
	135, 98, 132, 49, 8, 119, 26, 95, 45, 288,
	28, 289, 290, 291, 292, 47, 96, 17, 257, 258,
	31, 293, 271, 160, 109, 52, 38, 80, 294, 295,
	73, 296, 76, 55, 77, 15, 50, 297, 298, 299,
	300, 97, 126, 262, 48, 301, 130, 6, 268, 30,
	152, 46, 302, 131, 85, 269, 270, 134, 74, 5,
	137, 32, 9, 53, 56, 259, 260, 261, 36, 84,
	12, 303, 78, -191, 96, -182, -208, -70, 132, -70,
	262, -135, 136, -135, -135, 131, -70, -208, -208, 123,
	125, 128, 55, -22, -70, -134, 136, -208, -134, -134,
	-134, -70, 120, -70, -208, 30, -132, 96, 12, 254,
	-208, 165, 131, 166, 133, -156, -223, -143, -186, -208,
	8, 132, 33, 144, -156, 169, 170, -156, -130, -129,
	235, 236, 230, 234, 12, 170, 230, 168, -188, -208,
	134, -142, -131, -7, -3, -10, -9, -11, 88, -155,
	-155, 58, 79, 77, 78, 95, -55, -78, 98, 80,
	96, 97, 82, 100, 99, 110, 103, 104, 105, 106,
	107, 108, 109, 101, 102, 113, 88, 89, 90, 91,
	92, 93, 94, -126, -223, -95, -223, 121, 122, -81,
	-81, -81, -81, -81, -81, -81, -81, -81, -81, -223,
	120, -2, -90, -4, -223, -223, -223, -223, -223, -223,
	-223, -223, -100, -55, -223, -227, -87, -223, -227, -87,
	-227, -87, -227, -223, -227, -87, -227, -87, -227, -227,
	-87, -223, -223, -223, -223, -223, -223, -223, 366, 367,
	372, 373, -70, -104, -3, -37, -109, 19, 31, -55,
	-105, -106, -55, -104, 38, -50, -52, -54, 42, 43,
	70, 11, -145, -144, 22, -142, 64, 120, -71, 26,
	-70, -57, -58, -59, -60, -73, -96, -223, -70, -70,
	-64, -225, 58, 11, 56, -225, 58, 120, 58, 175,
	-120, -122, -121, 244, 246, 88, -147, -142, 64, 29,
	30, 59, 58, -70, -161, -164, -166, -165, -167, -162,
	-163, 198, 199, 114, 202, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 30, 155, 194, 195, 196,
	197, 214, 215, 216, 217, 218, 219, 220, 221, 181,
	200, 273, 182, 183, 184, 185, 186, 187, 189, 190,
	191, 192, 193, -208, -156, 133, -208, 80, -208, -70,
	-70, -156, -156, -156, 167, 167, 131, 131, 172, -70,
	58, 134, -64, 23, 55, -70, -208, -208, -149, -148,
	-140, -156, -132, 64, -55, -156, -156, -156, -70, -156,
	-156, -187, 11, 98, -187, -132, -37, -156, -156, 11,
	-128, 11, 98, -55, -133, 96, 55, -154, 178, -70,
	212, 361, 362, 363, -55, -55, -55, -55, -88, 73,
	80, 74, 75, -81, -89, -92, -95, 69, 98, 96,
	97, 82, -81, -81, -81, -81, -81, -81, -81, -81,
	-81, -81, -81, -81, -81, -81, -81, -157, -208, 64,
	-208, -80, -80, -142, -51, 21, 35, -50, -143, -149,
	-140, -39, -224, -224, -104, -50, -50, -55, -55, -97,
	64, -50, -97, 64, -50, -50, -44, 21, 35, -98,
	-99, 84, -97, -142, -148, -224, -81, -142, -142, -50,
	-51, -51, -50, -50, -188, -188, -208, -220, -217, -211,
	61, -108, -224, 9, 98, 58, 18, 58, -107, 24,
	25, -108, -82, -142, 65, 68, -56, 58, 11, -54,
	-70, -144, 105, -149, -113, 161, -70, 30, 58, -66,
	-68, -67, -69, 45, 49, 51, 46, 47, 48, 52,
	-152, 22, -57, -33, -3, -223, -151, 161, -150, 22,
	-148, 64, -113, 56, -57, -70, -57, -72, -148, 105,
	-120, -122, 58, 245, 247, 248, 55, 76, -55, -173,
	113, -193, -194, -195, -143, 64, 65, -182, -183, -184,
	-196, 147, -201, 138, 140, 137, -185, 148, 132, 28,
	59, -178, 73, 80, -174, 226, -168, 57, -168, -168,
	-168, -168, -172, 201, -172, -172, -172, 57, 57, -168,
	-168, -168, -176, 57, -176, -176, -177, 57, -177, -146,
	56, -70, -156, 23, -156, -136, 128, 125, 126, -204,
	124, 223, 201, 71, 29, 15, 263, 161, 278, -208,
	162, -70, -70, -70, -70, -70, 128, 125, -70, -70,
	-70, -156, 120, -70, -70, -71, -70, -132, -148, -148,
	64, -70, -142, -42, -142, 64, 73, 74, 75, -89,
	-81, -81, -81, -49, 156, 79, -224, -224, -50, -50,
	-223, 120, -5, -108, -224, -224, 58, 56, 22, 11,
	11, -224, 11, 11, -224, -224, -50, -101, -99, 86,
	-55, -224, 120, -224, 58, 58, -224, -224, -224, -224,
	-224, -48, 365, 369, 368, -70, 58, -219, -218, -212,
	62, 88, -109, 40, -55, -55, -106, -109, -124, 19,
	11, 36, 36, -75, 12, -52, -57, -54, 120, -79,
	30, 36, -3, -223, -223, -116, -119, -97, -58, -59,
	-59, -58, -59, 45, 45, 45, 50, 45, 50, 45,
	-67, -148, -224, -224, -224, -3, -74, 53, 135, 54,
	-223, -150, -75, -57, -75, -75, 120, -121, -123, 249,
	246, 252, -208, 64, 58, -195, 88, 57, -208, 28,
	-185, -185, -188, -188, 28, -170, 29, 73, -175, 227,
	65, -172, -172, -173, 30, -173, -173, -173, -181, 64,
	-181, 65, 65, 55, -142, -156, -155, -213, 143, 139,
	147, 148, 141, 60, 61, 62, 132, 28, 138, 140,
	161, 137, -213, -137, -138, 134, 22, 132, 28, 161,
	-210, 56, 167, 223, 167, 134, -156, -149, -128, -132,
	-112, 57, -128, -49, 79, -81, -81, -224, -224, -51,
	-143, -104, -109, -160, 114, 198, 155, 196, 192, 212,
	203, 225, 194, 226, -157, -160, -81, -81, -81, -81,
	272, -104, 87, -55, 85, -143, -81, -81, 64, -217,
	88, -80, 41, -70, -102, 13, -55, 105, -115, 55,
	-116, -91, -93, -92, -223, -110, -142, -114, -142, -75,
	58, 88, -62, -61, 55, 56, -63, 55, -61, 45,
	45, -224, 132, 132, 132, -114, -104, -75, 246, 250,
	251, -194, -195, -198, -197, -142, -201, -188, -188, 57,
	-171, 55, -81, 59, -173, -173, -208, 114, 59, 58,
	59, 58, 59, 58, -70, -155, -155, -70, -155, -142,
	-207, 275, -209, -208, -142, -142, -142, -70, 120, -132,
	-132, -111, -142, -132, -81, -224, -108, -224, -168, -168,
	-168, -177, -168, 186, -168, 186, -224, -224, 19, 19,
	19, 19, -223, -47, 268, -55, 58, 58, 64, -80,
	-103, 14, 16, 27, -115, 58, -224, -224, 58, 120,
	-224, 58, -104, -119, -55, -55, 57, -55, -223, -223,
	-223, -224, -108, 59, 58, -168, -111, -179, 223, 9,
	-172, 64, -172, 65, 65, -156, 26, -206, -205, -143,
	57, 56, -149, 59, 58, -109, -172, -208, -81, -81,
	-81, -81, -81, -108, 64, -81, -81, -55, -90, 28,
	-93, 36, -3, -142, -142, -142, -108, -111, -111, -224,
	-111, -111, -151, -200, -199, 56, 142, 71, -197, 59,
	-180, 138, 28, 137, -84, -173, -173, 59, 59, -223,
	58, 88, -111, -70, -142, -224, -224, -224, -224, -46,
	98, 275, -224, -224, -224, 9, -91, 120, 59, -224,
	-224, -224, -74, -199, -208, -189, 88, 64, 150, -169,
	71, 28, 28, -202, -203, 161, -205, -195, 59, -224,
	273, 52, 276, -116, -142, 65, -70, 64, -224, 58,
	-142, -210, 41, 274, 277, 57, -203, 36, -207, 41,
	-111, 163, 275, 59, 164, 276, -215, -216, 55, -223,
	277, -216, 55, 10, 9, -81, 160, -214, 151, 146,
	149, 30, -214, -224, -224, 145, 29, 73,
}

var yyDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 643, 0, 379, 379, 379, 379, 379, 379, 0,
	713, 696, 0, 0, 0, 0, -2, 344, 345, 0,
	347, -2, 0, 0, -2, 1036, 1036, 0, 0, 1036,
	0, 0, 379, 0, 1034, 51, 52, 362, 363, 364,
	88, 1, 3, 0, 383, 651, 0, 0, -2, 381,
	0, 696, 696, 0, 0, 80, 81, 0, 0, 0,
	1023, 0, 694, 694, 694, 714, 715, 718, 719, 33,
	34, 35, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 0, 0, 0, 0, 0, 697, 0, 692, 0,
	692, 692, 692, 0, 292, 464, 722, 723, 1023, 0,
	0, 0, 335, 0, 1037, 304, 0, 306, 1037, 0,
	1037, 0, 313, 0, 0, 319, 220, 327, 341, 342,
	329, 343, 346, 0, 351, 354, 0, 326, 0, 0,
	361, 374, 375, 1036, 1036, 378, 38, 517, 476, 0,
	482, 484, 0, 519, 520, 521, 522, 523, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	551, 552, 628, 629, 630, 631, 632, 633, 634, 635,
	486, 487, 625, 0, 673, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 616, 0, 586, 586, 586, 586,
	586, 586, 586, 586, 0, 0, 0, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 205, 643, 47, 0,
	379, 384, 385, 655, 0, 0, 643, 1035, 0, 0,
	-2, -2, 395, 401, 402, 403, 404, 380, 0, 407,
	411, 0, 0, 0, 0, 0, 0, 60, 62, 464,
	66, 0, 1012, 677, -2, -2, 0, 0, 720, 721,
	-2, 868, -2, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 0, 0, 110, 0, 108, 0, 1037,
	0, 0, 0, 0, 0, 0, 1037, 1037, 1037, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 293, 1037, 335, 296, 0, 0, 1037,
	1037, 1037, 0, 1037, 1037, 303, 1038, 1039, 0, 335,
	379, 213, 214, 215, 307, 1037, 1037, 309, 0, 332,
	330, 331, 324, 325, 0, 338, 316, 317, 322, 221,
	352, 355, 0, 373, 365, 366, 367, 368, 0, 376,
	377, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 504, 505, 506, 507,
	508, 509, 510, 483, 0, 497, 0, 0, 0, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 0, 392,
	0, 0, 0, 643, 0, 0, 0, 0, 0, 0,
	0, 389, 0, 617, 0, 570, 578, 0, 571, 579,
	572, 580, 573, 0, 574, 581, 575, 582, 576, 577,
	583, 0, 0, 0, 392, 392, 0, 0, 220, 220,
	0, 94, 730, 651, 0, 394, 39, 0, 0, 652,
	644, 645, 648, 651, 0, 416, 405, 396, 399, 400,
	382, 0, 408, 412, 0, 414, 415, 0, 64, 0,
	463, 0, 418, 420, 421, 422, 445, 0, 447, -2,
	0, 0, 0, 58, 59, 0, 0, 0, 0, 1012,
	678, 68, 69, 0, 0, 0, 188, 687, 688, 689,
	685, 238, 0, 0, 176, 172, 116, 117, 118, 165,
	120, 165, 165, 165, 165, 185, 185, 185, 185, 148,
	149, 150, 151, 152, 0, 0, 135, 165, 165, 165,
	139, 155, 156, 157, 158, 159, 160, 161, 162, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 167, 167,
	167, 169, 169, 716, 83, 0, 1037, 0, 1037, 106,
	0, 252, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 693, 0, 1037, 289, 290, 465, 724,
	725, 294, 295, 336, 337, 297, 298, 299, 300, 301,
	302, 0, 216, 217, 0, 321, 0, 308, 312, 0,
	335, 0, 0, 314, 315, 0, 0, 0, 353, 369,
	357, 358, 359, 360, 518, 477, 478, 479, 481, 498,
	0, 500, 502, 488, 489, 513, 514, 515, 0, 0,
	0, 0, 511, 493, 0, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 538, 601, 602,
	0, 536, 537, 548, 0, 0, 0, 393, 626, 0,
	-2, 0, 516, 672, 651, 0, 0, 0, 0, 521,
	628, 0, 521, 628, 0, 0, 0, 390, 391, 623,
	620, 0, 0, 625, 0, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 92, 0, 728, 731, 0,
	36, 655, 48, 656, 0, 0, 0, 0, 647, 649,
	650, 655, 0, 636, 0, 0, 474, 0, 0, 397,
	45, 413, 409, 0, 0, 0, 462, 0, 0, 0,
	0, 0, 0, 452, 0, 0, 455, 0, 0, 0,
	0, 446, 0, 0, 0, 0, 469, 952, 448, 0,
	450, 451, 474, 0, 474, 61, 474, 63, 0, 468,
	679, 67, 0, 0, 72, 73, 680, 681, 682, 683,
	0, 107, 239, 241, 244, 245, 246, 111, 112, 113,
	0, 0, 226, 0, 0, 220, 220, 0, 218, 219,
	109, 179, 177, 0, 174, 173, 119, 0, 185, 185,
	142, 143, 188, 0, 188, 188, 188, 0, 0, 136,
	137, 138, 130, 0, 131, 132, 133, 0, 134, 0,
	0, 1037, 85, 695, 86, 1036, 0, 0, 708, 253,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	0, 98, 257, 259, 258, 262, 0, 0, 0, 284,
	1037, 288, 0, 332, 335, 429, 332, 311, 333, 334,
	339, 318, 349, 372, 370, 371, 499, 501, 503, 490,
	511, 494, 0, 491, 0, 0, 485, 553, 0, 0,
	392, 0, 643, 655, 557, 558, 0, 0, 0, 0,
	0, 594, 0, 0, 595, 0, 643, 0, 621, 0,
	0, 569, 0, 588, 0, 0, 589, 590, 591, 592,
	593, 90, 95, 96, 97, 93, 0, 733, 729, 0,
	37, 0, 41, 0, 653, 654, 646, 40, 0, 690,
	691, 637, 638, 639, 0, 406, 417, 398, 0, 666,
	0, 0, 659, 0, 0, 474, 674, 0, 419, 441,
	443, 0, 438, 453, 454, 456, 0, 458, 0, 460,
	461, 423, 424, 425, 426, 0, 427, 0, 0, 0,
	0, 449, 643, 474, 56, 57, 0, 70, 71, 0,
	0, 77, 189, 190, 0, 242, 0, 0, 0, 208,
	220, 220, 211, 212, 0, 181, 0, 178, 115, 175,
	0, 188, 188, 144, 0, 145, 146, 147, 0, 163,
	0, 0, 0, 0, 717, 84, 247, 1036, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 1036, 0, 1036, 709, 710, 711, 712, 0,
	101, 0, 0, 0, 0, 0, 287, 466, 335, 320,
	335, 0, 335, 492, 0, 512, 495, 554, 555, 0,
	627, 651, 43, 0, 165, 165, 606, 165, 169, 609,
	165, 611, 165, 614, 0, 0, 0, 0, 0, 0,
	0, 618, 568, 624, 0, 626, 0, 0, 0, 732,
	0, 726, 657, 42, 641, 0, 475, 410, 49, 0,
	666, 658, 668, 670, 0, 0, 662, 0, 433, 643,
	0, 0, 435, 442, 0, 0, 436, 0, 437, 457,
	459, -2, 0, 0, 0, 0, 651, 55, 74, 75,
	76, 240, 243, 0, 222, 165, 225, 209, 210, 0,
	183, 0, 180, 166, 140, 141, 186, 187, 185, 0,
	185, 0, 170, 0, 1037, 248, 249, 250, 251, 0,
	256, 0, 99, 100, 0, 0, 261, 285, 0, 305,
	323, 0, 431, 310, 496, 556, 655, 559, 603, 185,
	607, 608, 610, 612, 613, 615, 561, 560, 0, 0,
	0, 0, 0, 651, 0, 622, 0, 0, 91, 727,
	46, 0, 0, 0, 50, 0, 671, 0, 0, 0,
	65, 0, 651, 675, 676, 439, 0, 444, 0, 0,
	0, 447, 54, 199, 0, 224, 0, 191, 184, 0,
	188, 164, 188, 0, 0, 82, 0, 102, 103, 0,
	0, 0, 467, 430, 0, 44, 604, 605, 0, 0,
	0, 0, 596, 0, 619, 0, 0, 642, 640, 0,
	669, 0, 661, 664, 663, 434, 53, 0, 0, 471,
	0, 0, 469, 198, 200, 0, 206, 0, 223, 0,
	196, 0, 193, 195, 182, 153, 154, 168, 171, 0,
	0, 0, 0, 263, 432, 562, 564, 563, 565, 0,
	0, 0, 567, 584, 585, 0, 660, 0, 440, 470,
	472, 473, 428, 201, 202, 0, 207, 204, 0, 114,
	0, 192, 194, 0, 279, 0, 104, 105, 98, 566,
	0, 0, 0, 667, 665, 203, 0, 197, 278, 0,
	0, 101, 597, 0, 600, 0, 280, 0, 260, 598,
	0, 0, 0, 227, 0, 0, 228, 229, 0, 0,
	599, 230, 0, 0, 0, 0, 0, 231, 233, 234,
	0, 0, 232, 281, 282, 235, 236, 237,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 376,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:359
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:364
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:365
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:400
		{
			setParseTree(yylex, nil)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:406
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:420
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:432
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:438
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:446
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:454
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:477
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:485
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:499
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:505
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:509
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:516
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:528
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = InsertStr
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = ReplaceStr
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:550
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:560
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:564
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:568
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:582
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:588
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:592
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:597
		{
			yyVAL.partitions = nil
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:601
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:607
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:613
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:617
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:623
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:627
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:633
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:637
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:641
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:647
		{
			yyVAL.str = RepeatableRead
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:651
		{
			yyVAL.str = ReadCommitted
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:655
		{
			yyVAL.str = ReadUncommitted
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:659
		{
			yyVAL.str = Serializable
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.str = SessionStr
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:669
		{
			yyVAL.str = GlobalStr
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:675
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 82:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:686
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:691
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:695
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:699
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:703
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:708
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:712
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:718
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:723
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:728
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str, KeyFilePath: string(yyDollar[6].bytes), KeyEnvVar: string(yyDollar[7].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:733
		{
			yyVAL.statement = &AuthRevoke{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:739
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: yyDollar[5].tableName.GetRawVal()}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:744
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:750
		{
			yyVAL.str = InteractiveStr
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:754
		{
			yyVAL.str = ServiceAccountStr
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.str = ServiceAccountStr
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:764
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:768
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:779
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:784
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:795
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:801
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:807
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:814
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:821
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:825
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:844
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 114:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:850
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 154:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1050
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1054
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1077
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1082
		{
			yyVAL.sqlVal = nil
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1091
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1095
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1103
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1113
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1121
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1130
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1140
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1148
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1153
		{
			yyVAL.optVal = nil
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1162
		{
			yyVAL.optVal = nil
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1166
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1171
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1193
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1206
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1210
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1218
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1222
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1227
		{
			yyVAL.sqlVal = nil
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1237
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1241
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1251
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1257
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1266
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1272
		{
			yyVAL.statement = &Sleep{Duration: NewIntVal(yyDollar[2].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1282
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1288
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1292
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1296
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1300
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1304
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1325
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1329
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1335
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1339
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1344
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1348
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1354
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1364
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1370
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1374
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 227:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1381
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 228:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1385
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 229:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1389
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 230:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1393
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1399
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1405
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1411
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1415
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1419
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1423
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1427
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1432
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1436
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1440
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1448
		{
			yyVAL.str = yyDollar[1].str
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1452
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1456
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1466
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1470
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1476
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1480
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1488
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1493
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1498
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1557
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1600
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1606
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1610
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1616
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 282:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1620
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1632
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1636
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1644
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1652
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1657
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1669
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1679
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &OtherRead{}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1695
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1700
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1705
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1718
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1722
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1726
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1734
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1738
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1743
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1747
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1759
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1764
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1774
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1778
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1782
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1786
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1795
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1799
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1807
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1824
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), ShowTablesOpt: showTablesOpt}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1829
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: yyDollar[3].str}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1834
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Comments: Comments(yyDollar[4].bytes2), Type: string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt, Columns: yyDollar[6].columns}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1845
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = "extended "
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1861
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.str = "full "
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1871
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1881
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1885
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1889
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1895
		{
			yyVAL.showFilter = nil
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1899
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1903
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1909
		{
			yyVAL.showFilter = nil
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1913
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1919
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1923
		{
			yyVAL.str = SessionStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.str = GlobalStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1933
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = &Begin{}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &Begin{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &Commit{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.statement = &Rollback{}
		}
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1963
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1968
		{
			yyVAL.empty = struct{}{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.empty = struct{}{}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1973
		{
			yyVAL.empty = struct{}{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1975
		{
			yyVAL.empty = struct{}{}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1980
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1986
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1991
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.str = JSONStr
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1999
		{
			yyVAL.str = TreeStr
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2003
		{
			yyVAL.str = VitessStr
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2007
		{
			yyVAL.str = TraditionalStr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.str = AnalyzeStr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2017
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2039
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2043
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2062
		{
			yyVAL.statement = &DescribeTable{Full: string(yyDollar[2].str), Extended: string(yyDollar[3].str), Table: yyDollar[4].tableName}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2066
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2072
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2080
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2084
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2094
		{
			setAllowComments(yylex, true)
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2098
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2104
		{
			yyVAL.bytes2 = nil
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = UnionStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = UnionAllStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2122
		{
			yyVAL.str = UnionDistinctStr
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = ""
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2135
		{
			yyVAL.str = SQLCacheStr
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2144
		{
			yyVAL.str = DistinctStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = DistinctStr
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2153
		{
			yyVAL.selectExprs = nil
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2157
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2162
		{
			yyVAL.strs = nil
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2170
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2174
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2178
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = SQLCacheStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = DistinctStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.str = DistinctStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.str = StraightJoinHint
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2204
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2224
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2232
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2237
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2241
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2245
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2257
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2261
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2271
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2281
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2285
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2289
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2293
		{
			exec := yyDollar[2].statement.(*Exec)
			yyVAL.tableExpr = &ExecSubquery{Exec: exec}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 428:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2310
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2315
		{
			yyVAL.columns = nil
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2319
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2326
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2330
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2336
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2353
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2357
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2361
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2365
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2373
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2377
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2379
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2383
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2385
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2388
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2390
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2393
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2397
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2408
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2414
		{
			yyVAL.str = JoinStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.str = JoinStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2422
		{
			yyVAL.str = JoinStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2428
		{
			yyVAL.str = StraightJoinStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2434
		{
			yyVAL.str = LeftJoinStr
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			yyVAL.str = LeftJoinStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2442
		{
			yyVAL.str = RightJoinStr
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2446
		{
			yyVAL.str = RightJoinStr
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			yyVAL.str = NaturalJoinStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2456
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2466
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2470
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2476
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2480
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2484
		{
			yyVAL.tableName = TableName{QualifierSecond: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2488
		{
			yyVAL.tableName = TableName{QualifierThird: yyDollar[1].tableIdent, QualifierSecond: yyDollar[3].tableIdent, Qualifier: yyDollar[5].tableIdent, Name: yyDollar[7].tableIdent}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2494
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2499
		{
			yyVAL.indexHints = nil
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2503
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2507
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2511
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2515
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = nil
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2564
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2568
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2592
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2626
		{
			yyVAL.str = IsNullStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2630
		{
			yyVAL.str = IsNotNullStr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2634
		{
			yyVAL.str = IsTrueStr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2638
		{
			yyVAL.str = IsNotTrueStr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2642
		{
			yyVAL.str = IsFalseStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			yyVAL.str = IsNotFalseStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2652
		{
			yyVAL.str = EqualStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2656
		{
			yyVAL.str = LessThanStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2660
		{
			yyVAL.str = GreaterThanStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2664
		{
			yyVAL.str = LessEqualStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2668
		{
			yyVAL.str = GreaterEqualStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2672
		{
			yyVAL.str = NotEqualStr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2676
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = nil
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2685
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2695
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2699
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2705
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2715
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2729
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2733
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2741
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2789
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2805
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2809
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2813
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2817
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2851
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 559:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 560:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 561:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 563:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 564:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2923
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 566:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 567:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2931
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2962
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2972
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2988
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2992
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 585:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3029
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3051
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3055
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3059
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3063
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3069
		{
			yyVAL.str = ""
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3073
		{
			yyVAL.str = BooleanModeStr
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3077
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 599:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3081
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3085
		{
			yyVAL.str = QueryExpansionStr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3091
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3101
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3105
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3109
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3117
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3121
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3131
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3139
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3143
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3151
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3156
		{
			yyVAL.expr = nil
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3165
		{
			yyVAL.str = string("")
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3169
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3175
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3179
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3185
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3190
		{
			yyVAL.expr = nil
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3194
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3204
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3208
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3226
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3230
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3234
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3238
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3242
		{
			yyVAL.expr = &NullVal{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3257
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3261
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3266
		{
			yyVAL.exprs = nil
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3270
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3275
		{
			yyVAL.expr = nil
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3279
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3284
		{
			yyVAL.orderBy = nil
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3288
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3298
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3304
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3309
		{
			yyVAL.str = AscScr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3313
		{
			yyVAL.str = AscScr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3317
		{
			yyVAL.str = DescScr
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3322
		{
			yyVAL.limit = nil
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3326
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3330
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3334
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3339
		{
			yyVAL.str = ""
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3343
		{
			yyVAL.str = ForUpdateStr
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3347
		{
			yyVAL.str = ShareModeStr
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3360
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3364
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3368
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3372
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3378
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3382
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3386
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3390
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3395
		{
			yyVAL.updateExprs = nil
		}
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3399
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3409
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3415
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3419
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3425
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3431
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3441
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3445
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3451
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3457
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3461
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3466
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3472
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3476
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3480
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3484
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3491
		{
			yyVAL.bytes = []byte("charset")
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3498
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3502
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3506
		{
			yyVAL.expr = &Default{}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3515
		{
			yyVAL.byt = 0
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3517
		{
			yyVAL.byt = 1
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3520
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3522
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3525
		{
			yyVAL.str = ""
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3527
		{
			yyVAL.str = IgnoreStr
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3531
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3533
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3535
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3537
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3539
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3541
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3543
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3545
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3547
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3549
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3552
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3554
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3556
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3560
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3562
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3565
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3572
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3574
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3578
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3582
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3589
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3595
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3599
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3606
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3612
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3618
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3624
		{
			yyVAL.execVarDefOpt = nil
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3626
		{
			rv := yyDollar[1].execVarDef
			yyVAL.execVarDefOpt = &rv
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3632
		{
			yyVAL.execVarDefs = nil
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3634
		{
			yyVAL.execVarDefs = []ExecVarDef{yyDollar[1].execVarDef}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3638
		{
			yyVAL.execVarDefs = append(yyDollar[1].execVarDefs, yyDollar[3].execVarDef)
		}
	case 733:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3645
		{
			yyVAL.statement = NewExec(yyDollar[2].bytes2, yyDollar[3].tableName, yyDollar[4].execVarDefs, yyDollar[5].execVarDefOpt)
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3972
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3981
		{
			decNesting(yylex)
		}
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3986
		{
			skipToEnd(yylex)
		}
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3991
		{
			skipToEnd(yylex)
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3995
		{
			skipToEnd(yylex)
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3999
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
