// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	execsubquery         *ExecSubquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	execVarDef           ExecVarDef
	execVarDefOpt        *ExecVarDef
	execVarDefs          []ExecVarDef
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688
const AUTH = 57689
const INTERACTIVE = 57690
const LOGIN = 57691
const REVOKE = 57692
const SA = 57693
const SERVICEACCOUNT = 57694
const SLEEP = 57695
const REGISTRY = 57696
const PULL = 57697
const LIST = 57698
const EXEC = 57699
const STACKQL = 57700

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"AUTH",
	"INTERACTIVE",
	"LOGIN",
	"REVOKE",
	"SA",
	"SERVICEACCOUNT",
	"SLEEP",
	"REGISTRY",
	"PULL",
	"LIST",
	"EXEC",
	"STACKQL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	364, 87,
	371, 87,
	-2, 32,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	169, 341,
	170, 341,
	230, 329,
	234, 329,
	235, 329,
	236, 329,
	-2, 327,
	-1, 51,
	134, 351,
	-2, 349,
	-1, 54,
	6, 357,
	8, 357,
	9, 357,
	10, 357,
	57, 357,
	262, 357,
	-2, 329,
	-1, 78,
	38, 387,
	-2, 395,
	-1, 401,
	120, 726,
	-2, 722,
	-1, 402,
	120, 727,
	-2, 723,
	-1, 420,
	38, 388,
	-2, 400,
	-1, 421,
	38, 389,
	-2, 401,
	-1, 444,
	88, 995,
	-2, 78,
	-1, 445,
	88, 905,
	-2, 79,
	-1, 450,
	88, 873,
	134, 873,
	-2, 688,
	-1, 452,
	88, 939,
	134, 939,
	-2, 690,
	-1, 779,
	56, 60,
	58, 60,
	-2, 64,
	-1, 961,
	120, 729,
	-2, 725,
	-1, 1426,
	5, 644,
	17, 644,
	19, 644,
	31, 644,
	59, 644,
	-2, 427,
}

const yyPrivate = 57344

const yyLast = 18672

var yyAct = [...]int{
	401, 1465, 1663, 1345, 1630, 1250, 1673, 1476, 1543, 345,
	1078, 1579, 374, 1271, 360, 1406, 1048, 1407, 1439, 1251,
	1074, 1403, 753, 331, 746, 1238, 702, 1121, 449, 1087,
	879, 77, 3, 343, 617, 1077, 413, 1412, 1418, 1000,
	1018, 97, 948, 1178, 1322, 296, 1091, 901, 296, 1368,
	1313, 792, 615, 97, 75, 1050, 1033, 756, 751, 955,
	981, 347, 1044, 422, 773, 925, 407, 31, 638, 1117,
	575, 772, 443, 791, 763, 768, 1026, 438, 892, 73,
	332, 435, 781, 335, 296, 97, 78, 336, 576, 296,
	715, 296, 33, 34, 65, 36, 37, 606, 1107, 716,
	72, 740, 741, 403, 738, 739, 911, 7, 958, 1217,
	404, 69, 1219, 1218, 330, 6, 38, 57, 58, 446,
	60, 80, 81, 82, 83, 84, 5, 595, 386, 306,
	392, 393, 390, 391, 389, 388, 387, 1666, 428, 47,
	1650, 408, 1661, 64, 394, 395, 1638, 1658, 1466, 405,
	1649, 1605, 664, 663, 673, 674, 666, 667, 668, 669,
	670, 671, 672, 665, 1637, 1385, 675, 1499, 580, 793,
	33, 794, 65, 36, 37, 99, 100, 101, 292, 288,
	289, 290, 1285, 1433, 284, 1284, 1065, 282, 1286, 286,
	1434, 1435, 1066, 1067, 1101, 317, 632, 334, 333, 1304,
	633, 630, 631, 1100, 637, 1140, 1533, 1108, 1490, 40,
	41, 43, 42, 45, 1347, 59, 300, 1488, 324, 1139,
	320, 64, 909, 326, 322, 303, 99, 100, 101, 635,
	868, 625, 626, 310, 1349, 865, 867, 1660, 46, 68,
	67, 1657, 1631, 55, 56, 44, 612, 1624, 614, 1344,
	99, 100, 101, 1027, 1677, 912, 913, 914, 1092, 48,
	49, 1138, 50, 51, 52, 53, 636, 308, 1681, 1341,
	1348, 869, 866, 315, 1587, 1343, 1580, 596, 582, 795,
	611, 613, 286, 296, 587, 588, 285, 1350, 296, 1094,
	597, 1582, 1272, 1274, 296, 872, 640, 340, 1094, 1429,
	296, 604, 291, 301, 610, 97, 856, 619, 283, 97,
	1428, 97, 1369, 1427, 1135, 1132, 1133, 639, 1131, 578,
	585, 99, 100, 101, 299, 796, 287, 97, 1606, 1152,
	312, 304, 1151, 313, 314, 320, 1197, 687, 688, 305,
	307, 317, 1612, 302, 319, 318, 1514, 329, 66, 1473,
	1281, 1142, 1145, 1371, 1243, 1094, 1207, 649, 650, 592,
	644, 624, 1581, 627, 1186, 1157, 1075, 1108, 787, 609,
	1675, 767, 700, 1676, 1273, 1674, 602, 665, 826, 1342,
	675, 1340, 675, 1588, 1586, 1636, 620, 99, 100, 101,
	1373, 1137, 1377, 1093, 1372, 1194, 1370, 99, 100, 101,
	1061, 1375, 1093, 1006, 685, 652, 296, 893, 608, 906,
	1374, 622, 655, 1136, 608, 902, 1622, 893, 598, 599,
	600, 655, 1596, 1376, 1378, 1387, 66, 589, 1416, 590,
	743, 97, 591, 296, 296, 296, 647, 1395, 99, 100,
	101, 744, 97, 703, 645, 1226, 687, 688, 97, 648,
	1192, 1452, 1191, 1141, 982, 646, 63, 642, 1302, 1093,
	62, 70, 814, 1097, 1090, 1088, 316, 1089, 1143, 858,
	1098, 653, 654, 652, 1086, 1092, 446, 1682, 718, 720,
	722, 724, 726, 728, 729, 932, 757, 719, 721, 655,
	725, 727, 607, 730, 894, 1626, 771, 745, 607, 930,
	931, 929, 903, 827, 894, 687, 688, 653, 654, 652,
	621, 982, 87, 1204, 790, 1389, 780, 1193, 1641, 785,
	760, 1683, 623, 1011, 1012, 655, 1539, 1538, 755, 840,
	843, 844, 845, 846, 847, 848, 1317, 849, 850, 851,
	852, 853, 828, 829, 830, 831, 812, 813, 841, 1316,
	815, 88, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 832, 833, 834, 835, 836, 837, 838, 839,
	1305, 64, 653, 654, 652, 296, 653, 654, 652, 854,
	97, 406, 857, 928, 859, 296, 296, 97, 97, 97,
	655, 281, 1643, 296, 655, 1623, 296, 1559, 1536, 296,
	877, 878, 1503, 296, 1393, 97, 99, 100, 101, 1314,
	97, 97, 97, 296, 97, 97, 653, 654, 652, 654,
	652, 842, 920, 922, 923, 1165, 97, 97, 884, 921,
	1002, 881, 855, 581, 655, 417, 655, 1549, 1659, 862,
	863, 864, 574, 296, 1645, 417, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 1593, 882, 1171, 1172,
	1173, 1221, 886, 887, 888, 1225, 890, 891, 99, 100,
	101, 926, 950, 432, 433, 1592, 949, 873, 898, 899,
	99, 100, 101, 1448, 1288, 951, 664, 663, 673, 674,
	666, 667, 668, 669, 670, 671, 672, 665, 895, 97,
	675, 1549, 1634, 883, 99, 100, 101, 897, 1549, 417,
	1549, 1614, 1549, 1584, 1549, 1548, 1332, 896, 970, 973,
	927, 952, 953, 74, 983, 1095, 965, 583, 584, 961,
	1415, 960, 97, 97, 1510, 959, 1529, 1528, 651, 639,
	639, 997, 998, 1179, 1516, 417, 1346, 1595, 1328, 1329,
	1330, 1513, 417, 1239, 703, 97, 668, 669, 670, 671,
	672, 665, 296, 1020, 675, 97, 1458, 1457, 1454, 1455,
	296, 1454, 1453, 1019, 417, 1030, 417, 417, 296, 296,
	1003, 962, 296, 296, 651, 417, 296, 296, 296, 97,
	1013, 803, 802, 783, 991, 992, 961, 1404, 1025, 1030,
	1415, 1456, 959, 97, 576, 783, 402, 995, 996, 1046,
	1415, 1030, 76, 966, 967, 1029, 881, 972, 975, 976,
	1331, 1021, 1055, 446, 782, 1336, 1333, 1324, 1334, 1327,
	1289, 1323, 1064, 1020, 1210, 1325, 1326, 1079, 784, 1023,
	786, 1209, 990, 1030, 1056, 993, 994, 98, 1058, 1335,
	784, 297, 782, 1019, 297, 1019, 1054, 296, 97, 98,
	97, 1062, 1144, 1063, 1059, 782, 296, 296, 296, 296,
	296, 1009, 296, 296, 1082, 871, 296, 97, 788, 1008,
	1019, 1123, 666, 667, 668, 669, 670, 671, 672, 665,
	297, 98, 675, 296, 64, 297, 296, 297, 296, 1651,
	1545, 296, 1502, 296, 296, 1102, 1521, 1122, 296, 97,
	1127, 97, 1129, 1444, 1356, 1292, 1109, 1110, 1111, 1007,
	1119, 1120, 363, 362, 365, 366, 367, 368, 1118, 1156,
	1113, 364, 369, 1112, 417, 1546, 410, 1125, 653, 654,
	652, 33, 926, 664, 663, 673, 674, 666, 667, 668,
	669, 670, 671, 672, 665, 924, 655, 675, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 1160, 664, 663, 673, 674, 666, 667,
	668, 669, 670, 671, 672, 665, 33, 64, 675, 33,
	311, 927, 64, 1419, 1420, 1174, 1668, 1664, 1220, 1162,
	1446, 1422, 1188, 1404, 1318, 907, 875, 1103, 1104, 1105,
	1106, 1425, 1262, 1245, 1424, 987, 1566, 1263, 1259, 1246,
	1258, 296, 1260, 1114, 1115, 1116, 1655, 1261, 1227, 1187,
	408, 296, 296, 296, 296, 296, 1648, 64, 1232, 1252,
	64, 1203, 1397, 296, 1264, 327, 1039, 1040, 296, 423,
	1228, 754, 296, 1653, 1237, 1236, 296, 747, 1247, 1496,
	1309, 801, 605, 424, 1301, 1183, 1184, 978, 1231, 748,
	758, 759, 426, 1628, 425, 1627, 1287, 1240, 97, 1270,
	1277, 979, 1279, 1241, 1280, 1242, 1201, 1293, 1290, 297,
	1564, 639, 639, 1508, 297, 1299, 1254, 1255, 1265, 1257,
	297, 1294, 1253, 1541, 430, 1256, 297, 1276, 1128, 874,
	1043, 98, 1079, 411, 412, 98, 1282, 98, 1278, 414,
	1507, 1235, 415, 76, 1239, 1506, 97, 97, 1308, 1234,
	1310, 1311, 1312, 98, 1400, 634, 1295, 1296, 1198, 664,
	663, 673, 674, 666, 667, 668, 669, 670, 671, 672,
	665, 1670, 1669, 675, 1321, 1195, 97, 900, 296, 1297,
	1298, 761, 1670, 1610, 1315, 337, 673, 674, 666, 667,
	668, 669, 670, 671, 672, 665, 1534, 1337, 675, 1320,
	1005, 410, 74, 1045, 29, 79, 881, 97, 1352, 71,
	1, 999, 1222, 949, 1035, 1038, 1039, 1040, 1036, 1223,
	1037, 1041, 1306, 1307, 1419, 1420, 1353, 1662, 1351, 1357,
	1366, 1224, 297, 1367, 1001, 1467, 1542, 1134, 1629, 1358,
	1578, 1365, 1501, 1438, 1386, 1085, 1076, 86, 1175, 1176,
	1177, 573, 85, 1621, 296, 1379, 961, 98, 960, 297,
	297, 297, 1390, 1380, 97, 1364, 618, 1084, 98, 97,
	97, 1405, 1083, 1585, 98, 1252, 1532, 1354, 1096, 1408,
	1396, 1394, 1303, 664, 663, 673, 674, 666, 667, 668,
	669, 670, 671, 672, 665, 1099, 97, 675, 1365, 1035,
	1038, 1039, 1040, 1036, 423, 1037, 1041, 1445, 1300, 1625,
	97, 1414, 97, 97, 809, 1423, 639, 639, 424, 807,
	1431, 808, 1437, 806, 1432, 420, 421, 426, 811, 425,
	1451, 810, 805, 1430, 309, 441, 908, 323, 1042, 296,
	797, 1124, 762, 1441, 1079, 1436, 1079, 1449, 1450, 89,
	1339, 1338, 1130, 905, 628, 629, 683, 1233, 1283, 296,
	447, 440, 1355, 1410, 1010, 97, 1460, 1468, 97, 97,
	97, 296, 750, 1505, 1399, 1202, 712, 97, 980, 776,
	346, 1461, 919, 1463, 1442, 1443, 361, 358, 359, 1014,
	986, 1244, 657, 344, 338, 775, 1034, 1032, 1031, 436,
	1421, 297, 1417, 774, 419, 1216, 98, 1498, 1604, 418,
	977, 297, 297, 98, 98, 98, 54, 1168, 328, 297,
	35, 1486, 297, 1481, 427, 297, 61, 28, 30, 297,
	27, 98, 22, 21, 20, 19, 98, 98, 98, 297,
	98, 98, 18, 24, 17, 1252, 16, 1509, 15, 1504,
	593, 39, 98, 98, 26, 1518, 25, 97, 14, 13,
	1517, 12, 11, 10, 656, 97, 9, 1290, 416, 297,
	8, 1474, 1531, 1475, 4, 1478, 643, 23, 701, 2,
	97, 0, 0, 0, 0, 0, 0, 97, 1527, 0,
	0, 1079, 0, 0, 296, 0, 0, 1360, 1361, 0,
	337, 0, 0, 0, 0, 1552, 0, 0, 0, 713,
	0, 0, 1381, 1382, 0, 1383, 1384, 0, 0, 0,
	0, 1544, 881, 0, 1547, 98, 1550, 1391, 1392, 0,
	0, 0, 1540, 0, 97, 97, 0, 97, 0, 749,
	752, 0, 97, 1408, 97, 97, 97, 296, 1565, 1572,
	97, 1573, 1575, 1576, 1563, 1558, 0, 0, 98, 98,
	1571, 0, 0, 1577, 1567, 0, 97, 296, 1583, 1589,
	97, 0, 1535, 1597, 1537, 0, 1590, 0, 1591, 0,
	0, 98, 0, 0, 1483, 1484, 0, 1485, 297, 0,
	1487, 98, 1489, 0, 0, 0, 297, 0, 0, 1408,
	0, 1620, 1611, 1551, 297, 297, 0, 0, 297, 297,
	1619, 1618, 297, 297, 297, 98, 97, 97, 0, 1447,
	0, 0, 0, 0, 1632, 0, 0, 1633, 1613, 98,
	0, 0, 0, 97, 0, 0, 1639, 0, 375, 32,
	1252, 0, 0, 0, 0, 296, 0, 0, 0, 0,
	1544, 1079, 97, 0, 0, 1530, 0, 0, 1647, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1654,
	1652, 32, 97, 0, 0, 0, 0, 1479, 0, 1656,
	0, 0, 0, 297, 98, 1667, 98, 0, 0, 0,
	0, 0, 297, 297, 297, 297, 297, 1678, 297, 297,
	0, 0, 297, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 297, 0, 297, 0, 0, 297, 0, 297,
	297, 0, 0, 885, 297, 98, 0, 98, 0, 664,
	663, 673, 674, 666, 667, 668, 669, 670, 671, 672,
	665, 0, 0, 675, 1494, 0, 0, 0, 0, 904,
	663, 673, 674, 666, 667, 668, 669, 670, 671, 672,
	665, 0, 659, 675, 662, 0, 915, 916, 917, 918,
	676, 677, 678, 679, 680, 681, 682, 0, 660, 661,
	658, 664, 663, 673, 674, 666, 667, 668, 669, 670,
	671, 672, 665, 1493, 0, 675, 0, 0, 0, 0,
	0, 1553, 1554, 1555, 1556, 1557, 0, 0, 0, 1560,
	1561, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 969, 0, 664, 663, 673, 674, 666, 667,
	668, 669, 670, 671, 672, 665, 0, 297, 675, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 297, 297,
	297, 297, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 0, 0, 297, 0, 0, 0, 297, 0,
	0, 0, 297, 664, 663, 673, 674, 666, 667, 668,
	669, 670, 671, 672, 665, 0, 0, 675, 0, 0,
	0, 0, 1359, 0, 98, 664, 663, 673, 674, 666,
	667, 668, 669, 670, 671, 672, 665, 0, 0, 675,
	1070, 1073, 664, 663, 673, 674, 666, 667, 668, 669,
	670, 671, 672, 665, 1180, 0, 675, 0, 0, 0,
	0, 0, 0, 616, 0, 0, 0, 616, 0, 616,
	0, 0, 98, 98, 664, 663, 673, 674, 666, 667,
	668, 669, 670, 671, 672, 665, 0, 32, 675, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	684, 686, 98, 1671, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 699, 0, 98, 0, 704, 705, 706, 707, 708,
	709, 710, 711, 0, 714, 717, 717, 717, 723, 717,
	717, 723, 717, 731, 732, 733, 734, 735, 736, 737,
	96, 0, 0, 0, 0, 0, 0, 0, 32, 0,
	0, 0, 325, 0, 0, 0, 0, 0, 0, 0,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 777, 0, 0, 98, 98, 0, 0, 0,
	0, 0, 0, 0, 448, 0, 0, 0, 0, 0,
	0, 0, 963, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 1205, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 98, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1229, 1230, 752, 1004, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 0, 0,
	0, 98, 0, 0, 98, 98, 98, 297, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 0, 0, 616, 616, 616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 616, 0, 0, 0, 0, 616, 616,
	616, 0, 616, 616, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 616, 616, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	297, 0, 0, 0, 448, 0, 0, 0, 448, 0,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 641, 0, 0, 1388,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 98, 1181, 98, 0, 0, 1182, 0, 98, 0,
	98, 98, 98, 297, 0, 0, 98, 1189, 1190, 0,
	0, 0, 0, 1196, 1401, 0, 1199, 1200, 0, 0,
	0, 0, 98, 297, 1206, 0, 98, 0, 1208, 0,
	0, 1211, 1212, 1213, 1214, 1215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	777, 0, 98, 98, 777, 0, 0, 0, 0, 0,
	765, 0, 0, 0, 0, 1267, 1268, 1269, 0, 98,
	0, 448, 0, 0, 0, 0, 0, 798, 0, 0,
	0, 297, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 616, 0, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 616, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 337, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 1520, 0, 0, 1522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1362, 1363, 0, 0, 0, 448,
	0, 0, 0, 0, 0, 0, 448, 448, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1185, 0,
	0, 409, 0, 0, 448, 0, 0, 0, 0, 448,
	448, 448, 0, 448, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 448, 448, 0, 0, 0,
	0, 1562, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 777,
	0, 1426, 0, 0, 0, 1248, 1249, 0, 0, 777,
	777, 777, 777, 777, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 373, 1047, 0, 1275, 0,
	0, 0, 0, 0, 777, 0, 0, 0, 954, 0,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 988, 989, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1015, 1480, 0, 0, 0, 1482,
	0, 0, 0, 0, 765, 616, 431, 448, 0, 439,
	1491, 1492, 0, 0, 295, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 0,
	0, 0, 0, 0, 616, 0, 0, 0, 0, 0,
	1511, 1512, 448, 1515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 448, 0, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 1409, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1167, 0,
	1169, 0, 0, 0, 1574, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1600, 1601, 1602, 1603, 0, 1607,
	0, 1608, 1609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1615, 0, 1616, 1617, 295, 0,
	0, 0, 0, 295, 0, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1644, 0, 0, 0, 1497, 0, 0, 0, 0, 984,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1679, 1680, 0, 0, 1523, 1524, 1525, 778,
	0, 0, 0, 0, 0, 0, 0, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 0, 0, 431, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 0, 0, 0, 295, 295,
	295, 0, 0, 0, 0, 1319, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1409,
	0, 32, 0, 437, 0, 448, 0, 0, 577, 0,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1594, 0, 0, 0, 0, 0, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1409, 0, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 448, 0, 984, 0, 0, 1411, 1413,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 295, 0, 0, 0, 1413, 0, 0, 295, 0,
	0, 295, 0, 0, 295, 0, 0, 0, 880, 448,
	0, 448, 1440, 0, 0, 0, 0, 0, 295, 1665,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 1469, 1470, 1471,
	0, 0, 586, 0, 0, 0, 1477, 594, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 0, 603,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 880, 0, 0, 0,
	431, 431, 0, 0, 431, 431, 431, 0, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 0, 0, 0, 431,
	431, 431, 431, 431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 448, 0, 0, 0,
	0, 0, 0, 0, 1477, 0, 0, 295, 0, 0,
	0, 0, 0, 880, 0, 295, 0, 0, 0, 448,
	0, 0, 0, 295, 1052, 0, 448, 295, 295, 0,
	0, 295, 1060, 880, 0, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 770, 0, 779, 0, 0, 0, 0, 0,
	0, 0, 0, 1568, 1569, 0, 1570, 0, 0, 0,
	0, 1477, 0, 1477, 1477, 1477, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 0, 0, 1477, 0, 0, 0, 1599,
	0, 295, 295, 295, 295, 295, 0, 295, 295, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 0,
	0, 295, 0, 295, 0, 0, 295, 0, 1163, 1164,
	0, 0, 0, 295, 0, 448, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 0, 1640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 431, 804, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 860, 861, 0, 0, 0, 0,
	0, 0, 870, 431, 0, 437, 0, 0, 876, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 295, 0, 0, 0,
	0, 0, 910, 0, 0, 985, 295, 295, 295, 295,
	295, 0, 0, 0, 0, 0, 0, 0, 1266, 0,
	0, 0, 0, 295, 0, 0, 0, 1052, 0, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1022, 0, 0, 0, 0, 0, 0, 0, 1028,
	0, 0, 0, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 985, 0, 0, 0, 1146, 1147, 1148, 1149, 1150,
	0, 1153, 1154, 0, 0, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1158, 0, 0, 1159, 0, 770, 0, 0,
	1161, 0, 0, 0, 0, 0, 0, 1166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 985, 0, 0, 0,
	0, 0, 0, 1398, 0, 0, 0, 0, 0, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 547, 0, 504, 562, 476, 494, 570, 495,
	498, 535, 461, 517, 191, 492, 0, 480, 456, 488,
	457, 478, 506, 132, 510, 475, 549, 520, 561, 162,
	0, 481, 568, 164, 526, 0, 241, 179, 0, 0,
	0, 508, 551, 515, 544, 503, 536, 466, 525, 563,
	493, 533, 564, 0, 0, 0, 99, 100, 101, 0,
	1080, 1081, 0, 0, 0, 0, 0, 122, 0, 530,
	558, 490, 532, 534, 572, 455, 527, 0, 459, 462,
	569, 554, 484, 485, 1291, 0, 0, 0, 0, 0,
	0, 507, 516, 541, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 482, 0, 524, 1598, 0, 0, 463,
	460, 0, 0, 0, 0, 505, 0, 0, 0, 465,
	0, 483, 542, 0, 453, 141, 546, 553, 502, 298,
	557, 500, 499, 560, 210, 0, 246, 144, 161, 118,
	158, 103, 114, 0, 143, 188, 218, 222, 550, 479,
	489, 126, 486, 220, 198, 262, 523, 200, 219, 165,
	252, 211, 261, 271, 272, 249, 269, 276, 237, 107,
	248, 260, 123, 231, 0, 0, 0, 109, 258, 244,
	177, 154, 155, 108, 1642, 216, 131, 139, 128, 190,
	255, 256, 127, 279, 115, 268, 111, 116, 267, 184,
	251, 259, 178, 170, 110, 257, 176, 169, 160, 135,
	146, 208, 167, 209, 147, 181, 180, 182, 0, 458,
	0, 242, 265, 280, 120, 474, 250, 274, 275, 0,
	212, 121, 140, 134, 207, 138, 183, 117, 149, 239,
	159, 166, 215, 278, 197, 221, 124, 264, 240, 470,
	473, 468, 469, 518, 519, 565, 566, 567, 543, 464,
	0, 471, 472, 0, 548, 555, 556, 522, 102, 112,
	163, 277, 213, 137, 266, 454, 467, 130, 477, 0,
	0, 491, 496, 497, 509, 511, 512, 513, 514, 521,
	528, 529, 531, 537, 538, 539, 540, 545, 552, 571,
	104, 105, 113, 119, 125, 129, 133, 136, 142, 145,
	148, 150, 151, 152, 157, 168, 172, 173, 174, 175,
	185, 186, 187, 189, 192, 193, 194, 195, 196, 199,
	201, 202, 203, 204, 205, 206, 214, 217, 223, 224,
	225, 226, 227, 228, 230, 233, 234, 235, 236, 243,
	247, 253, 254, 263, 270, 273, 0, 0, 0, 0,
	106, 156, 171, 229, 232, 238, 245, 0, 0, 0,
	487, 153, 559, 547, 0, 504, 562, 476, 494, 570,
	495, 498, 535, 461, 517, 191, 492, 0, 480, 456,
	488, 457, 478, 506, 132, 510, 475, 549, 520, 561,
	162, 0, 481, 568, 164, 526, 0, 241, 179, 0,
	0, 0, 508, 551, 515, 544, 503, 536, 466, 525,
	563, 493, 533, 564, 0, 0, 0, 99, 100, 101,
	0, 1080, 1081, 0, 0, 0, 0, 0, 122, 0,
	530, 558, 490, 532, 534, 572, 455, 527, 0, 459,
	462, 569, 554, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 507, 516, 541, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 482, 0, 524, 0, 0, 0,
	463, 460, 0, 0, 0, 0, 505, 0, 0, 0,
	465, 0, 483, 542, 0, 453, 141, 546, 553, 502,
	298, 557, 500, 499, 560, 210, 0, 246, 144, 161,
	118, 158, 103, 114, 0, 143, 188, 218, 222, 550,
	479, 489, 126, 486, 220, 198, 262, 523, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	107, 248, 260, 123, 231, 0, 0, 0, 109, 258,
	244, 177, 154, 155, 108, 0, 216, 131, 139, 128,
	190, 255, 256, 127, 279, 115, 268, 111, 116, 267,
	184, 251, 259, 178, 170, 110, 257, 176, 169, 160,
	135, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	458, 0, 242, 265, 280, 120, 474, 250, 274, 275,
	0, 212, 121, 140, 134, 207, 138, 183, 117, 149,
	239, 159, 166, 215, 278, 197, 221, 124, 264, 240,
	470, 473, 468, 469, 518, 519, 565, 566, 567, 543,
	464, 0, 471, 472, 0, 548, 555, 556, 522, 102,
	112, 163, 277, 213, 137, 266, 454, 467, 130, 477,
	0, 0, 491, 496, 497, 509, 511, 512, 513, 514,
	521, 528, 529, 531, 537, 538, 539, 540, 545, 552,
	571, 104, 105, 113, 119, 125, 129, 133, 136, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 106, 156, 171, 229, 232, 238, 245, 0, 0,
	0, 487, 153, 559, 547, 0, 504, 562, 476, 494,
	570, 495, 498, 535, 461, 517, 191, 492, 0, 480,
	456, 488, 457, 478, 506, 132, 510, 475, 549, 520,
	561, 162, 0, 481, 568, 164, 526, 0, 241, 179,
	0, 0, 0, 508, 551, 515, 544, 503, 536, 466,
	525, 563, 493, 533, 564, 64, 0, 0, 99, 100,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 530, 558, 490, 532, 534, 572, 455, 527, 0,
	459, 462, 569, 554, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 507, 516, 541, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 482, 0, 524, 0, 0,
	0, 463, 460, 0, 0, 0, 0, 505, 0, 0,
	0, 465, 0, 483, 542, 0, 453, 141, 546, 553,
	502, 298, 557, 500, 499, 560, 210, 0, 246, 144,
	161, 118, 158, 103, 114, 0, 143, 188, 218, 222,
	550, 479, 489, 126, 486, 220, 198, 262, 523, 200,
	219, 165, 252, 211, 261, 271, 272, 249, 269, 276,
	237, 107, 248, 260, 123, 231, 0, 0, 0, 109,
	258, 244, 177, 154, 155, 108, 0, 216, 131, 139,
	128, 190, 255, 256, 127, 279, 115, 268, 111, 116,
	267, 184, 251, 259, 178, 170, 110, 257, 176, 169,
	160, 135, 146, 208, 167, 209, 147, 181, 180, 182,
	0, 458, 0, 242, 265, 280, 120, 474, 250, 274,
	275, 0, 212, 121, 140, 134, 207, 138, 183, 117,
	149, 239, 159, 166, 215, 278, 197, 221, 124, 264,
	240, 470, 473, 468, 469, 518, 519, 565, 566, 567,
	543, 464, 0, 471, 472, 0, 548, 555, 556, 522,
	102, 112, 163, 277, 213, 137, 266, 454, 467, 130,
	477, 0, 0, 491, 496, 497, 509, 511, 512, 513,
	514, 521, 528, 529, 531, 537, 538, 539, 540, 545,
	552, 571, 104, 105, 113, 119, 125, 129, 133, 136,
	142, 145, 148, 150, 151, 152, 157, 168, 172, 173,
	174, 175, 185, 186, 187, 189, 192, 193, 194, 195,
	196, 199, 201, 202, 203, 204, 205, 206, 214, 217,
	223, 224, 225, 226, 227, 228, 230, 233, 234, 235,
	236, 243, 247, 253, 254, 263, 270, 273, 0, 0,
	0, 0, 106, 156, 171, 229, 232, 238, 245, 0,
	0, 0, 487, 153, 559, 547, 0, 504, 562, 476,
	494, 570, 495, 498, 535, 461, 517, 191, 492, 0,
	480, 456, 488, 457, 478, 506, 132, 510, 475, 549,
	520, 561, 162, 0, 481, 568, 164, 526, 0, 241,
	179, 0, 0, 0, 508, 551, 515, 544, 503, 536,
	466, 525, 563, 493, 533, 564, 0, 0, 0, 99,
	100, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 530, 558, 490, 532, 534, 572, 455, 527,
	0, 459, 462, 569, 554, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 507, 516, 541, 501, 0, 0,
	0, 0, 0, 0, 1402, 0, 482, 0, 524, 0,
	0, 0, 463, 460, 0, 0, 0, 0, 505, 0,
	0, 0, 465, 0, 483, 542, 0, 453, 141, 546,
	553, 502, 298, 557, 500, 499, 560, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 550, 479, 489, 126, 486, 220, 198, 262, 523,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 458, 0, 242, 265, 280, 120, 474, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 470, 473, 468, 469, 518, 519, 565, 566,
	567, 543, 464, 0, 471, 472, 0, 548, 555, 556,
	522, 102, 112, 163, 277, 213, 137, 266, 454, 467,
	130, 477, 0, 0, 491, 496, 497, 509, 511, 512,
	513, 514, 521, 528, 529, 531, 537, 538, 539, 540,
	545, 552, 571, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 106, 156, 171, 229, 232, 238, 245,
	0, 0, 0, 487, 153, 559, 547, 0, 504, 562,
	476, 494, 570, 495, 498, 535, 461, 517, 191, 492,
	0, 480, 456, 488, 457, 478, 506, 132, 510, 475,
	549, 520, 561, 162, 0, 481, 568, 164, 526, 0,
	241, 179, 0, 0, 0, 508, 551, 515, 544, 503,
	536, 466, 525, 563, 493, 533, 564, 0, 0, 0,
	99, 100, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 530, 558, 490, 532, 534, 572, 455,
	527, 0, 459, 462, 569, 554, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 507, 516, 541, 501, 0,
	0, 0, 0, 0, 0, 1061, 0, 482, 0, 524,
	0, 0, 0, 463, 460, 0, 0, 0, 0, 505,
	0, 0, 0, 465, 0, 483, 542, 0, 453, 141,
	546, 553, 502, 298, 557, 500, 499, 560, 210, 0,
	246, 144, 161, 118, 158, 103, 114, 0, 143, 188,
	218, 222, 550, 479, 489, 126, 486, 220, 198, 262,
	523, 200, 219, 165, 252, 211, 261, 271, 272, 249,
	269, 276, 237, 107, 248, 260, 123, 231, 0, 0,
	0, 109, 258, 244, 177, 154, 155, 108, 0, 216,
	131, 139, 128, 190, 255, 256, 127, 279, 115, 268,
	111, 116, 267, 184, 251, 259, 178, 170, 110, 257,
	176, 169, 160, 135, 146, 208, 167, 209, 147, 181,
	180, 182, 0, 458, 0, 242, 265, 280, 120, 474,
	250, 274, 275, 0, 212, 121, 140, 134, 207, 138,
	183, 117, 149, 239, 159, 166, 215, 278, 197, 221,
	124, 264, 240, 470, 473, 468, 469, 518, 519, 565,
	566, 567, 543, 464, 0, 471, 472, 0, 548, 555,
	556, 522, 102, 112, 163, 277, 213, 137, 266, 454,
	467, 130, 477, 0, 0, 491, 496, 497, 509, 511,
	512, 513, 514, 521, 528, 529, 531, 537, 538, 539,
	540, 545, 552, 571, 104, 105, 113, 119, 125, 129,
	133, 136, 142, 145, 148, 150, 151, 152, 157, 168,
	172, 173, 174, 175, 185, 186, 187, 189, 192, 193,
	194, 195, 196, 199, 201, 202, 203, 204, 205, 206,
	214, 217, 223, 224, 225, 226, 227, 228, 230, 233,
	234, 235, 236, 243, 247, 253, 254, 263, 270, 273,
	0, 0, 0, 0, 106, 156, 171, 229, 232, 238,
	245, 0, 0, 0, 487, 153, 559, 547, 0, 504,
	562, 476, 494, 570, 495, 498, 535, 461, 517, 191,
	492, 0, 480, 456, 488, 457, 478, 506, 132, 510,
	475, 549, 520, 561, 162, 0, 481, 568, 164, 526,
	0, 241, 179, 0, 0, 0, 508, 551, 515, 544,
	503, 536, 466, 525, 563, 493, 533, 564, 0, 0,
	0, 99, 100, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 530, 558, 490, 532, 534, 572,
	455, 527, 0, 459, 462, 569, 554, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 507, 516, 541, 501,
	0, 0, 0, 0, 0, 0, 1024, 0, 482, 0,
	524, 0, 0, 0, 463, 460, 0, 0, 0, 0,
	505, 0, 0, 0, 465, 0, 483, 542, 0, 453,
	141, 546, 553, 502, 298, 557, 500, 499, 560, 210,
	0, 246, 144, 161, 118, 158, 103, 114, 0, 143,
	188, 218, 222, 550, 479, 489, 126, 486, 220, 198,
	262, 523, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 107, 248, 260, 123, 231, 0,
	0, 0, 109, 258, 244, 177, 154, 155, 108, 0,
	216, 131, 139, 128, 190, 255, 256, 127, 279, 115,
	268, 111, 116, 267, 184, 251, 259, 178, 170, 110,
	257, 176, 169, 160, 135, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 458, 0, 242, 265, 280, 120,
	474, 250, 274, 275, 0, 212, 121, 140, 134, 207,
	138, 183, 117, 149, 239, 159, 166, 215, 278, 197,
	221, 124, 264, 240, 470, 473, 468, 469, 518, 519,
	565, 566, 567, 543, 464, 0, 471, 472, 0, 548,
	555, 556, 522, 102, 112, 163, 277, 213, 137, 266,
	454, 467, 130, 477, 0, 0, 491, 496, 497, 509,
	511, 512, 513, 514, 521, 528, 529, 531, 537, 538,
	539, 540, 545, 552, 571, 104, 105, 113, 119, 125,
	129, 133, 136, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 0, 0, 106, 156, 171, 229, 232,
	238, 245, 0, 0, 0, 487, 153, 559, 547, 0,
	504, 562, 476, 494, 570, 495, 498, 535, 461, 517,
	191, 492, 0, 480, 456, 488, 457, 478, 506, 132,
	510, 475, 549, 520, 561, 162, 0, 481, 568, 164,
	526, 0, 241, 179, 0, 0, 0, 508, 551, 515,
	544, 503, 536, 466, 525, 563, 493, 533, 564, 0,
	0, 0, 99, 100, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 530, 558, 490, 532, 534,
	572, 455, 527, 0, 459, 462, 569, 554, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 507, 516, 541,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 482,
	0, 524, 0, 0, 0, 463, 460, 0, 0, 0,
	0, 505, 0, 0, 0, 465, 0, 483, 542, 0,
	453, 141, 546, 553, 502, 298, 557, 500, 499, 560,
	210, 0, 246, 144, 161, 118, 158, 103, 114, 0,
	143, 188, 218, 222, 550, 479, 489, 126, 486, 220,
	198, 262, 523, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 107, 248, 260, 123, 231,
	0, 0, 0, 109, 258, 244, 177, 154, 155, 108,
	0, 216, 131, 139, 128, 190, 255, 256, 127, 279,
	115, 268, 111, 116, 267, 184, 251, 259, 178, 170,
	110, 257, 176, 169, 160, 135, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 458, 0, 242, 265, 280,
	120, 474, 250, 274, 275, 0, 212, 121, 140, 134,
	207, 138, 183, 117, 149, 239, 159, 166, 215, 278,
	197, 221, 124, 264, 240, 470, 473, 468, 469, 518,
	519, 565, 566, 567, 543, 464, 0, 471, 472, 0,
	548, 555, 556, 522, 102, 112, 163, 277, 213, 137,
	266, 454, 467, 130, 477, 0, 0, 491, 496, 497,
	509, 511, 512, 513, 514, 521, 528, 529, 531, 537,
	538, 539, 540, 545, 552, 571, 104, 105, 113, 119,
	125, 129, 133, 136, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 106, 156, 171, 229,
	232, 238, 245, 0, 0, 0, 487, 153, 559, 547,
	0, 504, 562, 476, 494, 570, 495, 498, 535, 461,
	517, 191, 492, 0, 480, 456, 488, 457, 478, 506,
	132, 510, 475, 549, 520, 561, 162, 0, 481, 568,
	164, 526, 0, 241, 179, 0, 0, 0, 508, 551,
	515, 544, 503, 536, 466, 525, 563, 493, 533, 564,
	0, 0, 0, 99, 100, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 530, 558, 490, 532,
	534, 572, 455, 527, 0, 459, 462, 569, 554, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 507, 516,
	541, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	482, 0, 524, 0, 0, 0, 463, 460, 0, 0,
	0, 0, 505, 0, 0, 0, 465, 0, 483, 542,
	0, 453, 141, 546, 553, 502, 298, 557, 500, 499,
	560, 210, 0, 246, 144, 161, 118, 158, 103, 114,
	0, 143, 188, 218, 222, 550, 479, 489, 126, 486,
	220, 198, 262, 523, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 107, 248, 260, 123,
	231, 0, 0, 0, 109, 258, 244, 177, 154, 155,
	108, 0, 216, 131, 139, 128, 190, 255, 256, 127,
	279, 115, 268, 111, 451, 267, 184, 251, 259, 178,
	170, 110, 257, 176, 169, 160, 135, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 458, 0, 242, 265,
	280, 120, 474, 250, 274, 275, 0, 212, 121, 140,
	134, 207, 138, 452, 450, 149, 239, 159, 166, 215,
	278, 197, 221, 124, 264, 240, 470, 473, 468, 469,
	518, 519, 565, 566, 567, 543, 464, 0, 471, 472,
	0, 548, 555, 556, 522, 102, 112, 163, 277, 213,
	137, 266, 454, 467, 130, 477, 0, 0, 491, 496,
	497, 509, 511, 512, 513, 514, 521, 528, 529, 531,
	537, 538, 539, 540, 545, 552, 571, 104, 105, 113,
	119, 125, 129, 133, 136, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 0, 0, 106, 156, 171,
	229, 232, 238, 245, 0, 0, 0, 487, 153, 559,
	547, 0, 504, 562, 476, 494, 570, 495, 498, 535,
	461, 517, 191, 492, 0, 480, 456, 488, 457, 478,
	506, 132, 510, 475, 549, 520, 561, 162, 0, 481,
	568, 164, 526, 0, 241, 179, 0, 0, 0, 508,
	551, 515, 544, 503, 536, 466, 525, 563, 493, 533,
	564, 0, 0, 0, 99, 100, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 530, 558, 490,
	532, 534, 572, 455, 527, 0, 459, 462, 569, 554,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 507,
	516, 541, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 482, 0, 524, 0, 0, 0, 463, 460, 0,
	0, 0, 0, 505, 0, 0, 0, 465, 0, 483,
	542, 0, 453, 141, 546, 553, 502, 298, 557, 500,
	499, 560, 210, 0, 246, 144, 161, 118, 158, 103,
	114, 0, 143, 188, 218, 222, 550, 479, 489, 126,
	486, 220, 198, 262, 523, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 107, 248, 789,
	123, 231, 0, 0, 0, 109, 258, 244, 177, 154,
	155, 108, 0, 216, 131, 139, 128, 190, 255, 256,
	127, 279, 115, 268, 111, 451, 267, 184, 251, 259,
	178, 170, 110, 257, 176, 169, 160, 135, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 458, 0, 242,
	265, 280, 120, 474, 250, 274, 275, 0, 212, 121,
	140, 134, 207, 138, 452, 450, 149, 239, 159, 166,
	215, 278, 197, 221, 124, 264, 240, 470, 473, 468,
	469, 518, 519, 565, 566, 567, 543, 464, 0, 471,
	472, 0, 548, 555, 556, 522, 102, 112, 163, 277,
	213, 137, 266, 454, 467, 130, 477, 0, 0, 491,
	496, 497, 509, 511, 512, 513, 514, 521, 528, 529,
	531, 537, 538, 539, 540, 545, 552, 571, 104, 105,
	113, 119, 125, 129, 133, 136, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 106, 156,
	171, 229, 232, 238, 245, 0, 0, 0, 487, 153,
	559, 547, 0, 504, 562, 476, 494, 570, 495, 498,
	535, 461, 517, 191, 492, 0, 480, 456, 488, 457,
	478, 506, 132, 510, 475, 549, 520, 561, 162, 0,
	481, 568, 164, 526, 0, 241, 179, 0, 0, 0,
	508, 551, 515, 544, 503, 536, 466, 525, 563, 493,
	533, 564, 0, 0, 0, 99, 100, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 530, 558,
	490, 532, 534, 572, 455, 527, 0, 459, 462, 569,
	554, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	507, 516, 541, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 482, 0, 524, 0, 0, 0, 463, 460,
	0, 0, 0, 0, 505, 0, 0, 0, 465, 0,
	483, 542, 0, 453, 141, 546, 553, 502, 298, 557,
	500, 499, 560, 210, 0, 246, 144, 161, 118, 158,
	103, 114, 0, 143, 188, 218, 222, 550, 479, 489,
	126, 486, 220, 198, 262, 523, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 107, 248,
	442, 123, 231, 0, 0, 0, 109, 258, 244, 177,
	154, 155, 108, 0, 216, 131, 139, 128, 190, 255,
	256, 127, 279, 115, 268, 111, 451, 267, 184, 251,
	259, 178, 170, 110, 257, 176, 169, 160, 135, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 458, 0,
	242, 265, 280, 120, 474, 250, 274, 275, 0, 212,
	121, 140, 134, 207, 138, 452, 450, 445, 444, 159,
	166, 215, 278, 197, 221, 124, 264, 240, 470, 473,
	468, 469, 518, 519, 565, 566, 567, 543, 464, 0,
	471, 472, 0, 548, 555, 556, 522, 102, 112, 163,
	277, 213, 137, 266, 454, 467, 130, 477, 0, 0,
	491, 496, 497, 509, 511, 512, 513, 514, 521, 528,
	529, 531, 537, 538, 539, 540, 545, 552, 571, 104,
	105, 113, 119, 125, 129, 133, 136, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 0, 0, 106,
	156, 171, 229, 232, 238, 245, 0, 0, 191, 487,
	153, 956, 0, 342, 0, 0, 0, 132, 0, 341,
	0, 0, 0, 162, 0, 957, 385, 164, 0, 0,
	241, 179, 0, 0, 0, 0, 0, 376, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	99, 100, 101, 363, 362, 365, 366, 367, 368, 0,
	0, 122, 364, 369, 370, 371, 0, 0, 0, 0,
	339, 356, 0, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 354, 429, 0, 0, 0, 399,
	0, 355, 0, 0, 348, 349, 351, 350, 352, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	398, 0, 0, 298, 0, 0, 396, 0, 210, 0,
	246, 144, 161, 118, 158, 103, 114, 0, 143, 188,
	218, 222, 0, 0, 0, 126, 0, 220, 198, 262,
	0, 200, 219, 165, 252, 211, 261, 271, 272, 249,
	269, 276, 237, 107, 248, 260, 123, 231, 0, 0,
	0, 109, 258, 244, 177, 154, 155, 108, 0, 216,
	131, 139, 128, 190, 255, 256, 127, 279, 115, 268,
	111, 116, 267, 184, 251, 259, 178, 170, 110, 257,
	176, 169, 160, 135, 146, 208, 167, 209, 147, 181,
	180, 182, 0, 0, 0, 242, 265, 280, 120, 0,
	250, 274, 275, 0, 212, 121, 140, 134, 207, 138,
	183, 117, 149, 239, 159, 166, 215, 278, 197, 221,
	124, 264, 240, 386, 397, 392, 393, 390, 391, 389,
	388, 387, 400, 378, 379, 380, 381, 383, 0, 394,
	395, 382, 102, 112, 163, 277, 213, 137, 266, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 113, 119, 125, 129,
	133, 136, 142, 145, 148, 150, 151, 152, 157, 168,
	172, 173, 174, 175, 185, 186, 187, 189, 192, 193,
	194, 195, 196, 199, 201, 202, 203, 204, 205, 206,
	214, 217, 223, 224, 225, 226, 227, 228, 230, 233,
	234, 235, 236, 243, 247, 253, 254, 263, 270, 273,
	0, 0, 0, 0, 106, 156, 171, 229, 232, 238,
	245, 191, 0, 0, 0, 153, 342, 0, 0, 0,
	132, 0, 341, 0, 0, 0, 162, 0, 0, 385,
	164, 0, 0, 241, 179, 0, 0, 0, 0, 0,
	376, 377, 0, 0, 0, 0, 0, 0, 1071, 0,
	64, 0, 0, 99, 100, 101, 363, 362, 365, 366,
	367, 368, 0, 0, 122, 364, 369, 370, 371, 1072,
	0, 0, 0, 339, 356, 0, 384, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 399, 0, 355, 0, 0, 348, 349, 351,
	350, 352, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 398, 0, 0, 298, 0, 0, 396,
	0, 210, 0, 246, 144, 161, 118, 158, 103, 114,
	0, 143, 188, 218, 222, 0, 0, 0, 126, 0,
	220, 198, 262, 0, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 107, 248, 260, 123,
	231, 0, 0, 0, 109, 258, 244, 177, 154, 155,
	108, 0, 216, 131, 139, 128, 190, 255, 256, 127,
	279, 115, 268, 111, 116, 267, 184, 251, 259, 178,
	170, 110, 257, 176, 169, 160, 135, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 0, 0, 242, 265,
	280, 120, 0, 250, 274, 275, 0, 212, 121, 140,
	134, 207, 138, 183, 117, 149, 239, 159, 166, 215,
	278, 197, 221, 124, 264, 240, 386, 397, 392, 393,
	390, 391, 389, 388, 387, 400, 378, 379, 380, 381,
	383, 0, 394, 395, 382, 102, 112, 163, 277, 213,
	137, 266, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 113,
	119, 125, 129, 133, 136, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 0, 0, 106, 156, 171,
	229, 232, 238, 245, 191, 0, 0, 0, 153, 342,
	0, 0, 0, 132, 0, 341, 0, 0, 0, 162,
	0, 0, 385, 164, 0, 0, 241, 179, 0, 0,
	0, 0, 0, 376, 377, 0, 0, 0, 0, 0,
	0, 1068, 0, 64, 0, 0, 99, 100, 101, 363,
	362, 365, 366, 367, 368, 0, 0, 122, 364, 369,
	370, 371, 1069, 0, 0, 0, 339, 356, 0, 384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 0, 0, 399, 0, 355, 0, 0,
	348, 349, 351, 350, 352, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 398, 0, 0, 298,
	0, 0, 396, 0, 210, 0, 246, 144, 161, 118,
	158, 103, 114, 0, 143, 188, 218, 222, 0, 0,
	0, 126, 0, 220, 198, 262, 0, 200, 219, 165,
	252, 211, 261, 271, 272, 249, 269, 276, 237, 107,
	248, 260, 123, 231, 0, 0, 0, 109, 258, 244,
	177, 154, 155, 108, 0, 216, 131, 139, 128, 190,
	255, 256, 127, 279, 115, 268, 111, 116, 267, 184,
	251, 259, 178, 170, 110, 257, 176, 169, 160, 135,
	146, 208, 167, 209, 147, 181, 180, 182, 0, 0,
	0, 242, 265, 280, 120, 0, 250, 274, 275, 0,
	212, 121, 140, 134, 207, 138, 183, 117, 149, 239,
	159, 166, 215, 278, 197, 221, 124, 264, 240, 386,
	397, 392, 393, 390, 391, 389, 388, 387, 400, 378,
	379, 380, 381, 383, 0, 394, 395, 382, 102, 112,
	163, 277, 213, 137, 266, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 113, 119, 125, 129, 133, 136, 142, 145,
	148, 150, 151, 152, 157, 168, 172, 173, 174, 175,
	185, 186, 187, 189, 192, 193, 194, 195, 196, 199,
	201, 202, 203, 204, 205, 206, 214, 217, 223, 224,
	225, 226, 227, 228, 230, 233, 234, 235, 236, 243,
	247, 253, 254, 263, 270, 273, 0, 0, 0, 0,
	106, 156, 171, 229, 232, 238, 245, 191, 0, 0,
	0, 153, 342, 0, 0, 0, 132, 0, 341, 0,
	0, 0, 162, 0, 0, 385, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 376, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 417, 99,
	100, 101, 363, 362, 365, 366, 367, 368, 0, 0,
	122, 364, 369, 370, 371, 0, 0, 0, 0, 339,
	356, 0, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 0, 0, 399, 0,
	355, 0, 0, 348, 349, 351, 350, 352, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 398,
	0, 0, 298, 0, 0, 396, 0, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 0, 0, 0, 126, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 120, 0, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 386, 397, 392, 393, 390, 391, 389, 388,
	387, 400, 378, 379, 380, 381, 383, 0, 394, 395,
	382, 102, 112, 163, 277, 213, 137, 266, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 106, 156, 171, 229, 232, 238, 245,
	191, 0, 0, 0, 153, 342, 0, 0, 0, 132,
	0, 341, 0, 0, 0, 162, 0, 0, 385, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 99, 100, 101, 363, 362, 365, 366, 367,
	368, 0, 0, 122, 364, 369, 370, 371, 0, 0,
	0, 0, 339, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 429, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 398, 0, 0, 298, 0, 0, 396, 0,
	210, 0, 246, 144, 161, 118, 158, 103, 114, 0,
	143, 188, 218, 222, 0, 0, 0, 126, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 107, 248, 260, 123, 231,
	0, 0, 0, 109, 258, 244, 177, 154, 155, 108,
	0, 216, 131, 139, 128, 190, 255, 256, 127, 279,
	115, 268, 111, 116, 267, 184, 251, 259, 178, 170,
	110, 257, 176, 169, 160, 135, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	120, 0, 250, 274, 275, 0, 212, 121, 140, 134,
	207, 138, 183, 117, 149, 239, 159, 166, 215, 278,
	197, 221, 124, 264, 240, 386, 397, 392, 393, 390,
	391, 389, 388, 387, 400, 378, 379, 380, 381, 383,
	0, 394, 395, 382, 102, 112, 163, 277, 213, 137,
	266, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 113, 119,
	125, 129, 133, 136, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 106, 156, 171, 229,
	232, 238, 245, 191, 0, 0, 0, 153, 342, 0,
	0, 0, 132, 0, 341, 0, 0, 0, 162, 0,
	0, 385, 164, 0, 0, 241, 179, 0, 0, 0,
	0, 0, 376, 377, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 99, 100, 101, 363, 974,
	365, 366, 367, 368, 0, 0, 122, 364, 369, 370,
	371, 0, 0, 0, 0, 339, 356, 0, 384, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 354,
	429, 0, 0, 0, 399, 0, 355, 0, 0, 348,
	349, 351, 350, 352, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 398, 0, 0, 298, 0,
	0, 396, 0, 210, 0, 246, 144, 161, 118, 158,
	103, 114, 0, 143, 188, 218, 222, 0, 0, 0,
	126, 0, 220, 198, 262, 0, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 107, 248,
	260, 123, 231, 0, 0, 0, 109, 258, 244, 177,
	154, 155, 108, 0, 216, 131, 139, 128, 190, 255,
	256, 127, 279, 115, 268, 111, 116, 267, 184, 251,
	259, 178, 170, 110, 257, 176, 169, 160, 135, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 0, 0,
	242, 265, 280, 120, 0, 250, 274, 275, 0, 212,
	121, 140, 134, 207, 138, 183, 117, 149, 239, 159,
	166, 215, 278, 197, 221, 124, 264, 240, 386, 397,
	392, 393, 390, 391, 389, 388, 387, 400, 378, 379,
	380, 381, 383, 0, 394, 395, 382, 102, 112, 163,
	277, 213, 137, 266, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 113, 119, 125, 129, 133, 136, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 0, 0, 106,
	156, 171, 229, 232, 238, 245, 191, 0, 0, 0,
	153, 342, 0, 0, 0, 132, 0, 341, 0, 0,
	0, 162, 0, 0, 385, 164, 0, 0, 241, 179,
	0, 0, 0, 0, 0, 376, 377, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 99, 100,
	101, 363, 971, 365, 366, 367, 368, 0, 0, 122,
	364, 369, 370, 371, 0, 0, 0, 0, 339, 356,
	0, 384, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 353, 354, 429, 0, 0, 0, 399, 0, 355,
	0, 0, 348, 349, 351, 350, 352, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 398, 0,
	0, 298, 0, 0, 396, 0, 210, 0, 246, 144,
	161, 118, 158, 103, 114, 0, 143, 188, 218, 222,
	0, 0, 0, 126, 0, 220, 198, 262, 0, 200,
	219, 165, 252, 211, 261, 271, 272, 249, 269, 276,
	237, 107, 248, 260, 123, 231, 0, 0, 0, 109,
	258, 244, 177, 154, 155, 108, 0, 216, 131, 139,
	128, 190, 255, 256, 127, 279, 115, 268, 111, 116,
	267, 184, 251, 259, 178, 170, 110, 257, 176, 169,
	160, 135, 146, 208, 167, 209, 147, 181, 180, 182,
	0, 0, 0, 242, 265, 280, 120, 0, 250, 274,
	275, 0, 212, 121, 140, 134, 207, 138, 183, 117,
	149, 239, 159, 166, 215, 278, 197, 221, 124, 264,
	240, 386, 397, 392, 393, 390, 391, 389, 388, 387,
	400, 378, 379, 380, 381, 383, 0, 394, 395, 382,
	102, 112, 163, 277, 213, 137, 266, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 113, 119, 125, 129, 133, 136,
	142, 145, 148, 150, 151, 152, 157, 168, 172, 173,
	174, 175, 185, 186, 187, 189, 192, 193, 194, 195,
	196, 199, 201, 202, 203, 204, 205, 206, 214, 217,
	223, 224, 225, 226, 227, 228, 230, 233, 234, 235,
	236, 243, 247, 253, 254, 263, 270, 273, 410, 0,
	0, 0, 106, 156, 171, 229, 232, 238, 245, 0,
	191, 0, 0, 153, 0, 342, 0, 0, 0, 132,
	0, 341, 0, 0, 0, 162, 0, 0, 385, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 99, 100, 101, 363, 362, 365, 366, 367,
	368, 0, 0, 122, 364, 369, 370, 371, 0, 0,
	0, 0, 339, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 0, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 398, 0, 0, 298, 0, 0, 396, 0,
	210, 0, 246, 144, 161, 118, 158, 103, 114, 0,
	143, 188, 218, 222, 0, 0, 0, 126, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 107, 248, 260, 123, 231,
	0, 0, 0, 109, 258, 244, 177, 154, 155, 108,
	0, 216, 131, 139, 128, 190, 255, 256, 127, 279,
	115, 268, 111, 116, 267, 184, 251, 259, 178, 170,
	110, 257, 176, 169, 160, 135, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	120, 0, 250, 274, 275, 0, 212, 121, 140, 134,
	207, 138, 183, 117, 149, 239, 159, 166, 215, 278,
	197, 221, 124, 264, 240, 386, 397, 392, 393, 390,
	391, 389, 388, 387, 400, 378, 379, 380, 381, 383,
	0, 394, 395, 382, 102, 112, 163, 277, 213, 137,
	266, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 113, 119,
	125, 129, 133, 136, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 0, 0, 106, 156, 171, 229,
	232, 238, 245, 191, 0, 0, 0, 153, 342, 0,
	0, 0, 132, 0, 341, 0, 0, 0, 162, 0,
	0, 385, 164, 0, 0, 241, 179, 0, 0, 0,
	0, 0, 376, 377, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 99, 100, 101, 363, 362,
	365, 366, 367, 368, 0, 0, 122, 364, 369, 370,
	371, 0, 0, 0, 0, 339, 356, 0, 384, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 354,
	0, 0, 0, 0, 399, 0, 355, 0, 0, 348,
	349, 351, 350, 352, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 398, 0, 0, 298, 0,
	0, 396, 0, 210, 0, 246, 144, 161, 118, 158,
	103, 114, 0, 143, 188, 218, 222, 0, 0, 0,
	126, 0, 220, 198, 262, 0, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 107, 248,
	260, 123, 231, 0, 0, 0, 109, 258, 244, 177,
	154, 155, 108, 0, 216, 131, 139, 128, 190, 255,
	256, 127, 279, 115, 268, 111, 116, 267, 184, 251,
	259, 178, 170, 110, 257, 176, 169, 160, 135, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 0, 0,
	242, 265, 280, 120, 0, 250, 274, 275, 0, 212,
	121, 140, 134, 207, 138, 183, 117, 149, 239, 159,
	166, 215, 278, 197, 221, 124, 264, 240, 386, 397,
	392, 393, 390, 391, 389, 388, 387, 400, 378, 379,
	380, 381, 383, 0, 394, 395, 382, 102, 112, 163,
	277, 213, 137, 266, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 113, 119, 125, 129, 133, 136, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 191, 0, 106,
	156, 171, 229, 232, 238, 245, 132, 0, 0, 0,
	153, 0, 162, 0, 0, 385, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 376, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 99,
	100, 101, 363, 362, 365, 366, 367, 368, 0, 0,
	122, 364, 369, 370, 371, 0, 0, 0, 0, 0,
	356, 0, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 0, 0, 399, 0,
	355, 0, 0, 348, 349, 351, 350, 352, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 398,
	0, 0, 298, 0, 0, 396, 0, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 0, 0, 0, 126, 0, 220, 198, 262, 1672,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 120, 0, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 386, 397, 392, 393, 390, 391, 389, 388,
	387, 400, 378, 379, 380, 381, 383, 0, 394, 395,
	382, 102, 112, 163, 277, 213, 137, 266, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 191, 0, 106, 156, 171, 229, 232, 238, 245,
	132, 0, 0, 0, 153, 0, 162, 0, 0, 385,
	164, 0, 0, 241, 179, 0, 0, 0, 0, 0,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 417, 99, 100, 101, 363, 362, 365, 366,
	367, 368, 0, 0, 122, 364, 369, 370, 371, 0,
	0, 0, 0, 0, 356, 0, 384, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 399, 0, 355, 0, 0, 348, 349, 351,
	350, 352, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 398, 0, 0, 298, 0, 0, 396,
	0, 210, 0, 246, 144, 161, 118, 158, 103, 114,
	0, 143, 188, 218, 222, 0, 0, 0, 126, 0,
	220, 198, 262, 0, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 107, 248, 260, 123,
	231, 0, 0, 0, 109, 258, 244, 177, 154, 155,
	108, 0, 216, 131, 139, 128, 190, 255, 256, 127,
	279, 115, 268, 111, 116, 267, 184, 251, 259, 178,
	170, 110, 257, 176, 169, 160, 135, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 0, 0, 242, 265,
	280, 120, 0, 250, 274, 275, 0, 212, 121, 140,
	134, 207, 138, 183, 117, 149, 239, 159, 166, 215,
	278, 197, 221, 124, 264, 240, 386, 397, 392, 393,
	390, 391, 389, 388, 387, 400, 378, 379, 380, 381,
	383, 0, 394, 395, 382, 102, 112, 163, 277, 213,
	137, 266, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 113,
	119, 125, 129, 133, 136, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 191, 0, 106, 156, 171,
	229, 232, 238, 245, 132, 0, 0, 0, 153, 0,
	162, 0, 0, 385, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 99, 100, 101,
	363, 362, 365, 366, 367, 368, 0, 0, 122, 364,
	369, 370, 371, 0, 0, 0, 0, 0, 356, 0,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 399, 0, 355, 0,
	0, 348, 349, 351, 350, 352, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 398, 0, 0,
	298, 0, 0, 396, 0, 210, 0, 246, 144, 161,
	118, 158, 103, 114, 0, 143, 188, 218, 222, 0,
	0, 0, 126, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	107, 248, 260, 123, 231, 0, 0, 0, 109, 258,
	244, 177, 154, 155, 108, 0, 216, 131, 139, 128,
	190, 255, 256, 127, 279, 115, 268, 111, 116, 267,
	184, 251, 259, 178, 170, 110, 257, 176, 169, 160,
	135, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 120, 0, 250, 274, 275,
	0, 212, 121, 140, 134, 207, 138, 183, 117, 149,
	239, 159, 166, 215, 278, 197, 221, 124, 264, 240,
	386, 397, 392, 393, 390, 391, 389, 388, 387, 400,
	378, 379, 380, 381, 383, 0, 394, 395, 382, 102,
	112, 163, 277, 213, 137, 266, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 113, 119, 125, 129, 133, 136, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 191,
	0, 106, 156, 171, 229, 232, 238, 245, 132, 0,
	0, 0, 153, 0, 162, 0, 0, 0, 164, 0,
	0, 241, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	664, 663, 673, 674, 666, 667, 668, 669, 670, 671,
	672, 665, 0, 0, 675, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 298, 0, 0, 0, 0, 210,
	0, 246, 144, 161, 118, 158, 103, 114, 0, 143,
	188, 218, 222, 0, 0, 0, 126, 0, 220, 198,
	262, 0, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 107, 248, 260, 123, 231, 0,
	0, 0, 109, 258, 244, 177, 154, 155, 108, 0,
	216, 131, 139, 128, 190, 255, 256, 127, 279, 115,
	268, 111, 116, 267, 184, 251, 259, 178, 170, 110,
	257, 176, 169, 160, 135, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 0, 0, 242, 265, 280, 120,
	0, 250, 274, 275, 0, 212, 121, 140, 134, 207,
	138, 183, 117, 149, 239, 159, 166, 215, 278, 197,
	221, 124, 264, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 112, 163, 277, 213, 137, 266,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 113, 119, 125,
	129, 133, 136, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 0, 0, 106, 156, 171, 229, 232,
	238, 245, 0, 191, 0, 0, 153, 764, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 164, 0, 0, 241, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 101, 0, 766,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 653, 654, 652, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	655, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 298, 0,
	0, 0, 0, 210, 0, 246, 144, 161, 118, 158,
	103, 114, 0, 143, 188, 218, 222, 0, 0, 0,
	126, 0, 220, 198, 262, 0, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 107, 248,
	260, 123, 231, 0, 0, 0, 109, 258, 244, 177,
	154, 155, 108, 0, 216, 131, 139, 128, 190, 255,
	256, 127, 279, 115, 268, 111, 116, 267, 184, 251,
	259, 178, 170, 110, 257, 176, 169, 160, 135, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 0, 0,
	242, 265, 280, 120, 0, 250, 274, 275, 0, 212,
	121, 140, 134, 207, 138, 183, 117, 149, 239, 159,
	166, 215, 278, 197, 221, 124, 264, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 112, 163,
	277, 213, 137, 266, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 113, 119, 125, 129, 133, 136, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 191, 0, 106,
	156, 171, 229, 232, 238, 245, 132, 0, 0, 0,
	153, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 93,
	94, 0, 90, 0, 0, 0, 95, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 0, 0, 0, 126, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 120, 0, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 112, 163, 277, 213, 137, 266, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 33,
	0, 0, 0, 106, 156, 171, 229, 232, 238, 245,
	0, 191, 0, 0, 153, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	164, 0, 0, 241, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 99, 100, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 298, 0, 0, 0,
	0, 210, 0, 246, 144, 161, 118, 158, 103, 114,
	0, 143, 188, 218, 222, 0, 0, 0, 126, 0,
	220, 198, 262, 0, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 107, 248, 260, 123,
	231, 0, 0, 0, 109, 258, 244, 177, 154, 155,
	108, 0, 216, 131, 139, 128, 190, 255, 256, 127,
	279, 115, 268, 111, 116, 267, 184, 251, 259, 178,
	170, 110, 257, 176, 169, 160, 135, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 0, 0, 242, 265,
	280, 120, 0, 250, 274, 275, 0, 212, 121, 140,
	134, 207, 138, 183, 117, 149, 239, 159, 166, 215,
	278, 197, 221, 124, 264, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 112, 163, 277, 213,
	137, 266, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 113,
	119, 125, 129, 133, 136, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 0, 0, 106, 156, 171,
	229, 232, 238, 245, 0, 191, 0, 62, 153, 1051,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 101,
	0, 1053, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	298, 0, 0, 0, 0, 210, 0, 246, 144, 161,
	118, 158, 103, 114, 0, 143, 188, 218, 222, 0,
	0, 0, 126, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	107, 248, 260, 123, 231, 0, 0, 0, 109, 258,
	244, 177, 154, 155, 108, 0, 216, 131, 139, 128,
	190, 255, 256, 127, 279, 115, 268, 111, 116, 267,
	184, 251, 259, 178, 170, 110, 257, 176, 169, 160,
	135, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 120, 0, 250, 274, 275,
	0, 212, 121, 140, 134, 207, 138, 183, 117, 149,
	239, 159, 166, 215, 278, 197, 221, 124, 264, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	112, 163, 277, 213, 137, 266, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 113, 119, 125, 129, 133, 136, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 33, 0, 0,
	0, 106, 156, 171, 229, 232, 238, 245, 0, 191,
	0, 0, 153, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 164, 0,
	0, 241, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 99, 100, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 298, 0, 0, 0, 0, 210,
	0, 246, 144, 161, 118, 158, 103, 114, 0, 143,
	188, 218, 222, 0, 0, 0, 126, 0, 220, 198,
	262, 0, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 107, 248, 260, 123, 231, 0,
	0, 0, 109, 258, 244, 177, 154, 155, 108, 0,
	216, 131, 139, 128, 190, 255, 256, 127, 279, 115,
	268, 111, 116, 267, 184, 251, 259, 178, 170, 110,
	257, 176, 169, 160, 135, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 0, 0, 242, 265, 280, 120,
	0, 250, 274, 275, 0, 212, 121, 140, 134, 207,
	138, 183, 117, 149, 239, 159, 166, 215, 278, 197,
	221, 124, 264, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 112, 163, 277, 213, 137, 266,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 113, 119, 125,
	129, 133, 136, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 0, 0, 106, 156, 171, 229, 232,
	238, 245, 0, 191, 0, 0, 153, 1051, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 164, 0, 0, 241, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 101, 0, 1053,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 298, 0,
	0, 0, 0, 210, 0, 246, 144, 161, 118, 158,
	103, 114, 0, 143, 188, 218, 222, 0, 0, 0,
	126, 0, 220, 198, 262, 0, 1049, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 107, 248,
	260, 123, 231, 0, 0, 0, 109, 258, 244, 177,
	154, 155, 108, 0, 216, 131, 139, 128, 190, 255,
	256, 127, 279, 115, 268, 111, 116, 267, 184, 251,
	259, 178, 170, 110, 257, 176, 169, 160, 135, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 0, 0,
	242, 265, 280, 120, 0, 250, 274, 275, 0, 212,
	121, 140, 134, 207, 138, 183, 117, 149, 239, 159,
	166, 215, 278, 197, 221, 124, 264, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 112, 163,
	277, 213, 137, 266, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 113, 119, 125, 129, 133, 136, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 191, 0, 106,
	156, 171, 229, 232, 238, 245, 132, 0, 0, 0,
	153, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 101, 0, 0, 1016, 0, 0, 1017, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 0, 0, 0, 126, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 120, 0, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 112, 163, 277, 213, 137, 266, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 191, 0, 106, 156, 171, 229, 232, 238, 245,
	132, 0, 800, 0, 153, 0, 162, 0, 0, 0,
	164, 0, 0, 241, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 101, 0, 799, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 298, 0, 0, 0,
	0, 210, 0, 246, 144, 161, 118, 158, 103, 114,
	0, 143, 188, 218, 222, 0, 0, 0, 126, 0,
	220, 198, 262, 0, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 107, 248, 260, 123,
	231, 0, 0, 0, 109, 258, 244, 177, 154, 155,
	108, 0, 216, 131, 139, 128, 190, 255, 256, 127,
	279, 115, 268, 111, 116, 267, 184, 251, 259, 178,
	170, 110, 257, 176, 169, 160, 135, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 0, 0, 242, 265,
	280, 120, 0, 250, 274, 275, 0, 212, 121, 140,
	134, 207, 138, 183, 117, 149, 239, 159, 166, 215,
	278, 197, 221, 124, 264, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 112, 163, 277, 213,
	137, 266, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 113,
	119, 125, 129, 133, 136, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 191, 0, 106, 156, 171,
	229, 232, 238, 245, 132, 0, 0, 0, 153, 0,
	162, 0, 0, 0, 164, 0, 0, 241, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 417, 99, 100, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	298, 0, 0, 0, 0, 210, 0, 246, 144, 161,
	118, 158, 103, 114, 0, 143, 188, 218, 222, 0,
	0, 0, 126, 0, 220, 198, 262, 0, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	107, 248, 260, 123, 231, 0, 0, 0, 109, 258,
	244, 177, 154, 155, 108, 0, 216, 131, 139, 128,
	190, 255, 256, 127, 279, 115, 268, 111, 116, 267,
	184, 251, 259, 178, 170, 110, 257, 176, 169, 160,
	135, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	0, 0, 242, 265, 280, 120, 0, 250, 274, 275,
	0, 212, 121, 140, 134, 207, 138, 183, 117, 149,
	239, 159, 166, 215, 278, 197, 221, 124, 264, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	112, 163, 277, 213, 137, 266, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 113, 119, 125, 129, 133, 136, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 191,
	0, 106, 156, 171, 229, 232, 238, 245, 132, 0,
	0, 0, 153, 0, 162, 0, 0, 0, 164, 0,
	0, 241, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 99, 100, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 298, 0, 0, 0, 0, 210,
	0, 246, 144, 161, 118, 158, 103, 114, 0, 143,
	188, 218, 222, 0, 0, 0, 126, 0, 220, 198,
	262, 0, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 107, 248, 260, 123, 231, 0,
	0, 0, 109, 258, 244, 177, 154, 155, 108, 0,
	216, 131, 139, 128, 190, 255, 256, 127, 279, 115,
	268, 111, 116, 267, 184, 251, 259, 178, 170, 110,
	257, 176, 169, 160, 135, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 0, 0, 242, 265, 280, 120,
	0, 250, 274, 275, 0, 212, 121, 140, 134, 207,
	138, 183, 117, 149, 239, 159, 166, 215, 278, 197,
	221, 124, 264, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 112, 163, 277, 213, 137, 266,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 113, 119, 125,
	129, 133, 136, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 191, 0, 106, 156, 171, 229, 232,
	238, 245, 132, 0, 0, 0, 153, 0, 162, 0,
	0, 0, 164, 0, 0, 241, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 101, 0, 1053,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 298, 0,
	0, 0, 0, 210, 0, 246, 144, 161, 118, 158,
	103, 114, 0, 143, 188, 218, 222, 0, 0, 0,
	126, 0, 220, 198, 262, 0, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 107, 248,
	260, 123, 231, 0, 0, 0, 109, 258, 244, 177,
	154, 155, 108, 0, 216, 131, 139, 128, 190, 255,
	256, 127, 279, 115, 268, 111, 116, 267, 184, 251,
	259, 178, 170, 110, 257, 176, 169, 160, 135, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 0, 0,
	242, 265, 280, 120, 0, 250, 274, 275, 0, 212,
	121, 140, 134, 207, 138, 183, 117, 149, 239, 159,
	166, 215, 278, 197, 221, 124, 264, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 112, 163,
	277, 213, 137, 266, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 113, 119, 125, 129, 133, 136, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 191, 0, 106,
	156, 171, 229, 232, 238, 245, 132, 0, 0, 0,
	153, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 101, 0, 1170, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 118, 158, 103, 114, 0, 143, 188, 218,
	222, 0, 0, 0, 126, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 107, 248, 260, 123, 231, 0, 0, 0,
	109, 258, 244, 177, 154, 155, 108, 0, 216, 131,
	139, 128, 190, 255, 256, 127, 279, 115, 268, 111,
	116, 267, 184, 251, 259, 178, 170, 110, 257, 176,
	169, 160, 135, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 120, 0, 250,
	274, 275, 0, 212, 121, 140, 134, 207, 138, 183,
	117, 149, 239, 159, 166, 215, 278, 197, 221, 124,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 112, 163, 277, 213, 137, 266, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 191, 106, 156, 171, 229, 232, 238, 245,
	769, 132, 0, 0, 153, 0, 0, 162, 0, 0,
	0, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 298, 0, 0,
	0, 0, 210, 0, 246, 144, 161, 118, 158, 103,
	114, 0, 143, 188, 218, 222, 0, 0, 0, 126,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 107, 248, 260,
	123, 231, 0, 0, 0, 109, 258, 244, 177, 154,
	155, 108, 0, 216, 131, 139, 128, 190, 255, 256,
	127, 279, 115, 268, 111, 116, 267, 184, 251, 259,
	178, 170, 110, 257, 176, 169, 160, 135, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 120, 0, 250, 274, 275, 0, 212, 121,
	140, 134, 207, 138, 183, 117, 149, 239, 159, 166,
	215, 278, 197, 221, 124, 264, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 112, 163, 277,
	213, 137, 266, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	113, 119, 125, 129, 133, 136, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 191, 0, 106, 156,
	171, 229, 232, 238, 245, 132, 0, 0, 0, 153,
	0, 162, 0, 0, 0, 164, 0, 0, 241, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	101, 0, 766, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 298, 0, 0, 0, 0, 210, 0, 246, 144,
	161, 118, 158, 103, 114, 0, 143, 188, 218, 222,
	0, 0, 0, 126, 0, 220, 198, 262, 0, 200,
	219, 165, 252, 211, 261, 271, 272, 249, 269, 276,
	237, 107, 248, 260, 123, 231, 0, 0, 0, 109,
	258, 244, 177, 154, 155, 108, 0, 216, 131, 139,
	128, 190, 255, 256, 127, 279, 115, 268, 111, 116,
	267, 184, 251, 259, 178, 170, 110, 257, 176, 169,
	160, 135, 146, 208, 167, 209, 147, 181, 180, 182,
	0, 0, 0, 242, 265, 280, 120, 0, 250, 274,
	275, 0, 212, 121, 140, 134, 207, 138, 183, 117,
	149, 239, 159, 166, 215, 278, 197, 221, 124, 264,
	240, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 112, 163, 277, 213, 137, 266, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 113, 119, 125, 129, 133, 136,
	142, 145, 148, 150, 151, 152, 157, 168, 172, 173,
	174, 175, 185, 186, 187, 189, 192, 193, 194, 195,
	196, 199, 201, 202, 203, 204, 205, 206, 214, 217,
	223, 224, 225, 226, 227, 228, 230, 233, 234, 235,
	236, 243, 247, 253, 254, 263, 270, 273, 0, 0,
	0, 0, 106, 156, 171, 229, 232, 238, 245, 434,
	0, 0, 0, 153, 0, 0, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 164, 0, 0, 241, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 298, 0, 0, 0, 0, 210, 0, 246, 144,
	161, 118, 158, 103, 114, 0, 143, 188, 218, 222,
	0, 0, 0, 126, 0, 220, 198, 262, 0, 200,
	219, 165, 252, 211, 261, 271, 272, 249, 269, 276,
	237, 107, 248, 260, 123, 231, 0, 0, 0, 109,
	258, 244, 177, 154, 155, 108, 0, 216, 131, 139,
	128, 190, 255, 256, 127, 279, 115, 268, 111, 116,
	267, 184, 251, 259, 178, 170, 110, 257, 176, 169,
	160, 135, 146, 208, 167, 209, 147, 181, 180, 182,
	0, 0, 0, 242, 265, 280, 120, 0, 250, 274,
	275, 0, 212, 121, 140, 134, 207, 138, 183, 117,
	149, 239, 159, 166, 215, 278, 197, 221, 124, 264,
	240, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 112, 163, 277, 213, 137, 266, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 113, 119, 125, 129, 133, 136,
	142, 145, 148, 150, 151, 152, 157, 168, 172, 173,
	174, 175, 185, 186, 187, 189, 192, 193, 194, 195,
	196, 199, 201, 202, 203, 204, 205, 206, 214, 217,
	223, 224, 225, 226, 227, 228, 230, 233, 234, 235,
	236, 243, 247, 253, 254, 263, 270, 273, 0, 0,
	191, 0, 106, 156, 171, 229, 232, 238, 245, 132,
	0, 0, 0, 153, 0, 162, 0, 0, 0, 164,
	0, 0, 241, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 293, 0, 298, 0, 0, 0, 0,
	210, 0, 246, 144, 161, 118, 158, 103, 114, 0,
	143, 188, 218, 222, 0, 0, 0, 126, 0, 220,
	198, 262, 0, 200, 219, 165, 252, 211, 261, 271,
	272, 249, 269, 276, 237, 107, 248, 260, 123, 231,
	0, 0, 0, 109, 258, 244, 177, 154, 155, 108,
	0, 216, 131, 139, 128, 190, 255, 256, 127, 279,
	115, 268, 111, 116, 267, 184, 251, 259, 178, 170,
	110, 257, 176, 169, 160, 135, 146, 208, 167, 209,
	147, 181, 180, 182, 0, 0, 0, 242, 265, 280,
	120, 0, 250, 274, 275, 0, 212, 121, 140, 134,
	207, 138, 183, 117, 149, 239, 159, 166, 215, 278,
	197, 221, 124, 264, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 112, 163, 277, 213, 137,
	266, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 113, 119,
	125, 129, 133, 136, 142, 145, 148, 150, 151, 152,
	157, 168, 172, 173, 174, 175, 185, 186, 187, 189,
	192, 193, 194, 195, 196, 199, 201, 202, 203, 204,
	205, 206, 214, 217, 223, 224, 225, 226, 227, 228,
	230, 233, 234, 235, 236, 243, 247, 253, 254, 263,
	270, 273, 0, 0, 191, 0, 106, 156, 171, 229,
	232, 238, 245, 132, 0, 0, 0, 153, 0, 162,
	0, 0, 0, 164, 0, 0, 241, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 298,
	0, 0, 0, 0, 210, 0, 246, 144, 161, 118,
	158, 103, 114, 0, 143, 188, 218, 222, 0, 0,
	0, 126, 0, 220, 198, 262, 0, 200, 219, 165,
	252, 211, 261, 271, 272, 249, 269, 276, 237, 107,
	248, 260, 123, 231, 0, 0, 0, 109, 258, 244,
	177, 154, 155, 108, 0, 216, 131, 139, 128, 190,
	255, 256, 127, 279, 115, 268, 111, 116, 267, 184,
	251, 259, 178, 170, 110, 257, 176, 169, 160, 135,
	146, 208, 167, 209, 147, 181, 180, 182, 0, 0,
	0, 242, 265, 280, 120, 0, 250, 274, 275, 0,
	212, 121, 140, 134, 207, 138, 183, 117, 149, 239,
	159, 166, 215, 278, 197, 221, 124, 264, 240, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 112,
	163, 277, 213, 137, 266, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 113, 119, 125, 129, 133, 136, 142, 145,
	148, 150, 151, 152, 157, 168, 172, 173, 174, 175,
	185, 186, 187, 189, 192, 193, 194, 195, 196, 199,
	201, 202, 203, 204, 205, 206, 214, 217, 223, 224,
	225, 226, 227, 228, 230, 233, 234, 235, 236, 243,
	247, 253, 254, 263, 270, 273, 0, 0, 0, 0,
	106, 156, 171, 229, 232, 238, 245, 0, 0, 0,
	0, 153,
}

var yyPact = [...]int{
	86, -1000, -276, 1177, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1108, 935, -1000, -1000, -1000, -1000, -1000, -1000, 455,
	13079, 54, 195, 48, 17952, 193, 102, 18296, -1000, 49,
	-1000, 38, 18296, 45, -13, -1000, -1000, -32, -33, -1000,
	11005, -261, -1000, 516, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 930, 1093, 1102, 1106, 718, 1263, -1000,
	9592, 147, 147, 17608, 7825, -1000, -1000, 546, 18296, 187,
	18296, -94, 142, 142, 142, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 189, 18296, 644, 644, 304, -1000, 18296, 141, 644,
	141, 141, 141, 18296, -1000, 256, -1000, -1000, -1000, 18296,
	644, 1032, 402, 115, 5228, -1000, 378, -1000, 5228, 62,
	5228, -34, 1123, 59, 36, -1000, 644, -1000, -1000, -1000,
	-1000, -1000, -1000, 162, -1000, -1000, 18296, -44, 164, 361,
	-1000, -1000, -1000, -1000, -1000, -1000, 680, 539, -1000, 11005,
	1672, 837, 837, -1000, -1000, 216, -1000, -1000, 12037, 12037,
	12037, 12037, 12037, 12037, 12037, 12037, 12037, 12037, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 837, 252, -1000, 10652, 837, 837, 837, 837,
	837, 837, 837, 837, 11005, 837, 837, 837, 837, 837,
	837, 837, 837, 837, 837, 837, 837, 837, 837, 837,
	837, -1000, -1000, -262, -271, 18296, -1000, 1108, -1000, 935,
	-1000, -1000, -1000, 1038, 11005, 11005, 1108, -1000, 1013, 9592,
	-1000, -1000, 1028, -1000, -1000, -1000, -1000, 450, 1150, -1000,
	12735, 251, 16904, 15871, 18296, 794, 782, -1000, -1000, 248,
	820, 7454, -75, -1000, -1000, -1000, 191, 15183, -1000, -1000,
	-1000, 1031, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 733, 18296, -1000, 348, -1000, 644, 5228,
	173, 644, 389, 644, 18296, 18296, 5228, 5228, 5228, 68,
	105, 99, 18296, 817, 161, 18296, 1086, 951, 18296, 644,
	644, -1000, 6712, -1000, 5228, 402, -1000, 564, 11005, 5228,
	5228, 5228, 18296, 5228, 5228, -1000, -1000, -1000, 406, 396,
	-1000, -1000, -1000, -1000, -1000, 5228, 5228, -1000, 1146, 404,
	-1000, -1000, -1000, -1000, 11005, 313, -1000, 950, -1000, -1000,
	44, -1000, 18296, -1000, 1177, -1000, -1000, -1000, -106, -1000,
	-1000, 11005, 11005, 11005, 11005, 549, 317, 12037, 514, 403,
	12037, 12037, 12037, 12037, 12037, 12037, 12037, 12037, 12037, 12037,
	12037, 12037, 12037, 12037, 12037, 608, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 644, -1000, 1175, 859, 859, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 12381, 8180,
	6712, 718, 726, 1108, 9592, 9592, 11005, 11005, 10298, 9945,
	9592, 1046, 370, 539, 18296, -1000, -1000, 11693, -1000, -1000,
	-1000, -1000, -1000, 576, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 18296, 18296, 9592, 9592, 9592, 9592, 9592, 644, 644,
	644, 644, 569, 1102, 718, 1028, -1000, 1171, 305, 861,
	813, -1000, 499, 1102, 14839, 822, -1000, 1028, -1000, -1000,
	-1000, 18296, -1000, -1000, 17248, -1000, -1000, 6341, 92, 18296,
	-1000, 785, 1234, -1000, -1000, -1000, 1088, 13433, 14495, 92,
	766, 15871, 18296, -1000, -1000, 15871, 18296, 5970, 7083, -75,
	-1000, 774, -1000, -59, -55, 8886, 8533, 253, -1000, -1000,
	-1000, -1000, 4857, 327, 666, 390, -23, -1000, -1000, -1000,
	848, -1000, 848, 848, 848, 848, 6, 6, 6, 6,
	-1000, -1000, -1000, -1000, -1000, 876, 873, -1000, 848, 848,
	848, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 871,
	871, 871, 850, 850, 881, -1000, 18296, 5228, 1085, 5228,
	-1000, 190, -1000, -1000, -1000, 18296, 18296, 18296, 18296, 18296,
	204, 18296, 18296, 807, -1000, 18296, 5228, -1000, -1000, 245,
	-1000, -1000, -1000, -1000, -1000, 539, -1000, -1000, -1000, -1000,
	-1000, -1000, 18296, -1000, -1000, 18296, -1000, 16904, -1000, -1000,
	18296, 402, 18296, 18296, 539, -1000, 561, 18296, 18296, -1000,
	16559, -1000, -1000, -1000, -1000, 539, 317, 541, 326, -1000,
	-1000, 585, -1000, -1000, 1786, -1000, -1000, -1000, -1000, 514,
	12037, 12037, 12037, 587, 1786, 1835, 1065, 1640, 269, 651,
	651, 267, 267, 267, 267, 267, 779, 779, -1000, -1000,
	-1000, 576, -1000, -1000, -1000, 576, 9592, 9592, 795, 837,
	244, -1000, 930, -1000, -1000, 1102, 715, 715, 394, 495,
	384, 1144, 715, 325, 1127, 715, 715, 9592, -1000, -1000,
	427, -1000, 11005, 576, -1000, 236, -1000, 875, 783, 776,
	715, 576, 576, 715, 715, -256, -1000, 644, -1000, 603,
	-1000, 357, -1000, 1038, -1000, -1000, 1010, 11005, 11005, 11005,
	-1000, -1000, -1000, 1038, 1110, -1000, 1019, 1018, 1112, 9592,
	15871, 1028, -1000, -1000, -1000, 234, 983, 837, -1000, 18296,
	15871, 15871, 15871, 15871, 15871, -1000, 975, 973, -1000, 977,
	967, 999, 18296, -1000, 717, 576, 718, 13433, 239, 837,
	-1000, 16215, -1000, -1000, 1112, 15871, 741, -1000, 741, -1000,
	230, -1000, -1000, 774, -75, -64, -1000, -1000, -1000, -1000,
	539, -1000, -1000, 539, -1000, 620, 772, 4486, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 858, 644, -1000, 1073, 270,
	261, 644, 1067, -1000, -1000, -1000, 1035, -1000, 385, -28,
	-1000, -1000, 505, 6, 6, -1000, -1000, 253, 1030, 253,
	253, 253, 545, 545, -1000, -1000, -1000, -1000, 484, -1000,
	-1000, -1000, 471, -1000, 949, 18296, 5228, -1000, -1000, -1000,
	-1000, 688, 688, 247, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 88, 690, -1000, -1000, -1000,
	-1000, 47, 67, 153, -1000, 5228, -1000, 6712, 404, 402,
	857, 404, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 587, 1786, 1803, -1000, 12037,
	12037, -1000, -1000, 715, 715, 9592, 6712, 1108, 1038, -1000,
	-1000, 198, 608, 198, 12037, 12037, -1000, 12037, 12037, -1000,
	-107, 797, 338, -1000, 11005, 430, -1000, 6712, -1000, 12037,
	12037, -1000, -1000, -1000, -1000, -1000, 540, -1000, -1000, -1000,
	-1000, 569, -1000, -1000, 349, -1000, 859, -1000, 1001, 539,
	539, -1000, -1000, 18296, -1000, -1000, -1000, -1000, 1121, 11005,
	-1000, 753, -1000, 5599, 948, 18296, 837, 1177, 14141, 18296,
	752, -1000, 340, 1234, 938, 946, 1149, -1000, -1000, -1000,
	-1000, 969, -1000, 966, -1000, -1000, -1000, -1000, -1000, -1000,
	718, -1000, 181, 178, 167, 18296, -1000, 1108, 741, -1000,
	-1000, 295, -1000, -1000, -63, -60, -1000, -1000, -1000, 4857,
	-1000, 4857, 18296, 110, -1000, 644, 644, -1000, -1000, 856,
	945, 12037, -1000, -1000, -1000, 624, 253, 253, -1000, 337,
	-1000, -1000, -1000, 713, -1000, 710, 743, 708, 18296, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18296, -1000,
	-1000, -1000, -1000, -1000, 18296, -127, 644, 18296, 18296, 18296,
	18296, -1000, 229, 402, -1000, 402, 18296, 402, -1000, 12037,
	1786, 1786, -1000, -1000, 576, -1000, 1102, -1000, 576, 848,
	848, -1000, 848, 850, -1000, 848, 31, 848, 22, 576,
	576, 1764, 1715, 1620, 1040, 837, -101, -1000, 539, 11005,
	-1000, 1164, 844, 538, -1000, 859, -1000, -1000, -1000, 1111,
	1104, 539, -1000, -1000, 1066, 742, 676, -1000, -1000, 9239,
	693, 226, 686, -1000, 1112, 18296, 11005, -1000, -1000, 11005,
	849, -1000, 11005, -1000, -1000, -1000, 1108, 837, 837, 837,
	686, 1102, -1000, -1000, -1000, -1000, 4486, -1000, 678, -1000,
	848, -1000, -1000, -1000, 18296, -17, 1167, 1786, -1000, -1000,
	-1000, -1000, -1000, 6, 534, 6, 462, -1000, 461, 5228,
	-1000, -1000, -1000, -1000, 1077, -1000, 6712, -1000, -1000, 843,
	879, -1000, -1000, 6712, -1000, -1000, 656, -1000, -1000, 1786,
	-1000, 1038, -1000, -1000, 166, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12037, 12037, 12037, 12037, 12037, 1102, 533,
	539, 12037, 12037, -1000, -1000, -1000, 11005, 11005, 1062, -1000,
	837, -1000, 980, 18296, 18296, -1000, 18296, 1108, -1000, 539,
	539, 18296, 539, 15527, 18296, 18296, 13787, -1000, 220, 18296,
	-1000, 654, 246, -1000, -125, 253, -1000, 253, 616, 597,
	-1000, 837, 689, -1000, 334, 18296, 18296, -1000, -1000, 18296,
	-1000, -1000, -1000, 875, 875, 875, 875, 53, 576, -1000,
	875, 875, 539, 680, 1154, -1000, 837, 1177, 222, -1000,
	-1000, 1102, 652, 650, -1000, 650, 650, 239, 220, -1000,
	644, 328, 531, -1000, 97, 424, 1047, -1000, 1045, -1000,
	-1000, -1000, -1000, -1000, 81, 6712, 4857, 643, -1000, -1000,
	-1000, -1000, -1000, -1000, 576, 112, -130, -1000, -1000, -1000,
	18296, 676, 18296, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 453, -1000, -1000, 18296, -1000, 528, -1000, -1000, 586,
	-1000, 18296, -1000, -1000, 690, -1000, 995, -124, -137, 672,
	-1000, -1000, 842, -1000, -1000, 81, 1017, -127, -1000, 985,
	-1000, 18296, -1000, 78, -1000, -128, 579, 73, -134, 942,
	837, -140, 941, -1000, 1142, 11349, -1000, -1000, 1153, 224,
	224, 875, 576, -1000, -1000, -1000, 123, 448, -1000, -1000,
	-1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1459, 1458, 31, 67, 66, 1457, 1456, 1454, 126,
	115, 107, 1450, 1446, 1443, 1442, 1441, 1439, 1438, 1436,
	1434, 1431, 1430, 1428, 1426, 1424, 1423, 1422, 1415, 1414,
	1413, 1412, 1410, 1183, 1408, 1407, 1406, 86, 1404, 79,
	1400, 1398, 1397, 1396, 1390, 1389, 1388, 1387, 1385, 43,
	108, 59, 57, 1384, 63, 1104, 40, 62, 71, 64,
	1383, 38, 1382, 1380, 81, 1379, 1378, 56, 1377, 1376,
	3049, 75, 77, 1375, 13, 25, 1374, 1373, 1372, 1371,
	33, 297, 1369, 1368, 14, 1367, 1366, 99, 1362, 65,
	26, 15, 12, 17, 1360, 61, 1359, 9, 1358, 60,
	1356, 1355, 1354, 1353, 22, 1352, 58, 1344, 36, 24,
	1343, 7, 1342, 76, 37, 21, 5, 1341, 1340, 19,
	72, 51, 73, 1338, 1337, 591, 1336, 990, 47, 1335,
	1334, 129, 97, 1333, 127, 633, 1332, 1331, 1330, 1329,
	28, 806, 1979, 34, 74, 1322, 1321, 1320, 2665, 30,
	55, 16, 1318, 1317, 1316, 23, 52, 42, 1315, 1314,
	49, 1312, 1311, 1308, 1303, 1301, 1299, 1294, 194, 1289,
	1288, 1287, 98, 20, 1275, 1262, 69, 27, 1258, 1256,
	1253, 50, 70, 1252, 1247, 46, 1246, 78, 68, 1233,
	1232, 1231, 1227, 1226, 35, 10, 1225, 18, 1223, 11,
	1220, 29, 1218, 4, 1217, 8, 1216, 1, 0, 1215,
	3, 1214, 1211, 44, 6, 1207, 2, 39, 1199, 1192,
	1191, 1190, 1189, 1618, 1370, 82, 1185, 90,
}

var yyR1 = [...]int{
	0, 221, 222, 222, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 208, 208, 208, 211, 212, 20, 3,
	3, 3, 3, 2, 2, 8, 4, 5, 5, 9,
	9, 40, 40, 10, 11, 11, 11, 11, 225, 225,
	64, 64, 65, 65, 113, 113, 12, 13, 13, 122,
	122, 121, 121, 121, 123, 123, 123, 123, 158, 158,
	14, 14, 14, 14, 14, 14, 14, 36, 36, 32,
	32, 32, 32, 35, 35, 35, 48, 48, 48, 210,
	210, 209, 207, 207, 206, 206, 205, 21, 190, 192,
	192, 191, 191, 191, 191, 182, 161, 161, 161, 161,
	164, 164, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 163, 163, 163, 163, 163, 165, 165, 165, 165,
	165, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 167, 167, 167, 167,
	167, 167, 167, 167, 181, 181, 168, 168, 176, 176,
	177, 177, 177, 174, 174, 175, 175, 178, 178, 178,
	170, 170, 171, 171, 179, 179, 172, 172, 172, 173,
	173, 173, 180, 180, 180, 180, 180, 169, 169, 183,
	183, 200, 200, 199, 199, 199, 34, 189, 189, 196,
	196, 196, 196, 196, 186, 186, 186, 187, 187, 185,
	185, 188, 188, 198, 198, 197, 184, 184, 201, 201,
	201, 201, 215, 216, 214, 214, 214, 214, 214, 193,
	193, 193, 194, 194, 194, 195, 195, 195, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 204,
	202, 202, 203, 203, 16, 22, 22, 17, 17, 17,
	17, 17, 18, 18, 23, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 129, 129, 131, 131, 127,
	127, 130, 130, 128, 128, 128, 132, 132, 132, 133,
	133, 159, 159, 159, 25, 25, 27, 27, 28, 29,
	29, 153, 153, 154, 154, 30, 31, 41, 41, 41,
	41, 41, 41, 43, 43, 43, 7, 7, 7, 7,
	42, 42, 42, 6, 6, 26, 26, 26, 26, 19,
	226, 37, 38, 38, 39, 39, 39, 45, 45, 45,
	44, 44, 44, 51, 51, 53, 53, 53, 53, 53,
	54, 54, 54, 54, 54, 54, 50, 50, 52, 52,
	52, 52, 145, 145, 145, 144, 144, 56, 56, 57,
	57, 58, 58, 59, 59, 59, 59, 96, 73, 73,
	112, 112, 111, 111, 114, 114, 60, 60, 60, 60,
	61, 61, 62, 62, 63, 63, 152, 152, 151, 151,
	151, 150, 150, 66, 66, 66, 68, 67, 67, 67,
	67, 69, 69, 71, 71, 70, 70, 70, 70, 72,
	74, 74, 74, 74, 74, 75, 75, 55, 55, 55,
	55, 55, 55, 55, 55, 126, 126, 77, 77, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 88,
	88, 88, 88, 88, 88, 78, 78, 78, 78, 78,
	78, 78, 49, 49, 89, 89, 89, 95, 90, 90,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 85, 85, 85, 85, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 227, 227, 87,
	86, 86, 86, 86, 86, 86, 86, 46, 46, 46,
	46, 46, 157, 157, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 100, 100, 47,
	47, 98, 98, 99, 101, 101, 97, 97, 97, 80,
	80, 80, 80, 80, 80, 80, 80, 82, 82, 82,
	102, 102, 103, 103, 104, 104, 105, 105, 106, 107,
	107, 107, 108, 108, 108, 108, 109, 109, 109, 79,
	79, 79, 79, 110, 110, 110, 110, 115, 115, 91,
	91, 93, 93, 92, 94, 116, 116, 119, 117, 117,
	117, 120, 120, 120, 120, 120, 120, 120, 118, 118,
	118, 147, 147, 147, 124, 124, 134, 134, 135, 135,
	125, 125, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 137, 137, 137, 138, 138, 139, 139, 139,
	146, 146, 142, 142, 143, 143, 148, 148, 149, 149,
	217, 218, 219, 219, 220, 220, 220, 33, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 223, 224,
	155, 156, 156, 156,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 2, 4,
	6, 6, 7, 4, 6, 5, 8, 1, 3, 7,
	8, 1, 1, 10, 8, 7, 6, 6, 1, 1,
	1, 3, 1, 3, 0, 4, 3, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 2, 8, 4, 6, 5, 5, 0, 1, 4,
	5, 7, 4, 5, 4, 3, 1, 1, 1, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 3, 2, 3, 1, 10, 11,
	11, 12, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 7,
	7, 7, 7, 4, 5, 4, 4, 7, 5, 5,
	5, 12, 7, 5, 9, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 3, 4, 4,
	4, 4, 4, 4, 3, 2, 7, 2, 3, 4,
	3, 7, 5, 4, 2, 4, 4, 3, 3, 5,
	2, 6, 4, 3, 7, 1, 1, 0, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	5, 0, 1, 0, 1, 2, 3, 0, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 5, 3, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 2, 3, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 3, 7,
	0, 3, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 5, 7, 3,
	0, 5, 4, 5, 5, 0, 2, 1, 3, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 5, 4, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 0, 1, 0, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -221, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -32, -35, -33,
	-34, -4, -223, 6, 7, -40, 9, 10, 30, -21,
	123, 124, 126, 125, 159, 127, 152, 53, 173, 174,
	176, 177, 178, 179, -43, 157, 158, 31, 32, 129,
	34, -36, 374, 370, 57, 8, 262, 154, 153, 25,
	375, -222, 376, -39, 5, -104, 15, -3, -37, -226,
	-37, -37, -37, -37, -37, -190, -192, 57, 96, -139,
	133, 77, 254, 130, 131, 137, -142, -208, -141, 60,
	61, 62, 272, 145, 304, 305, 364, 173, 187, 181,
	208, 200, 273, 306, 146, 198, 201, 241, 143, 307,
	228, 235, 71, 176, 250, 308, 155, 196, 192, 309,
	281, 190, 27, 310, 237, 213, 311, 277, 239, 191,
	236, 129, 312, 148, 141, 313, 214, 218, 314, 242,
	315, 316, 317, 375, 185, 186, 365, 318, 144, 244,
	212, 142, 33, 274, 37, 163, 245, 216, 319, 211,
	207, 366, 320, 321, 322, 323, 210, 184, 206, 41,
	220, 219, 221, 240, 203, 324, 325, 326, 149, 327,
	193, 18, 328, 329, 330, 331, 332, 248, 158, 333,
	161, 334, 335, 336, 337, 338, 339, 238, 215, 217,
	138, 165, 234, 276, 340, 246, 189, 341, 150, 162,
	157, 249, 151, 342, 343, 344, 345, 346, 347, 367,
	348, 177, 368, 349, 350, 351, 352, 172, 369, 243,
	252, 40, 225, 353, 183, 370, 140, 354, 174, 169,
	230, 204, 164, 355, 356, 194, 195, 209, 182, 205,
	175, 166, 159, 357, 251, 226, 278, 202, 199, 170,
	358, 167, 168, 359, 231, 232, 171, 275, 247, 197,
	227, -125, 133, 254, 130, 232, 135, 131, 131, 132,
	133, 254, 130, 131, -70, -148, -208, -141, 133, 131,
	114, 201, 241, 123, 229, 237, -131, 238, 165, -159,
	131, -127, 228, 231, 232, 171, 364, 239, 243, 242,
	233, -148, 175, -153, 180, -142, 178, -127, -41, 360,
	127, -155, -155, 230, 230, -155, -90, -55, -76, 80,
	-81, 29, 23, -80, -77, -97, -94, -95, 114, 115,
	117, 116, 118, 103, 104, 111, 81, 119, -85, -83,
	-84, -86, 64, 63, 72, 65, 66, 67, 68, 73,
	74, 75, -142, -148, -92, -223, 47, 48, 263, 264,
	265, 266, 271, 267, 83, 36, 253, 261, 260, 259,
	257, 258, 255, 256, 269, 270, 136, 254, 130, 109,
	262, -208, -141, 364, 371, -37, 65, -5, -4, -223,
	6, 20, 21, -108, 17, 16, -224, 59, -45, -53,
	42, 43, -54, 21, 35, 46, 44, -38, -52, 105,
	-55, -148, -125, -125, 11, -64, -65, -70, -72, -148,
	-117, -158, 175, -120, 243, 242, -143, -118, -142, -140,
	241, 201, 240, 128, 279, 79, 22, 24, 223, 82,
	114, 16, 83, 113, 263, 123, 51, 280, 255, 256,
	253, 265, 266, 254, 229, 29, 10, 282, 25, 153,
	21, 35, 107, 125, 86, 87, 156, 374, 23, 154,
	75, 285, 19, 54, 11, 13, 286, 287, 14, 136,
	135, 98, 132, 49, 8, 119, 26, 95, 45, 288,
	28, 289, 290, 291, 292, 47, 96, 17, 257, 258,
	31, 293, 271, 160, 109, 52, 38, 80, 294, 295,
	73, 296, 76, 55, 77, 15, 50, 297, 298, 299,
	300, 97, 126, 262, 48, 301, 130, 6, 268, 30,
	152, 46, 302, 131, 85, 269, 270, 134, 74, 5,
	137, 32, 9, 53, 56, 259, 260, 261, 36, 84,
	12, 303, 78, -191, 96, -182, -208, -70, 132, -70,
	262, -135, 136, -135, -135, 131, -70, -208, -208, 123,
	125, 128, 55, -22, -70, -134, 136, -208, -134, -134,
	-134, -70, 120, -70, -208, 30, -132, 96, 12, 254,
	-208, 165, 131, 166, 133, -156, -223, -143, -186, -208,
	8, 132, 33, 144, -156, 169, 170, -156, -130, -129,
	235, 236, 230, 234, 12, 170, 230, 168, -188, -208,
	134, -142, -131, -7, -3, -10, -9, -11, 88, -155,
	-155, 58, 79, 77, 78, 95, -55, -78, 98, 80,
	96, 97, 82, 100, 99, 110, 103, 104, 105, 106,
	107, 108, 109, 101, 102, 113, 88, 89, 90, 91,
	92, 93, 94, -126, -223, -95, -223, 121, 122, -81,
	-81, -81, -81, -81, -81, -81, -81, -81, -81, -223,
	120, -2, -90, -4, -223, -223, -223, -223, -223, -223,
	-223, -223, -100, -55, -223, -227, -87, -223, -227, -87,
	-227, -87, -227, -223, -227, -87, -227, -87, -227, -227,
	-87, -223, -223, -223, -223, -223, -223, -223, 366, 367,
	372, 373, -70, -104, -3, -37, -109, 19, 31, -55,
	-105, -106, -55, -104, 38, -50, -52, -54, 42, 43,
	70, 11, -145, -144, 22, -142, 64, 120, -71, 26,
	-70, -57, -58, -59, -60, -73, -96, -223, -70, -70,
	-64, -225, 58, 11, 56, -225, 58, 120, 58, 175,
	-120, -122, -121, 244, 246, 88, 134, -147, -142, 64,
	29, 30, 59, 58, -70, -161, -164, -166, -165, -167,
	-162, -163, 198, 199, 114, 202, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 30, 155, 194, 195,
	196, 197, 214, 215, 216, 217, 218, 219, 220, 221,
	181, 200, 273, 182, 183, 184, 185, 186, 187, 189,
	190, 191, 192, 193, -208, -156, 133, -208, 80, -208,
	-70, -70, -156, -156, -156, 167, 167, 131, 131, 172,
	-70, 58, 134, -64, 23, 55, -70, -208, -208, -149,
	-148, -140, -156, -132, 64, -55, -156, -156, -156, -70,
	-156, -156, -187, 11, 98, -187, -132, -37, -156, -156,
	11, -128, 11, 98, -55, -133, 96, 55, -154, 178,
	-70, 212, 361, 362, 363, -55, -55, -55, -55, -88,
	73, 80, 74, 75, -81, -89, -92, -95, 69, 98,
	96, 97, 82, -81, -81, -81, -81, -81, -81, -81,
	-81, -81, -81, -81, -81, -81, -81, -81, -157, -208,
	64, -208, -80, -80, -142, -51, 21, 35, -50, -143,
	-149, -140, -39, -224, -224, -104, -50, -50, -55, -55,
	-97, 64, -50, -97, 64, -50, -50, -44, 21, 35,
	-98, -99, 84, -97, -142, -148, -224, -81, -142, -142,
	-50, -51, -51, -50, -50, -188, -188, -208, -208, -220,
	-217, -211, 61, -108, -224, 9, 98, 58, 18, 58,
	-107, 24, 25, -108, -82, -142, 65, 68, -56, 58,
	11, -54, -70, -144, 105, -149, -113, 161, -70, 30,
	58, -66, -68, -67, -69, 45, 49, 51, 46, 47,
	48, 52, -152, 22, -57, -33, -3, -223, -151, 161,
	-150, 22, -148, 64, -113, 56, -57, -70, -57, -72,
	-148, 105, -120, -122, 58, 245, 247, 248, 55, 76,
	-55, 55, 76, -55, -173, 113, -193, -194, -195, -143,
	64, 65, -182, -183, -184, -196, 147, -201, 138, 140,
	137, -185, 148, 132, 28, 59, -178, 73, 80, -174,
	226, -168, 57, -168, -168, -168, -168, -172, 201, -172,
	-172, -172, 57, 57, -168, -168, -168, -176, 57, -176,
	-176, -177, 57, -177, -146, 56, -70, -156, 23, -156,
	-136, 128, 125, 126, -204, 124, 223, 201, 71, 29,
	15, 263, 161, 278, -208, 162, -70, -70, -70, -70,
	-70, 128, 125, -70, -70, -70, -156, 120, -70, -70,
	-71, -70, -132, -148, -148, 64, -70, -142, -42, -142,
	64, 73, 74, 75, -89, -81, -81, -81, -49, 156,
	79, -224, -224, -50, -50, -223, 120, -5, -108, -224,
	-224, 58, 56, 22, 11, 11, -224, 11, 11, -224,
	-224, -50, -101, -99, 86, -55, -224, 120, -224, 58,
	58, -224, -224, -224, -224, -224, -48, 365, 369, 368,
	-208, 58, -219, -218, -212, 62, 88, -109, 40, -55,
	-55, -106, -109, -124, 19, 11, 36, 36, -75, 12,
	-52, -57, -54, 120, -79, 30, 36, -3, -223, -223,
	-116, -119, -97, -58, -59, -59, -58, -59, 45, 45,
	45, 50, 45, 50, 45, -67, -148, -224, -224, -224,
	-3, -74, 53, 135, 54, -223, -150, -75, -57, -75,
	-75, 120, -121, -123, 249, 246, 252, -208, 64, 58,
	-195, 88, 57, -208, 28, -185, -185, -188, -188, 28,
	-170, 29, 73, -175, 227, 65, -172, -172, -173, 30,
	-173, -173, -173, -181, 64, -181, 65, 65, 55, -142,
	-156, -155, -213, 143, 139, 147, 148, 141, 60, 61,
	62, 132, 28, 138, 140, 161, 137, -213, -137, -138,
	134, 22, 132, 28, 161, -210, 56, 167, 223, 167,
	134, -156, -149, -128, -132, -112, 57, -128, -49, 79,
	-81, -81, -224, -224, -51, -143, -104, -109, -160, 114,
	198, 155, 196, 192, 212, 203, 225, 194, 226, -157,
	-160, -81, -81, -81, -81, 272, -104, 87, -55, 85,
	-143, -81, -81, 64, -217, 88, -80, 41, -70, -102,
	13, -55, 105, -115, 55, -116, -91, -93, -92, -223,
	-110, -142, -114, -142, -56, 58, 88, -62, -61, 55,
	56, -63, 55, -61, 45, 45, -224, 132, 132, 132,
	-114, -104, -75, 246, 250, 251, -194, -195, -198, -197,
	-142, -201, -188, -188, 57, -171, 55, -81, 59, -173,
	-173, -208, 114, 59, 58, 59, 58, 59, 58, -70,
	-155, -155, -70, -155, -142, -207, 275, -209, -208, -142,
	-142, -142, -70, 120, -132, -132, -111, -142, -132, -81,
	-224, -108, -224, -168, -168, -168, -177, -168, 186, -168,
	186, -224, -224, 19, 19, 19, 19, -223, -47, 268,
	-55, 58, 58, 64, -80, -103, 14, 16, 27, -115,
	58, -224, -224, 58, 120, -224, 58, -75, -119, -55,
	-55, 57, -55, -223, -223, -223, -224, -108, 59, 58,
	-168, -111, -179, 223, 9, -172, 64, -172, 65, 65,
	-156, 26, -206, -205, -143, 57, 56, -149, 59, 58,
	-109, -172, -208, -81, -81, -81, -81, -81, -108, 64,
	-81, -81, -55, -90, 28, -93, 36, -3, -142, -142,
	-142, -104, -111, -111, -224, -111, -111, -151, -200, -199,
	56, 142, 71, -197, 59, -180, 138, 28, 137, -84,
	-173, -173, 59, 59, -223, 58, 88, -111, -70, -142,
	-224, -224, -224, -224, -46, 98, 275, -224, -224, -224,
	9, -91, 120, -108, 59, -224, -224, -224, -74, -199,
	-208, -189, 88, 64, 150, -169, 71, 28, 28, -202,
	-203, 161, -205, -195, 59, -224, 273, 52, 276, -116,
	-142, 65, -70, 64, -224, 58, -142, -210, 41, 274,
	277, 57, -203, 36, -207, 41, -111, 163, 275, 59,
	164, 276, -215, -216, 55, -223, 277, -216, 55, 10,
	9, -81, 160, -214, 151, 146, 149, 30, -214, -224,
	-224, 145, 29, 73,
}

var yyDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 644, 0, 380, 380, 380, 380, 380, 380, 0,
	717, 700, 0, 0, 0, 0, -2, 345, 346, 0,
	348, -2, 0, 0, -2, 1040, 1040, 0, 0, 1040,
	0, 0, 380, 0, 1038, 51, 52, 363, 364, 365,
	88, 1, 3, 0, 384, 652, 0, 0, -2, 382,
	0, 700, 700, 0, 0, 80, 81, 0, 0, 0,
	1027, 0, 698, 698, 698, 718, 719, 722, 723, 33,
	34, 35, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 0, 0, 0, 0, 0, 701, 0, 696, 0,
	696, 696, 696, 0, 293, 465, 726, 727, 1027, 0,
	0, 0, 336, 0, 1041, 305, 0, 307, 1041, 0,
	1041, 0, 314, 0, 0, 320, 221, 328, 342, 343,
	330, 344, 347, 0, 352, 355, 0, 327, 0, 0,
	362, 375, 376, 1040, 1040, 379, 38, 518, 477, 0,
	483, 485, 0, 520, 521, 522, 523, 524, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 550, 551,
	552, 553, 629, 630, 631, 632, 633, 634, 635, 636,
	487, 488, 626, 0, 674, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 617, 0, 587, 587, 587, 587,
	587, 587, 587, 587, 0, 0, 0, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 206, 644, 47, 0,
	380, 385, 386, 656, 0, 0, 644, 1039, 0, 0,
	-2, -2, 396, 402, 403, 404, 405, 381, 0, 408,
	412, 0, 0, 0, 0, 0, 0, 60, 62, 465,
	66, 0, 1016, 678, -2, -2, 0, 0, 724, 725,
	-2, 872, -2, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 0, 0, 111, 0, 109, 0, 1041,
	0, 0, 0, 0, 0, 0, 1041, 1041, 1041, 0,
	0, 0, 0, 284, 0, 0, 0, 0, 0, 0,
	0, 292, 0, 294, 1041, 336, 297, 0, 0, 1041,
	1041, 1041, 0, 1041, 1041, 304, 1042, 1043, 0, 336,
	380, 214, 215, 216, 308, 1041, 1041, 310, 0, 333,
	331, 332, 325, 326, 0, 339, 317, 318, 323, 222,
	353, 356, 0, 374, 366, 367, 368, 369, 0, 377,
	378, 0, 0, 0, 0, 0, 481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 505, 506, 507, 508,
	509, 510, 511, 484, 0, 498, 0, 0, 0, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 0, 393,
	0, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 390, 0, 618, 0, 571, 579, 0, 572, 580,
	573, 581, 574, 0, 575, 582, 576, 583, 577, 578,
	584, 0, 0, 0, 393, 393, 0, 0, 221, 221,
	0, 95, 734, 652, 0, 395, 39, 0, 0, 653,
	645, 646, 649, 652, 0, 417, 406, 397, 400, 401,
	383, 0, 409, 413, 0, 415, 416, 0, 64, 0,
	464, 0, 419, 421, 422, 423, 446, 0, 448, -2,
	0, 0, 0, 58, 59, 0, 0, 0, 0, 1016,
	679, 68, 69, 0, 0, 0, 0, 189, 691, 692,
	693, 689, 239, 0, 0, 177, 173, 117, 118, 119,
	166, 121, 166, 166, 166, 166, 186, 186, 186, 186,
	149, 150, 151, 152, 153, 0, 0, 136, 166, 166,
	166, 140, 156, 157, 158, 159, 160, 161, 162, 163,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 168,
	168, 168, 170, 170, 720, 83, 0, 1041, 0, 1041,
	107, 0, 253, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 697, 0, 1041, 290, 291, 466,
	728, 729, 295, 296, 337, 338, 298, 299, 300, 301,
	302, 303, 0, 217, 218, 0, 322, 0, 309, 313,
	0, 336, 0, 0, 315, 316, 0, 0, 0, 354,
	370, 358, 359, 360, 361, 519, 478, 479, 480, 482,
	499, 0, 501, 503, 489, 490, 514, 515, 516, 0,
	0, 0, 0, 512, 494, 0, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 539, 602,
	603, 0, 537, 538, 549, 0, 0, 0, 394, 627,
	0, -2, 0, 517, 673, 652, 0, 0, 0, 0,
	522, 629, 0, 522, 629, 0, 0, 0, 391, 392,
	624, 621, 0, 0, 626, 0, 588, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 92, 0, 94, 732,
	735, 0, 36, 656, 48, 657, 0, 0, 0, 0,
	648, 650, 651, 656, 0, 637, 0, 0, 475, 0,
	0, 398, 45, 414, 410, 0, 0, 0, 463, 0,
	0, 0, 0, 0, 0, 453, 0, 0, 456, 0,
	0, 0, 0, 447, 0, 0, 0, 0, 470, 956,
	449, 0, 451, 452, 475, 0, 475, 61, 475, 63,
	0, 469, 680, 67, 0, 0, 72, 73, 681, 682,
	683, 684, 685, 686, 687, 0, 108, 240, 242, 245,
	246, 247, 112, 113, 114, 0, 0, 227, 0, 0,
	221, 221, 0, 219, 220, 110, 180, 178, 0, 175,
	174, 120, 0, 186, 186, 143, 144, 189, 0, 189,
	189, 189, 0, 0, 137, 138, 139, 131, 0, 132,
	133, 134, 0, 135, 0, 0, 1041, 85, 699, 86,
	1040, 0, 0, 712, 254, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 0, 99, 258, 260, 259,
	263, 0, 0, 0, 285, 1041, 289, 0, 333, 336,
	430, 333, 312, 334, 335, 340, 319, 350, 373, 371,
	372, 500, 502, 504, 491, 512, 495, 0, 492, 0,
	0, 486, 554, 0, 0, 393, 0, 644, 656, 558,
	559, 0, 0, 0, 0, 0, 595, 0, 0, 596,
	0, 644, 0, 622, 0, 0, 570, 0, 589, 0,
	0, 590, 591, 592, 593, 594, 90, 96, 97, 98,
	93, 0, 737, 733, 0, 37, 0, 41, 0, 654,
	655, 647, 40, 0, 694, 695, 638, 639, 640, 0,
	407, 418, 399, 0, 667, 0, 0, 660, 0, 0,
	417, 675, 0, 420, 442, 444, 0, 439, 454, 455,
	457, 0, 459, 0, 461, 462, 424, 425, 426, 427,
	0, 428, 0, 0, 0, 0, 450, 644, 475, 56,
	57, 0, 70, 71, 0, 0, 77, 190, 191, 0,
	243, 0, 0, 0, 209, 221, 221, 212, 213, 0,
	182, 0, 179, 116, 176, 0, 189, 189, 145, 0,
	146, 147, 148, 0, 164, 0, 0, 0, 0, 721,
	84, 248, 1040, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 1040, 0, 1040,
	713, 714, 715, 716, 0, 102, 0, 0, 0, 0,
	0, 288, 467, 336, 321, 336, 0, 336, 493, 0,
	513, 496, 555, 556, 0, 628, 652, 43, 0, 166,
	166, 607, 166, 170, 610, 166, 612, 166, 615, 0,
	0, 0, 0, 0, 0, 0, 619, 569, 625, 0,
	627, 0, 0, 0, 736, 0, 730, 658, 42, 642,
	0, 476, 411, 49, 0, 667, 659, 669, 671, 0,
	0, 663, 0, 434, 475, 0, 0, 436, 443, 0,
	0, 437, 0, 438, 458, 460, -2, 0, 0, 0,
	0, 652, 55, 74, 75, 76, 241, 244, 0, 223,
	166, 226, 210, 211, 0, 184, 0, 181, 167, 141,
	142, 187, 188, 186, 0, 186, 0, 171, 0, 1041,
	249, 250, 251, 252, 0, 257, 0, 100, 101, 0,
	0, 262, 286, 0, 306, 324, 0, 432, 311, 497,
	557, 656, 560, 604, 186, 608, 609, 611, 613, 614,
	616, 562, 561, 0, 0, 0, 0, 0, 652, 0,
	623, 0, 0, 91, 731, 46, 0, 0, 0, 50,
	0, 672, 0, 0, 0, 65, 0, 644, 676, 677,
	440, 0, 445, 0, 0, 0, 448, 54, 200, 0,
	225, 0, 192, 185, 0, 189, 165, 189, 0, 0,
	82, 0, 103, 104, 0, 0, 0, 468, 431, 0,
	44, 605, 606, 0, 0, 0, 0, 597, 0, 620,
	0, 0, 643, 641, 0, 670, 0, 662, 665, 664,
	435, 652, 0, 0, 472, 0, 0, 470, 199, 201,
	0, 207, 0, 224, 0, 197, 0, 194, 196, 183,
	154, 155, 169, 172, 0, 0, 0, 0, 264, 433,
	563, 565, 564, 566, 0, 0, 0, 568, 585, 586,
	0, 661, 0, 53, 441, 471, 473, 474, 429, 202,
	203, 0, 208, 205, 0, 115, 0, 193, 195, 0,
	280, 0, 105, 106, 99, 567, 0, 0, 0, 668,
	666, 204, 0, 198, 279, 0, 0, 102, 598, 0,
	601, 0, 281, 0, 261, 599, 0, 0, 0, 228,
	0, 0, 229, 230, 0, 0, 600, 231, 0, 0,
	0, 0, 0, 232, 234, 235, 0, 0, 233, 282,
	283, 236, 237, 238,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 376,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:359
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:364
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:365
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:400
		{
			setParseTree(yylex, nil)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:406
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:420
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:432
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:438
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:446
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:454
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:477
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:485
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:499
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:505
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:509
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:516
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:528
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = InsertStr
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = ReplaceStr
		}
	case 53:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:550
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), OrderBy: yyDollar[9].orderBy, Limit: yyDollar[10].limit}
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:560
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:564
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:568
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:582
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:588
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:592
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:597
		{
			yyVAL.partitions = nil
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:601
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:607
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:613
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:617
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:623
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:627
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:633
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:637
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:641
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:647
		{
			yyVAL.str = RepeatableRead
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:651
		{
			yyVAL.str = ReadCommitted
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:655
		{
			yyVAL.str = ReadUncommitted
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:659
		{
			yyVAL.str = Serializable
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.str = SessionStr
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:669
		{
			yyVAL.str = GlobalStr
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:675
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 82:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:686
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:691
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:695
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:699
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:703
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:708
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:712
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:718
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:723
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:728
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str, KeyFilePath: string(yyDollar[6].bytes), KeyEnvVar: string(yyDollar[7].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:733
		{
			yyVAL.statement = &AuthRevoke{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:739
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: yyDollar[5].colIdent.GetRawVal()}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:744
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:749
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.str = InteractiveStr
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.str = ServiceAccountStr
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.str = ServiceAccountStr
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:769
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:779
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:784
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:789
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:795
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:800
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:806
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:812
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:819
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:830
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:836
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:841
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:845
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:849
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 115:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:855
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1077
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1082
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1087
		{
			yyVAL.sqlVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1091
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1096
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1100
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1108
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1112
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1118
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1126
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1135
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1139
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1145
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1149
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1158
		{
			yyVAL.optVal = nil
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1162
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1167
		{
			yyVAL.optVal = nil
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1171
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1176
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1185
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1189
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1193
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1198
		{
			yyVAL.str = ""
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1206
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1211
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1215
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1223
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1232
		{
			yyVAL.sqlVal = nil
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1236
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1242
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1246
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1256
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1262
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1266
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1271
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1277
		{
			yyVAL.statement = &Sleep{Duration: NewIntVal(yyDollar[2].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1283
		{
			yyVAL.str = ""
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1293
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1297
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1301
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1305
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1309
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1315
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1319
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1323
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1330
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1334
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1340
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1344
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1349
		{
			yyVAL.str = ""
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1353
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1359
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1363
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1369
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1375
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1379
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 228:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1386
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 229:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1390
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 230:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1394
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 231:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1398
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1404
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1410
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1416
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1420
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1424
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1428
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1432
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1437
		{
			yyVAL.str = ""
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1441
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1445
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1453
		{
			yyVAL.str = yyDollar[1].str
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1457
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1461
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1467
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1471
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1481
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1485
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1489
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1493
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1498
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1541
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1545
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1605
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1611
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1615
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 282:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1621
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 283:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1625
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1637
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1641
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1649
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1657
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1662
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1670
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1674
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1680
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1689
		{
			yyVAL.statement = &OtherRead{}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1700
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1705
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1715
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1719
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1739
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1743
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1748
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1752
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1756
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1760
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1764
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1769
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1783
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1791
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1796
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1800
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1804
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1808
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1812
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1829
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), ShowTablesOpt: showTablesOpt}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1834
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: yyDollar[3].str}
		}
	case 324:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1839
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Comments: Comments(yyDollar[4].bytes2), Type: string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt, Columns: yyDollar[6].columns}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1846
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1850
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = "extended "
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1866
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1870
		{
			yyVAL.str = "full "
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1876
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1894
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1900
		{
			yyVAL.showFilter = nil
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1904
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1908
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1914
		{
			yyVAL.showFilter = nil
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1918
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1924
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.str = SessionStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1932
		{
			yyVAL.str = GlobalStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1938
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1942
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.statement = &Begin{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1952
		{
			yyVAL.statement = &Begin{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.statement = &Commit{}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1964
		{
			yyVAL.statement = &Rollback{}
		}
	case 350:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1968
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1973
		{
			yyVAL.empty = struct{}{}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1975
		{
			yyVAL.empty = struct{}{}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.empty = struct{}{}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1980
		{
			yyVAL.empty = struct{}{}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1985
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1991
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1996
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2000
		{
			yyVAL.str = JSONStr
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2004
		{
			yyVAL.str = TreeStr
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2008
		{
			yyVAL.str = VitessStr
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2012
		{
			yyVAL.str = TraditionalStr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2016
		{
			yyVAL.str = AnalyzeStr
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2022
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2026
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2030
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2036
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2053
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2067
		{
			yyVAL.statement = &DescribeTable{Full: string(yyDollar[2].str), Extended: string(yyDollar[3].str), Table: yyDollar[4].tableName}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2071
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2077
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2085
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2089
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2095
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2099
		{
			setAllowComments(yylex, true)
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2103
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2109
		{
			yyVAL.bytes2 = nil
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2113
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = UnionStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = UnionAllStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = UnionDistinctStr
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = ""
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2136
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = SQLCacheStr
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2145
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
			yyVAL.str = DistinctStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2153
		{
			yyVAL.str = DistinctStr
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2158
		{
			yyVAL.selectExprs = nil
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2167
		{
			yyVAL.strs = nil
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2171
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2175
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2179
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2183
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2193
		{
			yyVAL.str = SQLCacheStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2197
		{
			yyVAL.str = DistinctStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2201
		{
			yyVAL.str = DistinctStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.str = StraightJoinHint
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2215
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2219
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2225
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2229
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2233
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2237
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2242
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2246
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2250
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2262
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2266
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2272
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2276
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2290
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2294
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			exec := yyDollar[2].statement.(*Exec)
			yyVAL.tableExpr = &ExecSubquery{Exec: exec}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2305
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2311
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 429:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2315
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2320
		{
			yyVAL.columns = nil
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2331
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2335
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2341
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2345
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2358
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2362
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2366
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2370
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2376
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2378
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2382
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2388
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2390
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2393
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2395
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2398
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2402
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2406
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.str = JoinStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2423
		{
			yyVAL.str = JoinStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2427
		{
			yyVAL.str = JoinStr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.str = StraightJoinStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			yyVAL.str = LeftJoinStr
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.str = LeftJoinStr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			yyVAL.str = RightJoinStr
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2451
		{
			yyVAL.str = RightJoinStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2457
		{
			yyVAL.str = NaturalJoinStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2461
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2471
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2475
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2481
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2485
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2489
		{
			yyVAL.tableName = TableName{QualifierSecond: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 468:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2493
		{
			yyVAL.tableName = TableName{QualifierThird: yyDollar[1].tableIdent, QualifierSecond: yyDollar[3].tableIdent, Qualifier: yyDollar[5].tableIdent, Name: yyDollar[7].tableIdent}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2499
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2504
		{
			yyVAL.indexHints = nil
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2508
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2512
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2516
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2520
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = nil
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2569
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2573
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2579
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2583
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.str = IsNullStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.str = IsNotNullStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.str = IsTrueStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2643
		{
			yyVAL.str = IsNotTrueStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2647
		{
			yyVAL.str = IsFalseStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2651
		{
			yyVAL.str = IsNotFalseStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2657
		{
			yyVAL.str = EqualStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.str = LessThanStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2665
		{
			yyVAL.str = GreaterThanStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2669
		{
			yyVAL.str = LessEqualStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2673
		{
			yyVAL.str = GreaterEqualStr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2677
		{
			yyVAL.str = NotEqualStr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = nil
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2696
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2710
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2720
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2738
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2794
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2834
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2848
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2852
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2856
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 560:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2904
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 561:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2908
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 562:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2912
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 563:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2916
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 564:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2920
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2924
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2928
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 567:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2932
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 568:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2940
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2944
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2958
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2962
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2972
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2977
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2988
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2993
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2997
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3016
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 585:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3020
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 586:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3024
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3044
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3052
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3056
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3060
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3064
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3068
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3074
		{
			yyVAL.str = ""
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3078
		{
			yyVAL.str = BooleanModeStr
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3082
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 600:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3086
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3090
		{
			yyVAL.str = QueryExpansionStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3096
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3110
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3122
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3126
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3132
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3136
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3144
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3148
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3156
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3161
		{
			yyVAL.expr = nil
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3170
		{
			yyVAL.str = string("")
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3174
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3180
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3184
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3190
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3195
		{
			yyVAL.expr = nil
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3199
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3209
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3213
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3243
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3247
		{
			yyVAL.expr = &NullVal{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3262
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3266
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3271
		{
			yyVAL.exprs = nil
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3275
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3280
		{
			yyVAL.expr = nil
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3284
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3289
		{
			yyVAL.orderBy = nil
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3293
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3299
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3303
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3309
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3314
		{
			yyVAL.str = AscScr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3318
		{
			yyVAL.str = AscScr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3322
		{
			yyVAL.str = DescScr
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3327
		{
			yyVAL.limit = nil
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3331
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3335
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3339
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3344
		{
			yyVAL.str = ""
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3348
		{
			yyVAL.str = ForUpdateStr
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3352
		{
			yyVAL.str = ShareModeStr
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3365
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3369
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3373
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3377
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3383
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3387
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3391
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3395
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3400
		{
			yyVAL.updateExprs = nil
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3404
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3410
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3414
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3424
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3430
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3446
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3450
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3456
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3462
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3466
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3471
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3477
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3481
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3485
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3489
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3493
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3497
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3501
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3508
		{
			yyVAL.bytes = []byte("charset")
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3515
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3519
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3523
		{
			yyVAL.expr = &Default{}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3532
		{
			yyVAL.byt = 0
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3534
		{
			yyVAL.byt = 1
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3537
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3539
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3542
		{
			yyVAL.str = ""
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3544
		{
			yyVAL.str = IgnoreStr
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3548
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3550
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3552
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3554
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3556
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3558
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3560
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3562
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3564
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3566
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3569
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3571
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3573
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3577
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3579
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3582
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3584
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3586
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3589
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3591
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3595
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3599
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3606
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3612
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3616
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3623
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3629
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3635
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3641
		{
			yyVAL.execVarDefOpt = nil
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3643
		{
			rv := yyDollar[1].execVarDef
			yyVAL.execVarDefOpt = &rv
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3649
		{
			yyVAL.execVarDefs = nil
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3651
		{
			yyVAL.execVarDefs = []ExecVarDef{yyDollar[1].execVarDef}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3655
		{
			yyVAL.execVarDefs = append(yyDollar[1].execVarDefs, yyDollar[3].execVarDef)
		}
	case 737:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3662
		{
			yyVAL.statement = NewExec(yyDollar[2].bytes2, yyDollar[3].tableName, yyDollar[4].execVarDefs, yyDollar[5].execVarDefOpt)
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3989
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3998
		{
			decNesting(yylex)
		}
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4003
		{
			skipToEnd(yylex)
		}
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4008
		{
			skipToEnd(yylex)
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4012
		{
			skipToEnd(yylex)
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4016
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
