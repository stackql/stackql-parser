// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	execsubquery         *ExecSubquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	execVarDef           ExecVarDef
	execVarDefOpt        *ExecVarDef
	execVarDefs          []ExecVarDef
	listArgsConcat       []ListArg
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688
const AUTH = 57689
const INTERACTIVE = 57690
const LOGIN = 57691
const REVOKE = 57692
const SA = 57693
const SERVICEACCOUNT = 57694
const SLEEP = 57695
const REGISTRY = 57696
const PULL = 57697
const LIST = 57698
const EXEC = 57699
const PURGE = 57700
const NATIVEQUERY = 57701
const STACKQL = 57702

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"AUTH",
	"INTERACTIVE",
	"LOGIN",
	"REVOKE",
	"SA",
	"SERVICEACCOUNT",
	"SLEEP",
	"REGISTRY",
	"PULL",
	"LIST",
	"EXEC",
	"PURGE",
	"NATIVEQUERY",
	"STACKQL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	364, 89,
	371, 89,
	-2, 34,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	169, 347,
	170, 347,
	230, 335,
	234, 335,
	235, 335,
	236, 335,
	-2, 333,
	-1, 53,
	134, 357,
	-2, 355,
	-1, 56,
	6, 363,
	8, 363,
	9, 363,
	10, 363,
	57, 363,
	262, 363,
	-2, 335,
	-1, 82,
	38, 393,
	-2, 401,
	-1, 350,
	80, 896,
	82, 896,
	88, 896,
	89, 896,
	90, 896,
	91, 896,
	92, 896,
	93, 896,
	94, 896,
	96, 896,
	97, 896,
	98, 896,
	99, 896,
	100, 896,
	101, 896,
	102, 896,
	103, 896,
	104, 896,
	105, 896,
	106, 896,
	107, 896,
	108, 896,
	109, 896,
	110, 896,
	113, 896,
	120, 896,
	121, 896,
	122, 896,
	-2, 493,
	-1, 410,
	120, 736,
	-2, 732,
	-1, 411,
	120, 737,
	-2, 733,
	-1, 431,
	38, 394,
	-2, 406,
	-1, 432,
	38, 395,
	-2, 407,
	-1, 455,
	88, 1010,
	-2, 80,
	-1, 456,
	88, 917,
	-2, 81,
	-1, 461,
	88, 884,
	134, 884,
	-2, 698,
	-1, 463,
	88, 952,
	134, 952,
	-2, 700,
	-1, 776,
	1, 415,
	5, 415,
	11, 415,
	12, 415,
	13, 415,
	14, 415,
	15, 415,
	17, 415,
	19, 415,
	31, 415,
	55, 415,
	58, 415,
	59, 415,
	268, 415,
	378, 415,
	-2, 490,
	-1, 794,
	56, 62,
	58, 62,
	-2, 66,
	-1, 978,
	120, 739,
	-2, 735,
	-1, 1446,
	5, 654,
	17, 654,
	19, 654,
	31, 654,
	59, 654,
	-2, 434,
}

const yyPrivate = 57344

const yyLast = 18335

var yyAct = [...]int{
	410, 1694, 1684, 1365, 1651, 1270, 1486, 1497, 354, 1564,
	1600, 1096, 1291, 1426, 424, 1459, 369, 1066, 1119, 1271,
	714, 1423, 81, 3, 626, 383, 894, 1427, 460, 1092,
	1139, 767, 352, 1095, 1105, 1432, 1036, 340, 1258, 1018,
	972, 760, 1438, 101, 1388, 1197, 965, 304, 916, 1333,
	304, 807, 615, 1109, 793, 101, 1342, 1068, 1062, 1051,
	433, 770, 647, 1125, 765, 79, 998, 33, 418, 356,
	783, 788, 942, 806, 787, 584, 454, 1135, 778, 1044,
	907, 624, 77, 345, 449, 82, 446, 796, 304, 101,
	727, 666, 585, 304, 76, 304, 341, 308, 412, 344,
	927, 302, 752, 753, 339, 413, 311, 1236, 728, 7,
	1238, 1237, 314, 457, 318, 750, 751, 6, 5, 604,
	1159, 1687, 84, 85, 86, 87, 88, 1671, 1682, 1659,
	1679, 1487, 1670, 1658, 1158, 1405, 1520, 589, 300, 296,
	297, 298, 448, 1454, 1455, 419, 439, 586, 316, 588,
	414, 1453, 416, 417, 323, 1084, 1085, 35, 325, 69,
	38, 39, 808, 649, 809, 103, 104, 105, 1305, 1083,
	292, 1304, 923, 290, 1306, 294, 1157, 326, 343, 342,
	1324, 1118, 1367, 1554, 309, 646, 1626, 676, 675, 685,
	686, 678, 679, 680, 681, 682, 683, 684, 677, 1126,
	1511, 687, 103, 104, 105, 103, 104, 105, 68, 1509,
	329, 320, 312, 333, 321, 322, 329, 925, 331, 335,
	313, 315, 326, 883, 310, 328, 327, 634, 635, 1154,
	1151, 1152, 644, 1150, 882, 1369, 880, 395, 1368, 401,
	402, 399, 400, 398, 397, 396, 1681, 645, 1678, 928,
	929, 930, 641, 403, 404, 1652, 642, 639, 640, 1364,
	1389, 1045, 299, 1698, 884, 1645, 1161, 1164, 975, 1110,
	881, 1702, 293, 1601, 605, 591, 621, 1608, 623, 1361,
	629, 810, 1292, 1294, 294, 1363, 1370, 887, 1603, 1112,
	650, 304, 596, 597, 291, 871, 304, 1112, 606, 1449,
	1448, 1391, 304, 1447, 587, 631, 1156, 594, 304, 613,
	620, 622, 619, 101, 307, 628, 295, 101, 1633, 101,
	1535, 103, 104, 105, 1216, 648, 1171, 811, 1155, 1170,
	699, 700, 103, 104, 105, 601, 101, 338, 1393, 1494,
	1397, 1301, 1392, 1126, 1390, 595, 1263, 324, 1226, 1395,
	603, 1213, 1205, 1093, 1657, 1176, 610, 802, 1394, 1602,
	654, 782, 612, 1627, 1293, 712, 611, 687, 1160, 1079,
	677, 1396, 1398, 687, 1024, 590, 617, 917, 921, 1696,
	659, 660, 1697, 1162, 1695, 1643, 1609, 1607, 841, 1362,
	1617, 1360, 1436, 1111, 103, 104, 105, 1415, 633, 618,
	636, 1111, 1246, 598, 630, 599, 1112, 658, 600, 908,
	908, 617, 1407, 70, 999, 304, 632, 304, 607, 608,
	609, 697, 676, 675, 685, 686, 678, 679, 680, 681,
	682, 683, 684, 677, 699, 700, 687, 873, 103, 104,
	105, 667, 101, 758, 304, 304, 304, 657, 1472, 652,
	757, 662, 715, 101, 1322, 655, 656, 667, 1647, 101,
	616, 699, 700, 1211, 918, 1210, 949, 665, 1703, 754,
	774, 755, 829, 592, 593, 91, 667, 457, 940, 1198,
	947, 948, 946, 665, 663, 664, 662, 730, 732, 734,
	736, 738, 740, 741, 771, 616, 909, 909, 785, 999,
	794, 1223, 665, 786, 1664, 731, 733, 759, 737, 739,
	1111, 742, 1704, 842, 92, 1108, 1106, 289, 1107, 680,
	681, 682, 683, 684, 677, 1104, 1110, 687, 1662, 805,
	1115, 1560, 795, 776, 68, 800, 1559, 1116, 1337, 855,
	858, 859, 860, 861, 862, 863, 945, 864, 865, 866,
	867, 868, 843, 844, 845, 846, 827, 828, 856, 1336,
	830, 1325, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 847, 848, 849, 850, 851, 852, 853, 854,
	936, 938, 939, 415, 304, 1644, 1026, 937, 869, 1029,
	1030, 872, 1580, 874, 304, 304, 101, 101, 101, 1190,
	1191, 1192, 304, 443, 444, 304, 1557, 667, 304, 892,
	893, 1524, 304, 1413, 101, 663, 664, 662, 1334, 101,
	101, 101, 304, 101, 101, 1184, 1025, 103, 104, 105,
	899, 857, 1020, 665, 667, 101, 101, 667, 819, 756,
	896, 428, 663, 664, 662, 663, 664, 662, 875, 876,
	103, 104, 105, 304, 1241, 80, 885, 1614, 1245, 448,
	665, 667, 891, 665, 667, 1570, 1680, 898, 1666, 428,
	664, 662, 663, 664, 662, 1613, 904, 877, 878, 879,
	1409, 911, 1570, 1655, 1570, 428, 583, 665, 966, 798,
	665, 888, 1570, 1635, 1468, 897, 943, 968, 1037, 769,
	901, 902, 903, 1424, 905, 906, 1435, 926, 1113, 910,
	1047, 101, 1366, 1570, 1605, 912, 913, 914, 675, 685,
	686, 678, 679, 680, 681, 682, 683, 684, 677, 987,
	990, 687, 969, 970, 799, 1000, 801, 976, 1048, 977,
	944, 978, 1570, 1569, 101, 101, 78, 982, 1550, 1549,
	1435, 648, 648, 1014, 1015, 685, 686, 678, 679, 680,
	681, 682, 683, 684, 677, 1212, 715, 687, 1531, 101,
	1537, 428, 1021, 103, 104, 105, 304, 967, 1534, 428,
	101, 661, 1031, 1478, 1477, 304, 1616, 1008, 1009, 1474,
	1475, 1474, 1473, 304, 304, 1476, 979, 304, 304, 35,
	428, 304, 304, 304, 101, 1037, 428, 976, 1259, 1043,
	35, 978, 667, 1012, 1013, 1064, 1048, 428, 101, 585,
	663, 664, 662, 103, 104, 105, 1048, 1308, 457, 1587,
	1040, 896, 1039, 103, 104, 105, 1309, 1240, 665, 1046,
	661, 428, 1097, 818, 817, 1082, 1121, 1122, 1123, 1124,
	68, 68, 1075, 1038, 1048, 1074, 1038, 798, 1041, 1076,
	1229, 68, 1132, 1133, 1134, 103, 104, 105, 1073, 1016,
	797, 35, 304, 101, 1072, 101, 1228, 1163, 1081, 421,
	1080, 304, 304, 304, 304, 304, 1077, 304, 304, 1037,
	797, 304, 101, 1144, 1100, 1265, 1127, 1128, 1129, 1141,
	1435, 1266, 799, 1037, 797, 411, 1027, 886, 304, 803,
	1672, 304, 1566, 304, 1120, 1542, 304, 1140, 304, 304,
	1464, 1376, 68, 304, 1312, 101, 1145, 101, 1136, 1131,
	68, 1439, 1440, 1689, 1130, 1165, 1166, 1167, 1168, 1169,
	1567, 1172, 1173, 1137, 1138, 1174, 1143, 1685, 102, 1466,
	1442, 1424, 305, 1338, 1146, 305, 1148, 922, 890, 1282,
	102, 1280, 1177, 1445, 1283, 1178, 1281, 785, 1444, 1181,
	1180, 1352, 943, 1175, 1279, 319, 1284, 1185, 1057, 1058,
	428, 1278, 1676, 1179, 1248, 983, 984, 1669, 1417, 989,
	992, 993, 768, 305, 102, 1674, 1257, 1207, 305, 1256,
	305, 1329, 816, 1348, 1349, 1350, 1053, 1056, 1057, 1058,
	1054, 614, 1055, 1059, 1007, 1239, 944, 1010, 1011, 1193,
	676, 675, 685, 686, 678, 679, 680, 681, 682, 683,
	684, 677, 336, 761, 687, 1321, 1649, 1648, 1585, 304,
	995, 1319, 1562, 1314, 1529, 762, 1147, 419, 1206, 304,
	304, 304, 304, 304, 996, 1340, 1272, 889, 1061, 870,
	425, 304, 1528, 1247, 1222, 426, 304, 1267, 422, 423,
	304, 1255, 80, 1252, 304, 1351, 1527, 1420, 1259, 1254,
	1356, 1353, 1344, 1354, 1347, 643, 1343, 1217, 1290, 1214,
	1345, 1346, 1251, 915, 1307, 775, 101, 1261, 1691, 1260,
	1262, 1691, 1690, 1631, 1355, 1313, 1555, 1310, 1023, 648,
	648, 1297, 421, 1299, 78, 1300, 1063, 29, 83, 1285,
	1097, 1274, 1275, 1273, 1277, 75, 1276, 1296, 1, 434,
	1017, 1242, 1298, 1243, 1302, 678, 679, 680, 681, 682,
	683, 684, 677, 435, 101, 687, 1683, 1244, 1019, 1488,
	772, 773, 437, 1563, 436, 1328, 1153, 1330, 1331, 1332,
	1650, 1315, 1316, 1599, 372, 371, 374, 375, 376, 377,
	1458, 1317, 1318, 373, 378, 101, 1103, 304, 1094, 90,
	582, 1335, 89, 1642, 627, 1326, 1327, 1341, 1053, 1056,
	1057, 1058, 1054, 1102, 1055, 1059, 305, 1101, 1439, 1440,
	1606, 305, 1553, 1372, 1114, 896, 101, 305, 1357, 1323,
	1117, 434, 966, 305, 1465, 1320, 1646, 824, 102, 822,
	823, 821, 102, 826, 102, 435, 1373, 825, 820, 1377,
	1385, 1374, 431, 432, 437, 317, 436, 452, 1386, 924,
	1378, 102, 1202, 1203, 332, 1384, 1060, 812, 1142, 1387,
	777, 1410, 1406, 977, 304, 978, 1371, 1400, 1399, 93,
	1359, 1358, 1149, 1220, 101, 920, 637, 638, 695, 101,
	101, 1425, 381, 1253, 1272, 1303, 458, 451, 1375, 1416,
	1430, 1414, 1028, 764, 1526, 1419, 1221, 724, 1385, 997,
	791, 355, 1428, 935, 370, 367, 101, 368, 1032, 1264,
	669, 353, 347, 790, 1052, 1050, 1049, 1434, 1418, 447,
	101, 1441, 101, 101, 1437, 100, 648, 648, 789, 1443,
	305, 430, 305, 1457, 1235, 1519, 1625, 334, 429, 1451,
	1471, 1450, 994, 56, 1097, 1187, 1097, 1452, 337, 304,
	37, 438, 63, 1456, 32, 31, 28, 102, 1461, 305,
	305, 305, 30, 384, 34, 27, 1469, 1470, 102, 304,
	22, 459, 21, 1480, 102, 101, 20, 1489, 101, 101,
	101, 304, 19, 18, 24, 17, 16, 101, 1462, 1463,
	1481, 15, 602, 41, 26, 25, 14, 13, 34, 12,
	11, 1523, 10, 1479, 9, 1482, 8, 1484, 4, 653,
	23, 1502, 713, 2, 0, 0, 0, 0, 1504, 1505,
	0, 1506, 0, 1483, 1508, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 1507, 1493, 1495, 0, 1496, 0,
	1499, 420, 676, 675, 685, 686, 678, 679, 680, 681,
	682, 683, 684, 677, 1272, 0, 687, 1530, 1525, 0,
	0, 0, 0, 0, 0, 1539, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 101, 1548, 0, 1310, 0,
	0, 0, 1552, 1538, 0, 0, 0, 0, 0, 1551,
	101, 1097, 0, 0, 0, 0, 0, 0, 101, 305,
	0, 0, 0, 0, 0, 304, 0, 1003, 0, 305,
	305, 102, 102, 102, 0, 0, 1573, 305, 0, 0,
	305, 0, 1565, 305, 0, 0, 0, 305, 0, 102,
	0, 1568, 0, 896, 102, 102, 102, 305, 102, 102,
	0, 0, 0, 0, 1579, 101, 101, 1556, 101, 1558,
	102, 102, 0, 101, 1571, 101, 101, 101, 304, 1584,
	1593, 101, 1594, 1596, 1597, 0, 1588, 1428, 305, 1586,
	0, 1561, 0, 0, 0, 1598, 1604, 101, 304, 1572,
	1592, 101, 1610, 0, 1618, 0, 0, 0, 0, 427,
	0, 0, 0, 0, 0, 459, 1611, 0, 1612, 459,
	0, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1632, 1641, 0, 0, 0, 0, 1634, 651, 0,
	1640, 1639, 0, 1428, 0, 0, 102, 101, 101, 0,
	0, 0, 1619, 0, 0, 0, 1653, 0, 0, 1654,
	0, 0, 0, 0, 101, 0, 0, 1660, 0, 0,
	1272, 1565, 1097, 0, 0, 0, 304, 0, 0, 102,
	102, 0, 0, 101, 0, 0, 0, 0, 0, 1668,
	0, 0, 0, 0, 0, 0, 625, 0, 0, 0,
	625, 1673, 625, 101, 102, 1675, 0, 0, 0, 0,
	1677, 305, 0, 0, 0, 102, 1688, 0, 0, 0,
	305, 34, 0, 1699, 0, 0, 0, 0, 305, 305,
	1663, 0, 305, 305, 696, 698, 305, 305, 305, 102,
	0, 0, 0, 0, 780, 0, 0, 0, 0, 0,
	1517, 0, 0, 102, 0, 459, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 711, 0, 0, 0, 716,
	717, 718, 719, 720, 721, 722, 723, 0, 726, 729,
	729, 729, 735, 729, 729, 735, 729, 743, 744, 745,
	746, 747, 748, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 0, 305, 102, 0,
	102, 0, 0, 0, 0, 0, 305, 305, 305, 305,
	305, 0, 305, 305, 1516, 0, 305, 102, 792, 0,
	676, 675, 685, 686, 678, 679, 680, 681, 682, 683,
	684, 677, 0, 305, 687, 0, 305, 0, 305, 0,
	0, 305, 0, 305, 305, 671, 0, 674, 305, 0,
	102, 0, 102, 688, 689, 690, 691, 692, 693, 694,
	0, 672, 673, 670, 676, 675, 685, 686, 678, 679,
	680, 681, 682, 683, 684, 677, 0, 0, 687, 0,
	0, 0, 0, 0, 0, 0, 0, 441, 459, 459,
	459, 1522, 0, 0, 676, 675, 685, 686, 678, 679,
	680, 681, 682, 683, 684, 677, 459, 0, 687, 0,
	0, 459, 459, 459, 0, 459, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 459, 459, 0,
	0, 1379, 676, 675, 685, 686, 678, 679, 680, 681,
	682, 683, 684, 677, 0, 0, 687, 0, 0, 0,
	346, 676, 675, 685, 686, 678, 679, 680, 681, 682,
	683, 684, 677, 0, 305, 687, 0, 0, 0, 625,
	625, 625, 0, 0, 305, 305, 305, 305, 305, 0,
	0, 0, 0, 0, 0, 0, 305, 625, 0, 0,
	0, 305, 625, 625, 625, 305, 625, 625, 0, 305,
	0, 1515, 0, 971, 349, 459, 0, 0, 625, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1001,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 35,
	36, 69, 38, 39, 1514, 0, 1005, 1006, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 40, 59, 60, 0, 62, 0, 0,
	0, 1033, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 780, 0, 0, 459, 49, 0, 0, 0,
	68, 676, 675, 685, 686, 678, 679, 680, 681, 682,
	683, 684, 677, 0, 0, 687, 459, 0, 0, 0,
	102, 0, 305, 0, 0, 0, 0, 0, 0, 0,
	459, 0, 0, 0, 676, 675, 685, 686, 678, 679,
	680, 681, 682, 683, 684, 677, 0, 0, 687, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 42, 43, 45, 44,
	47, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 459, 1065, 459, 0, 0,
	792, 0, 0, 0, 792, 48, 72, 71, 0, 305,
	57, 58, 46, 0, 459, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 102, 102, 50, 51, 0, 52,
	53, 54, 55, 0, 676, 675, 685, 686, 678, 679,
	680, 681, 682, 683, 684, 677, 0, 1186, 687, 1188,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 1199,
	0, 980, 981, 0, 0, 102, 668, 102, 102, 0,
	0, 0, 0, 0, 34, 0, 625, 0, 625, 676,
	675, 685, 686, 678, 679, 680, 681, 682, 683, 684,
	677, 0, 0, 687, 305, 625, 0, 0, 0, 0,
	0, 0, 346, 0, 0, 0, 1022, 0, 0, 0,
	0, 725, 0, 0, 305, 70, 0, 0, 0, 0,
	102, 0, 0, 102, 102, 102, 305, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 766, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1001, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1204, 0, 0, 420, 0, 0, 0, 0, 0, 0,
	0, 0, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 459, 0,
	102, 0, 0, 65, 0, 0, 0, 64, 66, 67,
	74, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 792, 102, 0, 0, 0, 0, 1268, 1269,
	305, 0, 792, 792, 792, 792, 792, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 1065,
	0, 1295, 0, 0, 0, 0, 0, 792, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 102, 0, 102, 0, 0, 0, 459, 102, 0,
	102, 102, 102, 305, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1200, 0, 0, 0,
	1201, 0, 102, 305, 0, 0, 102, 0, 459, 0,
	0, 1208, 1209, 0, 0, 900, 0, 1215, 0, 0,
	1218, 1219, 0, 0, 0, 0, 0, 0, 1225, 459,
	0, 0, 1227, 0, 0, 1230, 1231, 1232, 1233, 1234,
	0, 919, 0, 0, 0, 0, 0, 0, 0, 0,
	382, 0, 102, 102, 0, 0, 0, 0, 625, 931,
	932, 933, 934, 0, 0, 0, 459, 0, 1001, 102,
	0, 1431, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 305, 0, 0, 0, 0, 0, 0, 102, 0,
	1287, 1288, 1289, 0, 0, 0, 0, 303, 1433, 0,
	330, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 459, 0, 459, 1460, 985, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 0, 450, 0,
	0, 0, 0, 303, 0, 303, 0, 0, 0, 0,
	1429, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1485, 0, 0,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 1498,
	0, 0, 0, 0, 941, 0, 0, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 0, 0, 0, 0, 0, 0, 1088, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	1382, 1383, 0, 0, 0, 0, 0, 0, 1001, 0,
	0, 0, 0, 0, 1004, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 0, 0, 1518,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1544, 1545, 1546, 0, 0, 0, 1589, 1590, 0,
	1591, 303, 0, 0, 0, 1498, 303, 1498, 1498, 1498,
	0, 0, 303, 1460, 0, 0, 0, 0, 303, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 0, 1498,
	0, 0, 0, 1620, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 1429, 1503, 34, 0, 459,
	459, 0, 0, 1249, 1250, 766, 0, 1512, 1513, 0,
	0, 0, 0, 0, 1001, 0, 1661, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1615, 0, 0, 0,
	0, 0, 0, 0, 0, 1667, 0, 1532, 1533, 0,
	1536, 0, 1194, 1195, 1196, 303, 0, 303, 0, 0,
	0, 1429, 0, 0, 0, 1498, 0, 0, 1547, 0,
	0, 442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 303, 303, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1686, 0, 0, 0, 0,
	0, 0, 1595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1621, 1622, 1623, 1624, 0, 1628, 0, 1629,
	1630, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1408, 1636, 0, 1637, 1638, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 303, 0, 0, 0, 0,
	0, 0, 303, 1656, 0, 303, 0, 1421, 303, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 0, 1665, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1380, 1381, 0, 0, 0, 0, 0,
	1700, 1701, 0, 0, 0, 0, 0, 0, 1401, 1402,
	0, 1403, 1404, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 442, 895, 0, 0, 0, 442, 442, 0,
	0, 442, 442, 442, 0, 0, 0, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 442, 442, 442, 442,
	442, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 303, 346, 0, 0,
	0, 0, 0, 895, 1540, 303, 1467, 1541, 0, 0,
	1543, 0, 0, 303, 1070, 0, 0, 303, 303, 0,
	0, 303, 1078, 895, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 0, 0, 1583, 346, 0, 0, 0,
	0, 303, 303, 303, 303, 303, 0, 303, 303, 0,
	0, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 303, 0,
	0, 303, 0, 303, 0, 0, 303, 0, 1182, 1183,
	0, 0, 0, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 442, 442, 0, 0, 0, 1574,
	1575, 1576, 1577, 1578, 0, 0, 0, 1581, 1582, 0,
	0, 0, 0, 0, 0, 442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 442, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 1002, 303,
	303, 303, 303, 303, 0, 0, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 303, 0, 0, 0,
	1070, 0, 0, 0, 303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1692, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1002, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1002, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1070, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 303, 0,
	568, 556, 0, 514, 571, 486, 504, 579, 505, 508,
	544, 472, 526, 198, 502, 0, 490, 467, 498, 468,
	488, 516, 137, 166, 133, 558, 529, 570, 168, 0,
	491, 577, 170, 535, 0, 249, 185, 0, 0, 0,
	518, 560, 524, 553, 513, 545, 477, 534, 572, 503,
	542, 573, 0, 0, 0, 103, 104, 105, 0, 1098,
	1099, 0, 1002, 0, 0, 0, 126, 0, 539, 567,
	500, 541, 543, 581, 466, 536, 303, 470, 473, 578,
	563, 494, 495, 1311, 0, 0, 0, 0, 0, 0,
	517, 525, 550, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 492, 0, 533, 0, 0, 0, 474, 471,
	0, 0, 0, 0, 515, 0, 0, 0, 476, 0,
	493, 551, 0, 464, 146, 555, 562, 512, 306, 566,
	510, 509, 569, 217, 0, 254, 149, 167, 122, 163,
	107, 118, 0, 148, 195, 226, 230, 559, 489, 499,
	130, 496, 228, 205, 270, 532, 207, 227, 171, 260,
	218, 269, 279, 280, 257, 277, 284, 245, 111, 256,
	268, 127, 239, 0, 0, 0, 113, 266, 252, 183,
	159, 160, 112, 0, 224, 136, 144, 132, 197, 263,
	264, 131, 287, 119, 276, 115, 120, 275, 191, 259,
	267, 184, 176, 114, 265, 182, 175, 165, 140, 151,
	215, 173, 216, 152, 187, 186, 188, 0, 469, 0,
	250, 273, 288, 124, 485, 258, 282, 283, 0, 219,
	125, 145, 139, 214, 143, 189, 121, 154, 247, 164,
	172, 223, 286, 204, 229, 128, 272, 248, 481, 484,
	479, 480, 527, 528, 574, 575, 576, 552, 475, 0,
	482, 483, 0, 557, 564, 565, 531, 106, 116, 169,
	285, 221, 142, 274, 465, 478, 135, 487, 0, 0,
	501, 506, 507, 519, 520, 521, 522, 523, 530, 537,
	538, 540, 546, 547, 548, 549, 554, 561, 580, 108,
	109, 117, 123, 129, 134, 138, 141, 147, 150, 153,
	155, 156, 157, 162, 174, 178, 179, 180, 181, 192,
	193, 194, 196, 199, 200, 201, 202, 203, 206, 208,
	209, 210, 211, 212, 213, 222, 225, 231, 232, 233,
	234, 235, 236, 238, 241, 242, 243, 244, 251, 255,
	261, 262, 271, 278, 281, 0, 0, 0, 0, 110,
	161, 177, 237, 240, 246, 253, 0, 0, 0, 497,
	220, 190, 158, 568, 556, 0, 514, 571, 486, 504,
	579, 505, 508, 544, 472, 526, 198, 502, 0, 490,
	467, 498, 468, 488, 516, 137, 166, 133, 558, 529,
	570, 168, 0, 491, 577, 170, 535, 0, 249, 185,
	0, 0, 0, 518, 560, 524, 553, 513, 545, 477,
	534, 572, 503, 542, 573, 0, 0, 0, 103, 104,
	105, 0, 1098, 1099, 0, 0, 0, 0, 0, 126,
	0, 539, 567, 500, 541, 543, 581, 466, 536, 0,
	470, 473, 578, 563, 494, 495, 0, 0, 0, 0,
	0, 0, 0, 517, 525, 550, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 533, 0, 0,
	0, 474, 471, 0, 0, 0, 0, 515, 0, 0,
	0, 476, 0, 493, 551, 0, 464, 146, 555, 562,
	512, 306, 566, 510, 509, 569, 217, 0, 254, 149,
	167, 122, 163, 107, 118, 0, 148, 195, 226, 230,
	559, 489, 499, 130, 496, 228, 205, 270, 532, 207,
	227, 171, 260, 218, 269, 279, 280, 257, 277, 284,
	245, 111, 256, 268, 127, 239, 0, 0, 0, 113,
	266, 252, 183, 159, 160, 112, 0, 224, 136, 144,
	132, 197, 263, 264, 131, 287, 119, 276, 115, 120,
	275, 191, 259, 267, 184, 176, 114, 265, 182, 175,
	165, 140, 151, 215, 173, 216, 152, 187, 186, 188,
	0, 469, 0, 250, 273, 288, 124, 485, 258, 282,
	283, 0, 219, 125, 145, 139, 214, 143, 189, 121,
	154, 247, 164, 172, 223, 286, 204, 229, 128, 272,
	248, 481, 484, 479, 480, 527, 528, 574, 575, 576,
	552, 475, 0, 482, 483, 0, 557, 564, 565, 531,
	106, 116, 169, 285, 221, 142, 274, 465, 478, 135,
	487, 0, 0, 501, 506, 507, 519, 520, 521, 522,
	523, 530, 537, 538, 540, 546, 547, 548, 549, 554,
	561, 580, 108, 109, 117, 123, 129, 134, 138, 141,
	147, 150, 153, 155, 156, 157, 162, 174, 178, 179,
	180, 181, 192, 193, 194, 196, 199, 200, 201, 202,
	203, 206, 208, 209, 210, 211, 212, 213, 222, 225,
	231, 232, 233, 234, 235, 236, 238, 241, 242, 243,
	244, 251, 255, 261, 262, 271, 278, 281, 0, 0,
	0, 0, 110, 161, 177, 237, 240, 246, 253, 0,
	0, 0, 497, 220, 190, 158, 568, 556, 0, 514,
	571, 486, 504, 579, 505, 508, 544, 472, 526, 198,
	502, 0, 490, 467, 498, 468, 488, 516, 137, 166,
	133, 558, 529, 570, 168, 0, 491, 577, 170, 535,
	0, 249, 185, 0, 0, 0, 518, 560, 524, 553,
	513, 545, 477, 534, 572, 503, 542, 573, 68, 0,
	0, 103, 104, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 539, 567, 500, 541, 543, 581,
	466, 536, 0, 470, 473, 578, 563, 494, 495, 0,
	0, 0, 0, 0, 0, 0, 517, 525, 550, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 492, 0,
	533, 0, 0, 0, 474, 471, 0, 0, 0, 0,
	515, 0, 0, 0, 476, 0, 493, 551, 0, 464,
	146, 555, 562, 512, 306, 566, 510, 509, 569, 217,
	0, 254, 149, 167, 122, 163, 107, 118, 0, 148,
	195, 226, 230, 559, 489, 499, 130, 496, 228, 205,
	270, 532, 207, 227, 171, 260, 218, 269, 279, 280,
	257, 277, 284, 245, 111, 256, 268, 127, 239, 0,
	0, 0, 113, 266, 252, 183, 159, 160, 112, 0,
	224, 136, 144, 132, 197, 263, 264, 131, 287, 119,
	276, 115, 120, 275, 191, 259, 267, 184, 176, 114,
	265, 182, 175, 165, 140, 151, 215, 173, 216, 152,
	187, 186, 188, 0, 469, 0, 250, 273, 288, 124,
	485, 258, 282, 283, 0, 219, 125, 145, 139, 214,
	143, 189, 121, 154, 247, 164, 172, 223, 286, 204,
	229, 128, 272, 248, 481, 484, 479, 480, 527, 528,
	574, 575, 576, 552, 475, 0, 482, 483, 0, 557,
	564, 565, 531, 106, 116, 169, 285, 221, 142, 274,
	465, 478, 135, 487, 0, 0, 501, 506, 507, 519,
	520, 521, 522, 523, 530, 537, 538, 540, 546, 547,
	548, 549, 554, 561, 580, 108, 109, 117, 123, 129,
	134, 138, 141, 147, 150, 153, 155, 156, 157, 162,
	174, 178, 179, 180, 181, 192, 193, 194, 196, 199,
	200, 201, 202, 203, 206, 208, 209, 210, 211, 212,
	213, 222, 225, 231, 232, 233, 234, 235, 236, 238,
	241, 242, 243, 244, 251, 255, 261, 262, 271, 278,
	281, 0, 0, 0, 0, 110, 161, 177, 237, 240,
	246, 253, 0, 0, 0, 497, 220, 190, 158, 568,
	556, 0, 514, 571, 486, 504, 579, 505, 508, 544,
	472, 526, 198, 502, 0, 490, 467, 498, 468, 488,
	516, 137, 166, 133, 558, 529, 570, 168, 0, 491,
	577, 170, 535, 0, 249, 185, 0, 0, 0, 518,
	560, 524, 553, 513, 545, 477, 534, 572, 503, 542,
	573, 0, 0, 0, 103, 104, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 539, 567, 500,
	541, 543, 581, 466, 536, 0, 470, 473, 578, 563,
	494, 495, 0, 0, 0, 0, 0, 0, 0, 517,
	525, 550, 511, 0, 0, 0, 0, 0, 0, 1422,
	0, 492, 0, 533, 0, 0, 0, 474, 471, 0,
	0, 0, 0, 515, 0, 0, 0, 476, 0, 493,
	551, 0, 464, 146, 555, 562, 512, 306, 566, 510,
	509, 569, 217, 0, 254, 149, 167, 122, 163, 107,
	118, 0, 148, 195, 226, 230, 559, 489, 499, 130,
	496, 228, 205, 270, 532, 207, 227, 171, 260, 218,
	269, 279, 280, 257, 277, 284, 245, 111, 256, 268,
	127, 239, 0, 0, 0, 113, 266, 252, 183, 159,
	160, 112, 0, 224, 136, 144, 132, 197, 263, 264,
	131, 287, 119, 276, 115, 120, 275, 191, 259, 267,
	184, 176, 114, 265, 182, 175, 165, 140, 151, 215,
	173, 216, 152, 187, 186, 188, 0, 469, 0, 250,
	273, 288, 124, 485, 258, 282, 283, 0, 219, 125,
	145, 139, 214, 143, 189, 121, 154, 247, 164, 172,
	223, 286, 204, 229, 128, 272, 248, 481, 484, 479,
	480, 527, 528, 574, 575, 576, 552, 475, 0, 482,
	483, 0, 557, 564, 565, 531, 106, 116, 169, 285,
	221, 142, 274, 465, 478, 135, 487, 0, 0, 501,
	506, 507, 519, 520, 521, 522, 523, 530, 537, 538,
	540, 546, 547, 548, 549, 554, 561, 580, 108, 109,
	117, 123, 129, 134, 138, 141, 147, 150, 153, 155,
	156, 157, 162, 174, 178, 179, 180, 181, 192, 193,
	194, 196, 199, 200, 201, 202, 203, 206, 208, 209,
	210, 211, 212, 213, 222, 225, 231, 232, 233, 234,
	235, 236, 238, 241, 242, 243, 244, 251, 255, 261,
	262, 271, 278, 281, 0, 0, 0, 0, 110, 161,
	177, 237, 240, 246, 253, 0, 0, 0, 497, 220,
	190, 158, 568, 556, 0, 514, 571, 486, 504, 579,
	505, 508, 544, 472, 526, 198, 502, 0, 490, 467,
	498, 468, 488, 516, 137, 166, 133, 558, 529, 570,
	168, 0, 491, 577, 170, 535, 0, 249, 185, 0,
	0, 0, 518, 560, 524, 553, 513, 545, 477, 534,
	572, 503, 542, 573, 0, 0, 0, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	539, 567, 500, 541, 543, 581, 466, 536, 0, 470,
	473, 578, 563, 494, 495, 0, 0, 0, 0, 0,
	0, 0, 517, 525, 550, 511, 0, 0, 0, 0,
	0, 0, 1079, 0, 492, 0, 533, 0, 0, 0,
	474, 471, 0, 0, 0, 0, 515, 0, 0, 0,
	476, 0, 493, 551, 0, 464, 146, 555, 562, 512,
	306, 566, 510, 509, 569, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 559,
	489, 499, 130, 496, 228, 205, 270, 532, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	469, 0, 250, 273, 288, 124, 485, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	481, 484, 479, 480, 527, 528, 574, 575, 576, 552,
	475, 0, 482, 483, 0, 557, 564, 565, 531, 106,
	116, 169, 285, 221, 142, 274, 465, 478, 135, 487,
	0, 0, 501, 506, 507, 519, 520, 521, 522, 523,
	530, 537, 538, 540, 546, 547, 548, 549, 554, 561,
	580, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	0, 110, 161, 177, 237, 240, 246, 253, 0, 0,
	0, 497, 220, 190, 158, 568, 556, 0, 514, 571,
	486, 504, 579, 505, 508, 544, 472, 526, 198, 502,
	0, 490, 467, 498, 468, 488, 516, 137, 166, 133,
	558, 529, 570, 168, 0, 491, 577, 170, 535, 0,
	249, 185, 0, 0, 0, 518, 560, 524, 553, 513,
	545, 477, 534, 572, 503, 542, 573, 0, 0, 0,
	103, 104, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 539, 567, 500, 541, 543, 581, 466,
	536, 0, 470, 473, 578, 563, 494, 495, 0, 0,
	0, 0, 0, 0, 0, 517, 525, 550, 511, 0,
	0, 0, 0, 0, 0, 1042, 0, 492, 0, 533,
	0, 0, 0, 474, 471, 0, 0, 0, 0, 515,
	0, 0, 0, 476, 0, 493, 551, 0, 464, 146,
	555, 562, 512, 306, 566, 510, 509, 569, 217, 0,
	254, 149, 167, 122, 163, 107, 118, 0, 148, 195,
	226, 230, 559, 489, 499, 130, 496, 228, 205, 270,
	532, 207, 227, 171, 260, 218, 269, 279, 280, 257,
	277, 284, 245, 111, 256, 268, 127, 239, 0, 0,
	0, 113, 266, 252, 183, 159, 160, 112, 0, 224,
	136, 144, 132, 197, 263, 264, 131, 287, 119, 276,
	115, 120, 275, 191, 259, 267, 184, 176, 114, 265,
	182, 175, 165, 140, 151, 215, 173, 216, 152, 187,
	186, 188, 0, 469, 0, 250, 273, 288, 124, 485,
	258, 282, 283, 0, 219, 125, 145, 139, 214, 143,
	189, 121, 154, 247, 164, 172, 223, 286, 204, 229,
	128, 272, 248, 481, 484, 479, 480, 527, 528, 574,
	575, 576, 552, 475, 0, 482, 483, 0, 557, 564,
	565, 531, 106, 116, 169, 285, 221, 142, 274, 465,
	478, 135, 487, 0, 0, 501, 506, 507, 519, 520,
	521, 522, 523, 530, 537, 538, 540, 546, 547, 548,
	549, 554, 561, 580, 108, 109, 117, 123, 129, 134,
	138, 141, 147, 150, 153, 155, 156, 157, 162, 174,
	178, 179, 180, 181, 192, 193, 194, 196, 199, 200,
	201, 202, 203, 206, 208, 209, 210, 211, 212, 213,
	222, 225, 231, 232, 233, 234, 235, 236, 238, 241,
	242, 243, 244, 251, 255, 261, 262, 271, 278, 281,
	0, 0, 0, 0, 110, 161, 177, 237, 240, 246,
	253, 0, 0, 0, 497, 220, 190, 158, 568, 556,
	0, 514, 571, 486, 504, 579, 505, 508, 544, 472,
	526, 198, 502, 0, 490, 467, 498, 468, 488, 516,
	137, 166, 133, 558, 529, 570, 168, 0, 491, 577,
	170, 535, 0, 249, 185, 0, 0, 0, 518, 560,
	524, 553, 513, 545, 477, 534, 572, 503, 542, 573,
	0, 0, 0, 103, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 539, 567, 500, 541,
	543, 581, 466, 536, 0, 470, 473, 578, 563, 494,
	495, 0, 0, 0, 0, 0, 0, 0, 517, 525,
	550, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	492, 0, 533, 0, 0, 0, 474, 471, 0, 0,
	0, 0, 515, 0, 0, 0, 476, 0, 493, 551,
	0, 464, 146, 555, 562, 512, 306, 566, 510, 509,
	569, 217, 0, 254, 149, 167, 122, 163, 107, 118,
	0, 148, 195, 226, 230, 559, 489, 499, 130, 496,
	228, 205, 270, 532, 207, 227, 171, 260, 218, 269,
	279, 280, 257, 277, 284, 245, 111, 256, 268, 127,
	239, 0, 0, 0, 113, 266, 252, 183, 159, 160,
	112, 0, 224, 136, 144, 132, 197, 263, 264, 131,
	287, 119, 276, 115, 120, 275, 191, 259, 267, 184,
	176, 114, 265, 182, 175, 165, 140, 151, 215, 173,
	216, 152, 187, 186, 188, 0, 469, 0, 250, 273,
	288, 124, 485, 258, 282, 283, 0, 219, 125, 145,
	139, 214, 143, 189, 121, 154, 247, 164, 172, 223,
	286, 204, 229, 128, 272, 248, 481, 484, 479, 480,
	527, 528, 574, 575, 576, 552, 475, 0, 482, 483,
	0, 557, 564, 565, 531, 106, 116, 169, 285, 221,
	142, 274, 465, 478, 135, 487, 0, 0, 501, 506,
	507, 519, 520, 521, 522, 523, 530, 537, 538, 540,
	546, 547, 548, 549, 554, 561, 580, 108, 109, 117,
	123, 129, 134, 138, 141, 147, 150, 153, 155, 156,
	157, 162, 174, 178, 179, 180, 181, 192, 193, 194,
	196, 199, 200, 201, 202, 203, 206, 208, 209, 210,
	211, 212, 213, 222, 225, 231, 232, 233, 234, 235,
	236, 238, 241, 242, 243, 244, 251, 255, 261, 262,
	271, 278, 281, 0, 0, 0, 0, 110, 161, 177,
	237, 240, 246, 253, 0, 0, 0, 497, 220, 190,
	158, 568, 556, 0, 514, 571, 486, 504, 579, 505,
	508, 544, 472, 526, 198, 502, 0, 490, 467, 498,
	468, 488, 516, 137, 166, 133, 558, 529, 570, 168,
	0, 491, 577, 170, 535, 0, 249, 185, 0, 0,
	0, 518, 560, 524, 553, 513, 545, 477, 534, 572,
	503, 542, 573, 0, 0, 0, 103, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 539,
	567, 500, 541, 543, 581, 466, 536, 0, 470, 473,
	578, 563, 494, 495, 0, 0, 0, 0, 0, 0,
	0, 517, 525, 550, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 533, 0, 0, 0, 474,
	471, 0, 0, 0, 0, 515, 0, 0, 0, 476,
	0, 493, 551, 0, 464, 146, 555, 562, 512, 306,
	566, 510, 509, 569, 217, 0, 254, 149, 167, 122,
	163, 107, 118, 0, 148, 195, 226, 230, 559, 489,
	499, 130, 496, 228, 205, 270, 532, 207, 227, 171,
	260, 218, 269, 279, 280, 257, 277, 284, 245, 111,
	256, 268, 127, 239, 0, 0, 0, 113, 266, 252,
	183, 159, 160, 112, 0, 224, 136, 144, 132, 197,
	263, 264, 131, 287, 119, 276, 115, 462, 275, 191,
	259, 267, 184, 176, 114, 265, 182, 175, 165, 140,
	151, 215, 173, 216, 152, 187, 186, 188, 0, 469,
	0, 250, 273, 288, 124, 485, 258, 282, 283, 0,
	219, 125, 145, 139, 214, 143, 463, 461, 154, 247,
	164, 172, 223, 286, 204, 229, 128, 272, 248, 481,
	484, 479, 480, 527, 528, 574, 575, 576, 552, 475,
	0, 482, 483, 0, 557, 564, 565, 531, 106, 116,
	169, 285, 221, 142, 274, 465, 478, 135, 487, 0,
	0, 501, 506, 507, 519, 520, 521, 522, 523, 530,
	537, 538, 540, 546, 547, 548, 549, 554, 561, 580,
	108, 109, 117, 123, 129, 134, 138, 141, 147, 150,
	153, 155, 156, 157, 162, 174, 178, 179, 180, 181,
	192, 193, 194, 196, 199, 200, 201, 202, 203, 206,
	208, 209, 210, 211, 212, 213, 222, 225, 231, 232,
	233, 234, 235, 236, 238, 241, 242, 243, 244, 251,
	255, 261, 262, 271, 278, 281, 0, 0, 0, 0,
	110, 161, 177, 237, 240, 246, 253, 0, 0, 0,
	497, 220, 190, 158, 568, 556, 0, 514, 571, 486,
	504, 579, 505, 508, 544, 472, 526, 198, 502, 0,
	490, 467, 498, 468, 488, 516, 137, 166, 133, 558,
	529, 570, 168, 0, 491, 577, 170, 535, 0, 249,
	185, 0, 0, 0, 518, 560, 524, 553, 513, 545,
	477, 534, 572, 503, 542, 573, 0, 0, 0, 103,
	104, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 539, 567, 500, 541, 543, 581, 466, 536,
	0, 470, 473, 578, 563, 494, 495, 0, 0, 0,
	0, 0, 0, 0, 517, 525, 550, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 492, 0, 533, 0,
	0, 0, 474, 471, 0, 0, 0, 0, 515, 0,
	0, 0, 476, 0, 493, 551, 0, 464, 146, 555,
	562, 512, 306, 566, 510, 509, 569, 217, 0, 254,
	149, 167, 122, 163, 107, 118, 0, 148, 195, 226,
	230, 559, 489, 499, 130, 496, 228, 205, 270, 532,
	207, 227, 171, 260, 218, 269, 279, 280, 257, 277,
	284, 245, 111, 256, 804, 127, 239, 0, 0, 0,
	113, 266, 252, 183, 159, 160, 112, 0, 224, 136,
	144, 132, 197, 263, 264, 131, 287, 119, 276, 115,
	462, 275, 191, 259, 267, 184, 176, 114, 265, 182,
	175, 165, 140, 151, 215, 173, 216, 152, 187, 186,
	188, 0, 469, 0, 250, 273, 288, 124, 485, 258,
	282, 283, 0, 219, 125, 145, 139, 214, 143, 463,
	461, 154, 247, 164, 172, 223, 286, 204, 229, 128,
	272, 248, 481, 484, 479, 480, 527, 528, 574, 575,
	576, 552, 475, 0, 482, 483, 0, 557, 564, 565,
	531, 106, 116, 169, 285, 221, 142, 274, 465, 478,
	135, 487, 0, 0, 501, 506, 507, 519, 520, 521,
	522, 523, 530, 537, 538, 540, 546, 547, 548, 549,
	554, 561, 580, 108, 109, 117, 123, 129, 134, 138,
	141, 147, 150, 153, 155, 156, 157, 162, 174, 178,
	179, 180, 181, 192, 193, 194, 196, 199, 200, 201,
	202, 203, 206, 208, 209, 210, 211, 212, 213, 222,
	225, 231, 232, 233, 234, 235, 236, 238, 241, 242,
	243, 244, 251, 255, 261, 262, 271, 278, 281, 0,
	0, 0, 0, 110, 161, 177, 237, 240, 246, 253,
	0, 0, 0, 497, 220, 190, 158, 568, 556, 0,
	514, 571, 486, 504, 579, 505, 508, 544, 472, 526,
	198, 502, 0, 490, 467, 498, 468, 488, 516, 137,
	166, 133, 558, 529, 570, 168, 0, 491, 577, 170,
	535, 0, 249, 185, 0, 0, 0, 518, 560, 524,
	553, 513, 545, 477, 534, 572, 503, 542, 573, 0,
	0, 0, 103, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 539, 567, 500, 541, 543,
	581, 466, 536, 0, 470, 473, 578, 563, 494, 495,
	0, 0, 0, 0, 0, 0, 0, 517, 525, 550,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 533, 0, 0, 0, 474, 471, 0, 0, 0,
	0, 515, 0, 0, 0, 476, 0, 493, 551, 0,
	464, 146, 555, 562, 512, 306, 566, 510, 509, 569,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 559, 489, 499, 130, 496, 228,
	205, 270, 532, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 453, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 462, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 469, 0, 250, 273, 288,
	124, 485, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 463, 461, 456, 455, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 481, 484, 479, 480, 527,
	528, 574, 575, 576, 552, 475, 0, 482, 483, 0,
	557, 564, 565, 531, 106, 116, 169, 285, 221, 142,
	274, 465, 478, 135, 487, 0, 0, 501, 506, 507,
	519, 520, 521, 522, 523, 530, 537, 538, 540, 546,
	547, 548, 549, 554, 561, 580, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 0, 110, 161, 177, 237,
	240, 246, 253, 0, 0, 0, 497, 220, 190, 158,
	198, 0, 0, 973, 0, 351, 0, 0, 0, 137,
	166, 350, 0, 0, 0, 168, 0, 974, 394, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 385,
	386, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 103, 104, 105, 372, 371, 374, 375, 376,
	377, 0, 0, 126, 373, 378, 379, 380, 0, 0,
	0, 0, 348, 365, 0, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 362, 363, 440, 0, 0,
	0, 408, 0, 364, 0, 0, 357, 358, 360, 359,
	361, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 407, 0, 0, 306, 0, 0, 405, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 395, 406, 401, 402, 399,
	400, 398, 397, 396, 409, 387, 388, 389, 390, 392,
	0, 403, 404, 391, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 0, 110, 161, 177, 237,
	240, 246, 253, 0, 0, 198, 0, 220, 190, 158,
	351, 0, 0, 0, 137, 166, 350, 0, 0, 0,
	168, 0, 0, 394, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 385, 386, 0, 0, 0, 0,
	0, 0, 1089, 0, 68, 0, 0, 103, 104, 105,
	372, 371, 374, 375, 376, 377, 0, 0, 126, 373,
	378, 379, 380, 1090, 0, 0, 0, 348, 365, 0,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 408, 0, 364, 0,
	0, 357, 358, 360, 359, 361, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 407, 0, 0,
	306, 0, 0, 405, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	395, 406, 401, 402, 399, 400, 398, 397, 396, 409,
	387, 388, 389, 390, 392, 0, 403, 404, 391, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	0, 110, 161, 177, 237, 240, 246, 253, 0, 0,
	198, 0, 220, 190, 158, 351, 0, 0, 0, 137,
	166, 350, 0, 0, 0, 168, 0, 0, 394, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 385,
	386, 0, 0, 0, 0, 0, 0, 1086, 0, 68,
	0, 0, 103, 104, 105, 372, 371, 374, 375, 376,
	377, 0, 0, 126, 373, 378, 379, 380, 1087, 0,
	0, 0, 348, 365, 0, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 362, 363, 0, 0, 0,
	0, 408, 0, 364, 0, 0, 357, 358, 360, 359,
	361, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 407, 0, 0, 306, 0, 0, 405, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 395, 406, 401, 402, 399,
	400, 398, 397, 396, 409, 387, 388, 389, 390, 392,
	0, 403, 404, 391, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 0, 110, 161, 177, 237,
	240, 246, 253, 0, 0, 198, 0, 220, 190, 158,
	351, 0, 0, 0, 137, 166, 350, 0, 0, 0,
	168, 0, 0, 394, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 385, 386, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 428, 103, 104, 105,
	372, 371, 374, 375, 376, 377, 0, 0, 126, 373,
	378, 379, 380, 0, 0, 0, 0, 348, 365, 0,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 408, 0, 364, 0,
	0, 357, 358, 360, 359, 361, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 407, 0, 0,
	306, 0, 0, 405, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	395, 406, 401, 402, 399, 400, 398, 397, 396, 409,
	387, 388, 389, 390, 392, 0, 403, 404, 391, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	0, 110, 161, 177, 237, 240, 246, 253, 0, 0,
	198, 0, 220, 190, 158, 351, 0, 0, 0, 137,
	166, 350, 0, 0, 0, 168, 0, 0, 394, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 385,
	386, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 103, 104, 105, 372, 371, 374, 375, 376,
	377, 0, 0, 126, 373, 378, 379, 380, 0, 0,
	0, 0, 348, 365, 0, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 362, 363, 440, 0, 0,
	0, 408, 0, 364, 0, 0, 357, 358, 360, 359,
	361, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 407, 0, 0, 306, 0, 0, 405, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 395, 406, 401, 402, 399,
	400, 398, 397, 396, 409, 387, 388, 389, 390, 392,
	0, 403, 404, 391, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 0, 110, 161, 177, 237,
	240, 246, 253, 0, 0, 198, 0, 220, 190, 158,
	351, 0, 0, 0, 137, 166, 350, 0, 0, 0,
	168, 0, 0, 394, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 385, 386, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 103, 104, 105,
	372, 991, 374, 375, 376, 377, 0, 0, 126, 373,
	378, 379, 380, 0, 0, 0, 0, 348, 365, 0,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	362, 363, 440, 0, 0, 0, 408, 0, 364, 0,
	0, 357, 358, 360, 359, 361, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 407, 0, 0,
	306, 0, 0, 405, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	395, 406, 401, 402, 399, 400, 398, 397, 396, 409,
	387, 388, 389, 390, 392, 0, 403, 404, 391, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	0, 110, 161, 177, 237, 240, 246, 253, 0, 0,
	198, 0, 220, 190, 158, 351, 0, 0, 0, 137,
	166, 350, 0, 0, 0, 168, 0, 0, 394, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 385,
	386, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 103, 104, 105, 372, 988, 374, 375, 376,
	377, 0, 0, 126, 373, 378, 379, 380, 0, 0,
	0, 0, 348, 365, 0, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 362, 363, 440, 0, 0,
	0, 408, 0, 364, 0, 0, 357, 358, 360, 359,
	361, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 407, 0, 0, 306, 0, 0, 405, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 395, 406, 401, 402, 399,
	400, 398, 397, 396, 409, 387, 388, 389, 390, 392,
	0, 403, 404, 391, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 421, 0, 0, 110, 161, 177, 237,
	240, 246, 253, 0, 0, 198, 0, 220, 190, 158,
	351, 0, 0, 0, 137, 166, 350, 0, 0, 0,
	168, 0, 0, 394, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 385, 386, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 103, 104, 105,
	372, 371, 374, 375, 376, 377, 0, 0, 126, 373,
	378, 379, 380, 0, 0, 0, 0, 348, 365, 0,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 408, 0, 364, 0,
	0, 357, 358, 360, 359, 361, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 407, 0, 0,
	306, 0, 0, 405, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	395, 406, 401, 402, 399, 400, 398, 397, 396, 409,
	387, 388, 389, 390, 392, 0, 403, 404, 391, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	0, 110, 161, 177, 237, 240, 246, 253, 0, 0,
	198, 0, 220, 190, 158, 351, 0, 0, 0, 137,
	166, 350, 0, 0, 0, 168, 0, 0, 394, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 385,
	386, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 103, 104, 105, 372, 371, 374, 375, 376,
	377, 0, 0, 126, 373, 378, 379, 380, 0, 0,
	0, 0, 348, 365, 0, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 362, 363, 0, 0, 0,
	0, 408, 0, 364, 0, 0, 357, 358, 360, 359,
	361, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 407, 0, 0, 306, 0, 0, 405, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 395, 406, 401, 402, 399,
	400, 398, 397, 396, 409, 387, 388, 389, 390, 392,
	0, 403, 404, 391, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 198, 110, 161, 177, 237,
	240, 246, 253, 0, 137, 166, 133, 220, 190, 158,
	168, 0, 0, 394, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 385, 386, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 103, 104, 105,
	372, 371, 374, 375, 376, 377, 0, 0, 126, 373,
	378, 379, 380, 0, 0, 0, 0, 0, 365, 0,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 408, 0, 364, 0,
	0, 357, 358, 360, 359, 361, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 407, 0, 0,
	306, 0, 0, 405, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 1693, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	395, 406, 401, 402, 399, 400, 398, 397, 396, 409,
	387, 388, 389, 390, 392, 0, 403, 404, 391, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	198, 110, 161, 177, 237, 240, 246, 253, 0, 137,
	166, 133, 220, 190, 158, 168, 0, 0, 394, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 385,
	386, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 428, 103, 104, 105, 372, 371, 374, 375, 376,
	377, 0, 0, 126, 373, 378, 379, 380, 0, 0,
	0, 0, 0, 365, 0, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 362, 363, 0, 0, 0,
	0, 408, 0, 364, 0, 0, 357, 358, 360, 359,
	361, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 407, 0, 0, 306, 0, 0, 405, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 395, 406, 401, 402, 399,
	400, 398, 397, 396, 409, 387, 388, 389, 390, 392,
	0, 403, 404, 391, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 198, 110, 161, 177, 237,
	240, 246, 253, 0, 137, 166, 133, 220, 190, 158,
	168, 0, 0, 394, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 385, 386, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 103, 104, 105,
	372, 371, 374, 375, 376, 377, 0, 0, 126, 373,
	378, 379, 380, 0, 0, 0, 0, 0, 365, 0,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 408, 0, 364, 0,
	0, 357, 358, 360, 359, 361, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 407, 0, 0,
	306, 0, 0, 405, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	395, 406, 401, 402, 399, 400, 398, 397, 396, 409,
	387, 388, 389, 390, 392, 0, 403, 404, 391, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	198, 110, 161, 177, 237, 240, 246, 253, 0, 137,
	166, 133, 220, 190, 158, 168, 0, 0, 0, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 676, 675, 685, 686, 678, 679, 680, 681, 682,
	683, 684, 677, 0, 0, 687, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 306, 0, 0, 0, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 0, 110, 161, 177, 237,
	240, 246, 253, 0, 0, 0, 198, 220, 190, 158,
	779, 0, 0, 0, 0, 137, 166, 133, 0, 0,
	0, 168, 0, 0, 0, 170, 0, 0, 249, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 0, 781, 0, 0, 0, 0, 667, 0, 126,
	0, 0, 0, 0, 0, 663, 664, 662, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 665, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 306, 0, 0, 0, 0, 217, 0, 254, 149,
	167, 122, 163, 107, 118, 0, 148, 195, 226, 230,
	0, 0, 0, 130, 0, 228, 205, 270, 0, 207,
	227, 171, 260, 218, 269, 279, 280, 257, 277, 284,
	245, 111, 256, 268, 127, 239, 0, 0, 0, 113,
	266, 252, 183, 159, 160, 112, 0, 224, 136, 144,
	132, 197, 263, 264, 131, 287, 119, 276, 115, 120,
	275, 191, 259, 267, 184, 176, 114, 265, 182, 175,
	165, 140, 151, 215, 173, 216, 152, 187, 186, 188,
	0, 0, 0, 250, 273, 288, 124, 0, 258, 282,
	283, 0, 219, 125, 145, 139, 214, 143, 189, 121,
	154, 247, 164, 172, 223, 286, 204, 229, 128, 272,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 116, 169, 285, 221, 142, 274, 0, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 109, 117, 123, 129, 134, 138, 141,
	147, 150, 153, 155, 156, 157, 162, 174, 178, 179,
	180, 181, 192, 193, 194, 196, 199, 200, 201, 202,
	203, 206, 208, 209, 210, 211, 212, 213, 222, 225,
	231, 232, 233, 234, 235, 236, 238, 241, 242, 243,
	244, 251, 255, 261, 262, 271, 278, 281, 0, 0,
	0, 198, 110, 161, 177, 237, 240, 246, 253, 0,
	137, 166, 133, 220, 190, 158, 168, 0, 0, 0,
	170, 0, 0, 249, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 97, 98, 0, 94, 0, 0, 0,
	99, 217, 0, 254, 149, 167, 122, 163, 107, 118,
	0, 148, 195, 226, 230, 0, 0, 0, 130, 0,
	228, 205, 270, 0, 207, 227, 171, 260, 218, 269,
	279, 280, 257, 277, 284, 245, 111, 256, 268, 127,
	239, 0, 0, 0, 113, 266, 252, 183, 159, 160,
	112, 0, 224, 136, 144, 132, 197, 263, 264, 131,
	287, 119, 276, 115, 120, 275, 191, 259, 267, 184,
	176, 114, 265, 182, 175, 165, 140, 151, 215, 173,
	216, 152, 187, 186, 188, 0, 0, 0, 250, 273,
	288, 124, 0, 258, 282, 283, 0, 219, 125, 145,
	139, 214, 143, 189, 121, 154, 247, 164, 172, 223,
	286, 204, 229, 128, 272, 248, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 116, 169, 285, 221,
	142, 274, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 109, 117,
	123, 129, 134, 138, 141, 147, 150, 153, 155, 156,
	157, 162, 174, 178, 179, 180, 181, 192, 193, 194,
	196, 199, 200, 201, 202, 203, 206, 208, 209, 210,
	211, 212, 213, 222, 225, 231, 232, 233, 234, 235,
	236, 238, 241, 242, 243, 244, 251, 255, 261, 262,
	271, 278, 281, 35, 0, 0, 0, 110, 161, 177,
	237, 240, 246, 253, 0, 198, 0, 0, 220, 190,
	158, 0, 0, 0, 137, 166, 133, 0, 0, 0,
	168, 0, 0, 0, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	306, 0, 0, 0, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	0, 110, 161, 177, 237, 240, 246, 253, 0, 0,
	0, 64, 220, 190, 158, 198, 0, 0, 0, 1069,
	0, 0, 0, 0, 137, 166, 133, 0, 0, 0,
	168, 0, 0, 0, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 1071, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	306, 0, 0, 0, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 35, 0, 0,
	0, 110, 161, 177, 237, 240, 246, 253, 0, 198,
	0, 0, 220, 190, 158, 0, 0, 0, 137, 166,
	133, 0, 0, 0, 168, 0, 0, 0, 170, 0,
	0, 249, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 103, 104, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 306, 0, 0, 0, 0, 217,
	0, 254, 149, 167, 122, 163, 107, 118, 0, 148,
	195, 226, 230, 0, 0, 0, 130, 0, 228, 205,
	270, 0, 207, 227, 171, 260, 218, 269, 279, 280,
	257, 277, 284, 245, 111, 256, 268, 127, 239, 0,
	0, 0, 113, 266, 252, 183, 159, 160, 112, 0,
	224, 136, 144, 132, 197, 263, 264, 131, 287, 119,
	276, 115, 120, 275, 191, 259, 267, 184, 176, 114,
	265, 182, 175, 165, 140, 151, 215, 173, 216, 152,
	187, 186, 188, 0, 0, 0, 250, 273, 288, 124,
	0, 258, 282, 283, 0, 219, 125, 145, 139, 214,
	143, 189, 121, 154, 247, 164, 172, 223, 286, 204,
	229, 128, 272, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 116, 169, 285, 221, 142, 274,
	0, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 109, 117, 123, 129,
	134, 138, 141, 147, 150, 153, 155, 156, 157, 162,
	174, 178, 179, 180, 181, 192, 193, 194, 196, 199,
	200, 201, 202, 203, 206, 208, 209, 210, 211, 212,
	213, 222, 225, 231, 232, 233, 234, 235, 236, 238,
	241, 242, 243, 244, 251, 255, 261, 262, 271, 278,
	281, 0, 0, 0, 0, 110, 161, 177, 237, 240,
	246, 253, 0, 0, 0, 198, 220, 190, 158, 1069,
	0, 0, 0, 0, 137, 166, 133, 0, 0, 0,
	168, 0, 0, 0, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 1071, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	306, 0, 0, 0, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 1067, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	198, 110, 161, 177, 237, 240, 246, 253, 0, 137,
	166, 133, 220, 190, 158, 168, 0, 0, 0, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 0, 1034, 0, 0,
	1035, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 306, 0, 0, 0, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 198, 110, 161, 177, 237,
	240, 246, 253, 0, 137, 166, 133, 220, 190, 158,
	168, 0, 0, 0, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 428, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	306, 0, 0, 0, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	198, 110, 161, 177, 237, 240, 246, 253, 0, 137,
	166, 133, 220, 190, 158, 168, 0, 0, 0, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 103, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 306, 0, 0, 0, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 198, 110, 161, 177, 237,
	240, 246, 253, 0, 137, 166, 133, 220, 190, 158,
	168, 0, 0, 0, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 1071, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	306, 0, 0, 0, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	198, 110, 161, 177, 237, 240, 246, 253, 0, 137,
	166, 133, 220, 190, 158, 168, 0, 0, 0, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 1189, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 306, 0, 0, 0, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 198, 110, 161, 177, 237,
	240, 246, 253, 784, 137, 166, 133, 220, 190, 158,
	168, 0, 0, 0, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	306, 0, 0, 0, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	198, 110, 161, 177, 237, 240, 246, 253, 0, 137,
	166, 133, 220, 190, 158, 168, 0, 0, 0, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 781, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 306, 0, 0, 0, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 198, 110, 161, 177, 237,
	240, 246, 253, 0, 137, 166, 815, 220, 190, 158,
	168, 0, 0, 0, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 814, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	306, 0, 0, 0, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	0, 110, 161, 177, 237, 240, 246, 253, 445, 0,
	0, 0, 220, 190, 158, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 166, 133, 0, 0, 0,
	168, 0, 0, 0, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	306, 0, 0, 0, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	198, 110, 161, 177, 237, 240, 246, 253, 0, 137,
	166, 133, 220, 190, 158, 168, 0, 0, 0, 170,
	0, 0, 249, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 301, 0, 306, 0, 0, 0, 0,
	217, 0, 254, 149, 167, 122, 163, 107, 118, 0,
	148, 195, 226, 230, 0, 0, 0, 130, 0, 228,
	205, 270, 0, 207, 227, 171, 260, 218, 269, 279,
	280, 257, 277, 284, 245, 111, 256, 268, 127, 239,
	0, 0, 0, 113, 266, 252, 183, 159, 160, 112,
	0, 224, 136, 144, 132, 197, 263, 264, 131, 287,
	119, 276, 115, 120, 275, 191, 259, 267, 184, 176,
	114, 265, 182, 175, 165, 140, 151, 215, 173, 216,
	152, 187, 186, 188, 0, 0, 0, 250, 273, 288,
	124, 0, 258, 282, 283, 0, 219, 125, 145, 139,
	214, 143, 189, 121, 154, 247, 164, 172, 223, 286,
	204, 229, 128, 272, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 116, 169, 285, 221, 142,
	274, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 109, 117, 123,
	129, 134, 138, 141, 147, 150, 153, 155, 156, 157,
	162, 174, 178, 179, 180, 181, 192, 193, 194, 196,
	199, 200, 201, 202, 203, 206, 208, 209, 210, 211,
	212, 213, 222, 225, 231, 232, 233, 234, 235, 236,
	238, 241, 242, 243, 244, 251, 255, 261, 262, 271,
	278, 281, 0, 0, 0, 198, 110, 161, 177, 237,
	240, 246, 253, 0, 137, 166, 133, 220, 190, 158,
	168, 0, 0, 0, 170, 0, 0, 249, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	306, 0, 0, 0, 0, 217, 0, 254, 149, 167,
	122, 163, 107, 118, 0, 148, 195, 226, 230, 0,
	0, 0, 130, 0, 228, 205, 270, 0, 207, 227,
	171, 260, 218, 269, 279, 280, 257, 277, 284, 245,
	111, 256, 268, 127, 239, 0, 0, 0, 113, 266,
	252, 183, 159, 160, 112, 0, 224, 136, 144, 132,
	197, 263, 264, 131, 287, 119, 276, 115, 120, 275,
	191, 259, 267, 184, 176, 114, 265, 182, 175, 165,
	140, 151, 215, 173, 216, 152, 187, 186, 188, 0,
	0, 0, 250, 273, 288, 124, 0, 258, 282, 283,
	0, 219, 125, 145, 139, 214, 143, 189, 121, 154,
	247, 164, 172, 223, 286, 204, 229, 128, 272, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	116, 169, 285, 221, 142, 274, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 117, 123, 129, 134, 138, 141, 147,
	150, 153, 155, 156, 157, 162, 174, 178, 179, 180,
	181, 192, 193, 194, 196, 199, 200, 201, 202, 203,
	206, 208, 209, 210, 211, 212, 213, 222, 225, 231,
	232, 233, 234, 235, 236, 238, 241, 242, 243, 244,
	251, 255, 261, 262, 271, 278, 281, 0, 0, 0,
	0, 110, 161, 177, 237, 240, 246, 253, 0, 0,
	0, 0, 220, 190, 158,
}

var yyPact = [...]int{
	2003, -1000, -284, 1109, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1057, 804, -1000, -1000, -1000, -1000, -1000,
	-1000, 418, 12723, 40, 185, 8, 17612, 183, -17, 17957,
	-1000, 43, -1000, 33, 17957, 41, -23, -1000, -1000, -51,
	-52, -1000, 10642, -266, -1000, 518, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 873, 1048, 1043,
	1049, 741, 1190, -1000, 9222, 149, 149, 17267, 7442, -1000,
	-1000, 590, 17957, 172, 17957, -125, 139, 139, 139, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 176,
	17957, 567, 567, 280, -1000, 17957, 138, 567, 138, 138,
	138, 17957, -1000, 246, -1000, -1000, -1000, 17957, 567, 981,
	364, 145, 4831, -1000, 272, -1000, 4831, 58, 4831, 22,
	1073, 62, 17, -1000, 567, -81, -1000, -1000, -1000, -1000,
	-1000, -1000, 156, -1000, -1000, 17957, -62, 151, 319, -1000,
	-1000, -1000, -1000, -1000, -1000, 723, 538, -1000, 10642, 1745,
	794, 794, -1000, -1000, 209, -1000, -1000, 11677, 11677, 11677,
	11677, 11677, 11677, 11677, 11677, 11677, 11677, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 794, 245, -1000, 10287, 794, 794, 794, 794, 794,
	794, 794, 794, 10642, 794, 794, 794, 794, 794, 794,
	794, 794, 794, 794, 794, 794, 794, 794, 794, 794,
	-1000, -1000, -251, -270, 17957, -1000, 17957, 575, 1057, -1000,
	804, -1000, -1000, -1000, 1014, 10642, 10642, 1057, -1000, 954,
	9222, -1000, -1000, 1108, -1000, -1000, -1000, -1000, 400, 1084,
	-1000, 12378, 241, 16217, 15182, 17957, 846, 678, -1000, -1000,
	237, 851, 7069, -82, -1000, -1000, -1000, 193, 16907, -1000,
	-1000, -1000, 972, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 785, 17957, -1000, 358, -1000, 567, 1037, 162,
	567, 357, 567, 17957, 17957, 4831, 4831, 4831, 69, 103,
	92, 17957, 849, 153, 17957, 1034, 903, 17957, 567, 567,
	-1000, 6323, -1000, 4831, 364, -1000, 566, 10642, 4831, 4831,
	4831, 17957, 4831, 4831, -1000, -1000, -1000, 398, 399, -1000,
	-1000, -1000, -1000, -1000, 4831, 4831, -1000, 1082, 366, -1000,
	-1000, -1000, -1000, 10642, 282, -1000, 902, -1000, -1000, -73,
	39, -1000, 17957, -1000, 1109, -1000, -1000, -1000, -112, -1000,
	-1000, 10642, 10642, 10642, 10642, 507, 409, -1000, 388, 11677,
	477, 384, 11677, 11677, 11677, 11677, 11677, 11677, 11677, 11677,
	11677, 11677, 11677, 11677, 11677, 11677, 11677, 713, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 567, -1000, 1106, 1101,
	1101, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	12022, 7802, 6323, 741, 782, 1057, 9222, 9222, 10642, 10642,
	9932, 9577, 9222, 1019, 330, 538, 17957, -1000, -1000, 11332,
	-1000, -1000, -1000, -1000, -1000, 582, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 17957, 17957, 9222, 9222, 9222, 9222, 9222,
	567, 567, 567, 805, 571, -1000, -1000, 1043, 741, 1108,
	-1000, 1099, 276, 568, 848, -1000, 565, 1043, 14492, 845,
	-1000, 1108, -1000, -1000, -1000, 17957, 409, -1000, -1000, 16562,
	-1000, -1000, 5950, 100, 17957, -1000, 680, 961, -1000, -1000,
	-1000, 1036, 13077, 14147, 100, 812, 15182, 17957, -1000, -1000,
	15182, 17957, 5577, 6696, -82, -1000, 787, -1000, -76, -92,
	8512, 8157, 240, -1000, -1000, -1000, -1000, 4458, 378, 649,
	457, -45, -1000, -1000, -1000, 857, -1000, 857, 857, 857,
	857, -2, -2, -2, -2, -1000, -1000, -1000, -1000, -1000,
	877, 872, -1000, 857, 857, 857, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 871, 871, 871, 860, 860, 890,
	804, 17957, 4831, 1023, 4831, -1000, 105, -1000, -1000, -1000,
	17957, 17957, 17957, 17957, 17957, 201, 17957, 17957, 832, -1000,
	17957, 4831, -1000, -1000, 235, -1000, -1000, -1000, -1000, -1000,
	538, -1000, -1000, -1000, -1000, -1000, -1000, 17957, -1000, -1000,
	17957, -1000, 16217, -1000, -1000, 17957, 364, 17957, 17957, 538,
	-1000, 561, 17957, -1000, 17957, -1000, 15872, -1000, -1000, -1000,
	-1000, 538, 388, 592, 372, -1000, -1000, 526, -1000, -1000,
	-1000, 2085, -1000, -1000, -1000, -1000, 477, 11677, 11677, 11677,
	323, 2085, 2130, 654, 618, 254, 414, 414, 260, 260,
	260, 260, 260, 1032, 1032, -1000, -1000, -1000, 582, -1000,
	-1000, -1000, 582, 9222, 9222, 831, 794, 232, -1000, 873,
	-1000, -1000, 1043, 747, 747, 407, 743, 340, 1078, 747,
	313, 1076, 747, 747, 9222, -1000, -1000, 415, -1000, 10642,
	582, -1000, 228, -1000, 921, 818, 802, 747, 582, 582,
	747, 747, -258, -1000, 773, -1000, -1000, 596, -1000, 314,
	-1000, 1014, -1000, -1000, 944, 10642, 10642, 10642, -1000, -1000,
	-1000, 1014, 1060, -1000, 963, 960, 1066, 9222, 15182, 1108,
	-1000, -1000, -1000, 226, 865, 794, -1000, 17957, 15182, 15182,
	15182, 15182, 15182, -1000, 936, 929, -1000, 916, 914, 931,
	17957, -1000, 758, 582, 741, 13077, 229, 794, -1000, 15527,
	-1000, -1000, 1066, 15182, 796, -1000, 796, -1000, 221, -1000,
	-1000, 787, -82, -78, -1000, -1000, -1000, -1000, 538, -1000,
	-1000, 538, -1000, 763, 778, 4085, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 867, 567, -1000, 1015, 269, 261, 567,
	1013, -1000, -1000, -1000, 1006, -1000, 381, -47, -1000, -1000,
	496, -2, -2, -1000, -1000, 240, 971, 240, 240, 240,
	554, 554, -1000, -1000, -1000, -1000, 494, -1000, -1000, -1000,
	473, -1000, 898, 17957, 1109, 1033, -1000, -1000, -1000, -1000,
	943, 943, 257, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 98, 656, -1000, -1000, -1000, -1000,
	15, 68, 152, -1000, 4831, -1000, 6323, 366, 364, 864,
	366, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 323, 2085, 1832, -1000, 11677, 11677,
	-1000, -1000, 747, 747, 9222, 6323, 1057, 1014, -1000, -1000,
	146, 713, 146, 11677, 11677, -1000, 11677, 11677, -1000, -137,
	640, 325, -1000, 10642, 595, -1000, 6323, -1000, 11677, 11677,
	-1000, -1000, -1000, -1000, -1000, 549, -1000, -1000, -1000, -1000,
	-1000, 571, -1000, -1000, 309, -1000, 1101, -1000, 947, 538,
	538, -1000, -1000, 17957, -1000, -1000, -1000, -1000, 1064, 10642,
	-1000, 768, -1000, 5204, 896, 17957, 794, 1109, 13791, 17957,
	842, -1000, 304, 961, 876, 895, 1143, -1000, -1000, -1000,
	-1000, 923, -1000, 918, -1000, -1000, -1000, -1000, -1000, -1000,
	741, -1000, 171, 168, 167, 17957, -1000, 1057, 796, -1000,
	-1000, 264, -1000, -1000, -95, -107, -1000, -1000, -1000, 4458,
	-1000, 4458, 17957, 121, -1000, 567, 567, -1000, -1000, 863,
	894, 11677, -1000, -1000, -1000, 635, 240, 240, -1000, 334,
	-1000, -1000, -1000, 733, -1000, 731, 737, 725, 17957, -1000,
	804, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17957, -1000,
	-1000, -1000, -1000, -1000, 17957, -144, 567, 17957, 17957, 17957,
	17957, -1000, 219, 364, -1000, 364, 17957, 364, -1000, 11677,
	2085, 2085, -1000, -1000, 582, -1000, 1043, -1000, 582, 857,
	857, -1000, 857, 860, -1000, 857, 23, 857, 14, 582,
	582, 1995, 1962, 1775, 1701, 794, -132, -1000, 538, 10642,
	-1000, 1813, 1333, 547, -1000, 1101, -1000, -1000, -1000, 1062,
	1046, 538, -1000, -1000, 1017, 648, 710, -1000, -1000, 8867,
	720, 200, 712, -1000, 1066, 17957, 10642, -1000, -1000, 10642,
	858, -1000, 10642, -1000, -1000, -1000, 1057, 794, 794, 794,
	712, 1043, -1000, -1000, -1000, -1000, 4085, -1000, 690, -1000,
	857, -1000, -1000, -1000, 17957, -40, 1097, 2085, -1000, -1000,
	-1000, -1000, -1000, -2, 542, -2, 471, -1000, 466, 4831,
	1109, -1000, -1000, -1000, -1000, 1016, -1000, 6323, -1000, -1000,
	855, 884, -1000, -1000, 6323, -1000, -1000, 684, -1000, -1000,
	2085, -1000, 1014, -1000, -1000, 142, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11677, 11677, 11677, 11677, 11677, 1043,
	528, 538, 11677, 11677, -1000, -1000, -1000, 10642, 10642, 1010,
	-1000, 794, -1000, 793, 17957, 17957, -1000, 17957, 1057, -1000,
	538, 538, 17957, 538, 14837, 17957, 17957, 13437, -1000, 217,
	17957, -1000, 655, 249, -1000, -16, 240, -1000, 240, 616,
	598, -1000, 794, 728, -1000, 302, 17957, 17957, -1000, -1000,
	17957, -1000, -1000, -1000, 921, 921, 921, 921, 88, 582,
	-1000, 921, 921, 538, 723, 1094, -1000, 794, 1109, 198,
	-1000, -1000, 1043, 634, 626, -1000, 626, 626, 229, 217,
	-1000, 567, 297, 521, -1000, 115, 387, 1009, -1000, 1008,
	-1000, -1000, -1000, -1000, -1000, 94, 6323, 4458, 624, -1000,
	-1000, -1000, -1000, -1000, -1000, 582, 81, -147, -1000, -1000,
	-1000, 17957, 710, 17957, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 463, -1000, -1000, 17957, -1000, 440, -1000, -1000,
	610, -1000, 17957, -1000, -1000, 656, -1000, 946, -142, -150,
	692, -1000, -1000, 853, -1000, -1000, 94, 959, -144, -1000,
	941, -1000, 17957, -1000, 85, -1000, -145, 607, 82, -148,
	892, 794, -156, 878, -1000, 1092, 10987, -1000, -1000, 1089,
	233, 233, 921, 582, -1000, -1000, -1000, 126, 439, -1000,
	-1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1403, 1402, 22, 67, 68, 1400, 1399, 1398, 118,
	117, 109, 1396, 1394, 1392, 1390, 1389, 1387, 1386, 1385,
	1384, 1383, 1382, 1381, 1376, 1375, 1374, 1373, 1372, 1366,
	1362, 1360, 1355, 1116, 1352, 1346, 1345, 1344, 1342, 85,
	1341, 82, 1340, 1338, 1335, 1333, 1332, 1328, 1326, 1325,
	1324, 45, 268, 40, 61, 1321, 60, 1867, 36, 58,
	74, 71, 1318, 42, 1314, 1311, 86, 1309, 1306, 59,
	1305, 1304, 54, 70, 84, 1303, 12, 38, 1302, 1301,
	1300, 1299, 32, 1984, 1298, 1297, 16, 1295, 1294, 108,
	1293, 72, 20, 13, 25, 27, 1291, 69, 1290, 8,
	1289, 66, 1287, 1286, 1285, 1284, 31, 1283, 64, 1282,
	14, 41, 1280, 7, 1278, 79, 35, 21, 5, 1277,
	1276, 19, 76, 51, 73, 1275, 1273, 517, 1268, 975,
	48, 1267, 1266, 112, 52, 1265, 119, 375, 1262, 1261,
	1260, 1259, 28, 905, 1272, 24, 78, 1250, 1248, 1247,
	2520, 26, 57, 17, 1246, 1244, 1239, 37, 81, 46,
	1237, 1235, 44, 1228, 1227, 1223, 1221, 1220, 1219, 1217,
	18, 1216, 1215, 1214, 63, 29, 1210, 1209, 77, 30,
	1204, 1202, 1200, 49, 75, 1197, 1193, 53, 1184, 80,
	62, 1183, 1182, 1180, 1179, 1178, 33, 11, 1176, 15,
	1170, 10, 1163, 34, 1160, 4, 1156, 9, 1153, 6,
	0, 1149, 3, 1148, 1147, 56, 1, 1146, 2, 39,
	1133, 1131, 1130, 91, 1128, 1125, 1353, 1497, 87, 1118,
	90,
}

var yyR1 = [...]int{
	0, 224, 225, 225, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 210, 210, 210, 213, 214,
	20, 3, 3, 3, 3, 2, 2, 8, 4, 5,
	5, 9, 9, 42, 42, 10, 11, 11, 11, 11,
	228, 228, 66, 66, 67, 67, 115, 115, 12, 13,
	13, 124, 124, 123, 123, 123, 125, 125, 125, 125,
	160, 160, 14, 14, 14, 14, 14, 14, 14, 38,
	38, 32, 32, 32, 32, 35, 35, 35, 35, 35,
	35, 50, 50, 50, 212, 212, 211, 209, 209, 208,
	208, 207, 21, 192, 194, 194, 193, 193, 193, 193,
	184, 163, 163, 163, 163, 166, 166, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 165, 165, 165, 165,
	165, 167, 167, 167, 167, 167, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 169, 169, 169, 169, 169, 169, 169, 169, 183,
	183, 170, 170, 178, 178, 179, 179, 179, 176, 176,
	177, 177, 180, 180, 180, 172, 172, 173, 173, 181,
	181, 174, 174, 174, 175, 175, 175, 182, 182, 182,
	182, 182, 171, 171, 185, 185, 202, 202, 201, 201,
	201, 34, 191, 191, 198, 198, 198, 198, 198, 188,
	188, 188, 189, 189, 187, 187, 190, 190, 200, 200,
	199, 186, 186, 203, 203, 203, 203, 217, 218, 216,
	216, 216, 216, 216, 195, 195, 195, 196, 196, 196,
	197, 197, 197, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 206, 204, 204, 205, 205, 16,
	22, 22, 17, 17, 17, 17, 17, 18, 18, 23,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 131, 131, 133, 133, 129, 129, 132, 132, 130,
	130, 130, 134, 134, 134, 135, 135, 161, 161, 161,
	25, 25, 27, 27, 28, 29, 29, 155, 155, 156,
	156, 30, 31, 43, 43, 43, 43, 43, 43, 45,
	45, 45, 7, 7, 7, 7, 44, 44, 44, 6,
	6, 26, 26, 26, 26, 19, 229, 39, 40, 40,
	41, 41, 41, 47, 47, 47, 46, 46, 46, 53,
	53, 55, 55, 55, 55, 55, 56, 56, 56, 56,
	56, 56, 52, 52, 54, 54, 54, 54, 54, 147,
	147, 147, 146, 146, 58, 58, 59, 59, 60, 60,
	61, 61, 61, 61, 98, 75, 75, 114, 114, 113,
	113, 116, 116, 62, 62, 62, 62, 63, 63, 64,
	64, 65, 65, 154, 154, 153, 153, 153, 152, 152,
	68, 68, 68, 70, 69, 69, 69, 69, 71, 71,
	73, 73, 72, 72, 72, 72, 74, 76, 76, 76,
	76, 76, 77, 77, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 128, 128, 79, 79, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 90, 90, 90,
	90, 90, 90, 80, 80, 80, 80, 80, 80, 80,
	51, 51, 91, 91, 91, 223, 223, 97, 92, 92,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 87, 87, 87, 87, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 230, 230, 89,
	88, 88, 88, 88, 88, 88, 88, 48, 48, 48,
	48, 48, 159, 159, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 102, 102, 49,
	49, 100, 100, 101, 103, 103, 99, 99, 99, 82,
	82, 82, 82, 82, 82, 82, 82, 84, 84, 84,
	104, 104, 105, 105, 106, 106, 107, 107, 108, 109,
	109, 109, 110, 110, 110, 110, 111, 111, 111, 81,
	81, 81, 81, 112, 112, 112, 112, 117, 117, 93,
	93, 95, 95, 94, 96, 118, 118, 121, 119, 119,
	119, 122, 122, 122, 122, 122, 122, 122, 120, 120,
	120, 149, 149, 149, 126, 126, 136, 136, 137, 137,
	127, 127, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 139, 139, 139, 140, 140, 141, 141, 141,
	148, 148, 144, 144, 145, 145, 150, 150, 151, 151,
	219, 220, 221, 221, 222, 222, 222, 33, 36, 36,
	37, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 226, 227, 157, 158, 158, 158,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	2, 4, 6, 6, 7, 4, 6, 5, 8, 1,
	3, 7, 8, 1, 1, 10, 8, 7, 6, 6,
	1, 1, 1, 3, 1, 3, 0, 4, 3, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 8, 5, 7, 5, 5, 0,
	1, 4, 5, 7, 4, 5, 5, 4, 4, 4,
	3, 1, 1, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 4, 4, 2, 4, 1, 3, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 3,
	2, 3, 1, 10, 11, 11, 12, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 7, 7, 4, 5,
	4, 4, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 6, 4, 3, 7,
	4, 1, 1, 0, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 5, 0, 1, 0,
	1, 2, 3, 0, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 5,
	3, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 1, 2, 3, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 3, 3, 7, 0, 3, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 5, 7, 3, 0, 5, 4,
	5, 5, 0, 2, 1, 3, 3, 3, 2, 3,
	2, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 2, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 5, 4, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 0, 1, 0, 1, 3, 5, 2, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -224, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -32, -35, -33,
	-34, -36, -37, -4, -226, 6, 7, -42, 9, 10,
	30, -21, 123, 124, 126, 125, 159, 127, 152, 53,
	173, 174, 176, 177, 178, 179, -45, 157, 158, 31,
	32, 129, 34, -38, 374, 370, 375, 376, 57, 8,
	262, 154, 153, 25, 377, -225, 378, -41, 5, -106,
	15, -3, -39, -229, -39, -39, -39, -39, -39, -192,
	-194, 57, 96, -141, 133, 77, 254, 130, 131, 137,
	-144, -210, -143, 60, 61, 62, 272, 145, 304, 305,
	364, 173, 187, 181, 208, 200, 273, 306, 146, 198,
	201, 241, 143, 307, 228, 235, 71, 176, 250, 308,
	155, 196, 192, 29, 309, 281, 190, 27, 310, 237,
	213, 311, 277, 239, 191, 236, 129, 312, 148, 141,
	313, 214, 218, 314, 242, 315, 316, 317, 377, 185,
	186, 365, 318, 144, 244, 212, 28, 142, 33, 274,
	37, 163, 245, 216, 319, 211, 207, 366, 320, 321,
	322, 323, 210, 184, 206, 41, 220, 219, 221, 240,
	376, 203, 324, 325, 326, 149, 327, 193, 18, 328,
	329, 330, 331, 332, 248, 158, 333, 161, 334, 335,
	336, 337, 338, 339, 238, 215, 217, 138, 165, 234,
	375, 276, 340, 246, 189, 341, 150, 162, 157, 249,
	151, 342, 343, 344, 345, 346, 347, 367, 348, 177,
	368, 349, 350, 351, 352, 172, 369, 243, 252, 40,
	225, 353, 183, 370, 140, 354, 174, 169, 230, 204,
	164, 355, 356, 194, 195, 209, 182, 205, 175, 166,
	159, 357, 251, 226, 278, 202, 199, 170, 358, 167,
	168, 359, 231, 232, 171, 275, 247, 197, 227, -127,
	133, 254, 130, 232, 135, 131, 131, 132, 133, 254,
	130, 131, -72, -150, -210, -143, 133, 131, 114, 201,
	241, 123, 229, 237, -133, 238, 165, -161, 131, -129,
	228, 231, 232, 171, 364, 175, 239, 243, 242, 233,
	-150, 175, -155, 180, -144, 178, -129, -43, 360, 127,
	-157, -157, 230, 230, -157, -92, -57, -78, 80, -83,
	29, 23, -82, -79, -99, -96, -97, 114, 115, 117,
	116, 118, 103, 104, 111, 81, 119, -87, -85, -86,
	-88, 64, 63, 72, 65, 66, 67, 68, 73, 74,
	75, -144, -150, -94, -226, 47, 48, 263, 264, 265,
	266, 271, 267, 83, 36, 253, 261, 260, 259, 257,
	258, 255, 256, 269, 270, 136, 254, 130, 109, 262,
	-210, -143, 364, 371, -39, 65, -39, -39, -5, -4,
	-226, 6, 20, 21, -110, 17, 16, -227, 59, -47,
	-55, 42, 43, -56, 21, 35, 46, 44, -40, -54,
	105, -57, -150, -127, -127, 11, -66, -67, -72, -74,
	-150, -119, -160, 175, -122, 243, 242, -145, -120, -144,
	-142, 241, 201, 240, 128, 279, 79, 22, 24, 223,
	82, 114, 16, 83, 113, 263, 123, 51, 280, 255,
	256, 253, 265, 266, 254, 229, 10, 282, 25, 153,
	21, 35, 107, 125, 86, 87, 156, 374, 23, 154,
	75, 285, 19, 54, 11, 13, 286, 287, 14, 136,
	135, 98, 132, 49, 8, 119, 26, 95, 45, 288,
	289, 290, 291, 292, 47, 96, 17, 257, 258, 31,
	293, 271, 160, 109, 52, 38, 80, 294, 295, 73,
	296, 76, 55, 77, 15, 50, 297, 298, 299, 300,
	97, 126, 262, 48, 301, 130, 6, 268, 30, 152,
	46, 302, 131, 85, 269, 270, 134, 74, 5, 137,
	32, 9, 53, 56, 259, 260, 261, 36, 84, 12,
	303, 78, -193, 96, -184, -210, -72, 132, -72, 262,
	-137, 136, -137, -137, 131, -72, -210, -210, 123, 125,
	128, 55, -22, -72, -136, 136, -210, -136, -136, -136,
	-72, 120, -72, -210, 30, -134, 96, 12, 254, -210,
	165, 131, 166, 133, -158, -226, -145, -188, -210, 8,
	132, 33, 144, -158, 169, 170, -158, -132, -131, 235,
	236, 230, 234, 12, 170, 230, 168, -190, -210, 244,
	134, -144, -133, -7, -3, -10, -9, -11, 88, -157,
	-157, 58, 79, 77, 78, 95, -223, 69, -57, -80,
	98, 80, 96, 97, 82, 100, 99, 110, 103, 104,
	105, 106, 107, 108, 109, 101, 102, 113, 88, 89,
	90, 91, 92, 93, 94, -128, -226, -97, -226, 121,
	122, -83, -83, -83, -83, -83, -83, -83, -83, -83,
	-83, -226, 120, -2, -92, -4, -226, -226, -226, -226,
	-226, -226, -226, -226, -102, -57, -226, -230, -89, -226,
	-230, -89, -230, -89, -230, -226, -230, -89, -230, -89,
	-230, -230, -89, -226, -226, -226, -226, -226, -226, -226,
	366, 367, 372, 373, -72, -72, 64, -106, -3, -39,
	-111, 19, 31, -57, -107, -108, -57, -106, 38, -52,
	-54, -56, 42, 43, 70, 11, -223, -147, -146, 22,
	-144, 64, 120, -73, 26, -72, -59, -60, -61, -62,
	-75, -98, -226, -72, -72, -66, -228, 58, 11, 56,
	-228, 58, 120, 58, 175, -122, -124, -123, 244, 246,
	88, 134, -149, -144, 64, 29, 30, 59, 58, -72,
	-163, -166, -168, -167, -169, -164, -165, 198, 199, 114,
	202, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 30, 155, 194, 195, 196, 197, 214, 215, 216,
	217, 218, 219, 220, 221, 181, 200, 273, 182, 183,
	184, 185, 186, 187, 189, 190, 191, 192, 193, -210,
	22, 133, -210, 80, -210, -72, -72, -158, -158, -158,
	167, 167, 131, 131, 172, -72, 58, 134, -66, 23,
	55, -72, -210, -210, -151, -150, -142, -158, -134, 64,
	-57, -158, -158, -158, -72, -158, -158, -189, 11, 98,
	-189, -134, -39, -158, -158, 11, -130, 11, 98, -57,
	-135, 96, 55, 245, -156, 178, -72, 212, 361, 362,
	363, -57, -57, -57, -57, -90, 73, 80, 74, 75,
	69, -83, -91, -94, -97, 69, 98, 96, 97, 82,
	-83, -83, -83, -83, -83, -83, -83, -83, -83, -83,
	-83, -83, -83, -83, -83, -159, -210, 64, -210, -82,
	-82, -144, -53, 21, 35, -52, -145, -151, -142, -41,
	-227, -227, -106, -52, -52, -57, -57, -99, 64, -52,
	-99, 64, -52, -52, -46, 21, 35, -100, -101, 84,
	-99, -144, -150, -227, -83, -144, -144, -52, -53, -53,
	-52, -52, -190, -190, -210, -210, 64, -222, -219, -213,
	61, -110, -227, 9, 98, 58, 18, 58, -109, 24,
	25, -110, -84, -144, 65, 68, -58, 58, 11, -56,
	-72, -146, 105, -151, -115, 161, -72, 30, 58, -68,
	-70, -69, -71, 45, 49, 51, 46, 47, 48, 52,
	-154, 22, -59, -33, -3, -226, -153, 161, -152, 22,
	-150, 64, -115, 56, -59, -72, -59, -74, -150, 105,
	-122, -124, 58, 245, 247, 248, 55, 76, -57, 55,
	76, -57, -175, 113, -195, -196, -197, -145, 64, 65,
	-184, -185, -186, -198, 147, -203, 138, 140, 137, -187,
	148, 132, 28, 59, -180, 73, 80, -176, 226, -170,
	57, -170, -170, -170, -170, -174, 201, -174, -174, -174,
	57, 57, -170, -170, -170, -178, 57, -178, -178, -179,
	57, -179, -148, 56, -3, -72, -158, 23, -158, -138,
	128, 125, 126, -206, 124, 223, 201, 71, 29, 15,
	263, 161, 278, -210, 162, -72, -72, -72, -72, -72,
	128, 125, -72, -72, -72, -158, 120, -72, -72, -73,
	-72, -134, -150, -150, 64, -72, -144, -44, -144, 64,
	73, 74, 75, -91, -83, -83, -83, -51, 156, 79,
	-227, -227, -52, -52, -226, 120, -5, -110, -227, -227,
	58, 56, 22, 11, 11, -227, 11, 11, -227, -227,
	-52, -103, -101, 86, -57, -227, 120, -227, 58, 58,
	-227, -227, -227, -227, -227, -50, 365, 369, 368, -210,
	64, 58, -221, -220, -214, 62, 88, -111, 40, -57,
	-57, -108, -111, -126, 19, 11, 36, 36, -77, 12,
	-54, -59, -56, 120, -81, 30, 36, -3, -226, -226,
	-118, -121, -99, -60, -61, -61, -60, -61, 45, 45,
	45, 50, 45, 50, 45, -69, -150, -227, -227, -227,
	-3, -76, 53, 135, 54, -226, -152, -77, -59, -77,
	-77, 120, -123, -125, 249, 246, 252, -210, 64, 58,
	-197, 88, 57, -210, 28, -187, -187, -190, -190, 28,
	-172, 29, 73, -177, 227, 65, -174, -174, -175, 30,
	-175, -175, -175, -183, 64, -183, 65, 65, 55, -144,
	22, -157, -215, 143, 139, 147, 148, 141, 60, 61,
	62, 132, 28, 138, 140, 161, 137, -215, -139, -140,
	134, 22, 132, 28, 161, -212, 56, 167, 223, 167,
	134, -158, -151, -130, -134, -114, 57, -130, -51, 79,
	-83, -83, -227, -227, -53, -145, -106, -111, -162, 114,
	198, 155, 196, 192, 212, 203, 225, 194, 226, -159,
	-162, -83, -83, -83, -83, 272, -106, 87, -57, 85,
	-145, -83, -83, 64, -219, 88, -82, 41, -72, -104,
	13, -57, 105, -117, 55, -118, -93, -95, -94, -226,
	-112, -144, -116, -144, -58, 58, 88, -64, -63, 55,
	56, -65, 55, -63, 45, 45, -227, 132, 132, 132,
	-116, -106, -77, 246, 250, 251, -196, -197, -200, -199,
	-144, -203, -190, -190, 57, -173, 55, -83, 59, -175,
	-175, -210, 114, 59, 58, 59, 58, 59, 58, -72,
	-3, -157, -157, -72, -157, -144, -209, 275, -211, -210,
	-144, -144, -144, -72, 120, -134, -134, -113, -144, -134,
	-83, -227, -110, -227, -170, -170, -170, -179, -170, 186,
	-170, 186, -227, -227, 19, 19, 19, 19, -226, -49,
	268, -57, 58, 58, 64, -82, -105, 14, 16, 27,
	-117, 58, -227, -227, 58, 120, -227, 58, -77, -121,
	-57, -57, 57, -57, -226, -226, -226, -227, -110, 59,
	58, -170, -113, -181, 223, 9, -174, 64, -174, 65,
	65, -158, 26, -208, -207, -145, 57, 56, -151, 59,
	58, -111, -174, -210, -83, -83, -83, -83, -83, -110,
	64, -83, -83, -57, -92, 28, -95, 36, -3, -144,
	-144, -144, -106, -113, -113, -227, -113, -113, -153, -202,
	-201, 56, 142, 71, -199, 59, -182, 138, 28, 137,
	-86, -175, -175, 59, 59, -226, 58, 88, -113, -72,
	-144, -227, -227, -227, -227, -48, 98, 275, -227, -227,
	-227, 9, -93, 120, -110, 59, -227, -227, -227, -76,
	-201, -210, -191, 88, 64, 150, -171, 71, 28, 28,
	-204, -205, 161, -207, -197, 59, -227, 273, 52, 276,
	-118, -144, 65, -72, 64, -227, 58, -144, -212, 41,
	274, 277, 57, -205, 36, -209, 41, -113, 163, 275,
	59, 164, 276, -217, -218, 55, -226, 277, -218, 55,
	10, 9, -83, 160, -216, 151, 146, 149, 30, -216,
	-227, -227, 145, 29, 73,
}

var yyDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 654, 0, 386, 386, 386, 386, 386,
	386, 0, 727, 710, 0, 0, 0, 0, -2, 351,
	352, 0, 354, -2, 0, 0, -2, 1055, 1055, 0,
	0, 1055, 0, 0, 386, 0, 386, 386, 1053, 53,
	54, 369, 370, 371, 90, 1, 3, 0, 390, 662,
	0, 0, -2, 388, 0, 710, 710, 0, 0, 82,
	83, 0, 0, 0, 1042, 0, 708, 708, 708, 728,
	729, 732, 733, 35, 36, 37, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 0,
	0, 0, 0, 0, 711, 0, 706, 0, 706, 706,
	706, 0, 298, 472, 736, 737, 1042, 0, 0, 0,
	342, 0, 1056, 310, 0, 312, 1056, 0, 1056, 0,
	319, 0, 0, 325, 226, 0, 334, 348, 349, 336,
	350, 353, 0, 358, 361, 0, 333, 0, 0, 368,
	381, 382, 1055, 1055, 385, 40, 528, 484, 0, 491,
	-2, 0, 530, 531, 532, 533, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 560, 561, 562,
	563, 639, 640, 641, 642, 643, 644, 645, 646, 495,
	496, 636, 0, 684, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 597, 597, 597, 597, 597,
	597, 597, 597, 0, 0, 0, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 211, 748, 0, 654, 49,
	0, 386, 391, 392, 666, 0, 0, 654, 1054, 0,
	0, -2, -2, 402, 408, 409, 410, 411, 387, 0,
	414, 419, 0, 0, 0, 0, 0, 0, 62, 64,
	472, 68, 0, 1031, 688, -2, -2, 0, 0, 734,
	735, -2, 883, -2, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 0, 0, 116, 0, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 1056, 1056, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	297, 0, 299, 1056, 342, 302, 0, 0, 1056, 1056,
	1056, 0, 1056, 1056, 309, 1057, 1058, 0, 342, 386,
	219, 220, 221, 313, 1056, 1056, 315, 0, 339, 337,
	338, 331, 332, 0, 345, 322, 323, 328, 227, 0,
	359, 362, 0, 380, 372, 373, 374, 375, 0, 383,
	384, 0, 0, 0, 0, 0, 490, 525, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	515, 516, 517, 518, 519, 492, 0, 506, 0, 0,
	0, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	0, 399, 0, 0, 0, 654, 0, 0, 0, 0,
	0, 0, 0, 396, 0, 628, 0, 581, 589, 0,
	582, 590, 583, 591, 584, 0, 585, 592, 586, 593,
	587, 588, 594, 0, 0, 0, 399, 399, 0, 0,
	226, 226, 0, 100, 744, 749, 750, 662, 0, 401,
	41, 0, 0, 663, 655, 656, 659, 662, 0, 424,
	412, 403, 406, 407, 389, 0, -2, 416, 420, 0,
	422, 423, 0, 66, 0, 471, 0, 426, 428, 429,
	430, 453, 0, 455, -2, 0, 0, 0, 60, 61,
	0, 0, 0, 0, 1031, 689, 70, 71, 0, 0,
	0, 0, 194, 701, 702, 703, 699, 244, 0, 0,
	182, 178, 122, 123, 124, 171, 126, 171, 171, 171,
	171, 191, 191, 191, 191, 154, 155, 156, 157, 158,
	0, 0, 141, 171, 171, 171, 145, 161, 162, 163,
	164, 165, 166, 167, 168, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 173, 173, 173, 175, 175, 730,
	0, 0, 1056, 0, 1056, 112, 0, 258, 260, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 707,
	0, 1056, 295, 296, 473, 738, 739, 300, 301, 343,
	344, 303, 304, 305, 306, 307, 308, 0, 222, 223,
	0, 327, 0, 314, 318, 0, 342, 0, 0, 320,
	321, 0, 0, 330, 0, 360, 376, 364, 365, 366,
	367, 529, 485, 486, 487, 489, 507, 0, 509, 511,
	526, 497, 498, 522, 523, 524, 0, 0, 0, 0,
	520, 502, 0, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 549, 612, 613, 0, 547,
	548, 559, 0, 0, 0, 400, 637, 0, -2, 0,
	527, 683, 662, 0, 0, 0, 0, 532, 639, 0,
	532, 639, 0, 0, 0, 397, 398, 634, 631, 0,
	0, 636, 0, 598, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 94, 97, 98, 99, 742, 745, 0,
	38, 666, 50, 667, 0, 0, 0, 0, 658, 660,
	661, 666, 0, 647, 0, 0, 482, 0, 0, 404,
	47, 421, 417, 0, 0, 0, 470, 0, 0, 0,
	0, 0, 0, 460, 0, 0, 463, 0, 0, 0,
	0, 454, 0, 0, 0, 0, 477, 970, 456, 0,
	458, 459, 482, 0, 482, 63, 482, 65, 0, 476,
	690, 69, 0, 0, 74, 75, 691, 692, 693, 694,
	695, 696, 697, 0, 113, 245, 247, 250, 251, 252,
	117, 118, 119, 0, 0, 232, 0, 0, 226, 226,
	0, 224, 225, 115, 185, 183, 0, 180, 179, 125,
	0, 191, 191, 148, 149, 194, 0, 194, 194, 194,
	0, 0, 142, 143, 144, 136, 0, 137, 138, 139,
	0, 140, 0, 0, 85, 0, 87, 709, 88, 1055,
	0, 0, 722, 259, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 0, 104, 263, 265, 264, 268,
	0, 0, 0, 290, 1056, 294, 0, 339, 342, 437,
	339, 317, 340, 341, 346, 324, 356, 379, 377, 378,
	508, 510, 512, 499, 520, 503, 0, 500, 0, 0,
	494, 564, 0, 0, 399, 0, 654, 666, 568, 569,
	0, 0, 0, 0, 0, 605, 0, 0, 606, 0,
	654, 0, 632, 0, 0, 580, 0, 599, 0, 0,
	600, 601, 602, 603, 604, 92, 101, 102, 103, 95,
	96, 0, 747, 743, 0, 39, 0, 43, 0, 664,
	665, 657, 42, 0, 704, 705, 648, 649, 650, 0,
	413, 425, 405, 0, 677, 0, 0, 670, 0, 0,
	424, 685, 0, 427, 449, 451, 0, 446, 461, 462,
	464, 0, 466, 0, 468, 469, 431, 432, 433, 434,
	0, 435, 0, 0, 0, 0, 457, 654, 482, 58,
	59, 0, 72, 73, 0, 0, 79, 195, 196, 0,
	248, 0, 0, 0, 214, 226, 226, 217, 218, 0,
	187, 0, 184, 121, 181, 0, 194, 194, 150, 0,
	151, 152, 153, 0, 169, 0, 0, 0, 0, 731,
	0, 253, 1055, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 1055, 0, 1055,
	723, 724, 725, 726, 0, 107, 0, 0, 0, 0,
	0, 293, 474, 342, 326, 342, 0, 342, 501, 0,
	521, 504, 565, 566, 0, 638, 662, 45, 0, 171,
	171, 617, 171, 175, 620, 171, 622, 171, 625, 0,
	0, 0, 0, 0, 0, 0, 629, 579, 635, 0,
	637, 0, 0, 0, 746, 0, 740, 668, 44, 652,
	0, 483, 418, 51, 0, 677, 669, 679, 681, 0,
	0, 673, 0, 441, 482, 0, 0, 443, 450, 0,
	0, 444, 0, 445, 465, 467, -2, 0, 0, 0,
	0, 662, 57, 76, 77, 78, 246, 249, 0, 228,
	171, 231, 215, 216, 0, 189, 0, 186, 172, 146,
	147, 192, 193, 191, 0, 191, 0, 176, 0, 1056,
	86, 254, 255, 256, 257, 0, 262, 0, 105, 106,
	0, 0, 267, 291, 0, 311, 329, 0, 439, 316,
	505, 567, 666, 570, 614, 191, 618, 619, 621, 623,
	624, 626, 572, 571, 0, 0, 0, 0, 0, 662,
	0, 633, 0, 0, 93, 741, 48, 0, 0, 0,
	52, 0, 682, 0, 0, 0, 67, 0, 654, 686,
	687, 447, 0, 452, 0, 0, 0, 455, 56, 205,
	0, 230, 0, 197, 190, 0, 194, 170, 194, 0,
	0, 84, 0, 108, 109, 0, 0, 0, 475, 438,
	0, 46, 615, 616, 0, 0, 0, 0, 607, 0,
	630, 0, 0, 653, 651, 0, 680, 0, 672, 675,
	674, 442, 662, 0, 0, 479, 0, 0, 477, 204,
	206, 0, 212, 0, 229, 0, 202, 0, 199, 201,
	188, 159, 160, 174, 177, 0, 0, 0, 0, 269,
	440, 573, 575, 574, 576, 0, 0, 0, 578, 595,
	596, 0, 671, 0, 55, 448, 478, 480, 481, 436,
	207, 208, 0, 213, 210, 0, 120, 0, 198, 200,
	0, 285, 0, 110, 111, 104, 577, 0, 0, 0,
	678, 676, 209, 0, 203, 284, 0, 0, 107, 608,
	0, 611, 0, 286, 0, 266, 609, 0, 0, 0,
	233, 0, 0, 234, 235, 0, 0, 610, 236, 0,
	0, 0, 0, 0, 237, 239, 240, 0, 0, 238,
	287, 288, 241, 242, 243,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 378,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:367
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:372
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:373
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:377
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:410
		{
			setParseTree(yylex, nil)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:420
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:424
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:430
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:436
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:442
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:448
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:456
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:460
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:464
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:487
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:495
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:509
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:519
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:526
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:538
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:550
		{
			yyVAL.str = InsertStr
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:554
		{
			yyVAL.str = ReplaceStr
		}
	case 55:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:560
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), OrderBy: yyDollar[9].orderBy, Limit: yyDollar[10].limit}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:570
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:578
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:583
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:588
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:592
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:598
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:602
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:607
		{
			yyVAL.partitions = nil
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:611
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:617
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:623
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:627
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:633
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:637
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:643
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:647
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:651
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:657
		{
			yyVAL.str = RepeatableRead
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:661
		{
			yyVAL.str = ReadCommitted
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:665
		{
			yyVAL.str = ReadUncommitted
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:669
		{
			yyVAL.str = Serializable
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.str = SessionStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:679
		{
			yyVAL.str = GlobalStr
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:685
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:690
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:696
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:701
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName(), SelectStatement: yyDollar[5].selStmt}
		}
	case 86:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:705
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName(), SelectStatement: yyDollar[7].selStmt}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:709
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:713
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:718
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:728
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:733
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str}
		}
	case 93:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:738
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str, KeyFilePath: string(yyDollar[6].bytes), KeyEnvVar: string(yyDollar[7].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:743
		{
			yyVAL.statement = &AuthRevoke{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:749
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: yyDollar[5].colIdent.GetRawVal()}
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:754
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: string(yyDollar[5].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:759
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:764
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:769
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:774
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			yyVAL.str = InteractiveStr
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:784
		{
			yyVAL.str = ServiceAccountStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:788
		{
			yyVAL.str = ServiceAccountStr
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:794
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:809
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:831
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:837
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:844
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:851
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:855
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:866
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:870
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:874
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 120:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:880
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 160:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1102
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1112
		{
			yyVAL.sqlVal = nil
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1116
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1121
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1125
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1133
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1137
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1143
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1151
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1160
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1164
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1170
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1174
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1178
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1183
		{
			yyVAL.optVal = nil
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1187
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1192
		{
			yyVAL.optVal = nil
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1196
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1201
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1205
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1210
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1214
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1218
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1223
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1227
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1236
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1240
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1248
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1257
		{
			yyVAL.sqlVal = nil
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1261
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1267
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1271
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1277
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1281
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1287
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1291
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1296
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1302
		{
			yyVAL.statement = &Sleep{Duration: NewIntVal(yyDollar[2].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1308
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1312
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1318
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1322
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1326
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1330
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1334
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1340
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1344
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1348
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1355
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1359
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1365
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1369
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1374
		{
			yyVAL.str = ""
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1378
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1384
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1388
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1394
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1400
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 233:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1411
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 234:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1415
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 235:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1419
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 236:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1423
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1429
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1435
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1441
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1445
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1449
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1453
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1457
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1462
		{
			yyVAL.str = ""
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1466
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1470
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1478
		{
			yyVAL.str = yyDollar[1].str
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1482
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1486
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1500
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1518
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1523
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1630
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1636
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1640
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 287:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1646
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 288:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1650
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1662
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1666
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1674
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1682
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1687
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1705
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1709
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &OtherRead{}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1725
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1730
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1740
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1744
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1748
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1752
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1756
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1760
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1764
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1768
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1773
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1777
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1785
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1789
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1794
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1804
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1808
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1812
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1816
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1821
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1825
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1829
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1833
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1837
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1854
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), ShowTablesOpt: showTablesOpt}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: yyDollar[3].str}
		}
	case 329:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1864
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Comments: Comments(yyDollar[4].bytes2), Type: string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt, Columns: yyDollar[6].columns}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1870
		{
			yyVAL.statement = &Show{Type: "TRANSACTION_ISOLATION_LEVEL"}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1876
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			yyVAL.str = "extended "
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1896
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1900
		{
			yyVAL.str = "full "
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1906
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1910
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1916
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1920
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1924
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1930
		{
			yyVAL.showFilter = nil
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1934
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1938
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1944
		{
			yyVAL.showFilter = nil
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1948
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1954
		{
			yyVAL.str = ""
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.str = SessionStr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.str = GlobalStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1968
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1978
		{
			yyVAL.statement = &Begin{}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1982
		{
			yyVAL.statement = &Begin{}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1988
		{
			yyVAL.statement = &Commit{}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1994
		{
			yyVAL.statement = &Rollback{}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1998
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2003
		{
			yyVAL.empty = struct{}{}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2005
		{
			yyVAL.empty = struct{}{}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2008
		{
			yyVAL.empty = struct{}{}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2010
		{
			yyVAL.empty = struct{}{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2015
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2021
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2026
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2030
		{
			yyVAL.str = JSONStr
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2034
		{
			yyVAL.str = TreeStr
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2038
		{
			yyVAL.str = VitessStr
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.str = TraditionalStr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2046
		{
			yyVAL.str = AnalyzeStr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2074
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2078
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2083
		{
			yyVAL.str = ""
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.str = ""
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.str = ""
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2097
		{
			yyVAL.statement = &DescribeTable{Full: string(yyDollar[2].str), Extended: string(yyDollar[3].str), Table: yyDollar[4].tableName}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2101
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2107
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2111
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2115
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2119
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2125
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2129
		{
			setAllowComments(yylex, true)
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2133
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2139
		{
			yyVAL.bytes2 = nil
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2143
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
			yyVAL.str = UnionStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2153
		{
			yyVAL.str = UnionAllStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2157
		{
			yyVAL.str = UnionDistinctStr
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2162
		{
			yyVAL.str = ""
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2170
		{
			yyVAL.str = SQLCacheStr
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2175
		{
			yyVAL.str = ""
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2179
		{
			yyVAL.str = DistinctStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2183
		{
			yyVAL.str = DistinctStr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2188
		{
			yyVAL.selectExprs = nil
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2197
		{
			yyVAL.strs = nil
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2201
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2205
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2213
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2219
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2223
		{
			yyVAL.str = SQLCacheStr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2227
		{
			yyVAL.str = DistinctStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2231
		{
			yyVAL.str = DistinctStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2235
		{
			yyVAL.str = StraightJoinHint
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2239
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2245
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2249
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2259
		{
			concatamer := ListArgConcatamer(yyDollar[2].listArgsConcat)
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: NewColIdent(concatamer.String())}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2268
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2272
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2277
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2281
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2285
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2297
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2301
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2311
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2321
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2325
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2329
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			exec := yyDollar[2].statement.(*Exec)
			yyVAL.tableExpr = &ExecSubquery{Exec: exec}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2346
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2350
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2355
		{
			yyVAL.columns = nil
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2359
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2366
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2370
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2380
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2393
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2397
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2401
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2405
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2413
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2417
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2423
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2425
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2428
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2430
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2433
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2437
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2441
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2448
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2454
		{
			yyVAL.str = JoinStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2458
		{
			yyVAL.str = JoinStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2462
		{
			yyVAL.str = JoinStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2468
		{
			yyVAL.str = StraightJoinStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2474
		{
			yyVAL.str = LeftJoinStr
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2478
		{
			yyVAL.str = LeftJoinStr
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2482
		{
			yyVAL.str = RightJoinStr
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2486
		{
			yyVAL.str = RightJoinStr
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2492
		{
			yyVAL.str = NaturalJoinStr
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2496
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2506
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2510
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2516
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2520
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2524
		{
			yyVAL.tableName = TableName{QualifierSecond: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 475:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2528
		{
			yyVAL.tableName = TableName{QualifierThird: yyDollar[1].tableIdent, QualifierSecond: yyDollar[3].tableIdent, Qualifier: yyDollar[5].tableIdent, Name: yyDollar[7].tableIdent}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2534
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2539
		{
			yyVAL.indexHints = nil
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2543
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2547
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2551
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2555
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = nil
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2570
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2574
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &UnaryCastConcatamerExpr{Expr: yyDollar[1].expr, CastConcatamer: ListArgConcatamer(yyDollar[2].listArgsConcat)}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2608
		{
			yyVAL.str = ""
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2612
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2618
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2622
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2628
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2640
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 501:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 505:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.str = IsNullStr
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2674
		{
			yyVAL.str = IsNotNullStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.str = IsTrueStr
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.str = IsNotTrueStr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.str = IsFalseStr
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2690
		{
			yyVAL.str = IsNotFalseStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2696
		{
			yyVAL.str = EqualStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.str = LessThanStr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.str = GreaterThanStr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2708
		{
			yyVAL.str = LessEqualStr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2712
		{
			yyVAL.str = GreaterEqualStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.str = NotEqualStr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2720
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = nil
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2729
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2735
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2739
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2748
		{
			yyVAL.listArgsConcat = []ListArg{ListArg(yyDollar[1].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2752
		{
			yyVAL.listArgsConcat = append(yyDollar[1].listArgsConcat, ListArg(yyDollar[2].bytes))
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2758
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2764
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2768
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2794
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2874
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2882
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2904
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2926
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2930
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2944
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2948
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2952
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 571:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2956
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 572:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2960
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 573:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2964
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 574:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2968
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 575:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2972
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 576:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2976
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 577:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2980
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 578:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2984
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2988
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2992
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3002
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3010
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3020
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3025
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3031
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3036
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3041
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3045
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3049
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3054
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3059
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3064
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3068
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 596:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3072
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3108
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3112
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3116
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3122
		{
			yyVAL.str = ""
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3126
		{
			yyVAL.str = BooleanModeStr
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3130
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 610:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3134
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3138
		{
			yyVAL.str = QueryExpansionStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3154
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3158
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3162
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3166
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3170
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3174
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3180
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3184
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3188
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3192
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3196
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3204
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3209
		{
			yyVAL.expr = nil
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3218
		{
			yyVAL.str = string("")
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3222
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3232
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3238
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3243
		{
			yyVAL.expr = nil
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3247
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3257
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3261
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3267
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3271
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3275
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3279
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3287
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3291
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3295
		{
			yyVAL.expr = &NullVal{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3301
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3310
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3314
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3319
		{
			yyVAL.exprs = nil
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3323
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3328
		{
			yyVAL.expr = nil
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3332
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3337
		{
			yyVAL.orderBy = nil
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3341
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3347
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3351
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3357
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3362
		{
			yyVAL.str = AscScr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3366
		{
			yyVAL.str = AscScr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3370
		{
			yyVAL.str = DescScr
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3375
		{
			yyVAL.limit = nil
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3379
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3383
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3387
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3392
		{
			yyVAL.str = ""
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3396
		{
			yyVAL.str = ForUpdateStr
		}
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3400
		{
			yyVAL.str = ShareModeStr
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3413
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3417
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3421
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3425
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3431
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3435
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3439
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3443
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3448
		{
			yyVAL.updateExprs = nil
		}
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3452
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3458
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3462
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3468
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3472
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3478
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3484
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3494
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3498
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3504
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3510
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3514
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3519
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3525
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3529
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3533
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3537
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3541
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3545
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3549
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3556
		{
			yyVAL.bytes = []byte("charset")
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3563
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3571
		{
			yyVAL.expr = &Default{}
		}
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3580
		{
			yyVAL.byt = 0
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3582
		{
			yyVAL.byt = 1
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3585
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3587
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3590
		{
			yyVAL.str = ""
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3592
		{
			yyVAL.str = IgnoreStr
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3596
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3598
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3600
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3602
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3604
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3606
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3608
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3610
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3612
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3614
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3617
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3619
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3621
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3625
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3627
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3630
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3632
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3634
		{
			yyVAL.empty = struct{}{}
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3637
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3639
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3643
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3647
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3654
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3660
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3664
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3671
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3677
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3683
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3689
		{
			yyVAL.execVarDefOpt = nil
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3691
		{
			rv := yyDollar[1].execVarDef
			yyVAL.execVarDefOpt = &rv
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3697
		{
			yyVAL.execVarDefs = nil
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3699
		{
			yyVAL.execVarDefs = []ExecVarDef{yyDollar[1].execVarDef}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3703
		{
			yyVAL.execVarDefs = append(yyDollar[1].execVarDefs, yyDollar[3].execVarDef)
		}
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3710
		{
			yyVAL.statement = NewExec(yyDollar[2].bytes2, yyDollar[3].tableName, yyDollar[4].execVarDefs, yyDollar[5].execVarDefOpt)
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3716
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, TableName{}, true)
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3720
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, yyDollar[3].tableName, false)
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3726
		{
			yyVAL.statement = NewNativeQuery(yyDollar[2].bytes2, string(yyDollar[3].bytes))
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4055
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4064
		{
			decNesting(yylex)
		}
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4069
		{
			skipToEnd(yylex)
		}
	case 1056:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4074
		{
			skipToEnd(yylex)
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4078
		{
			skipToEnd(yylex)
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4082
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
