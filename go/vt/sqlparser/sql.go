// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "strings"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:55
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	execsubquery         *ExecSubquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	execVarDef           ExecVarDef
	execVarDefOpt        *ExecVarDef
	execVarDefs          []ExecVarDef
	listArgsConcat       []ListArg
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688
const AUTH = 57689
const INTERACTIVE = 57690
const LOGIN = 57691
const REVOKE = 57692
const SA = 57693
const SERVICEACCOUNT = 57694
const SLEEP = 57695
const MATERIALIZED = 57696
const TEMP = 57697
const TEMPORARY = 57698
const REFRESH = 57699
const JSON_ARRAY_ELEMENTS_TEXT = 57700
const JSON_EACH = 57701
const UNNEST = 57702
const REGISTRY = 57703
const PULL = 57704
const LIST = 57705
const EXEC = 57706
const PURGE = 57707
const NATIVEQUERY = 57708
const STACKQL = 57709
const RETURNING = 57710

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"AUTH",
	"INTERACTIVE",
	"LOGIN",
	"REVOKE",
	"SA",
	"SERVICEACCOUNT",
	"SLEEP",
	"MATERIALIZED",
	"TEMP",
	"TEMPORARY",
	"REFRESH",
	"JSON_ARRAY_ELEMENTS_TEXT",
	"JSON_EACH",
	"UNNEST",
	"REGISTRY",
	"PULL",
	"LIST",
	"EXEC",
	"PURGE",
	"NATIVEQUERY",
	"STACKQL",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	364, 96,
	378, 96,
	-2, 35,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	169, 356,
	170, 356,
	230, 344,
	234, 344,
	235, 344,
	236, 344,
	-2, 342,
	-1, 54,
	134, 366,
	-2, 364,
	-1, 57,
	6, 372,
	8, 372,
	9, 372,
	10, 372,
	57, 372,
	262, 372,
	-2, 344,
	-1, 85,
	38, 402,
	-2, 410,
	-1, 106,
	133, 85,
	-2, 965,
	-1, 107,
	132, 1045,
	-2, 83,
	-1, 108,
	132, 1046,
	-2, 84,
	-1, 367,
	80, 914,
	82, 914,
	88, 914,
	89, 914,
	90, 914,
	91, 914,
	92, 914,
	93, 914,
	94, 914,
	96, 914,
	97, 914,
	98, 914,
	99, 914,
	100, 914,
	101, 914,
	102, 914,
	103, 914,
	104, 914,
	105, 914,
	106, 914,
	107, 914,
	108, 914,
	109, 914,
	110, 914,
	113, 914,
	120, 914,
	121, 914,
	122, 914,
	-2, 504,
	-1, 427,
	120, 754,
	-2, 750,
	-1, 428,
	120, 755,
	-2, 751,
	-1, 448,
	38, 403,
	-2, 415,
	-1, 449,
	38, 404,
	-2, 416,
	-1, 472,
	88, 1033,
	-2, 81,
	-1, 473,
	88, 935,
	-2, 82,
	-1, 478,
	88, 902,
	134, 902,
	-2, 716,
	-1, 480,
	88, 973,
	134, 973,
	-2, 718,
	-1, 798,
	1, 424,
	5, 424,
	11, 424,
	12, 424,
	13, 424,
	14, 424,
	15, 424,
	17, 424,
	19, 424,
	31, 424,
	55, 424,
	58, 424,
	59, 424,
	268, 424,
	385, 424,
	386, 424,
	-2, 501,
	-1, 819,
	57, 577,
	-2, 947,
	-1, 820,
	57, 578,
	-2, 948,
	-1, 821,
	56, 63,
	58, 63,
	-2, 67,
	-1, 1009,
	120, 757,
	-2, 753,
}

const yyPrivate = 57344

const yyLast = 19560

var yyAct = [...]int{
	427, 1747, 1737, 1703, 1406, 1533, 1131, 1330, 371, 1308,
	1615, 1652, 1470, 1505, 1496, 1297, 1469, 1309, 477, 1099,
	1127, 646, 386, 442, 782, 735, 1140, 1130, 925, 1160,
	1174, 1475, 80, 369, 357, 1481, 400, 1050, 1069, 996,
	635, 1236, 366, 947, 109, 82, 1383, 1372, 318, 667,
	1430, 318, 1144, 817, 834, 1084, 109, 84, 3, 1100,
	1095, 450, 792, 810, 34, 1544, 1030, 787, 809, 436,
	373, 1006, 973, 805, 601, 1077, 833, 800, 471, 1170,
	938, 466, 463, 608, 99, 1003, 623, 823, 686, 362,
	79, 318, 109, 1497, 358, 602, 318, 361, 318, 773,
	774, 316, 898, 1275, 429, 435, 1277, 1276, 958, 748,
	325, 771, 772, 474, 85, 356, 749, 445, 430, 328,
	7, 313, 308, 309, 310, 6, 5, 335, 1740, 331,
	412, 311, 418, 419, 416, 417, 415, 414, 413, 1724,
	1735, 1711, 1732, 1534, 465, 437, 420, 421, 1723, 603,
	456, 605, 87, 88, 89, 90, 91, 1448, 1710, 1567,
	36, 333, 71, 72, 40, 606, 1344, 340, 835, 1343,
	836, 342, 1345, 111, 112, 113, 1500, 1501, 1119, 1120,
	431, 1499, 433, 434, 1118, 610, 611, 304, 954, 669,
	302, 343, 306, 360, 666, 359, 1153, 326, 1678, 696,
	695, 705, 706, 698, 699, 700, 701, 702, 703, 704,
	697, 70, 661, 707, 1363, 1408, 662, 659, 660, 1161,
	1604, 346, 1558, 1556, 337, 329, 350, 338, 339, 346,
	111, 112, 113, 330, 332, 343, 956, 327, 345, 344,
	352, 1197, 348, 913, 641, 312, 643, 654, 655, 664,
	1410, 910, 1734, 1731, 912, 1196, 665, 959, 960, 961,
	1704, 1751, 1405, 1078, 1697, 1145, 649, 1755, 624, 609,
	306, 1409, 1411, 917, 1660, 1331, 1333, 1653, 640, 642,
	670, 1147, 837, 1181, 914, 1147, 111, 112, 113, 305,
	911, 651, 1655, 1402, 778, 627, 607, 1195, 1491, 1404,
	1490, 1489, 1154, 318, 615, 616, 604, 613, 318, 612,
	625, 303, 324, 111, 112, 113, 318, 307, 111, 112,
	113, 1209, 1685, 620, 1208, 318, 633, 1255, 838, 639,
	109, 1583, 648, 1541, 109, 1340, 109, 719, 720, 1302,
	314, 1252, 668, 1265, 1244, 1215, 1128, 829, 355, 804,
	1192, 1189, 1190, 109, 1188, 733, 614, 1332, 631, 1114,
	341, 622, 314, 1654, 707, 697, 1431, 638, 707, 630,
	1057, 1161, 111, 112, 113, 1679, 952, 1749, 632, 1709,
	1750, 948, 1748, 1661, 1659, 1146, 939, 1199, 1202, 1146,
	650, 617, 94, 618, 679, 680, 619, 626, 1695, 628,
	629, 1669, 652, 1403, 1450, 1401, 637, 1433, 600, 687,
	1479, 1458, 674, 111, 112, 113, 73, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 1194, 301, 1285,
	678, 95, 318, 1031, 318, 685, 902, 719, 720, 717,
	1150, 1436, 980, 1031, 1435, 1262, 1440, 1151, 1434, 1193,
	1432, 719, 720, 939, 637, 1438, 978, 979, 977, 109,
	1393, 318, 318, 318, 1437, 1756, 736, 1518, 949, 687,
	109, 1361, 1699, 940, 70, 677, 109, 1439, 1441, 682,
	675, 676, 779, 672, 796, 775, 976, 776, 971, 1198,
	636, 474, 1389, 1390, 1391, 685, 780, 700, 701, 702,
	703, 704, 697, 1715, 1200, 707, 967, 969, 970, 1757,
	437, 1610, 793, 968, 807, 789, 821, 460, 461, 791,
	1609, 1251, 808, 751, 753, 755, 757, 759, 761, 762,
	752, 754, 1376, 758, 760, 1375, 763, 1717, 636, 1364,
	940, 687, 1229, 1230, 1231, 822, 432, 798, 832, 683,
	684, 682, 827, 1696, 781, 698, 699, 700, 701, 702,
	703, 704, 697, 1012, 1392, 707, 1631, 685, 687, 1397,
	1394, 1385, 1395, 1388, 1607, 1384, 683, 684, 682, 1386,
	1387, 696, 695, 705, 706, 698, 699, 700, 701, 702,
	703, 704, 697, 1396, 685, 707, 1571, 687, 111, 112,
	113, 318, 998, 1147, 1456, 896, 684, 682, 318, 901,
	1373, 903, 318, 1223, 318, 109, 109, 109, 111, 112,
	113, 318, 1347, 685, 318, 930, 777, 318, 1052, 923,
	924, 1666, 318, 1665, 109, 111, 112, 113, 1237, 109,
	109, 109, 318, 109, 109, 1062, 1063, 1250, 1280, 1249,
	927, 1514, 1284, 1148, 846, 109, 109, 111, 112, 113,
	687, 900, 111, 112, 113, 904, 1279, 906, 683, 684,
	682, 1621, 1733, 318, 915, 929, 81, 465, 1719, 1012,
	921, 1407, 1298, 111, 112, 113, 685, 1048, 1478, 942,
	687, 899, 1108, 687, 824, 935, 905, 1579, 683, 684,
	682, 683, 684, 682, 1621, 1707, 918, 1146, 997, 1452,
	1621, 1012, 1143, 1141, 922, 1142, 685, 999, 681, 685,
	1621, 1687, 1139, 1145, 1621, 1657, 957, 974, 1081, 941,
	1012, 109, 972, 1621, 1620, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	1019, 1022, 1009, 1000, 1001, 1007, 1032, 1600, 1599, 1585,
	1012, 975, 1008, 83, 943, 109, 109, 1010, 1582, 1012,
	1524, 1523, 668, 668, 1046, 1047, 1520, 1521, 1668, 318,
	1071, 1070, 1014, 736, 1522, 389, 388, 391, 392, 393,
	394, 109, 1071, 1036, 390, 395, 1520, 1519, 318, 1070,
	1012, 1081, 109, 1054, 1081, 1012, 1070, 318, 36, 1015,
	1016, 681, 1012, 1021, 1024, 1025, 318, 318, 318, 845,
	844, 1044, 1045, 1009, 318, 318, 1007, 1478, 318, 318,
	318, 109, 1053, 1076, 1348, 1064, 825, 1104, 1039, 1070,
	1117, 1042, 1043, 1268, 36, 109, 602, 825, 927, 1080,
	36, 1073, 474, 1040, 1041, 1072, 1267, 824, 1060, 70,
	1079, 1086, 1089, 1090, 1091, 1087, 1132, 1088, 1092, 916,
	830, 1482, 1483, 1097, 1638, 70, 1618, 1081, 1110, 1074,
	1304, 826, 336, 828, 1109, 1742, 1725, 1012, 1111, 1162,
	1163, 1164, 826, 1178, 824, 70, 1617, 1107, 1155, 318,
	439, 70, 109, 1590, 109, 1175, 318, 1201, 1116, 1115,
	1112, 318, 318, 318, 318, 318, 1510, 318, 318, 1418,
	1135, 318, 109, 318, 1482, 1483, 1176, 696, 695, 705,
	706, 698, 699, 700, 701, 702, 703, 704, 697, 318,
	353, 707, 318, 1059, 318, 1351, 1171, 318, 1166, 318,
	318, 70, 1180, 1165, 318, 1179, 109, 1738, 109, 1186,
	1512, 1485, 1468, 1377, 1203, 1204, 1205, 1206, 1207, 953,
	1210, 1211, 1172, 1173, 1212, 920, 1214, 1320, 1488, 1487,
	1318, 1317, 1321, 1058, 1570, 1319, 1316, 1322, 1220, 1090,
	1091, 1729, 1216, 1722, 687, 1217, 1460, 807, 1287, 790,
	1219, 1727, 683, 684, 682, 1296, 1295, 1224, 1368, 428,
	1027, 843, 634, 1360, 974, 1701, 1700, 1218, 1636, 1358,
	685, 1233, 1234, 1235, 1028, 696, 695, 705, 706, 698,
	699, 700, 701, 702, 703, 704, 697, 783, 1246, 707,
	1353, 451, 1578, 1613, 1184, 919, 1527, 1278, 975, 784,
	1232, 1379, 1182, 110, 1094, 452, 897, 319, 440, 441,
	319, 443, 794, 795, 454, 110, 453, 1576, 444, 1569,
	1294, 83, 318, 1298, 1575, 437, 1241, 1242, 1293, 1286,
	1245, 1464, 318, 318, 318, 318, 318, 663, 1291, 1310,
	1744, 1743, 1744, 1256, 318, 1253, 1261, 946, 1259, 318,
	319, 110, 318, 797, 1683, 319, 1605, 319, 1056, 318,
	696, 695, 705, 706, 698, 699, 700, 701, 702, 703,
	704, 697, 439, 1336, 707, 1338, 81, 1339, 1290, 1346,
	86, 109, 1300, 1299, 1301, 1305, 78, 1349, 1096, 29,
	1352, 1, 1049, 1281, 668, 668, 1312, 1313, 1323, 1315,
	1311, 1282, 1132, 1314, 1736, 1283, 1328, 1156, 1157, 1158,
	1159, 1329, 1051, 1535, 1086, 1089, 1090, 1091, 1087, 1337,
	1088, 1092, 1341, 1167, 1168, 1169, 1614, 1421, 1191, 109,
	1702, 1367, 318, 1369, 1370, 1371, 1365, 1366, 1651, 1504,
	1138, 1129, 1335, 1356, 1357, 1354, 1355, 696, 695, 705,
	706, 698, 699, 700, 701, 702, 703, 704, 697, 93,
	599, 707, 92, 109, 1374, 109, 318, 1694, 647, 1137,
	1136, 1658, 1382, 1603, 1149, 451, 1362, 1152, 1511, 1359,
	1698, 644, 851, 849, 927, 1380, 1398, 850, 848, 452,
	1381, 853, 852, 847, 1414, 109, 448, 449, 454, 334,
	453, 997, 469, 955, 349, 1093, 839, 1177, 1416, 799,
	1415, 96, 1400, 1419, 1399, 1187, 1427, 951, 657, 658,
	715, 1429, 1292, 103, 1342, 1420, 475, 468, 1467, 1417,
	1422, 1423, 1473, 1061, 1009, 786, 1574, 1453, 1463, 1260,
	1442, 1428, 745, 318, 1008, 1444, 1445, 1029, 1446, 1447,
	814, 372, 1443, 109, 966, 1449, 816, 109, 109, 387,
	1454, 1455, 319, 384, 385, 1065, 1461, 319, 1457, 1459,
	1303, 689, 370, 364, 1427, 319, 813, 1085, 1083, 1426,
	1082, 464, 1484, 1480, 319, 109, 812, 811, 447, 110,
	818, 1471, 1274, 110, 1566, 110, 1462, 1477, 1677, 109,
	1486, 109, 109, 1495, 1498, 668, 668, 1503, 446, 1026,
	57, 445, 110, 1226, 354, 39, 1492, 38, 455, 1517,
	1132, 64, 1132, 32, 31, 28, 1502, 30, 318, 1507,
	27, 22, 1494, 21, 20, 19, 1515, 1516, 18, 24,
	17, 458, 16, 15, 621, 42, 33, 26, 25, 14,
	318, 13, 12, 1513, 1508, 1509, 109, 11, 1536, 109,
	109, 109, 318, 10, 9, 8, 4, 673, 1528, 109,
	705, 706, 698, 699, 700, 701, 702, 703, 704, 697,
	23, 1525, 707, 1529, 734, 1531, 2, 1526, 0, 0,
	0, 319, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 1549, 1530, 0, 363, 1542, 0, 1543, 0,
	1546, 0, 0, 0, 1547, 1540, 1554, 0, 110, 0,
	319, 319, 319, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 1577, 0, 0, 110, 0, 1310, 0, 0,
	0, 0, 1572, 1586, 0, 0, 1587, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 1349,
	1597, 109, 0, 0, 0, 0, 0, 0, 1596, 0,
	0, 0, 0, 0, 1132, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 318, 0, 0, 0, 0, 0, 0, 1606,
	0, 1608, 0, 1624, 0, 0, 1616, 0, 0, 0,
	927, 0, 0, 0, 0, 653, 0, 656, 0, 1598,
	1619, 0, 0, 0, 1622, 0, 1602, 0, 0, 0,
	0, 0, 1623, 109, 109, 1612, 109, 0, 0, 0,
	1630, 109, 1637, 109, 109, 109, 318, 0, 0, 0,
	0, 109, 1635, 0, 1625, 1626, 1627, 1628, 1629, 0,
	319, 1650, 1632, 1633, 1656, 1649, 1471, 319, 109, 318,
	0, 319, 109, 319, 110, 110, 110, 1663, 1662, 1664,
	319, 0, 1643, 319, 0, 0, 319, 0, 0, 1639,
	0, 319, 0, 110, 401, 35, 0, 0, 110, 110,
	110, 319, 110, 110, 1693, 1684, 1644, 1691, 1645, 1647,
	1648, 0, 0, 1692, 110, 110, 0, 1686, 0, 109,
	109, 0, 1671, 0, 0, 1471, 1706, 0, 1564, 1705,
	35, 0, 319, 1670, 0, 0, 109, 0, 0, 0,
	1616, 1132, 1310, 1712, 0, 0, 0, 0, 318, 0,
	0, 1714, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 1721, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1726, 0, 438, 109, 1728, 0, 0,
	0, 0, 0, 0, 1551, 1552, 0, 1553, 0, 1741,
	110, 1555, 0, 1557, 0, 0, 1752, 0, 0, 0,
	0, 1716, 0, 0, 0, 0, 0, 688, 696, 695,
	705, 706, 698, 699, 700, 701, 702, 703, 704, 697,
	0, 0, 707, 0, 110, 110, 0, 0, 0, 0,
	0, 0, 1745, 0, 0, 0, 0, 0, 319, 0,
	0, 1730, 0, 363, 0, 0, 0, 0, 0, 0,
	110, 0, 746, 0, 0, 0, 0, 319, 1563, 1601,
	0, 110, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 319, 319, 319, 0, 0,
	0, 0, 0, 319, 319, 785, 788, 319, 319, 319,
	110, 0, 0, 0, 0, 0, 907, 908, 909, 0,
	0, 0, 0, 1562, 110, 0, 0, 0, 0, 0,
	398, 0, 0, 0, 0, 928, 0, 0, 0, 0,
	932, 933, 934, 0, 936, 937, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 945, 696, 695,
	705, 706, 698, 699, 700, 701, 702, 703, 704, 697,
	0, 0, 707, 1561, 105, 0, 0, 0, 319, 0,
	0, 110, 0, 110, 0, 319, 351, 0, 0, 0,
	319, 319, 319, 319, 319, 0, 319, 319, 0, 0,
	319, 110, 319, 696, 695, 705, 706, 698, 699, 700,
	701, 702, 703, 704, 697, 0, 0, 707, 319, 0,
	0, 319, 476, 319, 0, 0, 319, 0, 319, 319,
	0, 0, 0, 319, 0, 110, 0, 110, 0, 0,
	0, 0, 0, 0, 645, 0, 0, 0, 645, 0,
	645, 0, 0, 696, 695, 705, 706, 698, 699, 700,
	701, 702, 703, 704, 697, 868, 1238, 707, 0, 35,
	696, 695, 705, 706, 698, 699, 700, 701, 702, 703,
	704, 697, 716, 718, 707, 0, 696, 695, 705, 706,
	698, 699, 700, 701, 702, 703, 704, 697, 0, 931,
	707, 695, 705, 706, 698, 699, 700, 701, 702, 703,
	704, 697, 0, 732, 707, 0, 0, 737, 738, 739,
	740, 741, 742, 743, 744, 950, 747, 750, 750, 750,
	756, 750, 750, 756, 750, 764, 765, 766, 767, 768,
	769, 770, 0, 962, 963, 964, 965, 0, 0, 856,
	0, 319, 0, 35, 0, 0, 0, 0, 0, 0,
	438, 319, 319, 319, 319, 319, 0, 0, 0, 0,
	0, 0, 0, 319, 0, 0, 815, 0, 319, 0,
	0, 319, 0, 0, 0, 0, 0, 0, 319, 0,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 1018, 1183, 0, 1185, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 882, 885, 886, 887,
	888, 889, 890, 1213, 891, 892, 893, 894, 895, 870,
	871, 872, 873, 854, 855, 883, 0, 857, 0, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 874,
	875, 876, 877, 878, 879, 880, 881, 0, 110, 0,
	476, 319, 0, 0, 476, 0, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 110, 319, 0, 0, 0, 1123,
	1126, 0, 0, 0, 0, 0, 0, 0, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 645,
	645, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1035, 0, 645, 0,
	0, 0, 0, 645, 645, 645, 0, 645, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 645,
	645, 0, 319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 110, 110, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 840, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 691, 0, 694, 110, 0,
	110, 110, 0, 708, 709, 710, 711, 712, 713, 714,
	0, 692, 693, 690, 696, 695, 705, 706, 698, 699,
	700, 701, 702, 703, 704, 697, 0, 319, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 319,
	36, 37, 71, 72, 40, 110, 0, 0, 110, 110,
	110, 319, 0, 1263, 0, 0, 0, 0, 110, 76,
	0, 0, 0, 0, 41, 60, 61, 0, 63, 0,
	0, 0, 0, 0, 1412, 0, 1413, 0, 0, 0,
	1288, 1289, 788, 0, 0, 0, 0, 50, 0, 0,
	1098, 70, 0, 1106, 0, 0, 0, 0, 815, 0,
	0, 0, 815, 0, 0, 476, 476, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 476,
	476, 476, 0, 476, 476, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 476, 476, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 43, 44, 46,
	45, 48, 0, 62, 0, 110, 0, 0, 0, 0,
	0, 0, 35, 0, 110, 0, 645, 0, 645, 0,
	0, 319, 0, 0, 0, 0, 49, 75, 74, 0,
	0, 58, 59, 47, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 52, 0,
	53, 54, 55, 56, 0, 0, 0, 0, 0, 399,
	0, 1002, 110, 110, 476, 110, 0, 0, 0, 0,
	110, 0, 110, 110, 110, 319, 0, 0, 1033, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1037, 1038, 110, 319, 0,
	0, 110, 0, 0, 0, 0, 0, 317, 0, 0,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 1243, 0, 1451, 438, 0, 0, 0, 0,
	0, 0, 802, 0, 0, 476, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 459, 110, 110,
	467, 0, 0, 0, 0, 317, 0, 317, 0, 0,
	1465, 476, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 476, 0, 319, 0, 0,
	0, 0, 0, 0, 110, 0, 815, 0, 0, 0,
	0, 0, 1306, 1307, 0, 0, 815, 815, 815, 815,
	815, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	1334, 0, 0, 815, 0, 0, 0, 1611, 0, 0,
	0, 0, 476, 0, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 0, 0, 69, 0,
	0, 0, 476, 0, 0, 65, 67, 68, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1225, 0, 1227, 0,
	0, 0, 0, 0, 0, 0, 0, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1568, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 645, 0, 645,
	0, 0, 0, 0, 363, 0, 0, 0, 0, 0,
	0, 1588, 0, 0, 1589, 0, 0, 1591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 317, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1033, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1634, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1011, 1013, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 317, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 459, 0, 1378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 317, 317, 0, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 476, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1565, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 0, 0, 1592, 1593, 1594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 1474, 1476, 0,
	645, 0, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 0, 0, 0, 1476, 0, 317, 0, 0,
	0, 317, 0, 317, 0, 0, 0, 0, 0, 476,
	317, 476, 1506, 317, 0, 0, 317, 0, 0, 0,
	0, 926, 0, 0, 1472, 0, 35, 0, 0, 0,
	0, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1667, 0,
	0, 0, 317, 0, 0, 0, 1532, 0, 0, 1537,
	1538, 1539, 0, 0, 0, 0, 1239, 0, 0, 1545,
	1240, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 1247, 1248, 0, 0, 0, 0, 1254, 0,
	0, 1257, 1258, 0, 0, 0, 0, 0, 0, 1264,
	0, 0, 0, 1266, 0, 0, 1269, 1270, 1271, 1272,
	1273, 0, 459, 926, 0, 0, 0, 459, 459, 0,
	0, 459, 459, 459, 0, 0, 0, 1034, 0, 1033,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 459, 459, 459, 459,
	459, 0, 0, 476, 0, 0, 0, 0, 317, 0,
	0, 1545, 1325, 1326, 1327, 0, 0, 0, 0, 1739,
	0, 0, 0, 0, 0, 0, 476, 317, 0, 0,
	0, 0, 0, 0, 926, 476, 317, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 1102, 1102, 0, 0,
	0, 0, 0, 317, 317, 0, 0, 317, 1113, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1640, 1641, 0, 1642, 0, 0, 0,
	0, 1545, 0, 1545, 1545, 1545, 0, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1545, 0,
	0, 0, 1672, 0, 0, 0, 0, 0, 317, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 0, 0,
	317, 317, 317, 317, 317, 0, 317, 317, 0, 0,
	317, 0, 317, 0, 0, 0, 0, 0, 1424, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 476,
	476, 317, 0, 317, 0, 0, 317, 0, 1221, 1222,
	0, 0, 0, 317, 1033, 0, 1713, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1545, 0, 0, 0,
	0, 0, 0, 0, 459, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	459, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	1034, 317, 317, 317, 317, 317, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 317, 0,
	0, 1102, 0, 0, 0, 0, 459, 0, 317, 0,
	0, 0, 0, 1548, 0, 0, 0, 1550, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1559,
	1560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1573, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1580,
	1581, 0, 1584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1595,
	0, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1673, 1674, 1675, 1676, 0, 1680, 0, 1681,
	1682, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1688, 0, 1689, 1690, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1753, 1754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1034, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	585, 573, 0, 531, 588, 503, 521, 596, 522, 525,
	561, 489, 543, 208, 519, 1102, 507, 484, 515, 485,
	505, 533, 145, 176, 141, 575, 546, 587, 178, 0,
	508, 594, 180, 552, 0, 261, 195, 0, 317, 0,
	535, 577, 541, 570, 530, 562, 494, 551, 589, 520,
	559, 590, 0, 0, 0, 111, 112, 113, 0, 1133,
	1134, 0, 0, 0, 0, 0, 134, 0, 556, 584,
	517, 558, 560, 598, 483, 553, 0, 487, 490, 595,
	580, 511, 512, 1350, 0, 0, 0, 0, 0, 0,
	534, 542, 567, 528, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 1034, 550, 0, 0, 0, 491, 488,
	0, 0, 0, 0, 532, 0, 0, 317, 493, 0,
	510, 568, 0, 481, 154, 572, 579, 529, 323, 583,
	527, 526, 586, 227, 0, 266, 157, 177, 130, 171,
	115, 126, 0, 156, 205, 236, 241, 576, 506, 516,
	138, 513, 239, 215, 282, 549, 217, 238, 181, 272,
	228, 281, 291, 292, 269, 289, 296, 257, 119, 268,
	280, 135, 251, 0, 0, 0, 121, 278, 264, 193,
	167, 168, 120, 0, 234, 144, 152, 140, 207, 275,
	276, 139, 299, 127, 288, 123, 128, 287, 201, 271,
	279, 194, 186, 122, 277, 192, 185, 173, 148, 159,
	225, 183, 226, 160, 197, 196, 198, 0, 486, 0,
	262, 285, 300, 132, 502, 270, 294, 295, 0, 229,
	133, 153, 147, 224, 151, 199, 129, 162, 259, 172,
	182, 233, 298, 214, 240, 136, 284, 260, 498, 501,
	496, 497, 544, 545, 591, 592, 593, 569, 492, 0,
	499, 500, 0, 574, 581, 582, 548, 114, 124, 179,
	297, 231, 150, 286, 482, 495, 143, 504, 0, 0,
	518, 523, 524, 536, 537, 538, 539, 540, 547, 554,
	555, 557, 563, 564, 565, 566, 571, 578, 597, 116,
	117, 125, 131, 137, 142, 146, 149, 155, 158, 161,
	163, 164, 165, 170, 184, 188, 189, 190, 191, 202,
	203, 204, 206, 209, 210, 211, 212, 213, 216, 218,
	219, 220, 221, 222, 223, 232, 235, 242, 243, 244,
	245, 246, 248, 250, 253, 254, 255, 256, 263, 267,
	273, 274, 283, 290, 293, 0, 0, 0, 0, 118,
	169, 187, 249, 252, 258, 265, 320, 321, 322, 237,
	174, 175, 0, 0, 0, 0, 514, 230, 200, 166,
	247, 585, 573, 0, 531, 588, 503, 521, 596, 522,
	525, 561, 489, 543, 208, 519, 0, 507, 484, 515,
	485, 505, 533, 145, 176, 141, 575, 546, 587, 178,
	0, 508, 594, 180, 552, 0, 261, 195, 0, 0,
	0, 535, 577, 541, 570, 530, 562, 494, 551, 589,
	520, 559, 590, 0, 0, 0, 111, 112, 113, 0,
	1133, 1134, 0, 0, 0, 0, 0, 134, 0, 556,
	584, 517, 558, 560, 598, 483, 553, 0, 487, 490,
	595, 580, 511, 512, 0, 0, 0, 0, 0, 0,
	0, 534, 542, 567, 528, 0, 0, 0, 0, 0,
	0, 0, 0, 509, 0, 550, 0, 0, 0, 491,
	488, 0, 0, 0, 0, 532, 0, 0, 0, 493,
	0, 510, 568, 0, 481, 154, 572, 579, 529, 323,
	583, 527, 526, 586, 227, 0, 266, 157, 177, 130,
	171, 115, 126, 0, 156, 205, 236, 241, 576, 506,
	516, 138, 513, 239, 215, 282, 549, 217, 238, 181,
	272, 228, 281, 291, 292, 269, 289, 296, 257, 119,
	268, 280, 135, 251, 0, 0, 0, 121, 278, 264,
	193, 167, 168, 120, 0, 234, 144, 152, 140, 207,
	275, 276, 139, 299, 127, 288, 123, 128, 287, 201,
	271, 279, 194, 186, 122, 277, 192, 185, 173, 148,
	159, 225, 183, 226, 160, 197, 196, 198, 0, 486,
	0, 262, 285, 300, 132, 502, 270, 294, 295, 0,
	229, 133, 153, 147, 224, 151, 199, 129, 162, 259,
	172, 182, 233, 298, 214, 240, 136, 284, 260, 498,
	501, 496, 497, 544, 545, 591, 592, 593, 569, 492,
	0, 499, 500, 0, 574, 581, 582, 548, 114, 124,
	179, 297, 231, 150, 286, 482, 495, 143, 504, 0,
	0, 518, 523, 524, 536, 537, 538, 539, 540, 547,
	554, 555, 557, 563, 564, 565, 566, 571, 578, 597,
	116, 117, 125, 131, 137, 142, 146, 149, 155, 158,
	161, 163, 164, 165, 170, 184, 188, 189, 190, 191,
	202, 203, 204, 206, 209, 210, 211, 212, 213, 216,
	218, 219, 220, 221, 222, 223, 232, 235, 242, 243,
	244, 245, 246, 248, 250, 253, 254, 255, 256, 263,
	267, 273, 274, 283, 290, 293, 0, 0, 0, 0,
	118, 169, 187, 249, 252, 258, 265, 320, 321, 322,
	237, 174, 175, 0, 0, 0, 0, 514, 230, 200,
	166, 247, 585, 573, 0, 531, 588, 503, 521, 596,
	522, 525, 561, 489, 543, 208, 519, 0, 507, 484,
	515, 485, 505, 533, 145, 176, 141, 575, 546, 587,
	178, 0, 508, 594, 180, 552, 0, 261, 195, 0,
	0, 0, 535, 577, 541, 570, 530, 562, 494, 551,
	589, 520, 559, 590, 70, 0, 0, 111, 112, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	556, 584, 517, 558, 560, 598, 483, 553, 0, 487,
	490, 595, 580, 511, 512, 0, 0, 0, 0, 0,
	0, 0, 534, 542, 567, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 509, 0, 550, 0, 0, 0,
	491, 488, 0, 0, 0, 0, 532, 0, 0, 0,
	493, 0, 510, 568, 0, 481, 154, 572, 579, 529,
	323, 583, 527, 526, 586, 227, 0, 266, 157, 177,
	130, 171, 115, 126, 0, 156, 205, 236, 241, 576,
	506, 516, 138, 513, 239, 215, 282, 549, 217, 238,
	181, 272, 228, 281, 291, 292, 269, 289, 296, 257,
	119, 268, 280, 135, 251, 0, 0, 0, 121, 278,
	264, 193, 167, 168, 120, 0, 234, 144, 152, 140,
	207, 275, 276, 139, 299, 127, 288, 123, 128, 287,
	201, 271, 279, 194, 186, 122, 277, 192, 185, 173,
	148, 159, 225, 183, 226, 160, 197, 196, 198, 0,
	486, 0, 262, 285, 300, 132, 502, 270, 294, 295,
	0, 229, 133, 153, 147, 224, 151, 199, 129, 162,
	259, 172, 182, 233, 298, 214, 240, 136, 284, 260,
	498, 501, 496, 497, 544, 545, 591, 592, 593, 569,
	492, 0, 499, 500, 0, 574, 581, 582, 548, 114,
	124, 179, 297, 231, 150, 286, 482, 495, 143, 504,
	0, 0, 518, 523, 524, 536, 537, 538, 539, 540,
	547, 554, 555, 557, 563, 564, 565, 566, 571, 578,
	597, 116, 117, 125, 131, 137, 142, 146, 149, 155,
	158, 161, 163, 164, 165, 170, 184, 188, 189, 190,
	191, 202, 203, 204, 206, 209, 210, 211, 212, 213,
	216, 218, 219, 220, 221, 222, 223, 232, 235, 242,
	243, 244, 245, 246, 248, 250, 253, 254, 255, 256,
	263, 267, 273, 274, 283, 290, 293, 0, 0, 0,
	0, 118, 169, 187, 249, 252, 258, 265, 320, 321,
	322, 237, 174, 175, 0, 0, 0, 0, 514, 230,
	200, 166, 247, 585, 573, 0, 531, 588, 503, 521,
	596, 522, 525, 561, 489, 543, 208, 519, 0, 507,
	484, 515, 485, 505, 533, 145, 176, 141, 575, 546,
	587, 178, 0, 508, 594, 180, 552, 0, 261, 195,
	0, 0, 0, 535, 577, 541, 570, 530, 562, 494,
	551, 589, 520, 559, 590, 0, 0, 0, 111, 112,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 556, 584, 517, 558, 560, 598, 483, 553, 0,
	487, 490, 595, 580, 511, 512, 0, 0, 0, 0,
	0, 0, 0, 534, 542, 567, 528, 0, 0, 0,
	0, 0, 0, 1466, 0, 509, 0, 550, 0, 0,
	0, 491, 488, 0, 0, 0, 0, 532, 0, 0,
	0, 493, 0, 510, 568, 0, 481, 154, 572, 579,
	529, 323, 583, 527, 526, 586, 227, 0, 266, 157,
	177, 130, 171, 115, 126, 0, 156, 205, 236, 241,
	576, 506, 516, 138, 513, 239, 215, 282, 549, 217,
	238, 181, 272, 228, 281, 291, 292, 269, 289, 296,
	257, 119, 268, 280, 135, 251, 0, 0, 0, 121,
	278, 264, 193, 167, 168, 120, 0, 234, 144, 152,
	140, 207, 275, 276, 139, 299, 127, 288, 123, 128,
	287, 201, 271, 279, 194, 186, 122, 277, 192, 185,
	173, 148, 159, 225, 183, 226, 160, 197, 196, 198,
	0, 486, 0, 262, 285, 300, 132, 502, 270, 294,
	295, 0, 229, 133, 153, 147, 224, 151, 199, 129,
	162, 259, 172, 182, 233, 298, 214, 240, 136, 284,
	260, 498, 501, 496, 497, 544, 545, 591, 592, 593,
	569, 492, 0, 499, 500, 0, 574, 581, 582, 548,
	114, 124, 179, 297, 231, 150, 286, 482, 495, 143,
	504, 0, 0, 518, 523, 524, 536, 537, 538, 539,
	540, 547, 554, 555, 557, 563, 564, 565, 566, 571,
	578, 597, 116, 117, 125, 131, 137, 142, 146, 149,
	155, 158, 161, 163, 164, 165, 170, 184, 188, 189,
	190, 191, 202, 203, 204, 206, 209, 210, 211, 212,
	213, 216, 218, 219, 220, 221, 222, 223, 232, 235,
	242, 243, 244, 245, 246, 248, 250, 253, 254, 255,
	256, 263, 267, 273, 274, 283, 290, 293, 0, 0,
	0, 0, 118, 169, 187, 249, 252, 258, 265, 320,
	321, 322, 237, 174, 175, 0, 0, 0, 0, 514,
	230, 200, 166, 247, 585, 573, 0, 531, 588, 503,
	521, 596, 522, 525, 561, 489, 543, 208, 519, 0,
	507, 484, 515, 485, 505, 533, 145, 176, 141, 575,
	546, 587, 178, 0, 508, 594, 180, 552, 0, 261,
	195, 0, 0, 0, 535, 577, 541, 570, 530, 562,
	494, 551, 589, 520, 559, 590, 0, 0, 0, 111,
	112, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 556, 584, 517, 558, 560, 598, 483, 553,
	0, 487, 490, 595, 580, 511, 512, 0, 0, 0,
	0, 0, 0, 0, 534, 542, 567, 528, 0, 0,
	0, 0, 0, 0, 1114, 0, 509, 0, 550, 0,
	0, 0, 491, 488, 0, 0, 0, 0, 532, 0,
	0, 0, 493, 0, 510, 568, 0, 481, 154, 572,
	579, 529, 323, 583, 527, 526, 586, 227, 0, 266,
	157, 177, 130, 171, 115, 126, 0, 156, 205, 236,
	241, 576, 506, 516, 138, 513, 239, 215, 282, 549,
	217, 238, 181, 272, 228, 281, 291, 292, 269, 289,
	296, 257, 119, 268, 280, 135, 251, 0, 0, 0,
	121, 278, 264, 193, 167, 168, 120, 0, 234, 144,
	152, 140, 207, 275, 276, 139, 299, 127, 288, 123,
	128, 287, 201, 271, 279, 194, 186, 122, 277, 192,
	185, 173, 148, 159, 225, 183, 226, 160, 197, 196,
	198, 0, 486, 0, 262, 285, 300, 132, 502, 270,
	294, 295, 0, 229, 133, 153, 147, 224, 151, 199,
	129, 162, 259, 172, 182, 233, 298, 214, 240, 136,
	284, 260, 498, 501, 496, 497, 544, 545, 591, 592,
	593, 569, 492, 0, 499, 500, 0, 574, 581, 582,
	548, 114, 124, 179, 297, 231, 150, 286, 482, 495,
	143, 504, 0, 0, 518, 523, 524, 536, 537, 538,
	539, 540, 547, 554, 555, 557, 563, 564, 565, 566,
	571, 578, 597, 116, 117, 125, 131, 137, 142, 146,
	149, 155, 158, 161, 163, 164, 165, 170, 184, 188,
	189, 190, 191, 202, 203, 204, 206, 209, 210, 211,
	212, 213, 216, 218, 219, 220, 221, 222, 223, 232,
	235, 242, 243, 244, 245, 246, 248, 250, 253, 254,
	255, 256, 263, 267, 273, 274, 283, 290, 293, 0,
	0, 0, 0, 118, 169, 187, 249, 252, 258, 265,
	320, 321, 322, 237, 174, 175, 0, 0, 0, 0,
	514, 230, 200, 166, 247, 585, 573, 0, 531, 588,
	503, 521, 596, 522, 525, 561, 489, 543, 208, 519,
	0, 507, 484, 515, 485, 505, 533, 145, 176, 141,
	575, 546, 587, 178, 0, 508, 594, 180, 552, 0,
	261, 195, 0, 0, 0, 535, 577, 541, 570, 530,
	562, 494, 551, 589, 520, 559, 590, 0, 0, 0,
	111, 112, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 556, 584, 517, 558, 560, 598, 483,
	553, 0, 487, 490, 595, 580, 511, 512, 0, 0,
	0, 0, 0, 0, 0, 534, 542, 567, 528, 0,
	0, 0, 0, 0, 0, 1075, 0, 509, 0, 550,
	0, 0, 0, 491, 488, 0, 0, 0, 0, 532,
	0, 0, 0, 493, 0, 510, 568, 0, 481, 154,
	572, 579, 529, 323, 583, 527, 526, 586, 227, 0,
	266, 157, 177, 130, 171, 115, 126, 0, 156, 205,
	236, 241, 576, 506, 516, 138, 513, 239, 215, 282,
	549, 217, 238, 181, 272, 228, 281, 291, 292, 269,
	289, 296, 257, 119, 268, 280, 135, 251, 0, 0,
	0, 121, 278, 264, 193, 167, 168, 120, 0, 234,
	144, 152, 140, 207, 275, 276, 139, 299, 127, 288,
	123, 128, 287, 201, 271, 279, 194, 186, 122, 277,
	192, 185, 173, 148, 159, 225, 183, 226, 160, 197,
	196, 198, 0, 486, 0, 262, 285, 300, 132, 502,
	270, 294, 295, 0, 229, 133, 153, 147, 224, 151,
	199, 129, 162, 259, 172, 182, 233, 298, 214, 240,
	136, 284, 260, 498, 501, 496, 497, 544, 545, 591,
	592, 593, 569, 492, 0, 499, 500, 0, 574, 581,
	582, 548, 114, 124, 179, 297, 231, 150, 286, 482,
	495, 143, 504, 0, 0, 518, 523, 524, 536, 537,
	538, 539, 540, 547, 554, 555, 557, 563, 564, 565,
	566, 571, 578, 597, 116, 117, 125, 131, 137, 142,
	146, 149, 155, 158, 161, 163, 164, 165, 170, 184,
	188, 189, 190, 191, 202, 203, 204, 206, 209, 210,
	211, 212, 213, 216, 218, 219, 220, 221, 222, 223,
	232, 235, 242, 243, 244, 245, 246, 248, 250, 253,
	254, 255, 256, 263, 267, 273, 274, 283, 290, 293,
	0, 0, 0, 0, 118, 169, 187, 249, 252, 258,
	265, 320, 321, 322, 237, 174, 175, 0, 0, 0,
	0, 514, 230, 200, 166, 247, 585, 573, 0, 531,
	588, 503, 521, 596, 522, 525, 561, 489, 543, 208,
	519, 0, 507, 484, 515, 485, 505, 533, 145, 176,
	141, 575, 546, 587, 178, 0, 508, 594, 180, 552,
	0, 261, 195, 0, 0, 0, 535, 577, 541, 570,
	530, 562, 494, 551, 589, 520, 559, 590, 0, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 556, 584, 517, 558, 560, 598,
	483, 553, 0, 487, 490, 595, 580, 511, 512, 0,
	0, 0, 0, 0, 0, 0, 534, 542, 567, 528,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 0,
	550, 0, 0, 0, 491, 488, 0, 0, 0, 0,
	532, 0, 0, 0, 493, 0, 510, 568, 0, 481,
	154, 572, 579, 529, 323, 583, 527, 526, 586, 227,
	0, 266, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 576, 506, 516, 138, 513, 239, 215,
	282, 549, 217, 238, 181, 272, 228, 281, 291, 292,
	269, 289, 296, 257, 119, 268, 280, 135, 251, 0,
	0, 0, 121, 278, 264, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 275, 276, 139, 299, 127,
	288, 123, 128, 287, 201, 271, 279, 194, 186, 122,
	277, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 486, 0, 262, 285, 300, 132,
	502, 270, 294, 295, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 259, 172, 182, 233, 298, 214,
	240, 136, 284, 260, 498, 501, 496, 497, 544, 545,
	591, 592, 593, 569, 492, 0, 499, 500, 0, 574,
	581, 582, 548, 114, 124, 179, 297, 231, 150, 286,
	482, 495, 143, 504, 0, 0, 518, 523, 524, 536,
	537, 538, 539, 540, 547, 554, 555, 557, 563, 564,
	565, 566, 571, 578, 597, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 248, 250,
	253, 254, 255, 256, 263, 267, 273, 274, 283, 290,
	293, 0, 0, 0, 0, 118, 169, 187, 249, 252,
	258, 265, 320, 321, 322, 237, 174, 175, 0, 0,
	0, 0, 514, 230, 200, 166, 247, 585, 573, 0,
	531, 588, 503, 521, 596, 522, 525, 561, 489, 543,
	208, 519, 0, 507, 484, 515, 485, 505, 533, 145,
	176, 141, 575, 546, 587, 178, 0, 508, 594, 180,
	552, 0, 261, 195, 0, 0, 0, 535, 577, 541,
	570, 530, 562, 494, 551, 589, 520, 559, 590, 0,
	0, 0, 111, 112, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 556, 584, 517, 558, 560,
	598, 483, 553, 0, 487, 490, 595, 580, 511, 512,
	0, 0, 0, 0, 0, 0, 0, 534, 542, 567,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 509,
	0, 550, 0, 0, 0, 491, 488, 0, 0, 0,
	0, 532, 0, 0, 0, 493, 0, 510, 568, 0,
	481, 154, 572, 579, 529, 323, 583, 527, 526, 586,
	227, 0, 266, 157, 177, 130, 171, 115, 126, 0,
	156, 205, 236, 241, 576, 506, 516, 138, 513, 239,
	215, 282, 549, 217, 238, 181, 272, 228, 281, 291,
	292, 269, 289, 296, 257, 119, 268, 280, 135, 251,
	0, 0, 0, 121, 278, 264, 193, 167, 168, 120,
	0, 234, 144, 152, 140, 207, 275, 276, 139, 299,
	127, 288, 123, 479, 287, 201, 271, 279, 194, 186,
	122, 277, 192, 185, 173, 148, 159, 225, 183, 226,
	160, 197, 196, 198, 0, 486, 0, 262, 285, 300,
	132, 502, 270, 294, 295, 0, 229, 133, 153, 147,
	224, 151, 480, 478, 162, 259, 172, 182, 233, 298,
	214, 240, 136, 284, 260, 498, 501, 496, 497, 544,
	545, 591, 592, 593, 569, 492, 0, 499, 500, 0,
	574, 581, 582, 548, 114, 124, 179, 297, 231, 150,
	286, 482, 495, 143, 504, 0, 0, 518, 523, 524,
	536, 537, 538, 539, 540, 547, 554, 555, 557, 563,
	564, 565, 566, 571, 578, 597, 116, 117, 125, 131,
	137, 142, 146, 149, 155, 158, 161, 163, 164, 165,
	170, 184, 188, 189, 190, 191, 202, 203, 204, 206,
	209, 210, 211, 212, 213, 216, 218, 219, 220, 221,
	222, 223, 232, 235, 242, 243, 244, 245, 246, 248,
	250, 253, 254, 255, 256, 263, 267, 273, 274, 283,
	290, 293, 0, 0, 0, 0, 118, 169, 187, 249,
	252, 258, 265, 320, 321, 322, 237, 174, 175, 0,
	0, 0, 0, 514, 230, 200, 166, 247, 585, 573,
	0, 531, 588, 503, 521, 596, 522, 525, 561, 489,
	543, 208, 519, 0, 507, 484, 515, 485, 505, 533,
	145, 176, 141, 575, 546, 587, 178, 0, 508, 594,
	180, 552, 0, 261, 195, 0, 0, 0, 535, 577,
	541, 570, 530, 562, 494, 551, 589, 520, 559, 590,
	0, 0, 0, 111, 112, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 556, 584, 517, 558,
	560, 598, 483, 553, 0, 487, 490, 595, 580, 511,
	512, 0, 0, 0, 0, 0, 0, 0, 534, 542,
	567, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	509, 0, 550, 0, 0, 0, 491, 488, 0, 0,
	0, 0, 532, 0, 0, 0, 493, 0, 510, 568,
	0, 481, 154, 572, 579, 529, 323, 583, 527, 526,
	586, 227, 0, 266, 157, 177, 130, 171, 115, 126,
	0, 156, 205, 236, 241, 576, 506, 516, 138, 513,
	239, 215, 282, 549, 217, 238, 181, 272, 228, 281,
	291, 292, 269, 289, 296, 257, 119, 268, 831, 135,
	251, 0, 0, 0, 121, 278, 264, 193, 167, 168,
	120, 0, 234, 144, 152, 140, 207, 275, 276, 139,
	299, 127, 288, 123, 479, 287, 201, 271, 279, 194,
	186, 122, 277, 192, 185, 173, 148, 159, 225, 183,
	226, 160, 197, 196, 198, 0, 486, 0, 262, 285,
	300, 132, 502, 270, 294, 295, 0, 229, 133, 153,
	147, 224, 151, 480, 478, 162, 259, 172, 182, 233,
	298, 214, 240, 136, 284, 260, 498, 501, 496, 497,
	544, 545, 591, 592, 593, 569, 492, 0, 499, 500,
	0, 574, 581, 582, 548, 114, 124, 179, 297, 231,
	150, 286, 482, 495, 143, 504, 0, 0, 518, 523,
	524, 536, 537, 538, 539, 540, 547, 554, 555, 557,
	563, 564, 565, 566, 571, 578, 597, 116, 117, 125,
	131, 137, 142, 146, 149, 155, 158, 161, 163, 164,
	165, 170, 184, 188, 189, 190, 191, 202, 203, 204,
	206, 209, 210, 211, 212, 213, 216, 218, 219, 220,
	221, 222, 223, 232, 235, 242, 243, 244, 245, 246,
	248, 250, 253, 254, 255, 256, 263, 267, 273, 274,
	283, 290, 293, 0, 0, 0, 0, 118, 169, 187,
	249, 252, 258, 265, 320, 321, 322, 237, 174, 175,
	0, 0, 0, 0, 514, 230, 200, 166, 247, 585,
	573, 0, 531, 588, 503, 521, 596, 522, 525, 561,
	489, 543, 208, 519, 0, 507, 484, 515, 485, 505,
	533, 145, 176, 141, 575, 546, 587, 178, 0, 508,
	594, 180, 552, 0, 261, 195, 0, 0, 0, 535,
	577, 541, 570, 530, 562, 494, 551, 589, 520, 559,
	590, 0, 0, 0, 111, 112, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 556, 584, 517,
	558, 560, 598, 483, 553, 0, 487, 490, 595, 580,
	511, 512, 0, 0, 0, 0, 0, 0, 0, 534,
	542, 567, 528, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 550, 0, 0, 0, 491, 488, 0,
	0, 0, 0, 532, 0, 0, 0, 493, 0, 510,
	568, 0, 481, 154, 572, 579, 529, 323, 583, 527,
	526, 586, 227, 0, 266, 157, 177, 130, 171, 115,
	126, 0, 156, 205, 236, 241, 576, 506, 516, 138,
	513, 239, 215, 282, 549, 217, 238, 181, 272, 228,
	281, 291, 292, 269, 289, 296, 257, 119, 268, 470,
	135, 251, 0, 0, 0, 121, 278, 264, 193, 167,
	168, 120, 0, 234, 144, 152, 140, 207, 275, 276,
	139, 299, 127, 288, 123, 479, 287, 201, 271, 279,
	194, 186, 122, 277, 192, 185, 173, 148, 159, 225,
	183, 226, 160, 197, 196, 198, 0, 486, 0, 262,
	285, 300, 132, 502, 270, 294, 295, 0, 229, 133,
	153, 147, 224, 151, 480, 478, 473, 472, 172, 182,
	233, 298, 214, 240, 136, 284, 260, 498, 501, 496,
	497, 544, 545, 591, 592, 593, 569, 492, 0, 499,
	500, 0, 574, 581, 582, 548, 114, 124, 179, 297,
	231, 150, 286, 482, 495, 143, 504, 0, 0, 518,
	523, 524, 536, 537, 538, 539, 540, 547, 554, 555,
	557, 563, 564, 565, 566, 571, 578, 597, 116, 117,
	125, 131, 137, 142, 146, 149, 155, 158, 161, 163,
	164, 165, 170, 184, 188, 189, 190, 191, 202, 203,
	204, 206, 209, 210, 211, 212, 213, 216, 218, 219,
	220, 221, 222, 223, 232, 235, 242, 243, 244, 245,
	246, 248, 250, 253, 254, 255, 256, 263, 267, 273,
	274, 283, 290, 293, 0, 0, 0, 0, 118, 169,
	187, 249, 252, 258, 265, 320, 321, 322, 237, 174,
	175, 0, 0, 0, 0, 514, 230, 200, 166, 247,
	208, 0, 0, 1004, 0, 368, 0, 0, 0, 145,
	176, 367, 0, 0, 0, 178, 0, 1005, 411, 180,
	0, 0, 261, 195, 0, 0, 0, 0, 0, 402,
	403, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	0, 0, 111, 112, 113, 389, 388, 391, 392, 393,
	394, 0, 0, 134, 390, 395, 396, 397, 0, 0,
	0, 0, 365, 382, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 457, 0, 0,
	0, 425, 0, 381, 0, 0, 374, 375, 377, 376,
	378, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 424, 0, 0, 323, 0, 0, 422, 0,
	227, 0, 266, 157, 177, 130, 171, 115, 126, 0,
	156, 205, 236, 241, 0, 0, 0, 138, 0, 239,
	215, 282, 0, 217, 238, 181, 272, 228, 281, 291,
	292, 269, 289, 296, 257, 119, 268, 280, 135, 251,
	0, 0, 0, 121, 278, 264, 193, 167, 168, 120,
	0, 234, 144, 152, 140, 207, 275, 276, 139, 299,
	127, 288, 123, 128, 287, 201, 271, 279, 194, 186,
	122, 277, 192, 185, 173, 148, 159, 225, 183, 226,
	160, 197, 196, 198, 0, 0, 0, 262, 285, 300,
	132, 0, 270, 294, 295, 0, 229, 133, 153, 147,
	224, 151, 199, 129, 162, 259, 172, 182, 233, 298,
	214, 240, 136, 284, 260, 412, 423, 418, 419, 416,
	417, 415, 414, 413, 426, 404, 405, 406, 407, 409,
	0, 420, 421, 408, 114, 124, 179, 297, 231, 150,
	286, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 125, 131,
	137, 142, 146, 149, 155, 158, 161, 163, 164, 165,
	170, 184, 188, 189, 190, 191, 202, 203, 204, 206,
	209, 210, 211, 212, 213, 216, 218, 219, 220, 221,
	222, 223, 232, 235, 242, 243, 244, 245, 246, 248,
	250, 253, 254, 255, 256, 263, 267, 273, 274, 283,
	290, 293, 0, 0, 0, 0, 118, 169, 187, 249,
	252, 258, 265, 320, 321, 322, 237, 174, 175, 0,
	0, 0, 0, 208, 230, 200, 166, 247, 368, 0,
	0, 0, 145, 176, 367, 0, 0, 0, 178, 0,
	0, 411, 180, 0, 0, 261, 195, 0, 0, 0,
	0, 0, 402, 403, 0, 0, 0, 0, 0, 0,
	1124, 0, 70, 0, 0, 111, 112, 113, 389, 388,
	391, 392, 393, 394, 0, 0, 134, 390, 395, 396,
	397, 1125, 0, 0, 0, 365, 382, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 379, 380,
	0, 0, 0, 0, 425, 0, 381, 0, 0, 374,
	375, 377, 376, 378, 383, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 424, 0, 0, 323, 0,
	0, 422, 0, 227, 0, 266, 157, 177, 130, 171,
	115, 126, 0, 156, 205, 236, 241, 0, 0, 0,
	138, 0, 239, 215, 282, 0, 217, 238, 181, 272,
	228, 281, 291, 292, 269, 289, 296, 257, 119, 268,
	280, 135, 251, 0, 0, 0, 121, 278, 264, 193,
	167, 168, 120, 0, 234, 144, 152, 140, 207, 275,
	276, 139, 299, 127, 288, 123, 128, 287, 201, 271,
	279, 194, 186, 122, 277, 192, 185, 173, 148, 159,
	225, 183, 226, 160, 197, 196, 198, 0, 0, 0,
	262, 285, 300, 132, 0, 270, 294, 295, 0, 229,
	133, 153, 147, 224, 151, 199, 129, 162, 259, 172,
	182, 233, 298, 214, 240, 136, 284, 260, 412, 423,
	418, 419, 416, 417, 415, 414, 413, 426, 404, 405,
	406, 407, 409, 0, 420, 421, 408, 114, 124, 179,
	297, 231, 150, 286, 0, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	117, 125, 131, 137, 142, 146, 149, 155, 158, 161,
	163, 164, 165, 170, 184, 188, 189, 190, 191, 202,
	203, 204, 206, 209, 210, 211, 212, 213, 216, 218,
	219, 220, 221, 222, 223, 232, 235, 242, 243, 244,
	245, 246, 248, 250, 253, 254, 255, 256, 263, 267,
	273, 274, 283, 290, 293, 0, 0, 0, 0, 118,
	169, 187, 249, 252, 258, 265, 320, 321, 322, 237,
	174, 175, 0, 0, 0, 0, 208, 230, 200, 166,
	247, 368, 0, 0, 0, 145, 176, 367, 0, 0,
	0, 178, 0, 0, 411, 180, 0, 0, 261, 195,
	0, 0, 0, 0, 0, 402, 403, 0, 0, 0,
	0, 0, 0, 1121, 0, 70, 0, 0, 111, 112,
	113, 389, 388, 391, 392, 393, 394, 0, 0, 134,
	390, 395, 396, 397, 1122, 0, 0, 0, 365, 382,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 379, 380, 0, 0, 0, 0, 425, 0, 381,
	0, 0, 374, 375, 377, 376, 378, 383, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 424, 0,
	0, 323, 0, 0, 422, 0, 227, 0, 266, 157,
	177, 130, 171, 115, 126, 0, 156, 205, 236, 241,
	0, 0, 0, 138, 0, 239, 215, 282, 0, 217,
	238, 181, 272, 228, 281, 291, 292, 269, 289, 296,
	257, 119, 268, 280, 135, 251, 0, 0, 0, 121,
	278, 264, 193, 167, 168, 120, 0, 234, 144, 152,
	140, 207, 275, 276, 139, 299, 127, 288, 123, 128,
	287, 201, 271, 279, 194, 186, 122, 277, 192, 185,
	173, 148, 159, 225, 183, 226, 160, 197, 196, 198,
	0, 0, 0, 262, 285, 300, 132, 0, 270, 294,
	295, 0, 229, 133, 153, 147, 224, 151, 199, 129,
	162, 259, 172, 182, 233, 298, 214, 240, 136, 284,
	260, 412, 423, 418, 419, 416, 417, 415, 414, 413,
	426, 404, 405, 406, 407, 409, 0, 420, 421, 408,
	114, 124, 179, 297, 231, 150, 286, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 142, 146, 149,
	155, 158, 161, 163, 164, 165, 170, 184, 188, 189,
	190, 191, 202, 203, 204, 206, 209, 210, 211, 212,
	213, 216, 218, 219, 220, 221, 222, 223, 232, 235,
	242, 243, 244, 245, 246, 248, 250, 253, 254, 255,
	256, 263, 267, 273, 274, 283, 290, 293, 0, 0,
	0, 0, 118, 169, 187, 249, 252, 258, 265, 320,
	321, 322, 237, 174, 175, 0, 0, 0, 0, 208,
	230, 200, 166, 247, 368, 0, 0, 0, 145, 176,
	367, 0, 0, 0, 178, 0, 0, 411, 180, 0,
	0, 261, 195, 0, 0, 0, 0, 0, 402, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 111, 112, 113, 389, 388, 391, 392, 393, 394,
	0, 0, 134, 390, 395, 396, 397, 0, 0, 0,
	0, 365, 382, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 379, 380, 457, 0, 0, 0,
	425, 0, 381, 0, 0, 374, 375, 377, 376, 378,
	383, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 424, 0, 0, 323, 0, 0, 422, 0, 227,
	0, 266, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 0, 0, 0, 138, 0, 239, 215,
	282, 0, 217, 238, 181, 272, 228, 281, 291, 292,
	269, 289, 296, 257, 119, 268, 280, 135, 251, 0,
	0, 0, 121, 278, 264, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 275, 276, 139, 299, 127,
	288, 123, 128, 287, 201, 271, 279, 194, 186, 122,
	277, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 0, 0, 262, 285, 300, 132,
	0, 270, 294, 295, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 259, 172, 182, 233, 298, 214,
	240, 136, 284, 260, 412, 423, 418, 419, 416, 417,
	415, 414, 413, 426, 404, 405, 406, 407, 409, 0,
	420, 421, 408, 114, 124, 179, 297, 231, 150, 286,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 248, 250,
	253, 254, 255, 256, 263, 267, 273, 274, 283, 290,
	293, 0, 0, 0, 0, 118, 169, 187, 249, 252,
	258, 265, 320, 321, 322, 237, 174, 175, 0, 0,
	0, 0, 208, 230, 200, 166, 247, 368, 0, 0,
	0, 145, 176, 367, 0, 0, 0, 178, 0, 0,
	411, 180, 0, 0, 261, 195, 0, 0, 0, 0,
	0, 402, 403, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 0, 1012, 111, 112, 113, 389, 388, 391,
	392, 393, 394, 0, 0, 134, 390, 395, 396, 397,
	0, 0, 0, 0, 365, 382, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 379, 380, 0,
	0, 0, 0, 425, 0, 381, 0, 0, 374, 375,
	377, 376, 378, 383, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 424, 0, 0, 323, 0, 0,
	422, 0, 227, 0, 266, 157, 177, 130, 171, 115,
	126, 0, 156, 205, 236, 241, 0, 0, 0, 138,
	0, 239, 215, 282, 0, 217, 238, 181, 272, 228,
	281, 291, 292, 269, 289, 296, 257, 119, 268, 280,
	135, 251, 0, 0, 0, 121, 278, 264, 193, 167,
	168, 120, 0, 234, 144, 152, 140, 207, 275, 276,
	139, 299, 127, 288, 123, 128, 287, 201, 271, 279,
	194, 186, 122, 277, 192, 185, 173, 148, 159, 225,
	183, 226, 160, 197, 196, 198, 0, 0, 0, 262,
	285, 300, 132, 0, 270, 294, 295, 0, 229, 133,
	153, 147, 224, 151, 199, 129, 162, 259, 172, 182,
	233, 298, 214, 240, 136, 284, 260, 412, 423, 418,
	419, 416, 417, 415, 414, 413, 426, 404, 405, 406,
	407, 409, 0, 420, 421, 408, 114, 124, 179, 297,
	231, 150, 286, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	125, 131, 137, 142, 146, 149, 155, 158, 161, 163,
	164, 165, 170, 184, 188, 189, 190, 191, 202, 203,
	204, 206, 209, 210, 211, 212, 213, 216, 218, 219,
	220, 221, 222, 223, 232, 235, 242, 243, 244, 245,
	246, 248, 250, 253, 254, 255, 256, 263, 267, 273,
	274, 283, 290, 293, 0, 0, 0, 0, 118, 169,
	187, 249, 252, 258, 265, 320, 321, 322, 237, 174,
	175, 0, 0, 0, 0, 208, 230, 200, 166, 247,
	368, 0, 0, 0, 145, 176, 367, 0, 0, 0,
	178, 0, 0, 411, 180, 0, 0, 261, 195, 0,
	0, 0, 0, 0, 402, 403, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 0, 111, 112, 113,
	389, 1023, 391, 392, 393, 394, 0, 0, 134, 390,
	395, 396, 397, 0, 0, 0, 0, 365, 382, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 457, 0, 0, 0, 425, 0, 381, 0,
	0, 374, 375, 377, 376, 378, 383, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 424, 0, 0,
	323, 0, 0, 422, 0, 227, 0, 266, 157, 177,
	130, 171, 115, 126, 0, 156, 205, 236, 241, 0,
	0, 0, 138, 0, 239, 215, 282, 0, 217, 238,
	181, 272, 228, 281, 291, 292, 269, 289, 296, 257,
	119, 268, 280, 135, 251, 0, 0, 0, 121, 278,
	264, 193, 167, 168, 120, 0, 234, 144, 152, 140,
	207, 275, 276, 139, 299, 127, 288, 123, 128, 287,
	201, 271, 279, 194, 186, 122, 277, 192, 185, 173,
	148, 159, 225, 183, 226, 160, 197, 196, 198, 0,
	0, 0, 262, 285, 300, 132, 0, 270, 294, 295,
	0, 229, 133, 153, 147, 224, 151, 199, 129, 162,
	259, 172, 182, 233, 298, 214, 240, 136, 284, 260,
	412, 423, 418, 419, 416, 417, 415, 414, 413, 426,
	404, 405, 406, 407, 409, 0, 420, 421, 408, 114,
	124, 179, 297, 231, 150, 286, 0, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 117, 125, 131, 137, 142, 146, 149, 155,
	158, 161, 163, 164, 165, 170, 184, 188, 189, 190,
	191, 202, 203, 204, 206, 209, 210, 211, 212, 213,
	216, 218, 219, 220, 221, 222, 223, 232, 235, 242,
	243, 244, 245, 246, 248, 250, 253, 254, 255, 256,
	263, 267, 273, 274, 283, 290, 293, 0, 0, 0,
	0, 118, 169, 187, 249, 252, 258, 265, 320, 321,
	322, 237, 174, 175, 0, 0, 0, 0, 208, 230,
	200, 166, 247, 368, 0, 0, 0, 145, 176, 367,
	0, 0, 0, 178, 0, 0, 411, 180, 0, 0,
	261, 195, 0, 0, 0, 0, 0, 402, 403, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 0, 0,
	111, 112, 113, 389, 1020, 391, 392, 393, 394, 0,
	0, 134, 390, 395, 396, 397, 0, 0, 0, 0,
	365, 382, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 379, 380, 457, 0, 0, 0, 425,
	0, 381, 0, 0, 374, 375, 377, 376, 378, 383,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	424, 0, 0, 323, 0, 0, 422, 0, 227, 0,
	266, 157, 177, 130, 171, 115, 126, 0, 156, 205,
	236, 241, 0, 0, 0, 138, 0, 239, 215, 282,
	0, 217, 238, 181, 272, 228, 281, 291, 292, 269,
	289, 296, 257, 119, 268, 280, 135, 251, 0, 0,
	0, 121, 278, 264, 193, 167, 168, 120, 0, 234,
	144, 152, 140, 207, 275, 276, 139, 299, 127, 288,
	123, 128, 287, 201, 271, 279, 194, 186, 122, 277,
	192, 185, 173, 148, 159, 225, 183, 226, 160, 197,
	196, 198, 0, 0, 0, 262, 285, 300, 132, 0,
	270, 294, 295, 0, 229, 133, 153, 147, 224, 151,
	199, 129, 162, 259, 172, 182, 233, 298, 214, 240,
	136, 284, 260, 412, 423, 418, 419, 416, 417, 415,
	414, 413, 426, 404, 405, 406, 407, 409, 0, 420,
	421, 408, 114, 124, 179, 297, 231, 150, 286, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 142,
	146, 149, 155, 158, 161, 163, 164, 165, 170, 184,
	188, 189, 190, 191, 202, 203, 204, 206, 209, 210,
	211, 212, 213, 216, 218, 219, 220, 221, 222, 223,
	232, 235, 242, 243, 244, 245, 246, 248, 250, 253,
	254, 255, 256, 263, 267, 273, 274, 283, 290, 293,
	0, 0, 0, 0, 118, 169, 187, 249, 252, 258,
	265, 320, 321, 322, 237, 174, 175, 439, 0, 0,
	0, 0, 230, 200, 166, 247, 0, 0, 0, 208,
	0, 0, 0, 0, 368, 0, 0, 0, 145, 176,
	367, 0, 0, 0, 178, 0, 0, 411, 180, 0,
	0, 261, 195, 0, 0, 0, 0, 0, 402, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 111, 112, 113, 389, 388, 391, 392, 393, 394,
	0, 0, 134, 390, 395, 396, 397, 0, 0, 0,
	0, 365, 382, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 379, 380, 0, 0, 0, 0,
	425, 0, 381, 0, 0, 374, 375, 377, 376, 378,
	383, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 424, 0, 0, 323, 0, 0, 422, 0, 227,
	0, 266, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 0, 0, 0, 138, 0, 239, 215,
	282, 0, 217, 238, 181, 272, 228, 281, 291, 292,
	269, 289, 296, 257, 119, 268, 280, 135, 251, 0,
	0, 0, 121, 278, 264, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 275, 276, 139, 299, 127,
	288, 123, 128, 287, 201, 271, 279, 194, 186, 122,
	277, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 0, 0, 262, 285, 300, 132,
	0, 270, 294, 295, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 259, 172, 182, 233, 298, 214,
	240, 136, 284, 260, 412, 423, 418, 419, 416, 417,
	415, 414, 413, 426, 404, 405, 406, 407, 409, 0,
	420, 421, 408, 114, 124, 179, 297, 231, 150, 286,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 248, 250,
	253, 254, 255, 256, 263, 267, 273, 274, 283, 290,
	293, 0, 0, 0, 0, 118, 169, 187, 249, 252,
	258, 265, 320, 321, 322, 237, 174, 175, 0, 0,
	0, 0, 208, 230, 200, 166, 247, 368, 0, 0,
	0, 145, 176, 367, 0, 0, 0, 178, 0, 0,
	411, 180, 0, 0, 261, 195, 0, 0, 0, 0,
	0, 402, 403, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 0, 0, 111, 112, 113, 389, 388, 391,
	392, 393, 394, 0, 0, 134, 390, 395, 396, 397,
	0, 0, 0, 0, 365, 382, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 379, 380, 0,
	0, 0, 0, 425, 0, 381, 0, 0, 374, 375,
	377, 376, 378, 383, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 424, 0, 0, 323, 0, 0,
	422, 0, 227, 0, 266, 157, 177, 130, 171, 115,
	126, 0, 156, 205, 236, 241, 0, 0, 0, 138,
	0, 239, 215, 282, 0, 217, 238, 181, 272, 228,
	281, 291, 292, 269, 289, 296, 257, 119, 268, 280,
	135, 251, 0, 0, 0, 121, 278, 264, 193, 167,
	168, 120, 0, 234, 144, 152, 140, 207, 275, 276,
	139, 299, 127, 288, 123, 128, 287, 201, 271, 279,
	194, 186, 122, 277, 192, 185, 173, 148, 159, 225,
	183, 226, 160, 197, 196, 198, 0, 0, 0, 262,
	285, 300, 132, 0, 270, 294, 295, 0, 229, 133,
	153, 147, 224, 151, 199, 129, 162, 259, 172, 182,
	233, 298, 214, 240, 136, 284, 260, 412, 423, 418,
	419, 416, 417, 415, 414, 413, 426, 404, 405, 406,
	407, 409, 0, 420, 421, 408, 114, 124, 179, 297,
	231, 150, 286, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	125, 131, 137, 142, 146, 149, 155, 158, 161, 163,
	164, 165, 170, 184, 188, 189, 190, 191, 202, 203,
	204, 206, 209, 210, 211, 212, 213, 216, 218, 219,
	220, 221, 222, 223, 232, 235, 242, 243, 244, 245,
	246, 248, 250, 253, 254, 255, 256, 263, 267, 273,
	274, 283, 290, 293, 0, 0, 0, 0, 118, 169,
	187, 249, 252, 258, 265, 320, 321, 322, 237, 174,
	175, 208, 0, 0, 0, 0, 230, 200, 166, 247,
	145, 176, 141, 0, 0, 0, 178, 0, 0, 411,
	180, 0, 0, 261, 195, 0, 0, 0, 0, 0,
	402, 403, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 0, 111, 112, 113, 389, 388, 391, 392,
	393, 394, 0, 0, 134, 390, 395, 396, 397, 0,
	0, 0, 0, 0, 382, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 379, 380, 0, 0,
	0, 0, 425, 0, 381, 0, 0, 374, 375, 377,
	376, 378, 383, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 424, 0, 0, 323, 0, 0, 422,
	0, 227, 0, 266, 157, 177, 130, 171, 115, 126,
	0, 156, 205, 236, 241, 0, 0, 0, 138, 0,
	239, 215, 282, 1746, 217, 238, 181, 272, 228, 281,
	291, 292, 269, 289, 296, 257, 119, 268, 280, 135,
	251, 0, 0, 0, 121, 278, 264, 193, 167, 168,
	120, 0, 234, 144, 152, 140, 207, 275, 276, 139,
	299, 127, 288, 123, 128, 287, 201, 271, 279, 194,
	186, 122, 277, 192, 185, 173, 148, 159, 225, 183,
	226, 160, 197, 196, 198, 0, 0, 0, 262, 285,
	300, 132, 0, 270, 294, 295, 0, 229, 133, 153,
	147, 224, 151, 199, 129, 162, 259, 172, 182, 233,
	298, 214, 240, 136, 284, 260, 412, 423, 418, 419,
	416, 417, 415, 414, 413, 426, 404, 405, 406, 407,
	409, 0, 420, 421, 408, 114, 124, 179, 297, 231,
	150, 286, 0, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 117, 125,
	131, 137, 142, 146, 149, 155, 158, 161, 163, 164,
	165, 170, 184, 188, 189, 190, 191, 202, 203, 204,
	206, 209, 210, 211, 212, 213, 216, 218, 219, 220,
	221, 222, 223, 232, 235, 242, 243, 244, 245, 246,
	248, 250, 253, 254, 255, 256, 263, 267, 273, 274,
	283, 290, 293, 0, 0, 0, 0, 118, 169, 187,
	249, 252, 258, 265, 320, 321, 322, 237, 174, 175,
	208, 0, 0, 0, 0, 230, 200, 166, 247, 145,
	176, 141, 0, 0, 0, 178, 0, 0, 411, 180,
	0, 0, 261, 195, 0, 0, 0, 0, 0, 402,
	403, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	0, 1012, 111, 112, 113, 389, 388, 391, 392, 393,
	394, 0, 0, 134, 390, 395, 396, 397, 0, 0,
	0, 0, 0, 382, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 0, 0, 0,
	0, 425, 0, 381, 0, 0, 374, 375, 377, 376,
	378, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 424, 0, 0, 323, 0, 0, 422, 0,
	227, 0, 266, 157, 177, 130, 171, 115, 126, 0,
	156, 205, 236, 241, 0, 0, 0, 138, 0, 239,
	215, 282, 0, 217, 238, 181, 272, 228, 281, 291,
	292, 269, 289, 296, 257, 119, 268, 280, 135, 251,
	0, 0, 0, 121, 278, 264, 193, 167, 168, 120,
	0, 234, 144, 152, 140, 207, 275, 276, 139, 299,
	127, 288, 123, 128, 287, 201, 271, 279, 194, 186,
	122, 277, 192, 185, 173, 148, 159, 225, 183, 226,
	160, 197, 196, 198, 0, 0, 0, 262, 285, 300,
	132, 0, 270, 294, 295, 0, 229, 133, 153, 147,
	224, 151, 199, 129, 162, 259, 172, 182, 233, 298,
	214, 240, 136, 284, 260, 412, 423, 418, 419, 416,
	417, 415, 414, 413, 426, 404, 405, 406, 407, 409,
	0, 420, 421, 408, 114, 124, 179, 297, 231, 150,
	286, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 125, 131,
	137, 142, 146, 149, 155, 158, 161, 163, 164, 165,
	170, 184, 188, 189, 190, 191, 202, 203, 204, 206,
	209, 210, 211, 212, 213, 216, 218, 219, 220, 221,
	222, 223, 232, 235, 242, 243, 244, 245, 246, 248,
	250, 253, 254, 255, 256, 263, 267, 273, 274, 283,
	290, 293, 0, 0, 0, 0, 118, 169, 187, 249,
	252, 258, 265, 320, 321, 322, 237, 174, 175, 208,
	0, 0, 0, 0, 230, 200, 166, 247, 145, 176,
	141, 0, 0, 0, 178, 0, 0, 411, 180, 0,
	0, 261, 195, 0, 0, 0, 0, 0, 402, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 111, 112, 113, 389, 388, 391, 392, 393, 394,
	0, 0, 134, 390, 395, 396, 397, 0, 0, 0,
	0, 0, 382, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 379, 380, 0, 0, 0, 0,
	425, 0, 381, 0, 0, 374, 375, 377, 376, 378,
	383, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 424, 0, 0, 323, 0, 0, 422, 0, 227,
	0, 266, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 0, 0, 0, 138, 0, 239, 215,
	282, 0, 217, 238, 181, 272, 228, 281, 291, 292,
	269, 289, 296, 257, 119, 268, 280, 135, 251, 0,
	0, 0, 121, 278, 264, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 275, 276, 139, 299, 127,
	288, 123, 128, 287, 201, 271, 279, 194, 186, 122,
	277, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 0, 0, 262, 285, 300, 132,
	0, 270, 294, 295, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 259, 172, 182, 233, 298, 214,
	240, 136, 284, 260, 412, 423, 418, 419, 416, 417,
	415, 414, 413, 426, 404, 405, 406, 407, 409, 0,
	420, 421, 408, 114, 124, 179, 297, 231, 150, 286,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 248, 250,
	253, 254, 255, 256, 263, 267, 273, 274, 283, 290,
	293, 0, 0, 0, 0, 118, 169, 187, 249, 252,
	258, 265, 320, 321, 322, 237, 174, 175, 208, 0,
	0, 0, 0, 230, 200, 166, 247, 145, 176, 141,
	0, 0, 0, 178, 0, 0, 411, 180, 0, 0,
	261, 195, 0, 0, 0, 0, 0, 402, 403, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 0, 0,
	111, 112, 113, 389, 731, 391, 392, 393, 394, 0,
	0, 134, 390, 395, 396, 397, 0, 0, 0, 0,
	0, 382, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 379, 380, 0, 0, 0, 0, 425,
	0, 381, 0, 0, 374, 375, 377, 376, 378, 383,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	424, 0, 0, 323, 0, 0, 422, 0, 227, 0,
	266, 157, 177, 130, 171, 115, 126, 0, 156, 205,
	236, 241, 0, 0, 0, 138, 0, 239, 215, 282,
	0, 217, 238, 181, 272, 228, 281, 291, 292, 269,
	289, 296, 257, 119, 268, 280, 135, 251, 0, 0,
	0, 121, 278, 264, 193, 167, 168, 120, 0, 234,
	144, 152, 140, 207, 275, 276, 139, 299, 127, 288,
	123, 128, 287, 201, 271, 279, 194, 186, 122, 277,
	192, 185, 173, 148, 159, 225, 183, 226, 160, 197,
	196, 198, 0, 0, 0, 262, 285, 300, 132, 0,
	270, 294, 295, 0, 229, 133, 153, 147, 224, 151,
	199, 129, 162, 259, 172, 182, 233, 298, 214, 240,
	136, 284, 260, 412, 423, 418, 419, 416, 417, 415,
	414, 413, 426, 404, 405, 406, 407, 409, 0, 420,
	421, 408, 114, 124, 179, 297, 231, 150, 286, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 142,
	146, 149, 155, 158, 161, 163, 164, 165, 170, 184,
	188, 189, 190, 191, 202, 203, 204, 206, 209, 210,
	211, 212, 213, 216, 218, 219, 220, 221, 222, 223,
	232, 235, 242, 243, 244, 245, 246, 248, 250, 253,
	254, 255, 256, 263, 267, 273, 274, 283, 290, 293,
	0, 0, 0, 0, 118, 169, 187, 249, 252, 258,
	265, 320, 321, 322, 237, 174, 175, 208, 0, 0,
	0, 0, 230, 200, 166, 247, 145, 176, 141, 0,
	0, 0, 178, 0, 0, 0, 180, 0, 0, 261,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	112, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 696, 695,
	705, 706, 698, 699, 700, 701, 702, 703, 704, 697,
	0, 0, 707, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 323, 0, 0, 0, 0, 227, 0, 266,
	157, 177, 130, 171, 115, 126, 0, 156, 205, 236,
	241, 0, 0, 0, 138, 0, 239, 215, 282, 0,
	217, 238, 181, 272, 228, 281, 291, 292, 269, 289,
	296, 257, 119, 268, 280, 135, 251, 0, 0, 0,
	121, 278, 264, 193, 167, 168, 120, 0, 234, 144,
	152, 140, 207, 275, 276, 139, 299, 127, 288, 123,
	128, 287, 201, 271, 279, 194, 186, 122, 277, 192,
	185, 173, 148, 159, 225, 183, 226, 160, 197, 196,
	198, 0, 0, 0, 262, 285, 300, 132, 0, 270,
	294, 295, 0, 229, 133, 153, 147, 224, 151, 199,
	129, 162, 259, 172, 182, 233, 298, 214, 240, 136,
	284, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 124, 179, 297, 231, 150, 286, 0, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 117, 125, 131, 137, 142, 146,
	149, 155, 158, 161, 163, 164, 165, 170, 184, 188,
	189, 190, 191, 202, 203, 204, 206, 209, 210, 211,
	212, 213, 216, 218, 219, 220, 221, 222, 223, 232,
	235, 242, 243, 244, 245, 246, 248, 250, 253, 254,
	255, 256, 263, 267, 273, 274, 283, 290, 293, 0,
	0, 0, 0, 118, 169, 187, 249, 252, 258, 265,
	320, 321, 322, 237, 174, 175, 208, 0, 0, 0,
	801, 230, 200, 166, 247, 145, 176, 141, 0, 0,
	0, 178, 0, 0, 0, 180, 0, 0, 261, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	113, 0, 803, 0, 0, 0, 0, 687, 0, 134,
	0, 0, 0, 0, 0, 683, 684, 682, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 685, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 323, 0, 0, 0, 0, 227, 0, 266, 157,
	177, 130, 171, 115, 126, 0, 156, 205, 236, 241,
	0, 0, 0, 138, 0, 239, 215, 282, 0, 217,
	238, 181, 272, 228, 281, 291, 292, 269, 289, 296,
	257, 119, 268, 280, 135, 251, 0, 0, 0, 121,
	278, 264, 193, 167, 168, 120, 0, 234, 144, 152,
	140, 207, 275, 276, 139, 299, 127, 288, 123, 128,
	287, 201, 271, 279, 194, 186, 122, 277, 192, 185,
	173, 148, 159, 225, 183, 226, 160, 197, 196, 198,
	0, 0, 0, 262, 285, 300, 132, 0, 270, 294,
	295, 0, 229, 133, 153, 147, 224, 151, 199, 129,
	162, 259, 172, 182, 233, 298, 214, 240, 136, 284,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 124, 179, 297, 231, 150, 286, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 142, 146, 149,
	155, 158, 161, 163, 164, 165, 170, 184, 188, 189,
	190, 191, 202, 203, 204, 206, 209, 210, 211, 212,
	213, 216, 218, 219, 220, 221, 222, 223, 232, 235,
	242, 243, 244, 245, 246, 248, 250, 253, 254, 255,
	256, 263, 267, 273, 274, 283, 290, 293, 0, 0,
	0, 0, 118, 169, 187, 249, 252, 258, 265, 320,
	321, 322, 237, 174, 175, 208, 0, 0, 0, 0,
	230, 200, 166, 247, 145, 176, 141, 0, 0, 0,
	178, 0, 0, 0, 180, 0, 0, 261, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 101, 102, 0,
	97, 0, 0, 0, 104, 227, 0, 266, 157, 177,
	130, 171, 115, 126, 0, 156, 205, 236, 241, 0,
	0, 0, 138, 0, 239, 215, 282, 0, 217, 238,
	181, 272, 228, 281, 291, 292, 269, 289, 296, 257,
	119, 268, 280, 135, 251, 0, 0, 0, 121, 278,
	264, 193, 167, 168, 120, 0, 234, 144, 152, 140,
	207, 275, 276, 139, 299, 127, 288, 123, 128, 287,
	201, 271, 279, 194, 186, 122, 277, 192, 185, 173,
	148, 159, 225, 183, 226, 160, 197, 196, 198, 0,
	0, 0, 262, 285, 300, 132, 0, 270, 294, 295,
	0, 229, 133, 153, 147, 224, 151, 199, 129, 162,
	259, 172, 182, 233, 298, 214, 240, 136, 284, 260,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	124, 179, 297, 231, 150, 286, 0, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 117, 125, 131, 137, 142, 146, 149, 155,
	158, 161, 163, 164, 165, 170, 184, 188, 189, 190,
	191, 202, 203, 204, 206, 209, 210, 211, 212, 213,
	216, 218, 219, 220, 221, 222, 223, 232, 235, 242,
	243, 244, 245, 246, 248, 250, 253, 254, 255, 256,
	263, 267, 273, 274, 283, 290, 293, 0, 0, 0,
	0, 118, 169, 187, 249, 252, 258, 265, 106, 107,
	108, 237, 174, 175, 36, 0, 0, 0, 0, 230,
	200, 166, 247, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 176, 141, 0, 0,
	0, 178, 0, 0, 0, 180, 0, 0, 261, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 70, 0, 0, 111, 112,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 323, 0, 0, 0, 0, 227, 0, 266, 157,
	177, 130, 171, 115, 126, 0, 156, 205, 236, 241,
	0, 0, 0, 138, 0, 239, 215, 282, 0, 217,
	238, 181, 272, 228, 281, 291, 292, 269, 289, 296,
	257, 119, 268, 280, 135, 251, 0, 0, 0, 121,
	278, 264, 193, 167, 168, 120, 0, 234, 144, 152,
	140, 207, 275, 276, 139, 299, 127, 288, 123, 128,
	287, 201, 271, 279, 194, 186, 122, 277, 192, 185,
	173, 148, 159, 225, 183, 226, 160, 197, 196, 198,
	0, 0, 0, 262, 285, 300, 132, 0, 270, 294,
	295, 0, 229, 133, 153, 147, 224, 151, 199, 129,
	162, 259, 172, 182, 233, 298, 214, 240, 136, 284,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 124, 179, 297, 231, 150, 286, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 142, 146, 149,
	155, 158, 161, 163, 164, 165, 170, 184, 188, 189,
	190, 191, 202, 203, 204, 206, 209, 210, 211, 212,
	213, 216, 218, 219, 220, 221, 222, 223, 232, 235,
	242, 243, 244, 245, 246, 248, 250, 253, 254, 255,
	256, 263, 267, 273, 274, 283, 290, 293, 0, 0,
	0, 0, 118, 169, 187, 249, 252, 258, 265, 320,
	321, 322, 237, 819, 820, 0, 0, 0, 0, 65,
	230, 200, 166, 247, 208, 0, 0, 0, 1101, 0,
	0, 0, 0, 145, 176, 141, 0, 0, 0, 178,
	0, 0, 0, 180, 0, 0, 261, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 112, 113, 0,
	1103, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 323,
	0, 0, 0, 0, 227, 0, 266, 157, 177, 130,
	171, 115, 126, 0, 156, 205, 236, 241, 0, 0,
	0, 138, 0, 239, 215, 282, 0, 217, 238, 181,
	272, 228, 281, 291, 292, 269, 289, 296, 257, 119,
	268, 280, 135, 251, 0, 0, 0, 121, 278, 264,
	193, 167, 168, 120, 0, 234, 144, 152, 140, 207,
	275, 276, 139, 299, 127, 288, 123, 128, 287, 201,
	271, 279, 194, 186, 122, 277, 192, 185, 173, 148,
	159, 225, 183, 226, 160, 197, 196, 198, 0, 0,
	0, 262, 285, 300, 132, 0, 270, 294, 295, 0,
	229, 133, 153, 147, 224, 151, 199, 129, 162, 259,
	172, 182, 233, 298, 214, 240, 136, 284, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 114, 124,
	179, 297, 231, 150, 286, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 117, 125, 131, 137, 142, 146, 149, 155, 158,
	161, 163, 164, 165, 170, 184, 188, 189, 190, 191,
	202, 203, 204, 206, 209, 210, 211, 212, 213, 216,
	218, 219, 220, 221, 222, 223, 232, 235, 242, 243,
	244, 245, 246, 248, 250, 253, 254, 255, 256, 263,
	267, 273, 274, 283, 290, 293, 0, 0, 0, 0,
	118, 169, 187, 249, 252, 258, 265, 320, 321, 322,
	237, 174, 175, 36, 0, 0, 0, 0, 230, 200,
	166, 247, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 176, 141, 0, 0, 0,
	178, 0, 0, 0, 180, 0, 0, 261, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 0, 111, 112, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	323, 0, 0, 0, 0, 227, 0, 266, 157, 177,
	130, 171, 115, 126, 0, 156, 205, 236, 241, 0,
	0, 0, 138, 0, 239, 215, 282, 0, 217, 238,
	181, 272, 228, 281, 291, 292, 269, 289, 296, 257,
	119, 268, 280, 135, 251, 0, 0, 0, 121, 278,
	264, 193, 167, 168, 120, 0, 234, 144, 152, 140,
	207, 275, 276, 139, 299, 127, 288, 123, 128, 287,
	201, 271, 279, 194, 186, 122, 277, 192, 185, 173,
	148, 159, 225, 183, 226, 160, 197, 196, 198, 0,
	0, 0, 262, 285, 300, 132, 0, 270, 294, 295,
	0, 229, 133, 153, 147, 224, 151, 199, 129, 162,
	259, 172, 182, 233, 298, 214, 240, 136, 284, 260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	124, 179, 297, 231, 150, 286, 0, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 117, 125, 131, 137, 142, 146, 149, 155,
	158, 161, 163, 164, 165, 170, 184, 188, 189, 190,
	191, 202, 203, 204, 206, 209, 210, 211, 212, 213,
	216, 218, 219, 220, 221, 222, 223, 232, 235, 242,
	243, 244, 245, 246, 248, 250, 253, 254, 255, 256,
	263, 267, 273, 274, 283, 290, 293, 0, 0, 0,
	0, 118, 169, 187, 249, 252, 258, 265, 320, 321,
	322, 237, 174, 175, 208, 0, 0, 0, 1101, 230,
	200, 166, 247, 145, 176, 141, 0, 0, 0, 178,
	0, 0, 0, 180, 0, 0, 261, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 112, 113, 0,
	1103, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 323,
	0, 0, 0, 0, 227, 0, 266, 157, 177, 130,
	171, 115, 126, 0, 156, 205, 236, 241, 0, 0,
	0, 138, 0, 239, 215, 282, 0, 1105, 238, 181,
	272, 228, 281, 291, 292, 269, 289, 296, 257, 119,
	268, 280, 135, 251, 0, 0, 0, 121, 278, 264,
	193, 167, 168, 120, 0, 234, 144, 152, 140, 207,
	275, 276, 139, 299, 127, 288, 123, 128, 287, 201,
	271, 279, 194, 186, 122, 277, 192, 185, 173, 148,
	159, 225, 183, 226, 160, 197, 196, 198, 0, 0,
	0, 262, 285, 300, 132, 0, 270, 294, 295, 0,
	229, 133, 153, 147, 224, 151, 199, 129, 162, 259,
	172, 182, 233, 298, 214, 240, 136, 284, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 114, 124,
	179, 297, 231, 150, 286, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 117, 125, 131, 137, 142, 146, 149, 155, 158,
	161, 163, 164, 165, 170, 184, 188, 189, 190, 191,
	202, 203, 204, 206, 209, 210, 211, 212, 213, 216,
	218, 219, 220, 221, 222, 223, 232, 235, 242, 243,
	244, 245, 246, 248, 250, 253, 254, 255, 256, 263,
	267, 273, 274, 283, 290, 293, 0, 0, 0, 0,
	118, 169, 187, 249, 252, 258, 265, 320, 321, 322,
	237, 174, 175, 208, 0, 0, 0, 0, 230, 200,
	166, 247, 145, 176, 141, 0, 0, 0, 178, 0,
	0, 0, 180, 0, 0, 261, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 112, 113, 0, 0,
	1067, 0, 0, 1068, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 323, 0,
	0, 0, 0, 227, 0, 266, 157, 177, 130, 171,
	115, 126, 0, 156, 205, 236, 241, 0, 0, 0,
	138, 0, 239, 215, 282, 0, 217, 238, 181, 272,
	228, 281, 291, 292, 269, 289, 296, 257, 119, 268,
	280, 135, 251, 0, 0, 0, 121, 278, 264, 193,
	167, 168, 120, 0, 234, 144, 152, 140, 207, 275,
	276, 139, 299, 127, 288, 123, 128, 287, 201, 271,
	279, 194, 186, 122, 277, 192, 185, 173, 148, 159,
	225, 183, 226, 160, 197, 196, 198, 0, 0, 0,
	262, 285, 300, 132, 0, 270, 294, 295, 0, 229,
	133, 153, 147, 224, 151, 199, 129, 162, 259, 172,
	182, 233, 298, 214, 240, 136, 284, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 124, 179,
	297, 231, 150, 286, 0, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	117, 125, 131, 137, 142, 146, 149, 155, 158, 161,
	163, 164, 165, 170, 184, 188, 189, 190, 191, 202,
	203, 204, 206, 209, 210, 211, 212, 213, 216, 218,
	219, 220, 221, 222, 223, 232, 235, 242, 243, 244,
	245, 246, 248, 250, 253, 254, 255, 256, 263, 267,
	273, 274, 283, 290, 293, 0, 0, 0, 0, 118,
	169, 187, 249, 252, 258, 265, 320, 321, 322, 237,
	174, 175, 208, 0, 0, 0, 0, 230, 200, 166,
	247, 145, 176, 141, 0, 0, 0, 178, 0, 0,
	0, 180, 0, 0, 261, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1012, 111, 112, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 323, 0, 0,
	0, 0, 227, 0, 266, 157, 177, 130, 171, 115,
	126, 0, 156, 205, 236, 241, 0, 0, 0, 138,
	0, 239, 215, 282, 0, 217, 238, 181, 272, 228,
	281, 291, 292, 269, 289, 296, 257, 119, 268, 280,
	135, 251, 0, 0, 0, 121, 278, 264, 193, 167,
	168, 120, 0, 234, 144, 152, 140, 207, 275, 276,
	139, 299, 127, 288, 123, 128, 287, 201, 271, 279,
	194, 186, 122, 277, 192, 185, 173, 148, 159, 225,
	183, 226, 160, 197, 196, 198, 0, 0, 0, 262,
	285, 300, 132, 0, 270, 294, 295, 0, 229, 133,
	153, 147, 224, 151, 199, 129, 162, 259, 172, 182,
	233, 298, 214, 240, 136, 284, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 124, 179, 297,
	231, 150, 286, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	125, 131, 137, 142, 146, 149, 155, 158, 161, 163,
	164, 165, 170, 184, 188, 189, 190, 191, 202, 203,
	204, 206, 209, 210, 211, 212, 213, 216, 218, 219,
	220, 221, 222, 223, 232, 235, 242, 243, 244, 245,
	246, 248, 250, 253, 254, 255, 256, 263, 267, 273,
	274, 283, 290, 293, 0, 0, 0, 0, 118, 169,
	187, 249, 252, 258, 265, 320, 321, 322, 237, 174,
	175, 208, 0, 0, 0, 0, 230, 200, 166, 247,
	145, 176, 141, 0, 0, 0, 178, 0, 0, 0,
	180, 0, 0, 261, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 0, 111, 112, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 323, 0, 0, 0,
	0, 227, 0, 266, 157, 177, 130, 171, 115, 126,
	0, 156, 205, 236, 241, 0, 0, 0, 138, 0,
	239, 215, 282, 0, 217, 238, 181, 272, 228, 281,
	291, 292, 269, 289, 296, 257, 119, 268, 280, 135,
	251, 0, 0, 0, 121, 278, 264, 193, 167, 168,
	120, 0, 234, 144, 152, 140, 207, 275, 276, 139,
	299, 127, 288, 123, 128, 287, 201, 271, 279, 194,
	186, 122, 277, 192, 185, 173, 148, 159, 225, 183,
	226, 160, 197, 196, 198, 0, 0, 0, 262, 285,
	300, 132, 0, 270, 294, 295, 0, 229, 133, 153,
	147, 224, 151, 199, 129, 162, 259, 172, 182, 233,
	298, 214, 240, 136, 284, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 124, 179, 297, 231,
	150, 286, 0, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 117, 125,
	131, 137, 142, 146, 149, 155, 158, 161, 163, 164,
	165, 170, 184, 188, 189, 190, 191, 202, 203, 204,
	206, 209, 210, 211, 212, 213, 216, 218, 219, 220,
	221, 222, 223, 232, 235, 242, 243, 244, 245, 246,
	248, 250, 253, 254, 255, 256, 263, 267, 273, 274,
	283, 290, 293, 0, 0, 0, 0, 118, 169, 187,
	249, 252, 258, 265, 320, 321, 322, 237, 819, 820,
	208, 0, 0, 0, 0, 230, 200, 166, 247, 145,
	176, 141, 0, 0, 0, 178, 0, 0, 0, 180,
	0, 0, 261, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 112, 113, 0, 1103, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 323, 0, 0, 0, 0,
	227, 0, 266, 157, 177, 130, 171, 115, 126, 0,
	156, 205, 236, 241, 0, 0, 0, 138, 0, 239,
	215, 282, 0, 217, 238, 181, 272, 228, 281, 291,
	292, 269, 289, 296, 257, 119, 268, 280, 135, 251,
	0, 0, 0, 121, 278, 264, 193, 167, 168, 120,
	0, 234, 144, 152, 140, 207, 275, 276, 139, 299,
	127, 288, 123, 128, 287, 201, 271, 279, 194, 186,
	122, 277, 192, 185, 173, 148, 159, 225, 183, 226,
	160, 197, 196, 198, 0, 0, 0, 262, 285, 300,
	132, 0, 270, 294, 295, 0, 229, 133, 153, 147,
	224, 151, 199, 129, 162, 259, 172, 182, 233, 298,
	214, 240, 136, 284, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 114, 124, 179, 297, 231, 150,
	286, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 125, 131,
	137, 142, 146, 149, 155, 158, 161, 163, 164, 165,
	170, 184, 188, 189, 190, 191, 202, 203, 204, 206,
	209, 210, 211, 212, 213, 216, 218, 219, 220, 221,
	222, 223, 232, 235, 242, 243, 244, 245, 246, 248,
	250, 253, 254, 255, 256, 263, 267, 273, 274, 283,
	290, 293, 0, 0, 0, 0, 118, 169, 187, 249,
	252, 258, 265, 320, 321, 322, 237, 174, 175, 208,
	0, 0, 0, 0, 230, 200, 166, 247, 145, 176,
	141, 0, 0, 0, 178, 0, 0, 0, 180, 0,
	0, 261, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 111, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 323, 0, 0, 0, 0, 227,
	0, 266, 157, 177, 130, 171, 115, 126, 0, 156,
	205, 236, 241, 0, 0, 0, 138, 0, 239, 215,
	282, 0, 217, 238, 181, 272, 228, 281, 291, 292,
	269, 289, 296, 257, 119, 268, 280, 135, 251, 0,
	0, 0, 121, 278, 264, 193, 167, 168, 120, 0,
	234, 144, 152, 140, 207, 275, 276, 139, 299, 127,
	288, 123, 128, 287, 201, 271, 279, 194, 186, 122,
	277, 192, 185, 173, 148, 159, 225, 183, 226, 160,
	197, 196, 198, 0, 0, 0, 262, 285, 300, 132,
	0, 270, 294, 295, 0, 229, 133, 153, 147, 224,
	151, 199, 129, 162, 259, 172, 182, 233, 298, 214,
	240, 136, 284, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 124, 179, 297, 231, 150, 286,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 117, 125, 131, 137,
	142, 146, 149, 155, 158, 161, 163, 164, 165, 170,
	184, 188, 189, 190, 191, 202, 203, 204, 206, 209,
	210, 211, 212, 213, 216, 218, 219, 220, 221, 222,
	223, 232, 235, 242, 243, 244, 245, 246, 248, 250,
	253, 254, 255, 256, 263, 267, 273, 274, 283, 290,
	293, 0, 0, 0, 0, 118, 169, 187, 249, 252,
	258, 265, 320, 321, 322, 237, 174, 175, 208, 0,
	0, 0, 0, 230, 200, 166, 247, 145, 176, 141,
	0, 0, 0, 178, 0, 0, 0, 180, 0, 0,
	261, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 112, 113, 0, 1228, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 323, 0, 0, 0, 0, 227, 0,
	266, 157, 177, 130, 171, 115, 126, 0, 156, 205,
	236, 241, 0, 0, 0, 138, 0, 239, 215, 282,
	0, 217, 238, 181, 272, 228, 281, 291, 292, 269,
	289, 296, 257, 119, 268, 280, 135, 251, 0, 0,
	0, 121, 278, 264, 193, 167, 168, 120, 0, 234,
	144, 152, 140, 207, 275, 276, 139, 299, 127, 288,
	123, 128, 287, 201, 271, 279, 194, 186, 122, 277,
	192, 185, 173, 148, 159, 225, 183, 226, 160, 197,
	196, 198, 0, 0, 0, 262, 285, 300, 132, 0,
	270, 294, 295, 0, 229, 133, 153, 147, 224, 151,
	199, 129, 162, 259, 172, 182, 233, 298, 214, 240,
	136, 284, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 124, 179, 297, 231, 150, 286, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 142,
	146, 149, 155, 158, 161, 163, 164, 165, 170, 184,
	188, 189, 190, 191, 202, 203, 204, 206, 209, 210,
	211, 212, 213, 216, 218, 219, 220, 221, 222, 223,
	232, 235, 242, 243, 244, 245, 246, 248, 250, 253,
	254, 255, 256, 263, 267, 273, 274, 283, 290, 293,
	0, 0, 0, 0, 118, 169, 187, 249, 252, 258,
	265, 320, 321, 322, 237, 174, 175, 0, 208, 0,
	0, 0, 230, 200, 166, 247, 806, 145, 176, 141,
	0, 0, 0, 178, 0, 0, 0, 180, 0, 0,
	261, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 112, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 323, 0, 0, 0, 0, 227, 0,
	266, 157, 177, 130, 171, 115, 126, 0, 156, 205,
	236, 241, 0, 0, 0, 138, 0, 239, 215, 282,
	0, 217, 238, 181, 272, 228, 281, 291, 292, 269,
	289, 296, 257, 119, 268, 280, 135, 251, 0, 0,
	0, 121, 278, 264, 193, 167, 168, 120, 0, 234,
	144, 152, 140, 207, 275, 276, 139, 299, 127, 288,
	123, 128, 287, 201, 271, 279, 194, 186, 122, 277,
	192, 185, 173, 148, 159, 225, 183, 226, 160, 197,
	196, 198, 0, 0, 0, 262, 285, 300, 132, 0,
	270, 294, 295, 0, 229, 133, 153, 147, 224, 151,
	199, 129, 162, 259, 172, 182, 233, 298, 214, 240,
	136, 284, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 124, 179, 297, 231, 150, 286, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 142,
	146, 149, 155, 158, 161, 163, 164, 165, 170, 184,
	188, 189, 190, 191, 202, 203, 204, 206, 209, 210,
	211, 212, 213, 216, 218, 219, 220, 221, 222, 223,
	232, 235, 242, 243, 244, 245, 246, 248, 250, 253,
	254, 255, 256, 263, 267, 273, 274, 283, 290, 293,
	0, 0, 0, 0, 118, 169, 187, 249, 252, 258,
	265, 320, 321, 322, 237, 174, 175, 208, 0, 0,
	0, 0, 230, 200, 166, 247, 145, 176, 141, 0,
	0, 0, 178, 0, 0, 0, 180, 0, 0, 261,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	112, 113, 0, 803, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 323, 0, 0, 0, 0, 227, 0, 266,
	157, 177, 130, 171, 115, 126, 0, 156, 205, 236,
	241, 0, 0, 0, 138, 0, 239, 215, 282, 0,
	217, 238, 181, 272, 228, 281, 291, 292, 269, 289,
	296, 257, 119, 268, 280, 135, 251, 0, 0, 0,
	121, 278, 264, 193, 167, 168, 120, 0, 234, 144,
	152, 140, 207, 275, 276, 139, 299, 127, 288, 123,
	128, 287, 201, 271, 279, 194, 186, 122, 277, 192,
	185, 173, 148, 159, 225, 183, 226, 160, 197, 196,
	198, 0, 0, 0, 262, 285, 300, 132, 0, 270,
	294, 295, 0, 229, 133, 153, 147, 224, 151, 199,
	129, 162, 259, 172, 182, 233, 298, 214, 240, 136,
	284, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 124, 179, 297, 231, 150, 286, 0, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 117, 125, 131, 137, 142, 146,
	149, 155, 158, 161, 163, 164, 165, 170, 184, 188,
	189, 190, 191, 202, 203, 204, 206, 209, 210, 211,
	212, 213, 216, 218, 219, 220, 221, 222, 223, 232,
	235, 242, 243, 244, 245, 246, 248, 250, 253, 254,
	255, 256, 263, 267, 273, 274, 283, 290, 293, 0,
	0, 0, 0, 118, 169, 187, 249, 252, 258, 265,
	320, 321, 322, 237, 174, 175, 208, 0, 0, 0,
	0, 230, 200, 166, 247, 145, 176, 842, 0, 0,
	0, 178, 0, 0, 0, 180, 0, 0, 261, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	113, 0, 841, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 323, 0, 0, 0, 0, 227, 0, 266, 157,
	177, 130, 171, 115, 126, 0, 156, 205, 236, 241,
	0, 0, 0, 138, 0, 239, 215, 282, 0, 217,
	238, 181, 272, 228, 281, 291, 292, 269, 289, 296,
	257, 119, 268, 280, 135, 251, 0, 0, 0, 121,
	278, 264, 193, 167, 168, 120, 0, 234, 144, 152,
	140, 207, 275, 276, 139, 299, 127, 288, 123, 128,
	287, 201, 271, 279, 194, 186, 122, 277, 192, 185,
	173, 148, 159, 225, 183, 226, 160, 197, 196, 198,
	0, 0, 0, 262, 285, 300, 132, 0, 270, 294,
	295, 0, 229, 133, 153, 147, 224, 151, 199, 129,
	162, 259, 172, 182, 233, 298, 214, 240, 136, 284,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 124, 179, 297, 231, 150, 286, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 142, 146, 149,
	155, 158, 161, 163, 164, 165, 170, 184, 188, 189,
	190, 191, 202, 203, 204, 206, 209, 210, 211, 212,
	213, 216, 218, 219, 220, 221, 222, 223, 232, 235,
	242, 243, 244, 245, 246, 248, 250, 253, 254, 255,
	256, 263, 267, 273, 274, 283, 290, 293, 0, 0,
	0, 0, 118, 169, 187, 249, 252, 258, 265, 320,
	321, 322, 237, 174, 175, 0, 0, 462, 0, 0,
	230, 200, 166, 247, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 176, 141, 0, 0, 0, 178,
	0, 0, 0, 180, 0, 0, 261, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 112, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 323,
	0, 0, 0, 0, 227, 0, 266, 157, 177, 130,
	171, 115, 126, 0, 156, 205, 236, 241, 0, 0,
	0, 138, 0, 239, 215, 282, 0, 217, 238, 181,
	272, 228, 281, 291, 292, 269, 289, 296, 257, 119,
	268, 280, 135, 251, 0, 0, 0, 121, 278, 264,
	193, 167, 168, 120, 0, 234, 144, 152, 140, 207,
	275, 276, 139, 299, 127, 288, 123, 128, 287, 201,
	271, 279, 194, 186, 122, 277, 192, 185, 173, 148,
	159, 225, 183, 226, 160, 197, 196, 198, 0, 0,
	0, 262, 285, 300, 132, 0, 270, 294, 295, 0,
	229, 133, 153, 147, 224, 151, 199, 129, 162, 259,
	172, 182, 233, 298, 214, 240, 136, 284, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 114, 124,
	179, 297, 231, 150, 286, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 117, 125, 131, 137, 142, 146, 149, 155, 158,
	161, 163, 164, 165, 170, 184, 188, 189, 190, 191,
	202, 203, 204, 206, 209, 210, 211, 212, 213, 216,
	218, 219, 220, 221, 222, 223, 232, 235, 242, 243,
	244, 245, 246, 248, 250, 253, 254, 255, 256, 263,
	267, 273, 274, 283, 290, 293, 0, 0, 0, 0,
	118, 169, 187, 249, 252, 258, 265, 320, 321, 322,
	237, 174, 175, 208, 0, 0, 0, 0, 230, 200,
	166, 247, 145, 176, 141, 0, 0, 0, 178, 0,
	0, 0, 180, 0, 0, 261, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 112, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 315, 0, 323, 0,
	0, 0, 0, 227, 0, 266, 157, 177, 130, 171,
	115, 126, 0, 156, 205, 236, 241, 0, 0, 0,
	138, 0, 239, 215, 282, 0, 217, 238, 181, 272,
	228, 281, 291, 292, 269, 289, 296, 257, 119, 268,
	280, 135, 251, 0, 0, 0, 121, 278, 264, 193,
	167, 168, 120, 0, 234, 144, 152, 140, 207, 275,
	276, 139, 299, 127, 288, 123, 128, 287, 201, 271,
	279, 194, 186, 122, 277, 192, 185, 173, 148, 159,
	225, 183, 226, 160, 197, 196, 198, 0, 0, 0,
	262, 285, 300, 132, 0, 270, 294, 295, 0, 229,
	133, 153, 147, 224, 151, 199, 129, 162, 259, 172,
	182, 233, 298, 214, 240, 136, 284, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 124, 179,
	297, 231, 150, 286, 0, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	117, 125, 131, 137, 142, 146, 149, 155, 158, 161,
	163, 164, 165, 170, 184, 188, 189, 190, 191, 202,
	203, 204, 206, 209, 210, 211, 212, 213, 216, 218,
	219, 220, 221, 222, 223, 232, 235, 242, 243, 244,
	245, 246, 248, 250, 253, 254, 255, 256, 263, 267,
	273, 274, 283, 290, 293, 0, 0, 0, 0, 118,
	169, 187, 249, 252, 258, 265, 320, 321, 322, 237,
	174, 175, 208, 0, 0, 0, 0, 230, 200, 166,
	247, 145, 176, 141, 0, 0, 0, 178, 0, 0,
	0, 180, 0, 0, 261, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 112, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 323, 0, 0,
	0, 0, 227, 0, 266, 157, 177, 130, 171, 115,
	126, 0, 156, 205, 236, 241, 0, 0, 0, 138,
	0, 239, 215, 282, 0, 217, 238, 181, 272, 228,
	281, 291, 292, 269, 289, 296, 257, 119, 268, 280,
	135, 251, 0, 0, 0, 121, 278, 264, 193, 167,
	168, 120, 0, 234, 144, 152, 140, 207, 275, 276,
	139, 299, 127, 288, 123, 128, 287, 201, 271, 279,
	194, 186, 122, 277, 192, 185, 173, 148, 159, 225,
	183, 226, 160, 197, 196, 198, 0, 0, 0, 262,
	285, 300, 132, 0, 270, 294, 295, 0, 229, 133,
	153, 147, 224, 151, 199, 129, 162, 259, 172, 182,
	233, 298, 214, 240, 136, 284, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 124, 179, 297,
	231, 150, 286, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	125, 131, 137, 142, 146, 149, 155, 158, 161, 163,
	164, 165, 170, 184, 188, 189, 190, 191, 202, 203,
	204, 206, 209, 210, 211, 212, 213, 216, 218, 219,
	220, 221, 222, 223, 232, 235, 242, 243, 244, 245,
	246, 248, 250, 253, 254, 255, 256, 263, 267, 273,
	274, 283, 290, 293, 0, 0, 0, 0, 118, 169,
	187, 249, 252, 258, 265, 320, 321, 322, 237, 174,
	175, 0, 0, 0, 0, 0, 230, 200, 166, 247,
}

var yyPact = [...]int{
	2404, -1000, -296, 1121, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1056, 802, -1000, -1000, -1000, -1000,
	-1000, -1000, 335, 13387, 57, 186, -9, 18815, 181, -4,
	19174, -1000, 67, -1000, 46, 19174, 62, -12, -1000, -1000,
	-35, -37, -1000, 10874, -260, -1000, 481, -1000, -1000, -266,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	894, 1038, 1044, 1052, 1121, 1204, -1000, 9051, 135, 135,
	18456, 7594, -1000, -1000, 312, 19174, 174, 19174, -97, 163,
	133, 133, 133, 178, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 176, 19174, 597, 597, 268, -1000, 19174, 132, 597,
	132, 162, 132, 132, -1000, 19174, -1000, 238, -1000, -1000,
	-1000, -1000, -1000, -1000, 19174, 597, 982, 394, 113, 4927,
	-1000, 258, -1000, 4927, 78, 4927, -18, 1075, 79, 26,
	-1000, 597, -55, -1000, -1000, -1000, -1000, -1000, -1000, 146,
	-1000, -1000, 19174, -48, 154, 342, -1000, -1000, -1000, -1000,
	-1000, -1000, 660, 472, -1000, 10874, 2275, 818, 818, -1000,
	-1000, 216, -1000, -1000, 11951, 11951, 11951, 11951, 11951, 11951,
	11951, 11951, 11951, 12310, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 818, 235,
	-1000, 10511, 818, 818, 818, 818, 818, 818, 818, 818,
	10874, 818, 818, 818, 818, 818, 818, 818, 818, 818,
	818, 818, 818, 818, 818, 818, 818, -1000, -1000, -255,
	-280, 19174, -1000, 19174, 562, 161, 1056, -1000, 802, -1000,
	-1000, -1000, 1018, 10874, 10874, 894, 961, 9051, -1000, -1000,
	1020, -1000, -1000, -1000, -1000, 414, 1092, -1000, 13028, 229,
	17370, 15933, 19174, 836, 825, -1000, -1000, 227, 812, 7213,
	-76, -1000, -1000, -1000, 194, 18088, -1000, -1000, -1000, 981,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 761,
	19174, -1000, 1965, -1000, 597, 1034, -31, 19174, 597, 356,
	597, 19174, 133, 19174, 4927, 4927, 4927, 84, 123, 112,
	19174, 811, 139, 19174, 1022, 920, 19174, 132, 597, 597,
	-1000, 6451, -1000, 4927, 394, -1000, 561, 10874, 4927, 4927,
	4927, 19174, 4927, 4927, -1000, -1000, -1000, 375, 442, -1000,
	-1000, -1000, -1000, -1000, 4927, 4927, -1000, 1086, 370, -1000,
	-1000, -1000, -1000, 10874, 280, -1000, 914, -1000, -1000, -57,
	58, -1000, 19174, -1000, 1121, -1000, -1000, -1000, -104, -1000,
	-1000, 10874, 10874, 10874, 10874, 433, 419, -1000, 340, 11951,
	417, 360, 11951, 11951, 11951, 11951, 11951, 11951, 11951, 11951,
	11951, 11951, 11951, 11951, 11951, 11951, 11951, 538, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 597, -1000, 1116, 722,
	722, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	12669, -1000, 7962, 6451, 671, 753, 1056, 9051, 9051, 10874,
	10874, 10140, 9777, 9051, 989, 349, 472, 19174, -1000, -1000,
	11592, -1000, -1000, -1000, -1000, -1000, 504, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 19174, 19174, 9051, 9051, 9051, 9051,
	9051, 597, 597, 597, 623, 567, -1000, -1000, 19174, 1044,
	671, 1020, -1000, 1099, 272, 925, 800, -1000, 621, 1056,
	15215, 781, -1000, 1020, -1000, -1000, -1000, 19174, 419, -1000,
	-1000, 17729, -1000, -1000, 6070, 102, 19174, -1000, 819, 1119,
	-1000, -1000, -1000, -1000, 1032, 13758, 14126, 14856, 818, -1000,
	-1000, 102, 636, 15933, 19174, -1000, -1000, 15933, 19174, 5689,
	6832, -76, -1000, 782, -1000, -61, -69, 8688, 8325, 233,
	-1000, -1000, -1000, -1000, 4546, 575, 594, 367, -30, -1000,
	-1000, -1000, 841, -1000, 841, 841, 841, 841, 18, 18,
	18, 18, -1000, -1000, -1000, -1000, -1000, 896, 891, -1000,
	841, 841, 841, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 889, 889, 889, 848, 848, 837, 802, 19174, 150,
	1030, 4927, 1021, 4927, -1000, 19174, 226, -1000, -1000, -1000,
	19174, 19174, 19174, 19174, 19174, 196, 19174, 19174, 799, -1000,
	19174, 4927, 19174, -1000, -1000, 225, -1000, -1000, -1000, -1000,
	-1000, 472, -1000, -1000, -1000, -1000, -1000, -1000, 19174, -1000,
	-1000, 19174, -1000, 17370, -1000, -1000, 19174, 394, 19174, 19174,
	472, -1000, 549, 19174, -1000, 19174, -1000, 17010, -1000, -1000,
	-1000, -1000, 472, 340, 528, 400, -1000, -1000, 469, -1000,
	-1000, -1000, 1901, -1000, -1000, -1000, -1000, 417, 11951, 11951,
	11951, 482, 1901, 1917, 1319, 1931, 251, 392, 392, 255,
	255, 255, 255, 255, 452, 452, -1000, -1000, -1000, 504,
	-1000, -1000, -1000, 504, 9051, 9051, 723, 818, 224, -1000,
	894, -1000, -1000, -1000, 1044, 741, 741, 591, 499, 330,
	1084, 741, 316, 1082, 741, 741, 9051, -1000, -1000, 359,
	-1000, 10874, 504, -1000, 223, -1000, 828, 798, 785, 741,
	504, 504, 741, 741, -262, -1000, 602, -1000, -1000, 590,
	-1000, 341, -1000, -1000, 1018, -1000, -1000, 958, 10874, 10874,
	10874, -1000, -1000, -1000, 1044, 1059, -1000, 970, 969, 1061,
	9051, 15933, 1020, -1000, -1000, -1000, 219, 844, 818, -1000,
	19174, 15933, 16651, 16651, 15933, 16651, -1000, 941, 936, -1000,
	935, 932, 942, 19174, -1000, 746, 504, 671, 13758, -1000,
	-1000, 16292, -1000, -1000, 222, 818, 9051, 1061, 15933, 670,
	-1000, 670, -1000, 215, -1000, -1000, 782, -76, -80, -1000,
	-1000, -1000, -1000, 472, -1000, -1000, 472, -1000, 558, 776,
	4165, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 888, 597,
	-1000, 1012, 257, 253, 597, 991, -1000, -1000, -1000, 984,
	-1000, 398, -13, -1000, -1000, 474, 18, 18, -1000, -1000,
	233, 978, 233, 233, 233, 546, 546, -1000, -1000, -1000,
	-1000, 470, -1000, -1000, -1000, 467, -1000, 908, 19174, 1121,
	1029, 19174, 802, -1000, -1000, -1000, -1000, -1000, 432, 432,
	271, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 101, 625, -1000, -1000, -1000, -1000, 48, 83,
	138, -1000, 4927, -1000, 4927, 6451, 370, 394, 862, 370,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 482, 1901, 1098, -1000, 11951, 11951, -1000,
	-1000, 741, 741, 9051, 6451, 1056, 1018, -1000, -1000, 252,
	538, 252, 11951, 11951, -1000, 11951, 11951, -1000, -115, 748,
	317, -1000, 10874, 624, -1000, 6451, -1000, 11951, 11951, -1000,
	-1000, -1000, -1000, -1000, 540, -1000, -1000, -1000, -1000, -1000,
	567, -1000, -1000, 323, -1000, 722, -1000, 955, 472, 472,
	-1000, 1018, 19174, -1000, -1000, -1000, -1000, 1068, 10874, -1000,
	743, -1000, 5308, 907, 818, 1121, 14497, 19174, 769, -1000,
	322, 1119, 869, 906, 816, -1000, -1000, -1000, -1000, 934,
	-1000, 933, -1000, -1000, -1000, -1000, -1000, -1000, 671, -1000,
	-1000, 169, 168, 166, 19174, 504, 1056, 670, -292, -292,
	254, -1000, -1000, -65, -74, -1000, -1000, -1000, 4546, -1000,
	4546, 19174, 117, -1000, 597, 597, -1000, -1000, 859, 905,
	11951, -1000, -1000, -1000, 592, 233, 233, -1000, 353, -1000,
	-1000, -1000, 738, -1000, 718, 726, 712, 19174, -1000, 802,
	1024, 1121, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19174,
	-1000, -1000, -1000, -1000, -1000, 19174, -132, 597, 19174, 19174,
	19174, 19174, -1000, -1000, 213, 394, -1000, 394, 19174, 394,
	-1000, 11951, 1901, 1901, -1000, -1000, 504, -1000, 1044, -1000,
	504, 841, 841, -1000, 841, 848, -1000, -1000, 841, 37,
	841, 36, 504, 504, 1884, 1834, 1789, 1659, 818, -109,
	-1000, 472, 10874, -1000, 1011, 926, 532, -1000, 722, -1000,
	-1000, 504, -1000, 1060, 1051, 472, -1000, -292, 1015, 639,
	-1000, -1000, 9414, 710, 211, 701, -1000, 1061, 19174, 10874,
	-1000, -1000, 10874, 846, -1000, 10874, -1000, -1000, -1000, 818,
	818, 818, 701, -1000, 1044, -292, -1000, 9051, -1000, -1000,
	-1000, -1000, 4165, -1000, 699, -1000, 841, -1000, -1000, -1000,
	19174, -3, 1097, 1901, -1000, -1000, -1000, -1000, -1000, 18,
	510, 18, 455, -1000, 446, 4927, 1121, 802, -1000, -1000,
	-1000, -1000, 1017, -1000, 6451, -1000, -1000, 839, 820, -1000,
	-1000, 6451, -1000, -1000, 675, -1000, -1000, 1901, -1000, 1018,
	-1000, -1000, 170, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11951, 11951, 11951, 11951, 11951, 1044, 502, 472, 11951,
	11951, -1000, -1000, -1000, -1000, 10874, 10874, -1000, 990, 818,
	-1000, 838, 19174, 19174, -1000, 19174, 1056, -1000, 472, 472,
	19174, 472, 15574, 19174, 19174, 14126, -292, -1000, 723, 221,
	19174, -1000, 666, 246, -1000, -123, 233, -1000, 233, 574,
	572, -1000, 1121, 818, 720, -1000, 313, 19174, 19174, -1000,
	-1000, 19174, -1000, -1000, -1000, 828, 828, 828, 828, 100,
	504, -1000, 828, 828, 472, 660, 1095, -1000, 818, 1121,
	202, -1000, -1000, 1044, 662, 652, -1000, 652, 652, 222,
	-1000, 221, -1000, 597, 310, 489, -1000, 114, 401, 988,
	-1000, 987, -1000, -1000, -1000, -1000, -1000, 99, 6451, 4546,
	646, -1000, -1000, -1000, -1000, -1000, -1000, 504, 106, -135,
	-1000, -1000, -1000, 19174, 639, 19174, -292, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 438, -1000, -1000, 19174, -1000, 473,
	-1000, -1000, 620, -1000, 19174, -1000, -1000, 625, -1000, 952,
	-126, -138, 630, -1000, -1000, -1000, 829, -1000, -1000, 99,
	965, -132, -1000, 950, -1000, 19174, -1000, 90, -1000, -133,
	613, 88, -136, 902, 818, -149, 830, -1000, 1081, 11233,
	-1000, -1000, 1083, 231, 231, 828, 504, -1000, -1000, -1000,
	122, 436, -1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1436, 1434, 57, 64, 69, 1430, 1417, 1416, 126,
	125, 120, 1415, 1414, 1413, 1407, 1402, 1401, 1399, 1398,
	1397, 1396, 1395, 1394, 1393, 1392, 1390, 1389, 1388, 1385,
	1384, 1383, 1381, 1380, 1138, 1377, 1375, 1374, 1373, 1371,
	114, 1368, 32, 1367, 1365, 1364, 1363, 1360, 1359, 1358,
	1348, 1344, 1342, 1340, 41, 71, 85, 14, 62, 1338,
	61, 1391, 38, 60, 68, 63, 1337, 1336, 35, 1333,
	1332, 82, 1331, 1330, 55, 1328, 1327, 53, 73, 81,
	1326, 7, 15, 1323, 1322, 1321, 1320, 33, 42, 1315,
	1314, 22, 1313, 1309, 116, 1306, 1304, 72, 25, 16,
	36, 12, 1301, 70, 1300, 8, 1297, 66, 1292, 1289,
	1288, 1286, 45, 1285, 67, 1283, 23, 24, 1282, 65,
	1279, 75, 31, 1278, 9, 1277, 1276, 17, 78, 54,
	76, 1274, 84, 1273, 1272, 428, 1270, 882, 43, 1269,
	1268, 129, 40, 1267, 86, 83, 1265, 1264, 1262, 1261,
	18, 1009, 1860, 21, 77, 1259, 1257, 1256, 2589, 28,
	59, 19, 1255, 1254, 1253, 34, 1231, 39, 1252, 1249,
	50, 1243, 1242, 1241, 1238, 1237, 1233, 1232, 302, 1230,
	1229, 1228, 29, 20, 1227, 1226, 79, 30, 1224, 1223,
	1221, 47, 74, 1220, 1219, 52, 1218, 80, 49, 1217,
	1212, 1210, 1209, 1191, 27, 6, 1190, 13, 1189, 11,
	1188, 26, 1180, 3, 1178, 10, 1176, 5, 0, 1163,
	4, 1162, 1155, 46, 1, 1154, 2, 37, 1151, 1143,
	1142, 88, 1141, 1136, 1644, 2276, 87, 1130, 109,
}

var yyR1 = [...]int{
	0, 232, 233, 233, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 218, 218, 218, 221,
	222, 20, 3, 3, 3, 3, 2, 2, 8, 4,
	5, 5, 9, 43, 44, 44, 10, 11, 11, 11,
	11, 236, 236, 71, 71, 72, 72, 121, 121, 12,
	13, 13, 130, 130, 129, 129, 129, 131, 131, 131,
	131, 168, 168, 133, 133, 132, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 21, 39, 39, 33, 33,
	33, 33, 36, 36, 36, 36, 36, 36, 52, 52,
	52, 220, 220, 219, 217, 217, 216, 216, 215, 22,
	22, 200, 202, 202, 201, 201, 201, 201, 192, 171,
	171, 171, 171, 174, 174, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 173, 173, 173, 173, 173, 175,
	175, 175, 175, 175, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 177,
	177, 177, 177, 177, 177, 177, 177, 191, 191, 178,
	178, 186, 186, 187, 187, 187, 184, 184, 185, 185,
	188, 188, 188, 180, 180, 181, 181, 189, 189, 182,
	182, 182, 183, 183, 183, 190, 190, 190, 190, 190,
	179, 179, 193, 193, 210, 210, 209, 209, 209, 35,
	199, 199, 206, 206, 206, 206, 206, 196, 196, 196,
	197, 197, 195, 195, 198, 198, 208, 208, 207, 194,
	194, 211, 211, 211, 211, 225, 226, 224, 224, 224,
	224, 224, 203, 203, 203, 204, 204, 204, 205, 205,
	205, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 214, 212, 212, 213, 213, 16, 23, 23,
	17, 17, 17, 17, 17, 17, 18, 18, 24, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	139, 139, 141, 141, 137, 137, 140, 140, 138, 138,
	138, 142, 142, 142, 143, 143, 169, 169, 169, 26,
	26, 28, 28, 29, 30, 30, 163, 163, 164, 164,
	31, 32, 45, 45, 45, 45, 45, 45, 47, 47,
	47, 7, 7, 7, 7, 46, 46, 46, 6, 6,
	27, 27, 27, 27, 19, 237, 40, 41, 41, 42,
	42, 42, 49, 49, 49, 48, 48, 48, 56, 56,
	59, 59, 59, 59, 59, 60, 60, 60, 60, 60,
	60, 55, 55, 58, 58, 58, 58, 58, 155, 155,
	155, 154, 154, 62, 62, 63, 63, 64, 64, 64,
	67, 65, 65, 65, 65, 104, 80, 80, 120, 120,
	119, 119, 122, 122, 66, 66, 66, 66, 68, 68,
	69, 69, 70, 70, 162, 162, 161, 161, 161, 160,
	160, 73, 73, 73, 75, 74, 74, 74, 74, 76,
	76, 78, 78, 77, 77, 77, 77, 79, 81, 81,
	81, 81, 81, 82, 82, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 136, 136, 84, 84, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 96, 96,
	96, 96, 96, 96, 85, 85, 85, 85, 85, 85,
	85, 54, 54, 97, 97, 97, 231, 231, 103, 98,
	98, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 95, 53, 53, 92,
	92, 92, 92, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 238, 238, 94, 93, 93, 93, 93, 93,
	93, 93, 50, 50, 50, 50, 50, 167, 167, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 108, 108, 51, 51, 106, 106, 107,
	109, 109, 105, 105, 105, 87, 87, 87, 87, 87,
	87, 87, 87, 89, 89, 89, 110, 110, 111, 111,
	112, 112, 113, 113, 114, 115, 115, 115, 116, 116,
	116, 116, 117, 117, 117, 86, 86, 86, 86, 118,
	118, 118, 118, 123, 123, 57, 57, 99, 99, 101,
	101, 100, 102, 124, 124, 127, 125, 125, 125, 128,
	128, 128, 128, 128, 128, 128, 126, 126, 126, 157,
	157, 157, 134, 134, 144, 144, 145, 145, 135, 135,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	147, 147, 147, 148, 148, 149, 149, 149, 156, 156,
	152, 152, 153, 153, 158, 158, 159, 159, 227, 228,
	229, 229, 230, 230, 230, 34, 37, 37, 38, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 234, 235,
	165, 166, 166, 166,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 2, 4, 8, 6, 7, 4, 6, 5, 8,
	1, 3, 8, 1, 1, 1, 11, 9, 8, 7,
	7, 1, 1, 1, 3, 1, 3, 0, 4, 3,
	5, 4, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 2, 2, 8, 5,
	7, 6, 8, 5, 5, 4, 0, 1, 4, 5,
	7, 4, 5, 5, 4, 4, 4, 3, 1, 1,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	5, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 7, 7, 4, 5, 4, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	4, 6, 5, 6, 4, 4, 3, 2, 3, 4,
	4, 3, 4, 4, 4, 4, 4, 4, 3, 2,
	7, 2, 3, 4, 3, 7, 5, 4, 2, 4,
	4, 3, 3, 5, 2, 6, 4, 3, 7, 4,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 5, 0, 1, 0, 1,
	2, 3, 0, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 5, 3,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 1, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	2, 1, 3, 3, 3, 3, 3, 7, 0, 3,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 5, 7, 3, 0, 5,
	4, 5, 5, 0, 2, 1, 3, 3, 3, 2,
	3, 2, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 1, 2, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	3, 2, 1, 1, 1, 1, 4, 1, 1, 4,
	5, 5, 6, 4, 4, 6, 6, 6, 8, 8,
	8, 8, 9, 8, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 5, 4, 1,
	3, 3, 5, 0, 5, 0, 2, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	0, 1, 0, 1, 3, 5, 2, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -232, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -24, -25, -26, -28, -29,
	-30, -31, -32, -6, -27, -19, -20, -33, -36, -34,
	-35, -37, -38, -21, -4, -234, 6, 7, -43, -44,
	10, 30, -22, 123, 124, 126, 125, 159, 127, 152,
	53, 173, 174, 176, 177, 178, 179, -47, 157, 158,
	31, 32, 129, 34, -39, 381, 370, 382, 383, 374,
	57, 8, 9, 262, 154, 153, 25, 384, -233, 386,
	-42, 5, -112, 15, -3, -40, -237, -40, -40, -40,
	-40, -40, -200, -202, 57, 96, -149, 133, 77, -132,
	254, 130, 131, -133, 137, -152, 371, 372, 373, -218,
	-151, 60, 61, 62, 272, 145, 304, 305, 364, 173,
	187, 181, 208, 200, 273, 306, 146, 198, 201, 241,
	143, 307, 228, 235, 71, 176, 250, 308, 155, 196,
	192, 29, 309, 281, 190, 27, 310, 237, 213, 311,
	277, 239, 191, 236, 129, 312, 148, 141, 313, 214,
	218, 314, 242, 315, 316, 317, 384, 185, 186, 365,
	318, 144, 244, 212, 375, 376, 28, 142, 33, 274,
	37, 163, 245, 216, 319, 211, 207, 366, 320, 321,
	322, 323, 210, 184, 206, 41, 220, 219, 221, 240,
	383, 203, 324, 325, 326, 149, 327, 193, 18, 328,
	329, 330, 331, 332, 248, 158, 333, 161, 334, 335,
	336, 337, 338, 339, 238, 215, 217, 138, 165, 234,
	382, 276, 340, 246, 189, 341, 150, 374, 162, 157,
	249, 151, 342, 343, 344, 345, 346, 385, 347, 367,
	348, 177, 368, 349, 350, 351, 352, 172, 369, 243,
	252, 40, 225, 353, 183, 370, 140, 354, 174, 169,
	230, 204, 164, 355, 356, 194, 195, 209, 182, 205,
	175, 166, 159, 357, 251, 226, 278, 202, 199, 170,
	358, 167, 168, 359, 231, 232, 171, 275, 247, 197,
	227, -135, 133, 254, 130, 232, 135, 131, 131, 132,
	133, -132, 254, 130, 371, 131, -77, -158, -218, -151,
	371, 372, 373, 133, 131, 114, 201, 241, 123, 229,
	237, -141, 238, 165, -169, 131, -137, 228, 231, 232,
	171, 364, 175, 239, 243, 242, 233, -158, 175, -163,
	180, -152, 178, -137, -45, 360, 127, -165, -165, 230,
	230, -165, -98, -61, -83, 80, -88, 29, 23, -87,
	-84, -105, -102, -103, 114, 115, 117, 116, 118, 103,
	104, 111, 81, 119, -92, -90, -91, -93, 64, 63,
	72, 65, 66, 67, 68, 73, 74, 75, -152, -158,
	-100, -234, 47, 48, 263, 264, 265, 266, 271, 267,
	83, 36, 253, 261, 260, 259, 257, 258, 255, 256,
	269, 270, 136, 254, 130, 109, 262, -218, -151, 364,
	378, -40, 65, -40, -40, 371, -5, -4, -234, 6,
	20, 21, -116, 17, 16, -42, -49, -59, 42, 43,
	-60, 21, 35, 46, 44, -41, -58, 105, -61, -158,
	-135, -135, 11, -71, -72, -77, -79, -158, -125, -168,
	175, -128, 243, 242, -153, -126, -152, -150, 241, 201,
	240, 128, 279, 79, 22, 24, 223, 82, 114, 16,
	83, 113, 263, 123, 51, 280, 255, 256, 253, 265,
	266, 254, 229, 10, 282, 25, 153, 21, 35, 107,
	125, 86, 87, 156, 381, 23, 154, 75, 285, 19,
	54, 11, 13, 286, 287, 14, 136, 135, 98, 132,
	49, 8, 119, 26, 95, 45, 288, 289, 290, 291,
	292, 47, 96, 17, 257, 258, 31, 293, 271, 160,
	109, 52, 38, 80, 294, 295, 73, 296, 76, 55,
	77, 15, 50, 297, 298, 299, 300, 97, 126, 262,
	48, 301, 130, 6, 268, 30, 152, 46, 302, 131,
	85, 269, 270, 134, 74, 5, 137, 32, 9, 53,
	56, 259, 260, 261, 36, 84, 12, 303, 78, -201,
	96, -192, -218, -77, 132, -77, 262, 133, -145, 136,
	-145, -145, 131, 131, -77, -218, -218, 123, 125, 128,
	55, -23, -77, -144, 136, -218, -144, 133, -144, -144,
	-77, 120, -77, -218, 30, -142, 96, 12, 254, -218,
	165, 131, 166, 133, -166, -234, -153, -196, -218, 8,
	132, 33, 144, -166, 169, 170, -166, -140, -139, 235,
	236, 230, 234, 12, 170, 230, 168, -198, -218, 244,
	134, -152, -141, -7, -3, -10, -9, -11, 88, -165,
	-165, 58, 79, 77, 78, 95, -231, 69, -61, -85,
	98, 80, 96, 97, 82, 100, 99, 110, 103, 104,
	105, 106, 107, 108, 109, 101, 102, 113, 88, 89,
	90, 91, 92, 93, 94, -136, -234, -103, -234, 121,
	122, -88, -88, -88, -88, -88, -88, -88, -88, -88,
	-88, 64, -234, 120, -2, -98, -4, -234, -234, -234,
	-234, -234, -234, -234, -234, -108, -61, -234, -238, -94,
	-234, -238, -94, -238, -94, -238, -234, -238, -94, -238,
	-94, -238, -238, -94, -234, -234, -234, -234, -234, -234,
	-234, 366, 367, 379, 380, -77, -77, 64, 133, -112,
	-3, -40, -117, 19, 31, -61, -113, -114, -61, -5,
	38, -55, -58, -60, 42, 43, 70, 11, -231, -155,
	-154, 22, -152, 64, 120, -78, 26, -77, -63, -64,
	-65, -66, -67, -80, -104, -234, -95, -77, -53, 375,
	376, -77, -71, -236, 58, 11, 56, -236, 58, 120,
	58, 175, -128, -130, -129, 244, 246, 88, 134, -157,
	-152, 64, 29, 30, 59, 58, -77, -171, -174, -176,
	-175, -177, -172, -173, 198, 199, 114, 202, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 30, 155,
	194, 195, 196, 197, 214, 215, 216, 217, 218, 219,
	220, 221, 181, 200, 273, 182, 183, 184, 185, 186,
	187, 189, 190, 191, 192, 193, -218, 22, 133, -132,
	-77, -218, 80, -218, -77, -145, -77, -166, -166, -166,
	167, 167, 131, 131, 172, -77, 58, 134, -71, 23,
	55, -77, -144, -218, -218, -159, -158, -150, -166, -142,
	64, -61, -166, -166, -166, -77, -166, -166, -197, 11,
	98, -197, -142, -40, -166, -166, 11, -138, 11, 98,
	-61, -143, 96, 55, 245, -164, 178, -77, 212, 361,
	362, 363, -61, -61, -61, -61, -96, 73, 80, 74,
	75, 69, -88, -97, -100, -103, 69, 98, 96, 97,
	82, -88, -88, -88, -88, -88, -88, -88, -88, -88,
	-88, -88, -88, -88, -88, -88, -167, -218, 64, -218,
	-87, -87, -152, -56, 21, 35, -55, -153, -159, -150,
	-42, -235, 59, -235, -112, -55, -55, -61, -61, -105,
	64, -55, -105, 64, -55, -55, -48, 21, 35, -106,
	-107, 84, -105, -152, -158, -235, -88, -152, -152, -55,
	-56, -56, -55, -55, -198, -198, -218, -218, 64, -230,
	-227, -221, 61, -77, -116, -235, 9, 98, 58, 18,
	58, -115, 24, 25, -112, -89, -152, 65, 68, -62,
	58, 11, -60, -77, -154, 105, -159, -121, 161, -77,
	30, 58, -73, -75, -74, -76, 45, 49, 51, 46,
	47, 48, 52, -162, 22, -63, -34, -3, -234, -161,
	-160, 22, -158, 64, -161, 161, -234, -121, 56, -63,
	-77, -63, -79, -158, 105, -128, -130, 58, 245, 247,
	248, 55, 76, -61, 55, 76, -61, -183, 113, -203,
	-204, -205, -153, 64, 65, -192, -193, -194, -206, 147,
	-211, 138, 140, 137, -195, 148, 132, 28, 59, -188,
	73, 80, -184, 226, -178, 57, -178, -178, -178, -178,
	-182, 201, -182, -182, -182, 57, 57, -178, -178, -178,
	-186, 57, -186, -186, -187, 57, -187, -156, 56, -3,
	-77, 133, 22, -166, 23, -166, -77, -146, 128, 125,
	126, -214, 124, 223, 201, 71, 29, 15, 263, 161,
	278, -218, 162, -77, -77, -77, -77, -77, 128, 125,
	-77, -77, -77, -166, -77, 120, -77, -77, -78, -77,
	-142, -158, -158, 64, -77, -152, -46, -152, 64, 73,
	74, 75, -97, -88, -88, -88, -54, 156, 79, -235,
	-235, -55, -55, -234, 120, -5, -116, -235, -235, 58,
	56, 22, 11, 11, -235, 11, 11, -235, -235, -55,
	-109, -107, 86, -61, -235, 120, -235, 58, 58, -235,
	-235, -235, -235, -235, -52, 365, 369, 368, -218, 64,
	58, -229, -228, -222, 62, 88, -117, 40, -61, -61,
	-114, -116, -134, 19, 11, 36, 36, -82, 12, -58,
	-63, -60, 120, -86, 36, -3, -234, -234, -124, -127,
	-105, -64, -65, -65, -64, -65, 45, 45, 45, 50,
	45, 50, 45, -74, -158, -235, -235, -235, -3, -160,
	-81, 53, 135, 54, -234, -56, -82, -63, -82, -82,
	120, -129, -131, 249, 246, 252, -218, 64, 58, -205,
	88, 57, -218, 28, -195, -195, -198, -198, 28, -180,
	29, 73, -185, 227, 65, -182, -182, -183, 30, -183,
	-183, -183, -191, 64, -191, 65, 65, 55, -152, 22,
	-77, -3, -165, -223, 143, 139, 147, 148, 141, 60,
	61, 62, 132, 28, 138, 140, 161, 137, -223, -147,
	-148, 134, 22, 132, 28, 161, -220, 56, 167, 223,
	167, 134, -166, -166, -159, -138, -142, -120, 57, -138,
	-54, 79, -88, -88, -235, -235, -56, -153, -112, -117,
	-170, 114, 198, 155, 196, 192, 189, 212, 203, 225,
	194, 226, -167, -170, -88, -88, -88, -88, 272, -112,
	87, -61, 85, -153, -88, -88, 64, -227, 88, -87,
	41, -117, -77, -110, 13, -61, 105, -123, 55, -99,
	-101, -100, -234, -118, -152, -122, -152, -62, 58, 88,
	-69, -68, 55, 56, -70, 55, -68, 45, 45, 132,
	132, 132, -122, -235, -112, -82, -57, 385, -57, 246,
	250, 251, -204, -205, -208, -207, -152, -211, -198, -198,
	57, -181, 55, -88, 59, -183, -183, -218, 114, 59,
	58, 59, 58, 59, 58, -77, -3, 22, -165, -165,
	-77, -165, -152, -217, 275, -219, -218, -152, -152, -152,
	-77, 120, -142, -142, -119, -152, -142, -88, -235, -116,
	-235, -178, -178, -178, -187, -178, 186, -178, 186, -235,
	-235, 19, 19, 19, 19, -234, -51, 268, -61, 58,
	58, 64, -87, -235, -111, 14, 16, -57, 27, 58,
	-235, -235, 58, 120, -235, 58, -82, -127, -61, -61,
	57, -61, -234, -234, -234, -235, -116, -57, -55, 59,
	58, -178, -119, -189, 223, 9, -182, 64, -182, 65,
	65, -166, -3, 26, -216, -215, -153, 57, 56, -159,
	59, 58, -117, -182, -218, -88, -88, -88, -88, -88,
	-116, 64, -88, -88, -61, -98, 28, -101, 36, -3,
	-152, -152, -152, -112, -119, -119, -235, -119, -119, -161,
	-57, -210, -209, 56, 142, 71, -207, 59, -190, 138,
	28, 137, -91, -183, -183, 59, 59, -234, 58, 88,
	-119, -77, -152, -235, -235, -235, -235, -50, 98, 275,
	-235, -235, -235, 9, -99, 120, -116, 59, -235, -235,
	-235, -81, -209, -218, -199, 88, 64, 150, -179, 71,
	28, 28, -212, -213, 161, -215, -205, 59, -235, 273,
	52, 276, -124, -152, -57, 65, -77, 64, -235, 58,
	-152, -220, 41, 274, 277, 57, -213, 36, -217, 41,
	-119, 163, 275, 59, 164, 276, -225, -226, 55, -234,
	277, -226, 55, 10, 9, -88, 160, -224, 151, 146,
	149, 30, -224, -235, -235, 145, 29, 73,
}

var yyDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 670, 0, 395, 395, 395, 395,
	395, 395, 0, 745, 728, 0, 0, 0, 0, -2,
	360, 361, 0, 363, -2, 0, 0, -2, 1080, 1080,
	0, 0, 1080, 0, 0, 395, 0, 395, 395, 0,
	1078, 53, 54, 55, 378, 379, 380, 97, 1, 3,
	0, 399, 678, 0, 0, -2, 397, 0, 728, 728,
	0, 0, 86, 87, 0, 0, 0, 1067, 0, 0,
	726, 726, 726, 0, 746, 747, -2, -2, -2, 750,
	751, 36, 37, 38, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 0, 0, 0, 0, 0, 729, 0, 724, 0,
	724, 0, 724, 724, 85, 0, 307, 483, 754, 755,
	965, 1045, 1046, 1067, 0, 0, 0, 351, 0, 1081,
	319, 0, 321, 1081, 0, 1081, 0, 328, 0, 0,
	334, 234, 0, 343, 357, 358, 345, 359, 362, 0,
	367, 370, 0, 342, 0, 0, 377, 390, 391, 1080,
	1080, 394, 41, 539, 495, 0, 502, -2, 0, 541,
	542, 543, 544, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 572, 573, 574, 575, 655, 656,
	657, 658, 659, 660, 661, 662, 506, 507, 652, 0,
	702, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	643, 0, 612, 612, 612, 612, 612, 612, 612, 612,
	0, 0, 0, 0, 0, 0, 0, -2, -2, 0,
	0, 0, 219, 766, 0, 0, 670, 50, 0, 395,
	400, 401, 682, 0, 0, 0, 0, 0, -2, -2,
	411, 417, 418, 419, 420, 396, 0, 423, 428, 0,
	0, 0, 0, 0, 0, 63, 65, 483, 69, 0,
	1056, 706, -2, -2, 0, 0, 752, 753, -2, 901,
	-2, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 0,
	0, 124, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 726, 0, 1081, 1081, 1081, 0, 0, 0,
	0, 297, 0, 0, 0, 0, 0, 724, 0, 0,
	306, 0, 308, 1081, 351, 311, 0, 0, 1081, 1081,
	1081, 0, 1081, 1081, 318, 1082, 1083, 0, 351, 395,
	227, 228, 229, 322, 1081, 1081, 324, 0, 348, 346,
	347, 340, 341, 0, 354, 331, 332, 337, 235, 0,
	368, 371, 0, 389, 381, 382, 383, 384, 0, 392,
	393, 0, 0, 0, 0, 0, 501, 536, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 524, 525,
	526, 527, 528, 529, 530, 503, 0, 517, 0, 0,
	0, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	0, 571, 408, 0, 0, 0, 670, 0, 0, 0,
	0, 0, 0, 0, 405, 0, 644, 0, 596, 604,
	0, 597, 605, 598, 606, 599, 0, 600, 607, 601,
	608, 602, 603, 609, 0, 0, 0, 408, 408, 0,
	0, 234, 234, 0, 107, 762, 767, 768, 0, 678,
	0, 410, 42, 0, 0, 679, 671, 672, 675, 670,
	0, 433, 421, 412, 415, 416, 398, 0, -2, 425,
	429, 0, 431, 432, 0, 67, 0, 482, 0, 435,
	437, 438, 439, 441, 464, 0, 466, 466, 0, -2,
	-2, -2, 0, 0, 0, 61, 62, 0, 0, 0,
	0, 1056, 707, 71, 72, 0, 0, 0, 0, 202,
	719, 720, 721, 717, 252, 0, 0, 190, 186, 130,
	131, 132, 179, 134, 179, 179, 179, 179, 199, 199,
	199, 199, 162, 163, 164, 165, 166, 0, 0, 149,
	179, 179, 179, 153, 169, 170, 171, 172, 173, 174,
	175, 176, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 181, 181, 181, 183, 183, 748, 0, 0, 0,
	0, 1081, 0, 1081, 119, 0, 0, 266, 268, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 725,
	0, 1081, 0, 304, 305, 484, 756, 757, 309, 310,
	352, 353, 312, 313, 314, 315, 316, 317, 0, 230,
	231, 0, 336, 0, 323, 327, 0, 351, 0, 0,
	329, 330, 0, 0, 339, 0, 369, 385, 373, 374,
	375, 376, 540, 496, 497, 498, 500, 518, 0, 520,
	522, 537, 508, 509, 533, 534, 535, 0, 0, 0,
	0, 531, 513, 0, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 560, 627, 628, 0,
	558, 559, 570, 0, 0, 0, 409, 653, 0, -2,
	0, 538, 1079, 701, 678, 0, 0, 0, 0, 543,
	655, 0, 543, 655, 0, 0, 0, 406, 407, 650,
	647, 0, 0, 652, 0, 613, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 101, 104, 105, 106, 760,
	763, 0, 39, 95, 682, 51, 683, 0, 0, 0,
	0, 674, 676, 677, 678, 0, 663, 0, 0, 493,
	0, 0, 413, 48, 430, 426, 0, 0, 0, 481,
	0, 0, 0, 0, 0, 0, 471, 0, 0, 474,
	0, 0, 0, 0, 465, 0, 0, 0, 0, 440,
	467, 0, 469, 470, 488, 991, 408, 493, 0, 493,
	64, 493, 66, 0, 487, 708, 70, 0, 0, 75,
	76, 709, 710, 711, 712, 713, 714, 715, 0, 121,
	253, 255, 258, 259, 260, 125, 126, 127, 0, 0,
	240, 0, 0, 234, 234, 0, 232, 233, 123, 193,
	191, 0, 188, 187, 133, 0, 199, 199, 156, 157,
	202, 0, 202, 202, 202, 0, 0, 150, 151, 152,
	144, 0, 145, 146, 147, 0, 148, 0, 0, 89,
	0, 0, 0, 93, 727, 94, 120, 1080, 0, 0,
	740, 267, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 0, 111, 271, 273, 272, 276, 0, 0,
	0, 298, 1081, 302, 1081, 0, 348, 351, 448, 348,
	326, 349, 350, 355, 333, 365, 388, 386, 387, 519,
	521, 523, 510, 531, 514, 0, 511, 0, 0, 505,
	579, 0, 0, 408, 0, 670, 682, 583, 584, 0,
	0, 0, 0, 0, 620, 0, 0, 621, 0, 670,
	0, 648, 0, 0, 595, 0, 614, 0, 0, 615,
	616, 617, 618, 619, 99, 108, 109, 110, 102, 103,
	0, 765, 761, 0, 40, 0, 44, 0, 680, 681,
	673, 682, 0, 722, 723, 664, 665, 666, 0, 422,
	434, 414, 0, 693, 0, 686, 0, 0, 433, 703,
	0, 436, 460, 462, 0, 457, 472, 473, 475, 0,
	477, 0, 479, 480, 442, 443, 444, 445, 0, 468,
	446, 0, 0, 0, 0, 0, 670, 493, 695, 695,
	0, 73, 74, 0, 0, 80, 203, 204, 0, 256,
	0, 0, 0, 222, 234, 234, 225, 226, 0, 195,
	0, 192, 129, 189, 0, 202, 202, 158, 0, 159,
	160, 161, 0, 177, 0, 0, 0, 0, 749, 0,
	0, 91, 261, 1080, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 1080, 0,
	1080, 741, 742, 743, 744, 0, 114, 0, 0, 0,
	0, 0, 301, 303, 485, 351, 335, 351, 0, 351,
	512, 0, 532, 515, 580, 581, 0, 654, 678, 46,
	0, 179, 179, 632, 179, 183, 635, 636, 179, 638,
	179, 641, 0, 0, 0, 0, 0, 0, 0, 645,
	594, 651, 0, 653, 0, 0, 0, 764, 0, 758,
	684, 44, 45, 668, 0, 494, 427, 695, 0, 685,
	697, 699, 0, 0, 689, 0, 452, 493, 0, 0,
	454, 461, 0, 0, 455, 0, 456, 476, 478, 0,
	0, 0, 0, 576, 678, 695, 59, 0, 60, 77,
	78, 79, 254, 257, 0, 236, 179, 239, 223, 224,
	0, 197, 0, 194, 180, 154, 155, 200, 201, 199,
	0, 199, 0, 184, 0, 1081, 90, 0, 262, 263,
	264, 265, 0, 270, 0, 112, 113, 0, 0, 275,
	299, 0, 320, 338, 0, 450, 325, 516, 582, 682,
	585, 629, 199, 633, 634, 637, 639, 640, 642, 587,
	586, 0, 0, 0, 0, 0, 678, 0, 649, 0,
	0, 100, 759, 43, 49, 0, 0, 52, 0, 0,
	700, 0, 0, 0, 68, 0, 670, 704, 705, 458,
	0, 463, 0, 0, 0, 466, 695, 58, 696, 213,
	0, 238, 0, 205, 198, 0, 202, 178, 202, 0,
	0, 88, 92, 0, 115, 116, 0, 0, 0, 486,
	449, 0, 47, 630, 631, 0, 0, 0, 0, 622,
	0, 646, 0, 0, 669, 667, 0, 698, 0, 688,
	691, 690, 453, 678, 0, 0, 490, 0, 0, 488,
	57, 212, 214, 0, 220, 0, 237, 0, 210, 0,
	207, 209, 196, 167, 168, 182, 185, 0, 0, 0,
	0, 277, 451, 588, 590, 589, 591, 0, 0, 0,
	593, 610, 611, 0, 687, 0, 695, 459, 489, 491,
	492, 447, 215, 216, 0, 221, 218, 0, 128, 0,
	206, 208, 0, 293, 0, 117, 118, 111, 592, 0,
	0, 0, 694, 692, 56, 217, 0, 211, 292, 0,
	0, 114, 623, 0, 626, 0, 294, 0, 274, 624,
	0, 0, 0, 241, 0, 0, 242, 243, 0, 0,
	625, 244, 0, 0, 0, 0, 0, 245, 247, 248,
	0, 0, 246, 295, 296, 249, 250, 251,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 386,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:382
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:387
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:388
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:426
		{
			setParseTree(yylex, nil)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:436
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:452
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:464
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:472
		{
			yyVAL.selStmt = Unionize(yyDollar[2].selStmt, yyDollar[4].selStmt, yyDollar[3].str, yyDollar[5].orderBy, yyDollar[6].limit, yyDollar[7].str)
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:476
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:480
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:503
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:511
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:517
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:525
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:531
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:535
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:542
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.SelectExprs = yyDollar[8].selectExprs
			yyVAL.statement = ins
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.str = InsertStr
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
			yyVAL.str = UpdateStr
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.str = ReplaceStr
		}
	case 56:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:573
		{
			yyVAL.statement = &Update{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), OrderBy: yyDollar[9].orderBy, Limit: yyDollar[10].limit, SelectExprs: yyDollar[11].selectExprs}
		}
	case 57:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:579
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit, SelectExprs: yyDollar[9].selectExprs}
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), SelectExprs: yyDollar[8].selectExprs}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), SelectExprs: yyDollar[7].selectExprs}
		}
	case 60:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), SelectExprs: yyDollar[7].selectExprs}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:597
		{
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:605
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:611
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:615
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:620
		{
			yyVAL.partitions = nil
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:624
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:630
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:636
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:640
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:646
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:650
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:656
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:660
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:664
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:670
		{
			yyVAL.str = RepeatableRead
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:674
		{
			yyVAL.str = ReadCommitted
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:678
		{
			yyVAL.str = ReadUncommitted
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:682
		{
			yyVAL.str = Serializable
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:688
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:692
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:698
		{
			yyVAL.str = TempStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.str = TemporaryStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.str = MaterializedStr
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:714
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:719
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:725
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:730
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName(), SelectStatement: yyDollar[5].selStmt}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:734
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName(), SelectStatement: yyDollar[7].selStmt, OrReplace: true}
		}
	case 91:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:738
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[4].tableName.ToViewName(), SelectStatement: yyDollar[6].selStmt, Modifier: yyDollar[2].str}
		}
	case 92:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:742
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[6].tableName.ToViewName(), SelectStatement: yyDollar[8].selStmt, OrReplace: true, Modifier: yyDollar[4].str}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:746
		{
			var notExists bool
			if yyDollar[3].byt != 0 {
				notExists = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: notExists}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:754
		{
			var notExists bool
			if yyDollar[3].byt != 0 {
				notExists = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: notExists}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:764
		{
			yyVAL.statement = &RefreshMaterializedView{ViewName: yyDollar[4].tableName}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:769
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:779
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:784
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str}
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:789
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str, KeyFilePath: string(yyDollar[6].bytes), KeyEnvVar: string(yyDollar[7].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:794
		{
			yyVAL.statement = &AuthRevoke{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:800
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: yyDollar[5].colIdent.GetRawVal()}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:805
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: string(yyDollar[5].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:810
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:815
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal()}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:820
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: string(yyDollar[4].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.str = InteractiveStr
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:835
		{
			yyVAL.str = ServiceAccountStr
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.str = ServiceAccountStr
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:845
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:849
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:860
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:865
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:876
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:882
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:888
		{
			var notExists bool
			if yyDollar[3].byt != 0 {
				notExists = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: notExists}
			setDDL(yylex, yyVAL.ddl)
		}
	case 120:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:897
		{
			var notExists bool
			if yyDollar[4].byt != 0 {
				notExists = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[5].tableName, IfNotExists: notExists, Modifier: yyDollar[2].str}
			setDDL(yylex, yyVAL.ddl)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:908
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:915
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:919
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:930
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:934
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:938
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 128:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:944
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1069
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1073
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1077
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1081
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1085
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1089
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1093
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1097
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1101
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1105
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1109
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1113
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1117
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1121
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1132
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1136
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1140
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1156
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1171
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1176
		{
			yyVAL.sqlVal = nil
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1180
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1185
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1189
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1197
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1201
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1207
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1215
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1224
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1234
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1238
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1242
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1247
		{
			yyVAL.optVal = nil
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1251
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1256
		{
			yyVAL.optVal = nil
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1260
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1265
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1269
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1282
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1287
		{
			yyVAL.str = ""
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1291
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1295
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1300
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1304
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1308
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1312
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1316
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1321
		{
			yyVAL.sqlVal = nil
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1325
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1331
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1335
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1341
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1345
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1351
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1355
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1360
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1366
		{
			yyVAL.statement = &Sleep{Duration: NewIntVal(yyDollar[2].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1372
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1376
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1382
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1390
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1394
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1398
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1412
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1419
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1423
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1433
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1438
		{
			yyVAL.str = ""
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1442
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1448
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1452
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1458
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1464
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1468
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 241:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1475
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 242:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1479
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 243:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1483
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1487
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1493
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1499
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1505
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1509
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1513
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1517
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1521
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1526
		{
			yyVAL.str = ""
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1530
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1534
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1542
		{
			yyVAL.str = yyDollar[1].str
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1550
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1556
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1564
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1582
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1587
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1596
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 270:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1630
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1651
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1661
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1694
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1704
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 295:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1710
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 296:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1714
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1726
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1730
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1738
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists, Modifier: "table"}
		}
	case 301:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1746
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1751
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1759
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[5].tableName.ToViewName()}, IfExists: exists, Modifier: yyDollar[2].str}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1777
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &OtherRead{}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1792
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1797
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1802
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1812
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1816
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1820
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1824
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1828
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1832
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1836
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1840
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1845
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1849
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1853
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1861
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1866
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1876
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1884
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1888
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1893
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1897
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1901
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1905
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1909
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1926
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), ShowTablesOpt: showTablesOpt}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: yyDollar[3].str}
		}
	case 338:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1936
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Comments: Comments(yyDollar[4].bytes2), Type: string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt, Columns: yyDollar[6].columns}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1942
		{
			yyVAL.statement = &Show{Type: "TRANSACTION_ISOLATION_LEVEL"}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1958
		{
			yyVAL.str = ""
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.str = "extended "
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1968
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.str = "full "
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1978
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1982
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1988
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1992
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1996
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2002
		{
			yyVAL.showFilter = nil
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2006
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2010
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2016
		{
			yyVAL.showFilter = nil
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2020
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2026
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2030
		{
			yyVAL.str = SessionStr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2034
		{
			yyVAL.str = GlobalStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2040
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.statement = &Begin{}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2054
		{
			yyVAL.statement = &Begin{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.statement = &Commit{}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.statement = &Rollback{}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2070
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2075
		{
			yyVAL.empty = struct{}{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.empty = struct{}{}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2080
		{
			yyVAL.empty = struct{}{}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2082
		{
			yyVAL.empty = struct{}{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2087
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2093
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2098
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = JSONStr
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2106
		{
			yyVAL.str = TreeStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = VitessStr
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = TraditionalStr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = AnalyzeStr
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2155
		{
			yyVAL.str = ""
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2159
		{
			yyVAL.str = ""
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.str = ""
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2169
		{
			yyVAL.statement = &DescribeTable{Full: string(yyDollar[2].str), Extended: string(yyDollar[3].str), Table: yyDollar[4].tableName}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2179
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2183
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2187
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2191
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2197
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2201
		{
			setAllowComments(yylex, true)
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2205
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2211
		{
			yyVAL.bytes2 = nil
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2215
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.str = UnionStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.str = UnionAllStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2229
		{
			yyVAL.str = UnionDistinctStr
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2234
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2242
		{
			yyVAL.str = SQLCacheStr
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2247
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.str = DistinctStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.str = DistinctStr
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2260
		{
			yyVAL.selectExprs = nil
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2264
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2269
		{
			yyVAL.strs = nil
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2273
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2277
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2281
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2285
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.str = SQLCacheStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2299
		{
			yyVAL.str = DistinctStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.str = DistinctStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.str = StraightJoinHint
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2311
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2317
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2321
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2327
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2331
		{
			concatamer := ListArgConcatamer(yyDollar[2].listArgsConcat)
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: NewColIdent(concatamer.String())}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2344
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2349
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2353
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2357
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2369
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2373
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2379
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2383
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2394
		{
			yyVAL.tableExpr = &TableValuedFuncTableExpr{FuncExpr: yyDollar[1].expr, As: yyDollar[2].tableIdent}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2400
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2404
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2408
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			exec := yyDollar[2].statement.(*Exec)
			yyVAL.tableExpr = &ExecSubquery{Exec: exec}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2425
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 447:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2429
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2434
		{
			yyVAL.columns = nil
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2445
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2449
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2455
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2472
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2476
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2480
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2484
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2490
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2492
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2496
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2498
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2502
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2504
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2507
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2509
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2512
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2516
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2520
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2527
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2533
		{
			yyVAL.str = JoinStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2537
		{
			yyVAL.str = JoinStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			yyVAL.str = JoinStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2547
		{
			yyVAL.str = StraightJoinStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.str = LeftJoinStr
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2557
		{
			yyVAL.str = LeftOuterJoinStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2561
		{
			yyVAL.str = RightJoinStr
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2565
		{
			yyVAL.str = RightOuterJoinStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2571
		{
			yyVAL.str = NaturalJoinStr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2575
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2585
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2589
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2595
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2599
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2603
		{
			yyVAL.tableName = TableName{QualifierSecond: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 486:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2607
		{
			yyVAL.tableName = TableName{QualifierThird: yyDollar[1].tableIdent, QualifierSecond: yyDollar[3].tableIdent, Qualifier: yyDollar[5].tableIdent, Name: yyDollar[7].tableIdent}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2613
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2618
		{
			yyVAL.indexHints = nil
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2622
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2626
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2630
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2634
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = nil
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2669
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = &UnaryCastConcatamerExpr{Expr: yyDollar[1].expr, CastConcatamer: ListArgConcatamer(yyDollar[2].listArgsConcat)}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2677
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = ""
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2691
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2697
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2707
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2711
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2715
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2719
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2727
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.str = IsNullStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2753
		{
			yyVAL.str = IsNotNullStr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.str = IsTrueStr
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2761
		{
			yyVAL.str = IsNotTrueStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.str = IsFalseStr
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2769
		{
			yyVAL.str = IsNotFalseStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2775
		{
			yyVAL.str = EqualStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2779
		{
			yyVAL.str = LessThanStr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2783
		{
			yyVAL.str = GreaterThanStr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2787
		{
			yyVAL.str = LessEqualStr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2791
		{
			yyVAL.str = GreaterEqualStr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2795
		{
			yyVAL.str = NotEqualStr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2799
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = nil
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2814
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2818
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2822
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			yyVAL.listArgsConcat = []ListArg{ListArg(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2831
		{
			yyVAL.listArgsConcat = append(yyDollar[1].listArgsConcat, ListArg(yyDollar[2].bytes))
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2837
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2843
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2847
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2889
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2897
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2933
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2937
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2941
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2961
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2983
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2991
		{
			inputStr := string(yyDollar[2].bytes)
			stringList := strings.Split(inputStr, " ")
			if len(stringList) != 2 {
				yylex.Error("the interval string '" + inputStr + "' is not valid")
				return 1
			}
			stringExpr := NewStrVal([]byte(stringList[0]))
			yyVAL.expr = &IntervalExpr{Expr: stringExpr, Unit: stringList[1]}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3008
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(yyDollar[1].str), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3014
		{
			yyVAL.str = JsonArrayElementsTextStr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			yyVAL.str = JsonEachStr
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3028
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3032
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3036
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 582:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3040
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3050
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3054
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3058
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3062
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 588:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3070
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 589:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3074
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 590:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3078
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 591:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 592:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3086
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 593:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3090
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3094
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3098
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3108
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3112
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3116
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3121
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3126
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3131
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3137
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3142
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3151
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3155
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3160
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3165
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3170
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3174
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 611:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3178
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3188
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3198
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3202
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3206
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3210
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3218
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3228
		{
			yyVAL.str = ""
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3232
		{
			yyVAL.str = BooleanModeStr
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3236
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 625:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3240
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3244
		{
			yyVAL.str = QueryExpansionStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3250
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3254
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3260
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3264
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3268
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3272
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3276
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3280
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3286
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3290
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3294
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3298
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3302
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3306
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3310
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3314
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3319
		{
			yyVAL.expr = nil
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3323
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3328
		{
			yyVAL.str = string("")
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3332
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3338
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3342
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3348
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3353
		{
			yyVAL.expr = nil
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3357
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3363
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3367
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 654:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3371
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3377
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3381
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3385
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3389
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3393
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3397
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3401
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			yyVAL.expr = &NullVal{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3411
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3420
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3424
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3429
		{
			yyVAL.exprs = nil
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3433
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3438
		{
			yyVAL.expr = nil
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3442
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3447
		{
			yyVAL.orderBy = nil
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3451
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3457
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3461
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3467
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3472
		{
			yyVAL.str = AscScr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3476
		{
			yyVAL.str = AscScr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3480
		{
			yyVAL.str = DescScr
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3485
		{
			yyVAL.limit = nil
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3489
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3493
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3497
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3502
		{
			yyVAL.str = ""
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3506
		{
			yyVAL.str = ForUpdateStr
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3510
		{
			yyVAL.str = ShareModeStr
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3523
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3527
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3531
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3535
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3541
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3545
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3549
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3553
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3558
		{
			yyVAL.updateExprs = nil
		}
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3562
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3567
		{
			yyVAL.selectExprs = nil
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3571
		{
			yyVAL.selectExprs = yyDollar[2].selectExprs
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3577
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3581
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3587
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3591
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3597
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3603
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3613
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3617
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3623
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3629
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3633
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3638
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3644
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3648
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3652
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3656
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3660
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3664
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3668
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3675
		{
			yyVAL.bytes = []byte("charset")
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3682
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3686
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3690
		{
			yyVAL.expr = &Default{}
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3699
		{
			yyVAL.byt = 0
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3701
		{
			yyVAL.byt = 1
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3704
		{
			yyVAL.byt = 0
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3706
		{
			yyVAL.byt = 1
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3709
		{
			yyVAL.str = ""
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3711
		{
			yyVAL.str = IgnoreStr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3715
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3717
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3719
		{
			yyVAL.empty = struct{}{}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3721
		{
			yyVAL.empty = struct{}{}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3723
		{
			yyVAL.empty = struct{}{}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3725
		{
			yyVAL.empty = struct{}{}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3727
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3729
		{
			yyVAL.empty = struct{}{}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3731
		{
			yyVAL.empty = struct{}{}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3733
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3736
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3738
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3740
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3744
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3746
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3749
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3751
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3753
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3756
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3758
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3762
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3766
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3773
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3779
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3783
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3790
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3796
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3802
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3808
		{
			yyVAL.execVarDefOpt = nil
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3810
		{
			rv := yyDollar[1].execVarDef
			yyVAL.execVarDefOpt = &rv
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3816
		{
			yyVAL.execVarDefs = nil
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3818
		{
			yyVAL.execVarDefs = []ExecVarDef{yyDollar[1].execVarDef}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3822
		{
			yyVAL.execVarDefs = append(yyDollar[1].execVarDefs, yyDollar[3].execVarDef)
		}
	case 765:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3829
		{
			yyVAL.statement = NewExec(yyDollar[2].bytes2, yyDollar[3].tableName, yyDollar[4].execVarDefs, yyDollar[5].execVarDefOpt)
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3835
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, TableName{}, true)
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3839
		{
			yyVAL.statement = NewPurge(yyDollar[2].bytes2, yyDollar[3].tableName, false)
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3845
		{
			yyVAL.statement = NewNativeQuery(yyDollar[2].bytes2, string(yyDollar[3].bytes))
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4181
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4190
		{
			decNesting(yylex)
		}
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4195
		{
			skipToEnd(yylex)
		}
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4200
		{
			skipToEnd(yylex)
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4204
		{
			skipToEnd(yylex)
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4208
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
