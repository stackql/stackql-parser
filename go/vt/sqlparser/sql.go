// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	execsubquery         *ExecSubquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	execVarDef           ExecVarDef
	execVarDefOpt        *ExecVarDef
	execVarDefs          []ExecVarDef
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688
const AUTH = 57689
const INTERACTIVE = 57690
const LOGIN = 57691
const REVOKE = 57692
const SA = 57693
const SERVICEACCOUNT = 57694
const SLEEP = 57695
const REGISTRY = 57696
const PULL = 57697
const LIST = 57698
const EXEC = 57699
const STACKQL = 57700

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"AUTH",
	"INTERACTIVE",
	"LOGIN",
	"REVOKE",
	"SA",
	"SERVICEACCOUNT",
	"SLEEP",
	"REGISTRY",
	"PULL",
	"LIST",
	"EXEC",
	"STACKQL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	364, 87,
	371, 87,
	-2, 32,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	169, 340,
	170, 340,
	230, 328,
	234, 328,
	235, 328,
	236, 328,
	-2, 326,
	-1, 51,
	134, 350,
	-2, 348,
	-1, 54,
	6, 356,
	8, 356,
	9, 356,
	10, 356,
	57, 356,
	262, 356,
	-2, 328,
	-1, 78,
	38, 386,
	-2, 394,
	-1, 402,
	120, 722,
	-2, 718,
	-1, 403,
	120, 723,
	-2, 719,
	-1, 421,
	38, 387,
	-2, 399,
	-1, 422,
	38, 388,
	-2, 400,
	-1, 445,
	88, 991,
	-2, 78,
	-1, 446,
	88, 901,
	-2, 79,
	-1, 451,
	88, 868,
	-2, 684,
	-1, 453,
	88, 935,
	-2, 686,
	-1, 779,
	56, 60,
	58, 60,
	-2, 64,
	-1, 960,
	120, 725,
	-2, 721,
	-1, 1045,
	22, 888,
	45, 888,
	46, 888,
	47, 888,
	48, 888,
	49, 888,
	51, 888,
	52, 888,
	53, 888,
	54, 888,
	58, 888,
	59, 888,
	64, 888,
	120, 888,
	135, 888,
	-2, 379,
	-1, 1422,
	5, 643,
	17, 643,
	19, 643,
	31, 643,
	59, 643,
	-2, 426,
}

const yyPrivate = 57344

const yyLast = 18129

var yyAct = [...]int{
	402, 1461, 1658, 1341, 1668, 1625, 346, 1472, 1246, 1539,
	1575, 1402, 617, 1070, 1435, 702, 1267, 1074, 1047, 361,
	753, 1399, 450, 1403, 746, 878, 1247, 1117, 77, 3,
	344, 375, 1083, 1103, 1073, 332, 1234, 638, 1408, 998,
	606, 97, 615, 1414, 947, 297, 1318, 1364, 297, 954,
	1174, 1309, 75, 97, 1087, 756, 1049, 1031, 1042, 423,
	751, 31, 900, 792, 772, 980, 408, 924, 348, 773,
	768, 1113, 791, 439, 575, 444, 337, 414, 1024, 73,
	406, 763, 891, 436, 297, 97, 781, 715, 576, 297,
	72, 297, 333, 740, 741, 336, 716, 447, 404, 331,
	1213, 7, 595, 1215, 1214, 405, 738, 739, 307, 910,
	6, 5, 1661, 1645, 78, 80, 81, 82, 83, 84,
	1656, 1633, 1653, 1462, 1644, 1632, 33, 34, 65, 36,
	37, 1381, 1495, 580, 1429, 409, 429, 793, 301, 794,
	293, 289, 290, 291, 1064, 69, 318, 304, 1430, 1431,
	38, 57, 58, 335, 60, 311, 1601, 664, 663, 673,
	674, 666, 667, 668, 669, 670, 671, 672, 665, 1065,
	1066, 675, 33, 47, 65, 36, 37, 64, 334, 637,
	387, 1300, 393, 394, 391, 392, 390, 389, 388, 309,
	1096, 1529, 1097, 1104, 1343, 316, 395, 396, 99, 100,
	101, 1486, 1484, 1281, 908, 321, 1280, 285, 325, 1282,
	283, 632, 287, 327, 323, 633, 630, 631, 635, 99,
	100, 101, 1345, 64, 957, 302, 1655, 867, 625, 626,
	864, 1652, 1626, 1340, 866, 1025, 1619, 1088, 1676, 1576,
	596, 636, 582, 40, 41, 43, 42, 45, 287, 59,
	1344, 1346, 313, 305, 1578, 314, 315, 321, 911, 912,
	913, 306, 308, 318, 292, 303, 320, 319, 868, 612,
	865, 614, 46, 68, 67, 1365, 871, 55, 56, 44,
	1583, 1672, 341, 640, 297, 587, 588, 1268, 1270, 297,
	855, 597, 1425, 48, 49, 297, 50, 51, 52, 53,
	1090, 297, 604, 611, 613, 610, 97, 1337, 619, 286,
	97, 1424, 97, 1339, 1423, 585, 1367, 578, 639, 300,
	288, 687, 688, 1148, 620, 1577, 1147, 1608, 97, 1090,
	1510, 284, 330, 1602, 664, 663, 673, 674, 666, 667,
	668, 669, 670, 671, 672, 665, 1631, 1090, 675, 622,
	592, 1469, 624, 1369, 627, 1373, 1277, 1368, 644, 1366,
	1104, 99, 100, 101, 1371, 1239, 1203, 1182, 1153, 1269,
	649, 650, 1071, 1370, 825, 787, 99, 100, 101, 99,
	100, 101, 66, 767, 700, 602, 1372, 1374, 317, 1584,
	1582, 1175, 609, 675, 598, 599, 600, 1670, 665, 1060,
	1671, 675, 1669, 1193, 1089, 1004, 1190, 297, 99, 100,
	101, 931, 685, 87, 99, 100, 101, 1338, 589, 1336,
	590, 905, 655, 591, 1617, 929, 930, 928, 66, 743,
	1592, 647, 97, 1089, 297, 297, 297, 642, 703, 744,
	645, 646, 1383, 97, 981, 653, 654, 652, 621, 97,
	574, 1089, 88, 1385, 652, 447, 1086, 1084, 813, 1085,
	623, 418, 1448, 655, 1412, 1391, 1082, 1088, 1222, 795,
	655, 648, 981, 857, 1200, 1621, 718, 720, 722, 724,
	726, 728, 729, 757, 1298, 719, 721, 901, 725, 727,
	63, 730, 745, 771, 62, 70, 892, 608, 760, 826,
	1216, 664, 663, 673, 674, 666, 667, 668, 669, 670,
	671, 672, 665, 687, 688, 675, 687, 688, 790, 780,
	892, 1636, 608, 1535, 785, 839, 842, 843, 844, 845,
	846, 847, 1534, 848, 849, 850, 851, 852, 827, 828,
	829, 830, 811, 812, 840, 1313, 814, 1312, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 831, 832,
	833, 834, 835, 836, 837, 838, 666, 667, 668, 669,
	670, 671, 672, 665, 902, 297, 675, 654, 652, 853,
	97, 607, 856, 893, 858, 297, 297, 97, 97, 97,
	653, 654, 652, 297, 655, 282, 297, 581, 1677, 297,
	876, 877, 1093, 297, 64, 97, 607, 893, 655, 1094,
	97, 97, 97, 297, 97, 97, 927, 841, 1009, 1010,
	1301, 407, 854, 1638, 1618, 880, 97, 97, 1555, 861,
	862, 863, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 1678, 297, 1532, 755, 882, 881, 1006, 1189,
	1499, 1389, 885, 886, 887, 1310, 889, 890, 1000, 1188,
	895, 1187, 668, 669, 670, 671, 672, 665, 897, 898,
	675, 653, 654, 652, 1161, 883, 948, 433, 434, 872,
	653, 654, 652, 1217, 1054, 950, 782, 1221, 1005, 655,
	925, 583, 584, 919, 921, 922, 1545, 1654, 655, 97,
	920, 896, 894, 418, 653, 654, 652, 653, 654, 652,
	1167, 1168, 1169, 958, 1589, 969, 972, 1588, 951, 952,
	1444, 982, 655, 960, 964, 655, 959, 926, 99, 100,
	101, 1091, 97, 97, 99, 100, 101, 64, 949, 639,
	639, 996, 364, 363, 366, 367, 368, 369, 703, 1640,
	418, 365, 370, 1545, 1629, 97, 99, 100, 101, 74,
	1284, 1411, 297, 1545, 418, 97, 1545, 1609, 1545, 1580,
	297, 1545, 1544, 1525, 1524, 76, 994, 995, 297, 297,
	958, 961, 297, 297, 990, 991, 297, 297, 297, 97,
	960, 1512, 418, 1023, 1509, 418, 1454, 1453, 1450, 1451,
	403, 447, 97, 576, 1450, 1449, 1044, 1017, 418, 1235,
	880, 1028, 418, 418, 1075, 651, 418, 1019, 1017, 33,
	1506, 1001, 1033, 1036, 1037, 1038, 1034, 1400, 1035, 1039,
	1411, 1011, 1415, 1416, 802, 801, 783, 651, 1591, 1018,
	1055, 98, 1235, 1241, 1057, 298, 1021, 1452, 298, 1242,
	1105, 1106, 1107, 98, 1027, 1028, 297, 97, 1053, 97,
	1058, 1140, 1062, 33, 1061, 297, 297, 297, 297, 297,
	64, 297, 297, 1028, 1285, 297, 97, 1078, 783, 1328,
	1119, 784, 1028, 786, 298, 98, 1017, 1063, 1411, 298,
	1206, 298, 297, 1562, 1205, 297, 1017, 297, 782, 1123,
	297, 1125, 297, 297, 1007, 870, 788, 297, 97, 1646,
	97, 1324, 1325, 1326, 64, 411, 1541, 1098, 1152, 1517,
	1118, 1115, 1116, 784, 1342, 782, 1542, 1498, 1440, 965,
	966, 1415, 1416, 971, 974, 975, 33, 1352, 1288, 1114,
	923, 1158, 1109, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 989, 1108,
	925, 992, 993, 1121, 1421, 1663, 64, 1156, 664, 663,
	673, 674, 666, 667, 668, 669, 670, 671, 672, 665,
	1659, 1442, 675, 1327, 1418, 312, 1400, 64, 1332, 1329,
	1320, 1330, 1323, 1314, 1319, 906, 1170, 926, 1321, 1322,
	986, 874, 1650, 1258, 1099, 1100, 1101, 1102, 1259, 1256,
	1420, 1255, 1331, 1254, 1257, 1497, 1643, 1393, 1224, 297,
	1110, 1111, 1112, 409, 754, 1648, 1223, 1233, 1183, 297,
	297, 297, 297, 297, 1248, 1260, 1228, 1037, 1038, 1232,
	328, 297, 1184, 1305, 800, 1199, 605, 297, 1297, 1623,
	1622, 297, 1560, 1243, 1295, 297, 664, 663, 673, 674,
	666, 667, 668, 669, 670, 671, 672, 665, 1227, 1290,
	675, 977, 1283, 1236, 97, 1266, 1504, 1237, 1537, 1238,
	1124, 873, 1041, 1289, 298, 978, 1075, 639, 639, 298,
	1273, 1286, 1275, 1249, 1276, 298, 1252, 1261, 415, 1250,
	1251, 298, 1253, 747, 1502, 1503, 98, 1272, 412, 413,
	98, 416, 98, 1274, 76, 748, 1396, 1304, 1231, 1306,
	1307, 1308, 97, 97, 1293, 1294, 1230, 1278, 98, 1235,
	634, 1665, 1664, 1302, 1303, 1194, 1191, 899, 761, 1665,
	1291, 1292, 1033, 1036, 1037, 1038, 1034, 1606, 1035, 1039,
	1530, 411, 97, 1003, 297, 74, 1043, 29, 79, 71,
	1, 1311, 1317, 424, 997, 1316, 1218, 1219, 1657, 1220,
	999, 1463, 1538, 1130, 1624, 1333, 880, 425, 1574, 1348,
	1179, 1180, 1434, 97, 758, 759, 427, 1081, 426, 948,
	1072, 86, 573, 85, 1347, 1361, 1350, 1616, 618, 1080,
	1079, 1197, 1581, 1528, 1362, 1092, 1299, 298, 1095, 1363,
	1441, 1296, 1171, 1172, 1173, 1620, 1386, 1349, 1382, 808,
	1353, 806, 1354, 807, 805, 810, 960, 809, 804, 959,
	297, 1360, 98, 1375, 298, 298, 298, 1376, 310, 1355,
	97, 442, 907, 98, 324, 97, 97, 1040, 1248, 98,
	1401, 796, 1361, 1392, 1120, 762, 89, 1390, 1335, 664,
	663, 673, 674, 666, 667, 668, 669, 670, 671, 672,
	665, 1334, 97, 675, 1404, 1126, 1492, 904, 628, 629,
	683, 1229, 1279, 1410, 448, 441, 97, 1351, 97, 97,
	1406, 1008, 639, 639, 1427, 750, 1419, 1501, 1075, 1395,
	1075, 1198, 712, 979, 776, 1433, 1447, 347, 918, 362,
	1426, 1428, 359, 360, 1012, 297, 1445, 1446, 1240, 657,
	1432, 345, 1437, 339, 775, 1032, 1030, 1029, 437, 1438,
	1439, 1417, 1413, 774, 1016, 297, 420, 1212, 1494, 1600,
	419, 97, 976, 1464, 97, 97, 97, 297, 54, 1164,
	329, 35, 428, 97, 1456, 61, 664, 663, 673, 674,
	666, 667, 668, 669, 670, 671, 672, 665, 28, 1457,
	675, 1459, 30, 27, 22, 298, 21, 20, 19, 18,
	98, 24, 17, 16, 15, 298, 298, 98, 98, 98,
	1470, 593, 1471, 298, 1474, 39, 298, 1482, 26, 298,
	25, 14, 13, 298, 12, 98, 11, 424, 10, 9,
	98, 98, 98, 298, 98, 98, 8, 4, 1248, 643,
	23, 425, 1500, 1505, 701, 2, 98, 98, 421, 422,
	427, 1513, 426, 97, 0, 0, 0, 0, 1514, 0,
	1477, 97, 0, 298, 0, 1075, 0, 0, 1527, 0,
	1286, 0, 0, 0, 0, 0, 97, 0, 1356, 1357,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	297, 0, 0, 1377, 1378, 1540, 1379, 1380, 0, 0,
	0, 1548, 0, 1531, 0, 1533, 0, 0, 1387, 1388,
	0, 0, 880, 0, 0, 1543, 431, 0, 1536, 98,
	0, 0, 1546, 0, 0, 1523, 0, 0, 0, 0,
	97, 97, 0, 97, 1547, 0, 0, 0, 97, 1559,
	97, 97, 97, 297, 0, 1568, 97, 1569, 1571, 1572,
	1561, 0, 98, 98, 0, 0, 0, 1563, 1404, 0,
	1579, 1573, 97, 297, 0, 1586, 97, 1587, 0, 1593,
	1585, 0, 0, 0, 0, 98, 0, 338, 1479, 1480,
	0, 1481, 298, 0, 1483, 98, 1485, 0, 0, 0,
	298, 0, 1554, 0, 1607, 0, 0, 1615, 298, 298,
	1443, 0, 298, 298, 0, 1614, 298, 298, 298, 98,
	1613, 1567, 97, 97, 1404, 0, 0, 1491, 0, 0,
	0, 1627, 98, 0, 1540, 1075, 0, 0, 0, 97,
	1628, 0, 0, 1248, 0, 1634, 0, 1136, 0, 0,
	297, 0, 0, 0, 0, 376, 32, 97, 0, 1526,
	0, 1135, 0, 1642, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 0, 1649, 0, 1647, 97, 0, 0,
	0, 0, 0, 0, 1651, 985, 298, 98, 32, 98,
	1662, 0, 99, 100, 101, 298, 298, 298, 298, 298,
	1673, 298, 298, 1134, 0, 298, 98, 664, 663, 673,
	674, 666, 667, 668, 669, 670, 671, 672, 665, 0,
	0, 675, 298, 0, 0, 298, 0, 298, 0, 410,
	298, 0, 298, 298, 1490, 0, 0, 298, 98, 0,
	98, 664, 663, 673, 674, 666, 667, 668, 669, 670,
	671, 672, 665, 0, 1489, 675, 1131, 1128, 1129, 659,
	1127, 662, 0, 417, 0, 0, 0, 676, 677, 678,
	679, 680, 681, 682, 0, 660, 661, 658, 664, 663,
	673, 674, 666, 667, 668, 669, 670, 671, 672, 665,
	0, 0, 675, 1138, 1141, 0, 0, 0, 0, 0,
	0, 0, 1549, 1550, 1551, 1552, 1553, 0, 0, 0,
	1556, 1557, 0, 0, 664, 663, 673, 674, 666, 667,
	668, 669, 670, 671, 672, 665, 0, 0, 675, 0,
	0, 0, 0, 1133, 664, 663, 673, 674, 666, 667,
	668, 669, 670, 671, 672, 665, 0, 0, 675, 298,
	0, 0, 0, 0, 0, 1132, 373, 0, 0, 298,
	298, 298, 298, 298, 0, 0, 0, 656, 0, 0,
	0, 298, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 298, 0, 0, 0, 298, 0, 0, 0, 0,
	0, 0, 0, 1176, 0, 1137, 0, 96, 0, 0,
	0, 0, 0, 338, 98, 0, 0, 0, 0, 326,
	1139, 0, 713, 664, 663, 673, 674, 666, 667, 668,
	669, 670, 671, 672, 665, 0, 0, 675, 673, 674,
	666, 667, 668, 669, 670, 671, 672, 665, 0, 0,
	675, 449, 749, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 98, 0, 0, 0, 0, 0, 0,
	0, 616, 0, 0, 0, 616, 0, 616, 0, 0,
	0, 0, 0, 1666, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 298, 32, 0, 663, 673, 674,
	666, 667, 668, 669, 670, 671, 672, 665, 684, 686,
	675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 0, 0, 704, 705, 706, 707, 708, 709, 710,
	711, 0, 714, 717, 717, 717, 723, 717, 717, 723,
	717, 731, 732, 733, 734, 735, 736, 737, 0, 0,
	298, 0, 0, 0, 0, 0, 32, 0, 0, 0,
	98, 0, 0, 0, 0, 98, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	777, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 98, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 449, 0, 0, 298, 449, 0, 449, 0,
	0, 98, 0, 0, 98, 98, 98, 298, 914, 915,
	916, 917, 0, 98, 641, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 968, 616, 0, 0, 0, 0,
	0, 0, 616, 616, 616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	616, 0, 0, 98, 0, 616, 616, 616, 0, 616,
	616, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 616, 616, 0, 0, 0, 98, 0, 765, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 449,
	298, 0, 0, 0, 0, 797, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 98, 0, 98, 0, 0, 0, 0, 98, 0,
	98, 98, 98, 298, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 298, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 778, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 98, 0, 0, 0, 0, 0, 0,
	1002, 0, 0, 1046, 0, 0, 449, 777, 0, 98,
	0, 777, 0, 449, 449, 449, 0, 0, 0, 0,
	298, 295, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 449, 0, 0, 0, 0, 449, 449, 449, 0,
	449, 449, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 449, 449, 0, 0, 0, 0, 0, 0,
	438, 0, 0, 0, 0, 577, 0, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1201, 0,
	0, 0, 616, 0, 616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 616, 1225, 1226, 752, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1013, 0, 0, 1181, 0, 0, 410, 0, 0,
	0, 765, 0, 0, 449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1177, 0, 0, 0,
	1178, 0, 0, 0, 0, 449, 0, 0, 0, 0,
	0, 1185, 1186, 0, 0, 0, 0, 1192, 449, 0,
	1195, 1196, 0, 0, 0, 0, 0, 0, 1202, 0,
	0, 0, 1204, 0, 777, 1207, 1208, 1209, 1210, 1211,
	1244, 1245, 0, 0, 777, 777, 777, 777, 777, 0,
	586, 0, 0, 0, 0, 594, 0, 0, 0, 0,
	0, 601, 1046, 0, 1271, 0, 0, 603, 0, 0,
	777, 0, 0, 449, 0, 449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1384, 1263, 1264,
	1265, 0, 449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1397, 0, 1163, 0, 1165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 374, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 616, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 0, 0, 322, 0, 0, 0, 0,
	770, 0, 779, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1358, 1359, 0, 432, 0,
	0, 440, 0, 0, 0, 0, 296, 0, 296, 0,
	0, 0, 0, 0, 983, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	32, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 338, 0, 0, 0, 0, 0, 0, 1515,
	0, 0, 1516, 0, 0, 1518, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 449,
	0, 803, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 860, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 438, 0, 0, 875, 0, 0, 449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1558,
	338, 0, 0, 0, 0, 0, 0, 1493, 0, 449,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 909,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	449, 1487, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 0, 0, 0, 296, 0, 0, 1519,
	1520, 1521, 296, 0, 0, 0, 0, 0, 296, 0,
	0, 1507, 1508, 0, 1511, 0, 449, 0, 983, 0,
	0, 1407, 1409, 0, 0, 0, 0, 0, 0, 0,
	0, 616, 1522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1409, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 449, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1405, 0, 32, 0, 0, 0, 1020, 0,
	0, 0, 0, 0, 0, 0, 1026, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 1590, 296, 0, 0, 1460, 0, 0,
	1465, 1466, 1467, 0, 0, 1570, 0, 0, 432, 1473,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 296, 296, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1596, 1597, 1598, 1599, 0,
	1603, 0, 1604, 1605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1610, 0, 1611, 1612, 0,
	0, 0, 1122, 0, 0, 0, 0, 0, 983, 0,
	0, 1142, 1143, 1144, 1145, 1146, 0, 1149, 1150, 0,
	0, 1151, 0, 0, 0, 0, 1630, 0, 0, 449,
	0, 0, 0, 0, 0, 0, 0, 1473, 1154, 0,
	0, 1155, 0, 770, 0, 0, 1157, 0, 0, 0,
	1639, 1660, 449, 1162, 0, 0, 0, 0, 0, 449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1674, 1675, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 0, 0, 0, 1564, 1565, 0, 1566,
	0, 0, 296, 296, 1473, 0, 1473, 1473, 1473, 0,
	296, 0, 1436, 296, 0, 0, 296, 0, 0, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	296, 0, 1595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 449, 449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 1635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1641, 0, 0, 0, 432, 879, 0,
	0, 0, 432, 432, 0, 0, 432, 432, 432, 0,
	0, 0, 984, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 432, 432, 432, 432, 432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	0, 0, 0, 0, 0, 879, 0, 296, 0, 0,
	0, 0, 0, 0, 0, 296, 1051, 0, 0, 296,
	296, 0, 0, 296, 1059, 879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1394, 0, 0, 0,
	0, 0, 0, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 296, 296, 296, 296, 0, 296, 296,
	0, 0, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	0, 0, 296, 0, 296, 0, 0, 296, 0, 1159,
	1160, 0, 0, 0, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 432, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 432, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 296, 296, 296, 296,
	296, 0, 0, 0, 0, 0, 0, 0, 1262, 0,
	0, 0, 0, 0, 296, 0, 0, 0, 1051, 0,
	0, 0, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 879, 0, 0, 0, 0, 0, 0, 0, 1594,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 879, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 1637, 0, 0, 984,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 879, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1051, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 559, 547, 0, 504, 562, 477, 494, 570, 495,
	498, 535, 462, 517, 192, 492, 0, 481, 457, 488,
	458, 479, 506, 132, 510, 476, 549, 520, 561, 163,
	0, 482, 568, 165, 526, 0, 242, 180, 0, 0,
	0, 508, 551, 515, 544, 503, 536, 467, 525, 563,
	493, 533, 564, 0, 0, 0, 99, 100, 101, 0,
	1076, 1077, 0, 0, 984, 0, 0, 122, 0, 530,
	558, 490, 532, 534, 572, 456, 527, 296, 460, 463,
	569, 554, 485, 486, 1287, 0, 0, 0, 0, 0,
	0, 507, 516, 541, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 483, 0, 524, 0, 0, 0, 464,
	461, 0, 0, 0, 0, 505, 0, 0, 0, 466,
	0, 484, 542, 0, 454, 142, 546, 553, 502, 299,
	557, 500, 499, 560, 211, 0, 247, 145, 162, 118,
	159, 103, 114, 0, 144, 189, 219, 223, 550, 480,
	489, 126, 487, 221, 199, 263, 523, 201, 220, 166,
	253, 212, 262, 272, 273, 250, 270, 277, 238, 107,
	249, 261, 123, 232, 0, 0, 0, 109, 259, 245,
	178, 155, 156, 108, 0, 217, 131, 140, 128, 191,
	256, 257, 127, 280, 115, 269, 111, 116, 268, 185,
	252, 260, 179, 171, 110, 258, 177, 170, 161, 135,
	147, 209, 168, 210, 148, 182, 181, 183, 0, 459,
	0, 243, 266, 281, 120, 475, 251, 275, 276, 0,
	213, 121, 141, 134, 208, 139, 184, 117, 150, 240,
	160, 167, 216, 279, 198, 222, 124, 265, 241, 471,
	474, 469, 470, 518, 519, 565, 566, 567, 543, 465,
	0, 472, 473, 0, 548, 555, 556, 522, 102, 112,
	164, 278, 214, 138, 267, 455, 468, 130, 478, 0,
	0, 491, 496, 497, 509, 511, 512, 513, 514, 521,
	528, 529, 531, 537, 538, 539, 540, 545, 552, 571,
	104, 105, 113, 119, 125, 129, 133, 136, 143, 146,
	149, 151, 152, 153, 158, 169, 173, 174, 175, 176,
	186, 187, 188, 190, 193, 194, 195, 196, 197, 200,
	202, 203, 204, 205, 206, 207, 215, 218, 224, 225,
	226, 227, 228, 229, 231, 234, 235, 236, 237, 244,
	248, 254, 255, 264, 271, 274, 0, 0, 0, 0,
	106, 157, 172, 230, 233, 239, 246, 0, 0, 0,
	137, 154, 559, 547, 0, 504, 562, 477, 494, 570,
	495, 498, 535, 462, 517, 192, 492, 0, 481, 457,
	488, 458, 479, 506, 132, 510, 476, 549, 520, 561,
	163, 0, 482, 568, 165, 526, 0, 242, 180, 0,
	0, 0, 508, 551, 515, 544, 503, 536, 467, 525,
	563, 493, 533, 564, 0, 0, 0, 99, 100, 101,
	0, 1076, 1077, 0, 0, 0, 0, 0, 122, 0,
	530, 558, 490, 532, 534, 572, 456, 527, 0, 460,
	463, 569, 554, 485, 486, 0, 0, 0, 0, 0,
	0, 0, 507, 516, 541, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 483, 0, 524, 0, 0, 0,
	464, 461, 0, 0, 0, 0, 505, 0, 0, 0,
	466, 0, 484, 542, 0, 454, 142, 546, 553, 502,
	299, 557, 500, 499, 560, 211, 0, 247, 145, 162,
	118, 159, 103, 114, 0, 144, 189, 219, 223, 550,
	480, 489, 126, 487, 221, 199, 263, 523, 201, 220,
	166, 253, 212, 262, 272, 273, 250, 270, 277, 238,
	107, 249, 261, 123, 232, 0, 0, 0, 109, 259,
	245, 178, 155, 156, 108, 0, 217, 131, 140, 128,
	191, 256, 257, 127, 280, 115, 269, 111, 116, 268,
	185, 252, 260, 179, 171, 110, 258, 177, 170, 161,
	135, 147, 209, 168, 210, 148, 182, 181, 183, 0,
	459, 0, 243, 266, 281, 120, 475, 251, 275, 276,
	0, 213, 121, 141, 134, 208, 139, 184, 117, 150,
	240, 160, 167, 216, 279, 198, 222, 124, 265, 241,
	471, 474, 469, 470, 518, 519, 565, 566, 567, 543,
	465, 0, 472, 473, 0, 548, 555, 556, 522, 102,
	112, 164, 278, 214, 138, 267, 455, 468, 130, 478,
	0, 0, 491, 496, 497, 509, 511, 512, 513, 514,
	521, 528, 529, 531, 537, 538, 539, 540, 545, 552,
	571, 104, 105, 113, 119, 125, 129, 133, 136, 143,
	146, 149, 151, 152, 153, 158, 169, 173, 174, 175,
	176, 186, 187, 188, 190, 193, 194, 195, 196, 197,
	200, 202, 203, 204, 205, 206, 207, 215, 218, 224,
	225, 226, 227, 228, 229, 231, 234, 235, 236, 237,
	244, 248, 254, 255, 264, 271, 274, 0, 0, 0,
	0, 106, 157, 172, 230, 233, 239, 246, 0, 0,
	0, 137, 154, 559, 547, 0, 504, 562, 477, 494,
	570, 495, 498, 535, 462, 517, 192, 492, 0, 481,
	457, 488, 458, 479, 506, 132, 510, 476, 549, 520,
	561, 163, 0, 482, 568, 165, 526, 0, 242, 180,
	0, 0, 0, 508, 551, 515, 544, 503, 536, 467,
	525, 563, 493, 533, 564, 64, 0, 0, 99, 100,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 530, 558, 490, 532, 534, 572, 456, 527, 0,
	460, 463, 569, 554, 485, 486, 0, 0, 0, 0,
	0, 0, 0, 507, 516, 541, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 483, 0, 524, 0, 0,
	0, 464, 461, 0, 0, 0, 0, 505, 0, 0,
	0, 466, 0, 484, 542, 0, 454, 142, 546, 553,
	502, 299, 557, 500, 499, 560, 211, 0, 247, 145,
	162, 118, 159, 103, 114, 0, 144, 189, 219, 223,
	550, 480, 489, 126, 487, 221, 199, 263, 523, 201,
	220, 166, 253, 212, 262, 272, 273, 250, 270, 277,
	238, 107, 249, 261, 123, 232, 0, 0, 0, 109,
	259, 245, 178, 155, 156, 108, 0, 217, 131, 140,
	128, 191, 256, 257, 127, 280, 115, 269, 111, 116,
	268, 185, 252, 260, 179, 171, 110, 258, 177, 170,
	161, 135, 147, 209, 168, 210, 148, 182, 181, 183,
	0, 459, 0, 243, 266, 281, 120, 475, 251, 275,
	276, 0, 213, 121, 141, 134, 208, 139, 184, 117,
	150, 240, 160, 167, 216, 279, 198, 222, 124, 265,
	241, 471, 474, 469, 470, 518, 519, 565, 566, 567,
	543, 465, 0, 472, 473, 0, 548, 555, 556, 522,
	102, 112, 164, 278, 214, 138, 267, 455, 468, 130,
	478, 0, 0, 491, 496, 497, 509, 511, 512, 513,
	514, 521, 528, 529, 531, 537, 538, 539, 540, 545,
	552, 571, 104, 105, 113, 119, 125, 129, 133, 136,
	143, 146, 149, 151, 152, 153, 158, 169, 173, 174,
	175, 176, 186, 187, 188, 190, 193, 194, 195, 196,
	197, 200, 202, 203, 204, 205, 206, 207, 215, 218,
	224, 225, 226, 227, 228, 229, 231, 234, 235, 236,
	237, 244, 248, 254, 255, 264, 271, 274, 0, 0,
	0, 0, 106, 157, 172, 230, 233, 239, 246, 0,
	0, 0, 137, 154, 559, 547, 0, 504, 562, 477,
	494, 570, 495, 498, 535, 462, 517, 192, 492, 0,
	481, 457, 488, 458, 479, 506, 132, 510, 476, 549,
	520, 561, 163, 0, 482, 568, 165, 526, 0, 242,
	180, 0, 0, 0, 508, 551, 515, 544, 503, 536,
	467, 525, 563, 493, 533, 564, 0, 0, 0, 99,
	100, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 530, 558, 490, 532, 534, 572, 456, 527,
	0, 460, 463, 569, 554, 485, 486, 0, 0, 0,
	0, 0, 0, 0, 507, 516, 541, 501, 0, 0,
	0, 0, 0, 0, 1398, 0, 483, 0, 524, 0,
	0, 0, 464, 461, 0, 0, 0, 0, 505, 0,
	0, 0, 466, 0, 484, 542, 0, 454, 142, 546,
	553, 502, 299, 557, 500, 499, 560, 211, 0, 247,
	145, 162, 118, 159, 103, 114, 0, 144, 189, 219,
	223, 550, 480, 489, 126, 487, 221, 199, 263, 523,
	201, 220, 166, 253, 212, 262, 272, 273, 250, 270,
	277, 238, 107, 249, 261, 123, 232, 0, 0, 0,
	109, 259, 245, 178, 155, 156, 108, 0, 217, 131,
	140, 128, 191, 256, 257, 127, 280, 115, 269, 111,
	116, 268, 185, 252, 260, 179, 171, 110, 258, 177,
	170, 161, 135, 147, 209, 168, 210, 148, 182, 181,
	183, 0, 459, 0, 243, 266, 281, 120, 475, 251,
	275, 276, 0, 213, 121, 141, 134, 208, 139, 184,
	117, 150, 240, 160, 167, 216, 279, 198, 222, 124,
	265, 241, 471, 474, 469, 470, 518, 519, 565, 566,
	567, 543, 465, 0, 472, 473, 0, 548, 555, 556,
	522, 102, 112, 164, 278, 214, 138, 267, 455, 468,
	130, 478, 0, 0, 491, 496, 497, 509, 511, 512,
	513, 514, 521, 528, 529, 531, 537, 538, 539, 540,
	545, 552, 571, 104, 105, 113, 119, 125, 129, 133,
	136, 143, 146, 149, 151, 152, 153, 158, 169, 173,
	174, 175, 176, 186, 187, 188, 190, 193, 194, 195,
	196, 197, 200, 202, 203, 204, 205, 206, 207, 215,
	218, 224, 225, 226, 227, 228, 229, 231, 234, 235,
	236, 237, 244, 248, 254, 255, 264, 271, 274, 0,
	0, 0, 0, 106, 157, 172, 230, 233, 239, 246,
	0, 0, 0, 137, 154, 559, 547, 0, 504, 562,
	477, 494, 570, 495, 498, 535, 462, 517, 192, 492,
	0, 481, 457, 488, 458, 479, 506, 132, 510, 476,
	549, 520, 561, 163, 0, 482, 568, 165, 526, 0,
	242, 180, 0, 0, 0, 508, 551, 515, 544, 503,
	536, 467, 525, 563, 493, 533, 564, 0, 0, 0,
	99, 100, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 530, 558, 490, 532, 534, 572, 456,
	527, 0, 460, 463, 569, 554, 485, 486, 0, 0,
	0, 0, 0, 0, 0, 507, 516, 541, 501, 0,
	0, 0, 0, 0, 0, 1060, 0, 483, 0, 524,
	0, 0, 0, 464, 461, 0, 0, 0, 0, 505,
	0, 0, 0, 466, 0, 484, 542, 0, 454, 142,
	546, 553, 502, 299, 557, 500, 499, 560, 211, 0,
	247, 145, 162, 118, 159, 103, 114, 0, 144, 189,
	219, 223, 550, 480, 489, 126, 487, 221, 199, 263,
	523, 201, 220, 166, 253, 212, 262, 272, 273, 250,
	270, 277, 238, 107, 249, 261, 123, 232, 0, 0,
	0, 109, 259, 245, 178, 155, 156, 108, 0, 217,
	131, 140, 128, 191, 256, 257, 127, 280, 115, 269,
	111, 116, 268, 185, 252, 260, 179, 171, 110, 258,
	177, 170, 161, 135, 147, 209, 168, 210, 148, 182,
	181, 183, 0, 459, 0, 243, 266, 281, 120, 475,
	251, 275, 276, 0, 213, 121, 141, 134, 208, 139,
	184, 117, 150, 240, 160, 167, 216, 279, 198, 222,
	124, 265, 241, 471, 474, 469, 470, 518, 519, 565,
	566, 567, 543, 465, 0, 472, 473, 0, 548, 555,
	556, 522, 102, 112, 164, 278, 214, 138, 267, 455,
	468, 130, 478, 0, 0, 491, 496, 497, 509, 511,
	512, 513, 514, 521, 528, 529, 531, 537, 538, 539,
	540, 545, 552, 571, 104, 105, 113, 119, 125, 129,
	133, 136, 143, 146, 149, 151, 152, 153, 158, 169,
	173, 174, 175, 176, 186, 187, 188, 190, 193, 194,
	195, 196, 197, 200, 202, 203, 204, 205, 206, 207,
	215, 218, 224, 225, 226, 227, 228, 229, 231, 234,
	235, 236, 237, 244, 248, 254, 255, 264, 271, 274,
	0, 0, 0, 0, 106, 157, 172, 230, 233, 239,
	246, 0, 0, 0, 137, 154, 559, 547, 0, 504,
	562, 477, 494, 570, 495, 498, 535, 462, 517, 192,
	492, 0, 481, 457, 488, 458, 479, 506, 132, 510,
	476, 549, 520, 561, 163, 0, 482, 568, 165, 526,
	0, 242, 180, 0, 0, 0, 508, 551, 515, 544,
	503, 536, 467, 525, 563, 493, 533, 564, 0, 0,
	0, 99, 100, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 530, 558, 490, 532, 534, 572,
	456, 527, 0, 460, 463, 569, 554, 485, 486, 0,
	0, 0, 0, 0, 0, 0, 507, 516, 541, 501,
	0, 0, 0, 0, 0, 0, 1022, 0, 483, 0,
	524, 0, 0, 0, 464, 461, 0, 0, 0, 0,
	505, 0, 0, 0, 466, 0, 484, 542, 0, 454,
	142, 546, 553, 502, 299, 557, 500, 499, 560, 211,
	0, 247, 145, 162, 118, 159, 103, 114, 0, 144,
	189, 219, 223, 550, 480, 489, 126, 487, 221, 199,
	263, 523, 201, 220, 166, 253, 212, 262, 272, 273,
	250, 270, 277, 238, 107, 249, 261, 123, 232, 0,
	0, 0, 109, 259, 245, 178, 155, 156, 108, 0,
	217, 131, 140, 128, 191, 256, 257, 127, 280, 115,
	269, 111, 116, 268, 185, 252, 260, 179, 171, 110,
	258, 177, 170, 161, 135, 147, 209, 168, 210, 148,
	182, 181, 183, 0, 459, 0, 243, 266, 281, 120,
	475, 251, 275, 276, 0, 213, 121, 141, 134, 208,
	139, 184, 117, 150, 240, 160, 167, 216, 279, 198,
	222, 124, 265, 241, 471, 474, 469, 470, 518, 519,
	565, 566, 567, 543, 465, 0, 472, 473, 0, 548,
	555, 556, 522, 102, 112, 164, 278, 214, 138, 267,
	455, 468, 130, 478, 0, 0, 491, 496, 497, 509,
	511, 512, 513, 514, 521, 528, 529, 531, 537, 538,
	539, 540, 545, 552, 571, 104, 105, 113, 119, 125,
	129, 133, 136, 143, 146, 149, 151, 152, 153, 158,
	169, 173, 174, 175, 176, 186, 187, 188, 190, 193,
	194, 195, 196, 197, 200, 202, 203, 204, 205, 206,
	207, 215, 218, 224, 225, 226, 227, 228, 229, 231,
	234, 235, 236, 237, 244, 248, 254, 255, 264, 271,
	274, 0, 0, 0, 0, 106, 157, 172, 230, 233,
	239, 246, 0, 0, 0, 137, 154, 559, 547, 0,
	504, 562, 477, 494, 570, 495, 498, 535, 462, 517,
	192, 492, 0, 481, 457, 488, 458, 479, 506, 132,
	510, 476, 549, 520, 561, 163, 0, 482, 568, 165,
	526, 0, 242, 180, 0, 0, 0, 508, 551, 515,
	544, 503, 536, 467, 525, 563, 493, 533, 564, 0,
	0, 0, 99, 100, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 530, 558, 490, 532, 534,
	572, 456, 527, 0, 460, 463, 569, 554, 485, 486,
	0, 0, 0, 0, 0, 0, 0, 507, 516, 541,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 483,
	0, 524, 0, 0, 0, 464, 461, 0, 0, 0,
	0, 505, 0, 0, 0, 466, 0, 484, 542, 0,
	454, 142, 546, 553, 502, 299, 557, 500, 499, 560,
	211, 0, 247, 145, 162, 118, 159, 103, 114, 0,
	144, 189, 219, 223, 550, 480, 489, 126, 487, 221,
	199, 263, 523, 201, 220, 166, 253, 212, 262, 272,
	273, 250, 270, 277, 238, 107, 249, 261, 123, 232,
	0, 0, 0, 109, 259, 245, 178, 155, 156, 108,
	0, 217, 131, 140, 128, 191, 256, 257, 127, 280,
	115, 269, 111, 116, 268, 185, 252, 260, 179, 171,
	110, 258, 177, 170, 161, 135, 147, 209, 168, 210,
	148, 182, 181, 183, 0, 459, 0, 243, 266, 281,
	120, 475, 251, 275, 276, 0, 213, 121, 141, 134,
	208, 139, 184, 117, 150, 240, 160, 167, 216, 279,
	198, 222, 124, 265, 241, 471, 474, 469, 470, 518,
	519, 565, 566, 567, 543, 465, 0, 472, 473, 0,
	548, 555, 556, 522, 102, 112, 164, 278, 214, 138,
	267, 455, 468, 130, 478, 0, 0, 491, 496, 497,
	509, 511, 512, 513, 514, 521, 528, 529, 531, 537,
	538, 539, 540, 545, 552, 571, 104, 105, 113, 119,
	125, 129, 133, 136, 143, 146, 149, 151, 152, 153,
	158, 169, 173, 174, 175, 176, 186, 187, 188, 190,
	193, 194, 195, 196, 197, 200, 202, 203, 204, 205,
	206, 207, 215, 218, 224, 225, 226, 227, 228, 229,
	231, 234, 235, 236, 237, 244, 248, 254, 255, 264,
	271, 274, 0, 0, 0, 0, 106, 157, 172, 230,
	233, 239, 246, 0, 0, 0, 137, 154, 559, 547,
	0, 504, 562, 477, 494, 570, 495, 498, 535, 462,
	517, 192, 492, 0, 481, 457, 488, 458, 479, 506,
	132, 510, 476, 549, 520, 561, 163, 0, 482, 568,
	165, 526, 0, 242, 180, 0, 0, 0, 508, 551,
	515, 544, 503, 536, 467, 525, 563, 493, 533, 564,
	0, 0, 0, 99, 100, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 530, 558, 490, 532,
	534, 572, 456, 527, 0, 460, 463, 569, 554, 485,
	486, 0, 0, 0, 0, 0, 0, 0, 507, 516,
	541, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	483, 0, 524, 0, 0, 0, 464, 461, 0, 0,
	0, 0, 505, 0, 0, 0, 466, 0, 484, 542,
	0, 454, 142, 546, 553, 502, 299, 557, 500, 499,
	560, 211, 0, 247, 145, 162, 118, 159, 103, 114,
	0, 144, 189, 219, 223, 550, 480, 489, 126, 487,
	221, 199, 263, 523, 201, 220, 166, 253, 212, 262,
	272, 273, 250, 270, 277, 238, 107, 249, 261, 123,
	232, 0, 0, 0, 109, 259, 245, 178, 155, 156,
	108, 0, 217, 131, 140, 128, 191, 256, 257, 127,
	280, 115, 269, 111, 452, 268, 185, 252, 260, 179,
	171, 110, 258, 177, 170, 161, 135, 147, 209, 168,
	210, 148, 182, 181, 183, 0, 459, 0, 243, 266,
	281, 120, 475, 251, 275, 276, 0, 213, 121, 141,
	134, 208, 139, 453, 451, 150, 240, 160, 167, 216,
	279, 198, 222, 124, 265, 241, 471, 474, 469, 470,
	518, 519, 565, 566, 567, 543, 465, 0, 472, 473,
	0, 548, 555, 556, 522, 102, 112, 164, 278, 214,
	138, 267, 455, 468, 130, 478, 0, 0, 491, 496,
	497, 509, 511, 512, 513, 514, 521, 528, 529, 531,
	537, 538, 539, 540, 545, 552, 571, 104, 105, 113,
	119, 125, 129, 133, 136, 143, 146, 149, 151, 152,
	153, 158, 169, 173, 174, 175, 176, 186, 187, 188,
	190, 193, 194, 195, 196, 197, 200, 202, 203, 204,
	205, 206, 207, 215, 218, 224, 225, 226, 227, 228,
	229, 231, 234, 235, 236, 237, 244, 248, 254, 255,
	264, 271, 274, 0, 0, 0, 0, 106, 157, 172,
	230, 233, 239, 246, 0, 0, 0, 137, 154, 559,
	547, 0, 504, 562, 477, 494, 570, 495, 498, 535,
	462, 517, 192, 492, 0, 481, 457, 488, 458, 479,
	506, 132, 510, 476, 549, 520, 561, 163, 0, 482,
	568, 165, 526, 0, 242, 180, 0, 0, 0, 508,
	551, 515, 544, 503, 536, 467, 525, 563, 493, 533,
	564, 0, 0, 0, 99, 100, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 530, 558, 490,
	532, 534, 572, 456, 527, 0, 460, 463, 569, 554,
	485, 486, 0, 0, 0, 0, 0, 0, 0, 507,
	516, 541, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 0, 524, 0, 0, 0, 464, 461, 0,
	0, 0, 0, 505, 0, 0, 0, 466, 0, 484,
	542, 0, 454, 142, 546, 553, 502, 299, 557, 500,
	499, 560, 211, 0, 247, 145, 162, 118, 159, 103,
	114, 0, 144, 189, 219, 223, 550, 480, 489, 126,
	487, 221, 199, 263, 523, 201, 220, 166, 253, 212,
	262, 272, 273, 250, 270, 277, 238, 107, 249, 789,
	123, 232, 0, 0, 0, 109, 259, 245, 178, 155,
	156, 108, 0, 217, 131, 140, 128, 191, 256, 257,
	127, 280, 115, 269, 111, 452, 268, 185, 252, 260,
	179, 171, 110, 258, 177, 170, 161, 135, 147, 209,
	168, 210, 148, 182, 181, 183, 0, 459, 0, 243,
	266, 281, 120, 475, 251, 275, 276, 0, 213, 121,
	141, 134, 208, 139, 453, 451, 150, 240, 160, 167,
	216, 279, 198, 222, 124, 265, 241, 471, 474, 469,
	470, 518, 519, 565, 566, 567, 543, 465, 0, 472,
	473, 0, 548, 555, 556, 522, 102, 112, 164, 278,
	214, 138, 267, 455, 468, 130, 478, 0, 0, 491,
	496, 497, 509, 511, 512, 513, 514, 521, 528, 529,
	531, 537, 538, 539, 540, 545, 552, 571, 104, 105,
	113, 119, 125, 129, 133, 136, 143, 146, 149, 151,
	152, 153, 158, 169, 173, 174, 175, 176, 186, 187,
	188, 190, 193, 194, 195, 196, 197, 200, 202, 203,
	204, 205, 206, 207, 215, 218, 224, 225, 226, 227,
	228, 229, 231, 234, 235, 236, 237, 244, 248, 254,
	255, 264, 271, 274, 0, 0, 0, 0, 106, 157,
	172, 230, 233, 239, 246, 0, 0, 0, 137, 154,
	559, 547, 0, 504, 562, 477, 494, 570, 495, 498,
	535, 462, 517, 192, 492, 0, 481, 457, 488, 458,
	479, 506, 132, 510, 476, 549, 520, 561, 163, 0,
	482, 568, 165, 526, 0, 242, 180, 0, 0, 0,
	508, 551, 515, 544, 503, 536, 467, 525, 563, 493,
	533, 564, 0, 0, 0, 99, 100, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 530, 558,
	490, 532, 534, 572, 456, 527, 0, 460, 463, 569,
	554, 485, 486, 0, 0, 0, 0, 0, 0, 0,
	507, 516, 541, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 483, 0, 524, 0, 0, 0, 464, 461,
	0, 0, 0, 0, 505, 0, 0, 0, 466, 0,
	484, 542, 0, 454, 142, 546, 553, 502, 299, 557,
	500, 499, 560, 211, 0, 247, 145, 162, 118, 159,
	103, 114, 0, 144, 189, 219, 223, 550, 480, 489,
	126, 487, 221, 199, 263, 523, 201, 220, 166, 253,
	212, 262, 272, 273, 250, 270, 277, 238, 107, 249,
	443, 123, 232, 0, 0, 0, 109, 259, 245, 178,
	155, 156, 108, 0, 217, 131, 140, 128, 191, 256,
	257, 127, 280, 115, 269, 111, 452, 268, 185, 252,
	260, 179, 171, 110, 258, 177, 170, 161, 135, 147,
	209, 168, 210, 148, 182, 181, 183, 0, 459, 0,
	243, 266, 281, 120, 475, 251, 275, 276, 0, 213,
	121, 141, 134, 208, 139, 453, 451, 446, 445, 160,
	167, 216, 279, 198, 222, 124, 265, 241, 471, 474,
	469, 470, 518, 519, 565, 566, 567, 543, 465, 0,
	472, 473, 0, 548, 555, 556, 522, 102, 112, 164,
	278, 214, 138, 267, 455, 468, 130, 478, 0, 0,
	491, 496, 497, 509, 511, 512, 513, 514, 521, 528,
	529, 531, 537, 538, 539, 540, 545, 552, 571, 104,
	105, 113, 119, 125, 129, 133, 136, 143, 146, 149,
	151, 152, 153, 158, 169, 173, 174, 175, 176, 186,
	187, 188, 190, 193, 194, 195, 196, 197, 200, 202,
	203, 204, 205, 206, 207, 215, 218, 224, 225, 226,
	227, 228, 229, 231, 234, 235, 236, 237, 244, 248,
	254, 255, 264, 271, 274, 0, 0, 0, 0, 106,
	157, 172, 230, 233, 239, 246, 0, 0, 192, 137,
	154, 955, 0, 343, 0, 0, 0, 132, 0, 342,
	0, 0, 0, 163, 0, 956, 386, 165, 0, 0,
	242, 180, 0, 0, 0, 0, 0, 377, 378, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	99, 100, 101, 364, 363, 366, 367, 368, 369, 0,
	0, 122, 365, 370, 371, 372, 0, 0, 0, 0,
	340, 357, 0, 385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 354, 355, 430, 0, 0, 0, 400,
	0, 356, 0, 0, 349, 350, 352, 351, 353, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	399, 0, 0, 299, 0, 0, 397, 0, 211, 0,
	247, 145, 162, 118, 159, 103, 114, 0, 144, 189,
	219, 223, 0, 0, 0, 126, 0, 221, 199, 263,
	0, 201, 220, 166, 253, 212, 262, 272, 273, 250,
	270, 277, 238, 107, 249, 261, 123, 232, 0, 0,
	0, 109, 259, 245, 178, 155, 156, 108, 0, 217,
	131, 140, 128, 191, 256, 257, 127, 280, 115, 269,
	111, 116, 268, 185, 252, 260, 179, 171, 110, 258,
	177, 170, 161, 135, 147, 209, 168, 210, 148, 182,
	181, 183, 0, 0, 0, 243, 266, 281, 120, 0,
	251, 275, 276, 0, 213, 121, 141, 134, 208, 139,
	184, 117, 150, 240, 160, 167, 216, 279, 198, 222,
	124, 265, 241, 387, 398, 393, 394, 391, 392, 390,
	389, 388, 401, 379, 380, 381, 382, 384, 0, 395,
	396, 383, 102, 112, 164, 278, 214, 138, 267, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 113, 119, 125, 129,
	133, 136, 143, 146, 149, 151, 152, 153, 158, 169,
	173, 174, 175, 176, 186, 187, 188, 190, 193, 194,
	195, 196, 197, 200, 202, 203, 204, 205, 206, 207,
	215, 218, 224, 225, 226, 227, 228, 229, 231, 234,
	235, 236, 237, 244, 248, 254, 255, 264, 271, 274,
	0, 0, 0, 0, 106, 157, 172, 230, 233, 239,
	246, 192, 0, 0, 137, 154, 343, 0, 0, 0,
	132, 0, 342, 0, 0, 0, 163, 0, 0, 386,
	165, 0, 0, 242, 180, 0, 0, 0, 0, 0,
	377, 378, 0, 0, 0, 0, 0, 0, 1067, 0,
	64, 0, 0, 99, 100, 101, 364, 363, 366, 367,
	368, 369, 0, 0, 122, 365, 370, 371, 372, 1068,
	0, 0, 0, 340, 357, 0, 385, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 354, 355, 0, 0,
	0, 0, 400, 0, 356, 0, 0, 349, 350, 352,
	351, 353, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 399, 0, 0, 299, 0, 0, 397,
	0, 211, 0, 247, 145, 162, 118, 159, 103, 114,
	0, 144, 189, 219, 223, 0, 0, 0, 126, 0,
	221, 199, 263, 0, 201, 220, 166, 253, 212, 262,
	272, 273, 250, 270, 277, 238, 107, 249, 261, 123,
	232, 0, 0, 0, 109, 259, 245, 178, 155, 156,
	108, 0, 217, 131, 140, 128, 191, 256, 257, 127,
	280, 115, 269, 111, 116, 268, 185, 252, 260, 179,
	171, 110, 258, 177, 170, 161, 135, 147, 209, 168,
	210, 148, 182, 181, 183, 0, 0, 0, 243, 266,
	281, 120, 0, 251, 275, 276, 0, 213, 121, 141,
	134, 208, 139, 184, 117, 150, 240, 160, 167, 216,
	279, 198, 222, 124, 265, 241, 387, 398, 393, 394,
	391, 392, 390, 389, 388, 401, 379, 380, 381, 382,
	384, 0, 395, 396, 383, 102, 112, 164, 278, 214,
	138, 267, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 113,
	119, 125, 129, 133, 136, 143, 146, 149, 151, 152,
	153, 158, 169, 173, 174, 175, 176, 186, 187, 188,
	190, 193, 194, 195, 196, 197, 200, 202, 203, 204,
	205, 206, 207, 215, 218, 224, 225, 226, 227, 228,
	229, 231, 234, 235, 236, 237, 244, 248, 254, 255,
	264, 271, 274, 0, 0, 0, 0, 106, 157, 172,
	230, 233, 239, 246, 192, 0, 0, 137, 154, 343,
	0, 0, 0, 132, 0, 342, 0, 0, 0, 163,
	0, 0, 386, 165, 0, 0, 242, 180, 0, 0,
	0, 0, 0, 377, 378, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 418, 99, 100, 101, 364,
	363, 366, 367, 368, 369, 0, 0, 122, 365, 370,
	371, 372, 0, 0, 0, 0, 340, 357, 0, 385,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	355, 0, 0, 0, 0, 400, 0, 356, 0, 0,
	349, 350, 352, 351, 353, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 399, 0, 0, 299,
	0, 0, 397, 0, 211, 0, 247, 145, 162, 118,
	159, 103, 114, 0, 144, 189, 219, 223, 0, 0,
	0, 126, 0, 221, 199, 263, 0, 201, 220, 166,
	253, 212, 262, 272, 273, 250, 270, 277, 238, 107,
	249, 261, 123, 232, 0, 0, 0, 109, 259, 245,
	178, 155, 156, 108, 0, 217, 131, 140, 128, 191,
	256, 257, 127, 280, 115, 269, 111, 116, 268, 185,
	252, 260, 179, 171, 110, 258, 177, 170, 161, 135,
	147, 209, 168, 210, 148, 182, 181, 183, 0, 0,
	0, 243, 266, 281, 120, 0, 251, 275, 276, 0,
	213, 121, 141, 134, 208, 139, 184, 117, 150, 240,
	160, 167, 216, 279, 198, 222, 124, 265, 241, 387,
	398, 393, 394, 391, 392, 390, 389, 388, 401, 379,
	380, 381, 382, 384, 0, 395, 396, 383, 102, 112,
	164, 278, 214, 138, 267, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 113, 119, 125, 129, 133, 136, 143, 146,
	149, 151, 152, 153, 158, 169, 173, 174, 175, 176,
	186, 187, 188, 190, 193, 194, 195, 196, 197, 200,
	202, 203, 204, 205, 206, 207, 215, 218, 224, 225,
	226, 227, 228, 229, 231, 234, 235, 236, 237, 244,
	248, 254, 255, 264, 271, 274, 0, 0, 0, 0,
	106, 157, 172, 230, 233, 239, 246, 192, 0, 0,
	137, 154, 343, 0, 0, 0, 132, 0, 342, 0,
	0, 0, 163, 0, 0, 386, 165, 0, 0, 242,
	180, 0, 0, 0, 0, 0, 377, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 99,
	100, 101, 364, 363, 366, 367, 368, 369, 0, 0,
	122, 365, 370, 371, 372, 0, 0, 0, 0, 340,
	357, 0, 385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 355, 430, 0, 0, 0, 400, 0,
	356, 0, 0, 349, 350, 352, 351, 353, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 399,
	0, 0, 299, 0, 0, 397, 0, 211, 0, 247,
	145, 162, 118, 159, 103, 114, 0, 144, 189, 219,
	223, 0, 0, 0, 126, 0, 221, 199, 263, 0,
	201, 220, 166, 253, 212, 262, 272, 273, 250, 270,
	277, 238, 107, 249, 261, 123, 232, 0, 0, 0,
	109, 259, 245, 178, 155, 156, 108, 0, 217, 131,
	140, 128, 191, 256, 257, 127, 280, 115, 269, 111,
	116, 268, 185, 252, 260, 179, 171, 110, 258, 177,
	170, 161, 135, 147, 209, 168, 210, 148, 182, 181,
	183, 0, 0, 0, 243, 266, 281, 120, 0, 251,
	275, 276, 0, 213, 121, 141, 134, 208, 139, 184,
	117, 150, 240, 160, 167, 216, 279, 198, 222, 124,
	265, 241, 387, 398, 393, 394, 391, 392, 390, 389,
	388, 401, 379, 380, 381, 382, 384, 0, 395, 396,
	383, 102, 112, 164, 278, 214, 138, 267, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 143, 146, 149, 151, 152, 153, 158, 169, 173,
	174, 175, 176, 186, 187, 188, 190, 193, 194, 195,
	196, 197, 200, 202, 203, 204, 205, 206, 207, 215,
	218, 224, 225, 226, 227, 228, 229, 231, 234, 235,
	236, 237, 244, 248, 254, 255, 264, 271, 274, 0,
	0, 0, 0, 106, 157, 172, 230, 233, 239, 246,
	192, 0, 0, 137, 154, 343, 0, 0, 0, 132,
	0, 342, 0, 0, 0, 163, 0, 0, 386, 165,
	0, 0, 242, 180, 0, 0, 0, 0, 0, 377,
	378, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 99, 100, 101, 364, 973, 366, 367, 368,
	369, 0, 0, 122, 365, 370, 371, 372, 0, 0,
	0, 0, 340, 357, 0, 385, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 354, 355, 430, 0, 0,
	0, 400, 0, 356, 0, 0, 349, 350, 352, 351,
	353, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 399, 0, 0, 299, 0, 0, 397, 0,
	211, 0, 247, 145, 162, 118, 159, 103, 114, 0,
	144, 189, 219, 223, 0, 0, 0, 126, 0, 221,
	199, 263, 0, 201, 220, 166, 253, 212, 262, 272,
	273, 250, 270, 277, 238, 107, 249, 261, 123, 232,
	0, 0, 0, 109, 259, 245, 178, 155, 156, 108,
	0, 217, 131, 140, 128, 191, 256, 257, 127, 280,
	115, 269, 111, 116, 268, 185, 252, 260, 179, 171,
	110, 258, 177, 170, 161, 135, 147, 209, 168, 210,
	148, 182, 181, 183, 0, 0, 0, 243, 266, 281,
	120, 0, 251, 275, 276, 0, 213, 121, 141, 134,
	208, 139, 184, 117, 150, 240, 160, 167, 216, 279,
	198, 222, 124, 265, 241, 387, 398, 393, 394, 391,
	392, 390, 389, 388, 401, 379, 380, 381, 382, 384,
	0, 395, 396, 383, 102, 112, 164, 278, 214, 138,
	267, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 113, 119,
	125, 129, 133, 136, 143, 146, 149, 151, 152, 153,
	158, 169, 173, 174, 175, 176, 186, 187, 188, 190,
	193, 194, 195, 196, 197, 200, 202, 203, 204, 205,
	206, 207, 215, 218, 224, 225, 226, 227, 228, 229,
	231, 234, 235, 236, 237, 244, 248, 254, 255, 264,
	271, 274, 0, 0, 0, 0, 106, 157, 172, 230,
	233, 239, 246, 192, 0, 0, 137, 154, 343, 0,
	0, 0, 132, 0, 342, 0, 0, 0, 163, 0,
	0, 386, 165, 0, 0, 242, 180, 0, 0, 0,
	0, 0, 377, 378, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 99, 100, 101, 364, 970,
	366, 367, 368, 369, 0, 0, 122, 365, 370, 371,
	372, 0, 0, 0, 0, 340, 357, 0, 385, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 354, 355,
	430, 0, 0, 0, 400, 0, 356, 0, 0, 349,
	350, 352, 351, 353, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 399, 0, 0, 299, 0,
	0, 397, 0, 211, 0, 247, 145, 162, 118, 159,
	103, 114, 0, 144, 189, 219, 223, 0, 0, 0,
	126, 0, 221, 199, 263, 0, 201, 220, 166, 253,
	212, 262, 272, 273, 250, 270, 277, 238, 107, 249,
	261, 123, 232, 0, 0, 0, 109, 259, 245, 178,
	155, 156, 108, 0, 217, 131, 140, 128, 191, 256,
	257, 127, 280, 115, 269, 111, 116, 268, 185, 252,
	260, 179, 171, 110, 258, 177, 170, 161, 135, 147,
	209, 168, 210, 148, 182, 181, 183, 0, 0, 0,
	243, 266, 281, 120, 0, 251, 275, 276, 0, 213,
	121, 141, 134, 208, 139, 184, 117, 150, 240, 160,
	167, 216, 279, 198, 222, 124, 265, 241, 387, 398,
	393, 394, 391, 392, 390, 389, 388, 401, 379, 380,
	381, 382, 384, 0, 395, 396, 383, 102, 112, 164,
	278, 214, 138, 267, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 113, 119, 125, 129, 133, 136, 143, 146, 149,
	151, 152, 153, 158, 169, 173, 174, 175, 176, 186,
	187, 188, 190, 193, 194, 195, 196, 197, 200, 202,
	203, 204, 205, 206, 207, 215, 218, 224, 225, 226,
	227, 228, 229, 231, 234, 235, 236, 237, 244, 248,
	254, 255, 264, 271, 274, 411, 0, 0, 0, 106,
	157, 172, 230, 233, 239, 246, 0, 192, 0, 137,
	154, 0, 343, 0, 0, 0, 132, 0, 342, 0,
	0, 0, 163, 0, 0, 386, 165, 0, 0, 242,
	180, 0, 0, 0, 0, 0, 377, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 99,
	100, 101, 364, 363, 366, 367, 368, 369, 0, 0,
	122, 365, 370, 371, 372, 0, 0, 0, 0, 340,
	357, 0, 385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 355, 0, 0, 0, 0, 400, 0,
	356, 0, 0, 349, 350, 352, 351, 353, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 399,
	0, 0, 299, 0, 0, 397, 0, 211, 0, 247,
	145, 162, 118, 159, 103, 114, 0, 144, 189, 219,
	223, 0, 0, 0, 126, 0, 221, 199, 263, 0,
	201, 220, 166, 253, 212, 262, 272, 273, 250, 270,
	277, 238, 107, 249, 261, 123, 232, 0, 0, 0,
	109, 259, 245, 178, 155, 156, 108, 0, 217, 131,
	140, 128, 191, 256, 257, 127, 280, 115, 269, 111,
	116, 268, 185, 252, 260, 179, 171, 110, 258, 177,
	170, 161, 135, 147, 209, 168, 210, 148, 182, 181,
	183, 0, 0, 0, 243, 266, 281, 120, 0, 251,
	275, 276, 0, 213, 121, 141, 134, 208, 139, 184,
	117, 150, 240, 160, 167, 216, 279, 198, 222, 124,
	265, 241, 387, 398, 393, 394, 391, 392, 390, 389,
	388, 401, 379, 380, 381, 382, 384, 0, 395, 396,
	383, 102, 112, 164, 278, 214, 138, 267, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 143, 146, 149, 151, 152, 153, 158, 169, 173,
	174, 175, 176, 186, 187, 188, 190, 193, 194, 195,
	196, 197, 200, 202, 203, 204, 205, 206, 207, 215,
	218, 224, 225, 226, 227, 228, 229, 231, 234, 235,
	236, 237, 244, 248, 254, 255, 264, 271, 274, 0,
	0, 0, 0, 106, 157, 172, 230, 233, 239, 246,
	192, 0, 0, 137, 154, 343, 0, 0, 0, 132,
	0, 342, 0, 0, 0, 163, 0, 0, 386, 165,
	0, 0, 242, 180, 0, 0, 0, 0, 0, 377,
	378, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 99, 100, 101, 364, 363, 366, 367, 368,
	369, 0, 0, 122, 365, 370, 371, 372, 0, 0,
	0, 0, 340, 357, 0, 385, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 354, 355, 0, 0, 0,
	0, 400, 0, 356, 0, 0, 349, 350, 352, 351,
	353, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 399, 0, 0, 299, 0, 0, 397, 0,
	211, 0, 247, 145, 162, 118, 159, 103, 114, 0,
	144, 189, 219, 223, 0, 0, 0, 126, 0, 221,
	199, 263, 0, 201, 220, 166, 253, 212, 262, 272,
	273, 250, 270, 277, 238, 107, 249, 261, 123, 232,
	0, 0, 0, 109, 259, 245, 178, 155, 156, 108,
	0, 217, 131, 140, 128, 191, 256, 257, 127, 280,
	115, 269, 111, 116, 268, 185, 252, 260, 179, 171,
	110, 258, 177, 170, 161, 135, 147, 209, 168, 210,
	148, 182, 181, 183, 0, 0, 0, 243, 266, 281,
	120, 0, 251, 275, 276, 0, 213, 121, 141, 134,
	208, 139, 184, 117, 150, 240, 160, 167, 216, 279,
	198, 222, 124, 265, 241, 387, 398, 393, 394, 391,
	392, 390, 389, 388, 401, 379, 380, 381, 382, 384,
	0, 395, 396, 383, 102, 112, 164, 278, 214, 138,
	267, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 113, 119,
	125, 129, 133, 136, 143, 146, 149, 151, 152, 153,
	158, 169, 173, 174, 175, 176, 186, 187, 188, 190,
	193, 194, 195, 196, 197, 200, 202, 203, 204, 205,
	206, 207, 215, 218, 224, 225, 226, 227, 228, 229,
	231, 234, 235, 236, 237, 244, 248, 254, 255, 264,
	271, 274, 0, 0, 192, 0, 106, 157, 172, 230,
	233, 239, 246, 132, 0, 0, 137, 154, 0, 163,
	0, 0, 386, 165, 0, 0, 242, 180, 0, 0,
	0, 0, 0, 377, 378, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 99, 100, 101, 364,
	363, 366, 367, 368, 369, 0, 0, 122, 365, 370,
	371, 372, 0, 0, 0, 0, 0, 357, 0, 385,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	355, 0, 0, 0, 0, 400, 0, 356, 0, 0,
	349, 350, 352, 351, 353, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 399, 0, 0, 299,
	0, 0, 397, 0, 211, 0, 247, 145, 162, 118,
	159, 103, 114, 0, 144, 189, 219, 223, 0, 0,
	0, 126, 0, 221, 199, 263, 1667, 201, 220, 166,
	253, 212, 262, 272, 273, 250, 270, 277, 238, 107,
	249, 261, 123, 232, 0, 0, 0, 109, 259, 245,
	178, 155, 156, 108, 0, 217, 131, 140, 128, 191,
	256, 257, 127, 280, 115, 269, 111, 116, 268, 185,
	252, 260, 179, 171, 110, 258, 177, 170, 161, 135,
	147, 209, 168, 210, 148, 182, 181, 183, 0, 0,
	0, 243, 266, 281, 120, 0, 251, 275, 276, 0,
	213, 121, 141, 134, 208, 139, 184, 117, 150, 240,
	160, 167, 216, 279, 198, 222, 124, 265, 241, 387,
	398, 393, 394, 391, 392, 390, 389, 388, 401, 379,
	380, 381, 382, 384, 0, 395, 396, 383, 102, 112,
	164, 278, 214, 138, 267, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 113, 119, 125, 129, 133, 136, 143, 146,
	149, 151, 152, 153, 158, 169, 173, 174, 175, 176,
	186, 187, 188, 190, 193, 194, 195, 196, 197, 200,
	202, 203, 204, 205, 206, 207, 215, 218, 224, 225,
	226, 227, 228, 229, 231, 234, 235, 236, 237, 244,
	248, 254, 255, 264, 271, 274, 0, 0, 192, 0,
	106, 157, 172, 230, 233, 239, 246, 132, 0, 0,
	137, 154, 0, 163, 0, 0, 386, 165, 0, 0,
	242, 180, 0, 0, 0, 0, 0, 377, 378, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 418,
	99, 100, 101, 364, 363, 366, 367, 368, 369, 0,
	0, 122, 365, 370, 371, 372, 0, 0, 0, 0,
	0, 357, 0, 385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 354, 355, 0, 0, 0, 0, 400,
	0, 356, 0, 0, 349, 350, 352, 351, 353, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	399, 0, 0, 299, 0, 0, 397, 0, 211, 0,
	247, 145, 162, 118, 159, 103, 114, 0, 144, 189,
	219, 223, 0, 0, 0, 126, 0, 221, 199, 263,
	0, 201, 220, 166, 253, 212, 262, 272, 273, 250,
	270, 277, 238, 107, 249, 261, 123, 232, 0, 0,
	0, 109, 259, 245, 178, 155, 156, 108, 0, 217,
	131, 140, 128, 191, 256, 257, 127, 280, 115, 269,
	111, 116, 268, 185, 252, 260, 179, 171, 110, 258,
	177, 170, 161, 135, 147, 209, 168, 210, 148, 182,
	181, 183, 0, 0, 0, 243, 266, 281, 120, 0,
	251, 275, 276, 0, 213, 121, 141, 134, 208, 139,
	184, 117, 150, 240, 160, 167, 216, 279, 198, 222,
	124, 265, 241, 387, 398, 393, 394, 391, 392, 390,
	389, 388, 401, 379, 380, 381, 382, 384, 0, 395,
	396, 383, 102, 112, 164, 278, 214, 138, 267, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 113, 119, 125, 129,
	133, 136, 143, 146, 149, 151, 152, 153, 158, 169,
	173, 174, 175, 176, 186, 187, 188, 190, 193, 194,
	195, 196, 197, 200, 202, 203, 204, 205, 206, 207,
	215, 218, 224, 225, 226, 227, 228, 229, 231, 234,
	235, 236, 237, 244, 248, 254, 255, 264, 271, 274,
	0, 0, 192, 0, 106, 157, 172, 230, 233, 239,
	246, 132, 0, 0, 137, 154, 0, 163, 0, 0,
	386, 165, 0, 0, 242, 180, 0, 0, 0, 0,
	0, 377, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 99, 100, 101, 364, 363, 366,
	367, 368, 369, 0, 0, 122, 365, 370, 371, 372,
	0, 0, 0, 0, 0, 357, 0, 385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 355, 0,
	0, 0, 0, 400, 0, 356, 0, 0, 349, 350,
	352, 351, 353, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 399, 0, 0, 299, 0, 0,
	397, 0, 211, 0, 247, 145, 162, 118, 159, 103,
	114, 0, 144, 189, 219, 223, 0, 0, 0, 126,
	0, 221, 199, 263, 0, 201, 220, 166, 253, 212,
	262, 272, 273, 250, 270, 277, 238, 107, 249, 261,
	123, 232, 0, 0, 0, 109, 259, 245, 178, 155,
	156, 108, 0, 217, 131, 140, 128, 191, 256, 257,
	127, 280, 115, 269, 111, 116, 268, 185, 252, 260,
	179, 171, 110, 258, 177, 170, 161, 135, 147, 209,
	168, 210, 148, 182, 181, 183, 0, 0, 0, 243,
	266, 281, 120, 0, 251, 275, 276, 0, 213, 121,
	141, 134, 208, 139, 184, 117, 150, 240, 160, 167,
	216, 279, 198, 222, 124, 265, 241, 387, 398, 393,
	394, 391, 392, 390, 389, 388, 401, 379, 380, 381,
	382, 384, 0, 395, 396, 383, 102, 112, 164, 278,
	214, 138, 267, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	113, 119, 125, 129, 133, 136, 143, 146, 149, 151,
	152, 153, 158, 169, 173, 174, 175, 176, 186, 187,
	188, 190, 193, 194, 195, 196, 197, 200, 202, 203,
	204, 205, 206, 207, 215, 218, 224, 225, 226, 227,
	228, 229, 231, 234, 235, 236, 237, 244, 248, 254,
	255, 264, 271, 274, 0, 0, 192, 0, 106, 157,
	172, 230, 233, 239, 246, 132, 0, 0, 137, 154,
	0, 163, 0, 0, 0, 165, 0, 0, 242, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 664, 663, 673,
	674, 666, 667, 668, 669, 670, 671, 672, 665, 0,
	0, 675, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 299, 0, 0, 0, 0, 211, 0, 247, 145,
	162, 118, 159, 103, 114, 0, 144, 189, 219, 223,
	0, 0, 0, 126, 0, 221, 199, 263, 0, 201,
	220, 166, 253, 212, 262, 272, 273, 250, 270, 277,
	238, 107, 249, 261, 123, 232, 0, 0, 0, 109,
	259, 245, 178, 155, 156, 108, 0, 217, 131, 140,
	128, 191, 256, 257, 127, 280, 115, 269, 111, 116,
	268, 185, 252, 260, 179, 171, 110, 258, 177, 170,
	161, 135, 147, 209, 168, 210, 148, 182, 181, 183,
	0, 0, 0, 243, 266, 281, 120, 0, 251, 275,
	276, 0, 213, 121, 141, 134, 208, 139, 184, 117,
	150, 240, 160, 167, 216, 279, 198, 222, 124, 265,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 112, 164, 278, 214, 138, 267, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 113, 119, 125, 129, 133, 136,
	143, 146, 149, 151, 152, 153, 158, 169, 173, 174,
	175, 176, 186, 187, 188, 190, 193, 194, 195, 196,
	197, 200, 202, 203, 204, 205, 206, 207, 215, 218,
	224, 225, 226, 227, 228, 229, 231, 234, 235, 236,
	237, 244, 248, 254, 255, 264, 271, 274, 0, 0,
	0, 0, 106, 157, 172, 230, 233, 239, 246, 0,
	192, 0, 137, 154, 764, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 163, 0, 0, 0, 165,
	0, 0, 242, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 101, 0, 766, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 653,
	654, 652, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 655, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 299, 0, 0, 0, 0,
	211, 0, 247, 145, 162, 118, 159, 103, 114, 0,
	144, 189, 219, 223, 0, 0, 0, 126, 0, 221,
	199, 263, 0, 201, 220, 166, 253, 212, 262, 272,
	273, 250, 270, 277, 238, 107, 249, 261, 123, 232,
	0, 0, 0, 109, 259, 245, 178, 155, 156, 108,
	0, 217, 131, 140, 128, 191, 256, 257, 127, 280,
	115, 269, 111, 116, 268, 185, 252, 260, 179, 171,
	110, 258, 177, 170, 161, 135, 147, 209, 168, 210,
	148, 182, 181, 183, 0, 0, 0, 243, 266, 281,
	120, 0, 251, 275, 276, 0, 213, 121, 141, 134,
	208, 139, 184, 117, 150, 240, 160, 167, 216, 279,
	198, 222, 124, 265, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 112, 164, 278, 214, 138,
	267, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 113, 119,
	125, 129, 133, 136, 143, 146, 149, 151, 152, 153,
	158, 169, 173, 174, 175, 176, 186, 187, 188, 190,
	193, 194, 195, 196, 197, 200, 202, 203, 204, 205,
	206, 207, 215, 218, 224, 225, 226, 227, 228, 229,
	231, 234, 235, 236, 237, 244, 248, 254, 255, 264,
	271, 274, 0, 0, 192, 0, 106, 157, 172, 230,
	233, 239, 246, 132, 0, 0, 137, 154, 0, 163,
	0, 0, 0, 165, 0, 0, 242, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 93, 94, 0, 90,
	0, 0, 0, 95, 211, 0, 247, 145, 162, 118,
	159, 103, 114, 0, 144, 189, 219, 223, 0, 0,
	0, 126, 0, 221, 199, 263, 0, 201, 220, 166,
	253, 212, 262, 272, 273, 250, 270, 277, 238, 107,
	249, 261, 123, 232, 0, 0, 0, 109, 259, 245,
	178, 155, 156, 108, 0, 217, 131, 140, 128, 191,
	256, 257, 127, 280, 115, 269, 111, 116, 268, 185,
	252, 260, 179, 171, 110, 258, 177, 170, 161, 135,
	147, 209, 168, 210, 148, 182, 181, 183, 0, 0,
	0, 243, 266, 281, 120, 0, 251, 275, 276, 0,
	213, 121, 141, 134, 208, 139, 184, 117, 150, 240,
	160, 167, 216, 279, 198, 222, 124, 265, 241, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 112,
	164, 278, 214, 138, 267, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 113, 119, 125, 129, 133, 136, 143, 146,
	149, 151, 152, 153, 158, 169, 173, 174, 175, 176,
	186, 187, 188, 190, 193, 194, 195, 196, 197, 200,
	202, 203, 204, 205, 206, 207, 215, 218, 224, 225,
	226, 227, 228, 229, 231, 234, 235, 236, 237, 244,
	248, 254, 255, 264, 271, 274, 0, 0, 0, 0,
	106, 157, 172, 230, 233, 239, 246, 0, 192, 0,
	137, 154, 1050, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 163, 0, 0, 0, 165, 0, 0,
	242, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 101, 0, 1052, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 299, 0, 0, 0, 0, 211, 0,
	247, 145, 162, 118, 159, 103, 114, 0, 144, 189,
	219, 223, 0, 0, 0, 126, 0, 221, 199, 263,
	0, 201, 220, 166, 253, 212, 262, 272, 273, 250,
	270, 277, 238, 107, 249, 261, 123, 232, 0, 0,
	0, 109, 259, 245, 178, 155, 156, 108, 0, 217,
	131, 140, 128, 191, 256, 257, 127, 280, 115, 269,
	111, 116, 268, 185, 252, 260, 179, 171, 110, 258,
	177, 170, 161, 135, 147, 209, 168, 210, 148, 182,
	181, 183, 0, 0, 0, 243, 266, 281, 120, 0,
	251, 275, 276, 0, 213, 121, 141, 134, 208, 139,
	184, 117, 150, 240, 160, 167, 216, 279, 198, 222,
	124, 265, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 112, 164, 278, 214, 138, 267, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 113, 119, 125, 129,
	133, 136, 143, 146, 149, 151, 152, 153, 158, 169,
	173, 174, 175, 176, 186, 187, 188, 190, 193, 194,
	195, 196, 197, 200, 202, 203, 204, 205, 206, 207,
	215, 218, 224, 225, 226, 227, 228, 229, 231, 234,
	235, 236, 237, 244, 248, 254, 255, 264, 271, 274,
	33, 0, 0, 0, 106, 157, 172, 230, 233, 239,
	246, 0, 192, 0, 137, 154, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 163, 0, 0,
	0, 165, 0, 0, 242, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 99, 100, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 299, 0, 0,
	0, 0, 211, 0, 247, 145, 162, 118, 159, 103,
	114, 0, 144, 189, 219, 223, 0, 0, 0, 126,
	0, 221, 199, 263, 0, 201, 220, 166, 253, 212,
	262, 272, 273, 250, 270, 277, 238, 107, 249, 261,
	123, 232, 0, 0, 0, 109, 259, 245, 178, 155,
	156, 108, 0, 217, 131, 140, 128, 191, 256, 257,
	127, 280, 115, 269, 111, 116, 268, 185, 252, 260,
	179, 171, 110, 258, 177, 170, 161, 135, 147, 209,
	168, 210, 148, 182, 181, 183, 0, 0, 0, 243,
	266, 281, 120, 0, 251, 275, 276, 0, 213, 121,
	141, 134, 208, 139, 184, 117, 150, 240, 160, 167,
	216, 279, 198, 222, 124, 265, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 112, 164, 278,
	214, 138, 267, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	113, 119, 125, 129, 133, 136, 143, 146, 149, 151,
	152, 153, 158, 169, 173, 174, 175, 176, 186, 187,
	188, 190, 193, 194, 195, 196, 197, 200, 202, 203,
	204, 205, 206, 207, 215, 218, 224, 225, 226, 227,
	228, 229, 231, 234, 235, 236, 237, 244, 248, 254,
	255, 264, 271, 274, 33, 0, 0, 0, 106, 157,
	172, 230, 233, 239, 246, 0, 192, 0, 137, 154,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 165, 0, 0, 242, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 99, 100,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 299, 0, 0, 0, 0, 211, 0, 247, 145,
	162, 118, 159, 103, 114, 0, 144, 189, 219, 223,
	0, 0, 0, 126, 0, 221, 199, 263, 0, 201,
	220, 166, 253, 212, 262, 272, 273, 250, 270, 277,
	238, 107, 249, 261, 123, 232, 0, 0, 0, 109,
	259, 245, 178, 155, 156, 108, 0, 217, 131, 140,
	128, 191, 256, 257, 127, 280, 115, 269, 111, 116,
	268, 185, 252, 260, 179, 171, 110, 258, 177, 170,
	161, 135, 147, 209, 168, 210, 148, 182, 181, 183,
	0, 0, 0, 243, 266, 281, 120, 0, 251, 275,
	276, 0, 213, 121, 141, 134, 208, 139, 184, 117,
	150, 240, 160, 167, 216, 279, 198, 222, 124, 265,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 112, 164, 278, 214, 138, 267, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 113, 119, 125, 129, 133, 136,
	143, 146, 149, 151, 152, 153, 158, 169, 173, 174,
	175, 176, 186, 187, 188, 190, 193, 194, 195, 196,
	197, 200, 202, 203, 204, 205, 206, 207, 215, 218,
	224, 225, 226, 227, 228, 229, 231, 234, 235, 236,
	237, 244, 248, 254, 255, 264, 271, 274, 0, 0,
	0, 0, 106, 157, 172, 230, 233, 239, 246, 0,
	192, 0, 1045, 154, 1050, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 163, 0, 0, 0, 165,
	0, 0, 242, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 101, 0, 1052, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 299, 0, 0, 0, 0,
	211, 0, 247, 145, 162, 118, 159, 103, 114, 0,
	144, 189, 219, 223, 0, 0, 0, 126, 0, 221,
	199, 263, 0, 1048, 220, 166, 253, 212, 262, 272,
	273, 250, 270, 277, 238, 107, 249, 261, 123, 232,
	0, 0, 0, 109, 259, 245, 178, 155, 156, 108,
	0, 217, 131, 140, 128, 191, 256, 257, 127, 280,
	115, 269, 111, 116, 268, 185, 252, 260, 179, 171,
	110, 258, 177, 170, 161, 135, 147, 209, 168, 210,
	148, 182, 181, 183, 0, 0, 0, 243, 266, 281,
	120, 0, 251, 275, 276, 0, 213, 121, 141, 134,
	208, 139, 184, 117, 150, 240, 160, 167, 216, 279,
	198, 222, 124, 265, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 112, 164, 278, 214, 138,
	267, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 113, 119,
	125, 129, 133, 136, 143, 146, 149, 151, 152, 153,
	158, 169, 173, 174, 175, 176, 186, 187, 188, 190,
	193, 194, 195, 196, 197, 200, 202, 203, 204, 205,
	206, 207, 215, 218, 224, 225, 226, 227, 228, 229,
	231, 234, 235, 236, 237, 244, 248, 254, 255, 264,
	271, 274, 0, 0, 192, 0, 106, 157, 172, 230,
	233, 239, 246, 132, 0, 0, 137, 154, 0, 163,
	0, 0, 0, 165, 0, 0, 242, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 101, 0,
	0, 1014, 0, 0, 1015, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 299,
	0, 0, 0, 0, 211, 0, 247, 145, 162, 118,
	159, 103, 114, 0, 144, 189, 219, 223, 0, 0,
	0, 126, 0, 221, 199, 263, 0, 201, 220, 166,
	253, 212, 262, 272, 273, 250, 270, 277, 238, 107,
	249, 261, 123, 232, 0, 0, 0, 109, 259, 245,
	178, 155, 156, 108, 0, 217, 131, 140, 128, 191,
	256, 257, 127, 280, 115, 269, 111, 116, 268, 185,
	252, 260, 179, 171, 110, 258, 177, 170, 161, 135,
	147, 209, 168, 210, 148, 182, 181, 183, 0, 0,
	0, 243, 266, 281, 120, 0, 251, 275, 276, 0,
	213, 121, 141, 134, 208, 139, 184, 117, 150, 240,
	160, 167, 216, 279, 198, 222, 124, 265, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 112,
	164, 278, 214, 138, 267, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 113, 119, 125, 129, 133, 136, 143, 146,
	149, 151, 152, 153, 158, 169, 173, 174, 175, 176,
	186, 187, 188, 190, 193, 194, 195, 196, 197, 200,
	202, 203, 204, 205, 206, 207, 215, 218, 224, 225,
	226, 227, 228, 229, 231, 234, 235, 236, 237, 244,
	248, 254, 255, 264, 271, 274, 0, 0, 192, 0,
	106, 157, 172, 230, 233, 239, 246, 132, 0, 799,
	137, 154, 0, 163, 0, 0, 0, 165, 0, 0,
	242, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 101, 0, 798, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 299, 0, 0, 0, 0, 211, 0,
	247, 145, 162, 118, 159, 103, 114, 0, 144, 189,
	219, 223, 0, 0, 0, 126, 0, 221, 199, 263,
	0, 201, 220, 166, 253, 212, 262, 272, 273, 250,
	270, 277, 238, 107, 249, 261, 123, 232, 0, 0,
	0, 109, 259, 245, 178, 155, 156, 108, 0, 217,
	131, 140, 128, 191, 256, 257, 127, 280, 115, 269,
	111, 116, 268, 185, 252, 260, 179, 171, 110, 258,
	177, 170, 161, 135, 147, 209, 168, 210, 148, 182,
	181, 183, 0, 0, 0, 243, 266, 281, 120, 0,
	251, 275, 276, 0, 213, 121, 141, 134, 208, 139,
	184, 117, 150, 240, 160, 167, 216, 279, 198, 222,
	124, 265, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 112, 164, 278, 214, 138, 267, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 113, 119, 125, 129,
	133, 136, 143, 146, 149, 151, 152, 153, 158, 169,
	173, 174, 175, 176, 186, 187, 188, 190, 193, 194,
	195, 196, 197, 200, 202, 203, 204, 205, 206, 207,
	215, 218, 224, 225, 226, 227, 228, 229, 231, 234,
	235, 236, 237, 244, 248, 254, 255, 264, 271, 274,
	0, 0, 192, 0, 106, 157, 172, 230, 233, 239,
	246, 132, 0, 0, 137, 154, 0, 163, 0, 0,
	0, 165, 0, 0, 242, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 418, 99, 100, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 299, 0, 0,
	0, 0, 211, 0, 247, 145, 162, 118, 159, 103,
	114, 0, 144, 189, 219, 223, 0, 0, 0, 126,
	0, 221, 199, 263, 0, 201, 220, 166, 253, 212,
	262, 272, 273, 250, 270, 277, 238, 107, 249, 261,
	123, 232, 0, 0, 0, 109, 259, 245, 178, 155,
	156, 108, 0, 217, 131, 140, 128, 191, 256, 257,
	127, 280, 115, 269, 111, 116, 268, 185, 252, 260,
	179, 171, 110, 258, 177, 170, 161, 135, 147, 209,
	168, 210, 148, 182, 181, 183, 0, 0, 0, 243,
	266, 281, 120, 0, 251, 275, 276, 0, 213, 121,
	141, 134, 208, 139, 184, 117, 150, 240, 160, 167,
	216, 279, 198, 222, 124, 265, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 112, 164, 278,
	214, 138, 267, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	113, 119, 125, 129, 133, 136, 143, 146, 149, 151,
	152, 153, 158, 169, 173, 174, 175, 176, 186, 187,
	188, 190, 193, 194, 195, 196, 197, 200, 202, 203,
	204, 205, 206, 207, 215, 218, 224, 225, 226, 227,
	228, 229, 231, 234, 235, 236, 237, 244, 248, 254,
	255, 264, 271, 274, 0, 0, 192, 0, 106, 157,
	172, 230, 233, 239, 246, 132, 0, 0, 137, 154,
	0, 163, 0, 0, 0, 165, 0, 0, 242, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 99, 100,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 299, 0, 0, 0, 0, 211, 0, 247, 145,
	162, 118, 159, 103, 114, 0, 144, 189, 219, 223,
	0, 0, 0, 126, 0, 221, 199, 263, 0, 201,
	220, 166, 253, 212, 262, 272, 273, 250, 270, 277,
	238, 107, 249, 261, 123, 232, 0, 0, 0, 109,
	259, 245, 178, 155, 156, 108, 0, 217, 131, 140,
	128, 191, 256, 257, 127, 280, 115, 269, 111, 116,
	268, 185, 252, 260, 179, 171, 110, 258, 177, 170,
	161, 135, 147, 209, 168, 210, 148, 182, 181, 183,
	0, 0, 0, 243, 266, 281, 120, 0, 251, 275,
	276, 0, 213, 121, 141, 134, 208, 139, 184, 117,
	150, 240, 160, 167, 216, 279, 198, 222, 124, 265,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 112, 164, 278, 214, 138, 267, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 113, 119, 125, 129, 133, 136,
	143, 146, 149, 151, 152, 153, 158, 169, 173, 174,
	175, 176, 186, 187, 188, 190, 193, 194, 195, 196,
	197, 200, 202, 203, 204, 205, 206, 207, 215, 218,
	224, 225, 226, 227, 228, 229, 231, 234, 235, 236,
	237, 244, 248, 254, 255, 264, 271, 274, 0, 0,
	192, 0, 106, 157, 172, 230, 233, 239, 246, 132,
	0, 0, 137, 154, 0, 163, 0, 0, 0, 165,
	0, 0, 242, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 101, 0, 1052, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 299, 0, 0, 0, 0,
	211, 0, 247, 145, 162, 118, 159, 103, 114, 0,
	144, 189, 219, 223, 0, 0, 0, 126, 0, 221,
	199, 263, 0, 201, 220, 166, 253, 212, 262, 272,
	273, 250, 270, 277, 238, 107, 249, 261, 123, 232,
	0, 0, 0, 109, 259, 245, 178, 155, 156, 108,
	0, 217, 131, 140, 128, 191, 256, 257, 127, 280,
	115, 269, 111, 116, 268, 185, 252, 260, 179, 171,
	110, 258, 177, 170, 161, 135, 147, 209, 168, 210,
	148, 182, 181, 183, 0, 0, 0, 243, 266, 281,
	120, 0, 251, 275, 276, 0, 213, 121, 141, 134,
	208, 139, 184, 117, 150, 240, 160, 167, 216, 279,
	198, 222, 124, 265, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 112, 164, 278, 214, 138,
	267, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 113, 119,
	125, 129, 133, 136, 143, 146, 149, 151, 152, 153,
	158, 169, 173, 174, 175, 176, 186, 187, 188, 190,
	193, 194, 195, 196, 197, 200, 202, 203, 204, 205,
	206, 207, 215, 218, 224, 225, 226, 227, 228, 229,
	231, 234, 235, 236, 237, 244, 248, 254, 255, 264,
	271, 274, 0, 0, 192, 0, 106, 157, 172, 230,
	233, 239, 246, 132, 0, 0, 137, 154, 0, 163,
	0, 0, 0, 165, 0, 0, 242, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 101, 0,
	1166, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 299,
	0, 0, 0, 0, 211, 0, 247, 145, 162, 118,
	159, 103, 114, 0, 144, 189, 219, 223, 0, 0,
	0, 126, 0, 221, 199, 263, 0, 201, 220, 166,
	253, 212, 262, 272, 273, 250, 270, 277, 238, 107,
	249, 261, 123, 232, 0, 0, 0, 109, 259, 245,
	178, 155, 156, 108, 0, 217, 131, 140, 128, 191,
	256, 257, 127, 280, 115, 269, 111, 116, 268, 185,
	252, 260, 179, 171, 110, 258, 177, 170, 161, 135,
	147, 209, 168, 210, 148, 182, 181, 183, 0, 0,
	0, 243, 266, 281, 120, 0, 251, 275, 276, 0,
	213, 121, 141, 134, 208, 139, 184, 117, 150, 240,
	160, 167, 216, 279, 198, 222, 124, 265, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 112,
	164, 278, 214, 138, 267, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 113, 119, 125, 129, 133, 136, 143, 146,
	149, 151, 152, 153, 158, 169, 173, 174, 175, 176,
	186, 187, 188, 190, 193, 194, 195, 196, 197, 200,
	202, 203, 204, 205, 206, 207, 215, 218, 224, 225,
	226, 227, 228, 229, 231, 234, 235, 236, 237, 244,
	248, 254, 255, 264, 271, 274, 0, 0, 0, 192,
	106, 157, 172, 230, 233, 239, 246, 769, 132, 0,
	137, 154, 0, 0, 163, 0, 0, 0, 165, 0,
	0, 242, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 299, 0, 0, 0, 0, 211,
	0, 247, 145, 162, 118, 159, 103, 114, 0, 144,
	189, 219, 223, 0, 0, 0, 126, 0, 221, 199,
	263, 0, 201, 220, 166, 253, 212, 262, 272, 273,
	250, 270, 277, 238, 107, 249, 261, 123, 232, 0,
	0, 0, 109, 259, 245, 178, 155, 156, 108, 0,
	217, 131, 140, 128, 191, 256, 257, 127, 280, 115,
	269, 111, 116, 268, 185, 252, 260, 179, 171, 110,
	258, 177, 170, 161, 135, 147, 209, 168, 210, 148,
	182, 181, 183, 0, 0, 0, 243, 266, 281, 120,
	0, 251, 275, 276, 0, 213, 121, 141, 134, 208,
	139, 184, 117, 150, 240, 160, 167, 216, 279, 198,
	222, 124, 265, 241, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 112, 164, 278, 214, 138, 267,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 113, 119, 125,
	129, 133, 136, 143, 146, 149, 151, 152, 153, 158,
	169, 173, 174, 175, 176, 186, 187, 188, 190, 193,
	194, 195, 196, 197, 200, 202, 203, 204, 205, 206,
	207, 215, 218, 224, 225, 226, 227, 228, 229, 231,
	234, 235, 236, 237, 244, 248, 254, 255, 264, 271,
	274, 0, 0, 192, 0, 106, 157, 172, 230, 233,
	239, 246, 132, 0, 0, 137, 154, 0, 163, 0,
	0, 0, 165, 0, 0, 242, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 101, 0, 766,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 299, 0,
	0, 0, 0, 211, 0, 247, 145, 162, 118, 159,
	103, 114, 0, 144, 189, 219, 223, 0, 0, 0,
	126, 0, 221, 199, 263, 0, 201, 220, 166, 253,
	212, 262, 272, 273, 250, 270, 277, 238, 107, 249,
	261, 123, 232, 0, 0, 0, 109, 259, 245, 178,
	155, 156, 108, 0, 217, 131, 140, 128, 191, 256,
	257, 127, 280, 115, 269, 111, 116, 268, 185, 252,
	260, 179, 171, 110, 258, 177, 170, 161, 135, 147,
	209, 168, 210, 148, 182, 181, 183, 0, 0, 0,
	243, 266, 281, 120, 0, 251, 275, 276, 0, 213,
	121, 141, 134, 208, 139, 184, 117, 150, 240, 160,
	167, 216, 279, 198, 222, 124, 265, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 112, 164,
	278, 214, 138, 267, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 113, 119, 125, 129, 133, 136, 143, 146, 149,
	151, 152, 153, 158, 169, 173, 174, 175, 176, 186,
	187, 188, 190, 193, 194, 195, 196, 197, 200, 202,
	203, 204, 205, 206, 207, 215, 218, 224, 225, 226,
	227, 228, 229, 231, 234, 235, 236, 237, 244, 248,
	254, 255, 264, 271, 274, 0, 0, 0, 0, 106,
	157, 172, 230, 233, 239, 246, 435, 0, 0, 137,
	154, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 163, 0,
	0, 0, 165, 0, 0, 242, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 299, 0,
	0, 0, 0, 211, 0, 247, 145, 162, 118, 159,
	103, 114, 0, 144, 189, 219, 223, 0, 0, 0,
	126, 0, 221, 199, 263, 0, 201, 220, 166, 253,
	212, 262, 272, 273, 250, 270, 277, 238, 107, 249,
	261, 123, 232, 0, 0, 0, 109, 259, 245, 178,
	155, 156, 108, 0, 217, 131, 140, 128, 191, 256,
	257, 127, 280, 115, 269, 111, 116, 268, 185, 252,
	260, 179, 171, 110, 258, 177, 170, 161, 135, 147,
	209, 168, 210, 148, 182, 181, 183, 0, 0, 0,
	243, 266, 281, 120, 0, 251, 275, 276, 0, 213,
	121, 141, 134, 208, 139, 184, 117, 150, 240, 160,
	167, 216, 279, 198, 222, 124, 265, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 112, 164,
	278, 214, 138, 267, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 113, 119, 125, 129, 133, 136, 143, 146, 149,
	151, 152, 153, 158, 169, 173, 174, 175, 176, 186,
	187, 188, 190, 193, 194, 195, 196, 197, 200, 202,
	203, 204, 205, 206, 207, 215, 218, 224, 225, 226,
	227, 228, 229, 231, 234, 235, 236, 237, 244, 248,
	254, 255, 264, 271, 274, 0, 0, 192, 0, 106,
	157, 172, 230, 233, 239, 246, 132, 0, 0, 137,
	154, 0, 163, 0, 0, 0, 165, 0, 0, 242,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	294, 0, 299, 0, 0, 0, 0, 211, 0, 247,
	145, 162, 118, 159, 103, 114, 0, 144, 189, 219,
	223, 0, 0, 0, 126, 0, 221, 199, 263, 0,
	201, 220, 166, 253, 212, 262, 272, 273, 250, 270,
	277, 238, 107, 249, 261, 123, 232, 0, 0, 0,
	109, 259, 245, 178, 155, 156, 108, 0, 217, 131,
	140, 128, 191, 256, 257, 127, 280, 115, 269, 111,
	116, 268, 185, 252, 260, 179, 171, 110, 258, 177,
	170, 161, 135, 147, 209, 168, 210, 148, 182, 181,
	183, 0, 0, 0, 243, 266, 281, 120, 0, 251,
	275, 276, 0, 213, 121, 141, 134, 208, 139, 184,
	117, 150, 240, 160, 167, 216, 279, 198, 222, 124,
	265, 241, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 112, 164, 278, 214, 138, 267, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 113, 119, 125, 129, 133,
	136, 143, 146, 149, 151, 152, 153, 158, 169, 173,
	174, 175, 176, 186, 187, 188, 190, 193, 194, 195,
	196, 197, 200, 202, 203, 204, 205, 206, 207, 215,
	218, 224, 225, 226, 227, 228, 229, 231, 234, 235,
	236, 237, 244, 248, 254, 255, 264, 271, 274, 0,
	0, 192, 0, 106, 157, 172, 230, 233, 239, 246,
	132, 0, 0, 137, 154, 0, 163, 0, 0, 0,
	165, 0, 0, 242, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 299, 0, 0, 0,
	0, 211, 0, 247, 145, 162, 118, 159, 103, 114,
	0, 144, 189, 219, 223, 0, 0, 0, 126, 0,
	221, 199, 263, 0, 201, 220, 166, 253, 212, 262,
	272, 273, 250, 270, 277, 238, 107, 249, 261, 123,
	232, 0, 0, 0, 109, 259, 245, 178, 155, 156,
	108, 0, 217, 131, 140, 128, 191, 256, 257, 127,
	280, 115, 269, 111, 116, 268, 185, 252, 260, 179,
	171, 110, 258, 177, 170, 161, 135, 147, 209, 168,
	210, 148, 182, 181, 183, 0, 0, 0, 243, 266,
	281, 120, 0, 251, 275, 276, 0, 213, 121, 141,
	134, 208, 139, 184, 117, 150, 240, 160, 167, 216,
	279, 198, 222, 124, 265, 241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 112, 164, 278, 214,
	138, 267, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 113,
	119, 125, 129, 133, 136, 143, 146, 149, 151, 152,
	153, 158, 169, 173, 174, 175, 176, 186, 187, 188,
	190, 193, 194, 195, 196, 197, 200, 202, 203, 204,
	205, 206, 207, 215, 218, 224, 225, 226, 227, 228,
	229, 231, 234, 235, 236, 237, 244, 248, 254, 255,
	264, 271, 274, 0, 0, 0, 0, 106, 157, 172,
	230, 233, 239, 246, 0, 0, 0, 137, 154,
}

var yyPact = [...]int{
	120, -1000, -286, 1150, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1099, 930, -1000, -1000, -1000, -1000, -1000, -1000, 356,
	12536, 77, 189, 10, 17409, 188, 24, 17753, -1000, 39,
	-1000, 28, 17753, 35, -28, -1000, -1000, -52, -77, -1000,
	10462, -266, -1000, 556, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 909, 1088, 1081, 1095, 754, 1386, -1000,
	9049, 113, 113, 17065, 7635, -1000, -1000, 354, 17753, 185,
	17753, -129, 106, 106, 106, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 184, 17753, 668, 668, 295, -1000, 17753, 104,
	668, 104, 104, 104, 17753, -1000, 265, -1000, -1000, -1000,
	17753, 668, 1016, 510, 138, 5038, -1000, 316, -1000, 5038,
	59, 5038, -19, 1118, 48, 11, -1000, 668, -1000, -1000,
	-1000, -1000, -1000, -1000, 149, -1000, -1000, 17753, -93, 166,
	383, -1000, -1000, -1000, -1000, -1000, -1000, 779, 513, -1000,
	10462, 1649, 680, 680, -1000, -1000, 200, -1000, -1000, 11494,
	11494, 11494, 11494, 11494, 11494, 11494, 11494, 11494, 11494, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 680, 264, -1000, 10109, 680, 680, 680,
	680, 680, 680, 680, 680, 10462, 680, 680, 680, 680,
	680, 680, 680, 680, 680, 680, 680, 680, 680, 680,
	680, 680, -1000, -1000, -260, -279, 17753, -1000, 1099, -1000,
	930, -1000, -1000, -1000, 1084, 10462, 10462, 1099, -1000, 986,
	9049, -1000, -1000, 1142, -1000, -1000, -1000, -1000, 428, 1127,
	-1000, 12192, 263, 16361, 15328, 17753, 867, 825, -1000, -1000,
	255, 848, 7264, -107, -1000, -1000, -1000, 381, 14640, -1000,
	-1000, -1000, 1014, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 776, 17753, -1000, 344, -1000, 668, 5038,
	157, 668, 393, 668, 17753, 17753, 5038, 5038, 5038, 63,
	103, 96, 17753, 847, 142, 17753, 1058, 946, 17753, 668,
	668, -1000, 6522, -1000, 5038, 510, -1000, 611, 10462, 5038,
	5038, 5038, 17753, 5038, 5038, -1000, -1000, -1000, 509, 485,
	-1000, -1000, -1000, -1000, -1000, 5038, 5038, -1000, 1126, 476,
	-1000, -1000, -1000, -1000, 10462, 325, -1000, 940, -1000, -1000,
	26, -1000, 17753, -1000, 1150, -1000, -1000, -1000, -103, -1000,
	-1000, 10462, 10462, 10462, 10462, 620, 327, 11494, 547, 329,
	11494, 11494, 11494, 11494, 11494, 11494, 11494, 11494, 11494, 11494,
	11494, 11494, 11494, 11494, 11494, 674, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 668, -1000, 1145, 679, 679, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 11838, 7990,
	6522, 754, 757, 1099, 9049, 9049, 10462, 10462, 9755, 9402,
	9049, 1050, 360, 513, 17753, -1000, -1000, 11150, -1000, -1000,
	-1000, -1000, -1000, 644, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 17753, 17753, 9049, 9049, 9049, 9049, 9049, 668, 668,
	668, -1000, 597, 1081, 754, 1142, -1000, 1144, 307, 630,
	846, -1000, 594, 1081, 14296, 828, -1000, 1142, -1000, -1000,
	-1000, 17753, -1000, -1000, 16705, -1000, -1000, 6151, 74, 17753,
	-1000, 824, 1097, -1000, -1000, -1000, 1060, 13598, 13952, 74,
	628, 15328, 17753, -1000, -1000, 15328, 17753, 5780, 6893, -107,
	-1000, 829, -1000, -101, -78, 8343, 259, -1000, -1000, -1000,
	-1000, 4667, 319, 672, 529, -36, -1000, -1000, -1000, 860,
	-1000, 860, 860, 860, 860, -8, -8, -8, -8, -1000,
	-1000, -1000, -1000, -1000, 902, 885, -1000, 860, 860, 860,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 882, 882,
	882, 863, 863, 907, -1000, 17753, 5038, 1057, 5038, -1000,
	1602, -1000, -1000, -1000, 17753, 17753, 17753, 17753, 17753, 198,
	17753, 17753, 840, -1000, 17753, 5038, -1000, -1000, 248, -1000,
	-1000, -1000, -1000, -1000, 513, -1000, -1000, -1000, -1000, -1000,
	-1000, 17753, -1000, -1000, 17753, -1000, 16361, -1000, -1000, 17753,
	510, 17753, 17753, 513, -1000, 610, 17753, 17753, -1000, 16016,
	-1000, -1000, -1000, -1000, 513, 327, 499, 375, -1000, -1000,
	637, -1000, -1000, 1612, -1000, -1000, -1000, -1000, 547, 11494,
	11494, 11494, 235, 1612, 1784, 1797, 1857, 280, 557, 557,
	288, 288, 288, 288, 288, 463, 463, -1000, -1000, -1000,
	644, -1000, -1000, -1000, 644, 9049, 9049, 838, 680, 247,
	-1000, 909, -1000, -1000, 1081, 749, 749, 603, 627, 395,
	1125, 749, 392, 1124, 749, 749, 9049, -1000, -1000, 388,
	-1000, 10462, 644, -1000, 246, -1000, 402, 836, 832, 749,
	644, 644, 749, 749, -265, -1000, 431, 625, -1000, 380,
	-1000, 1084, -1000, -1000, 978, 10462, 10462, 10462, -1000, -1000,
	-1000, 1084, 1107, -1000, 1003, 991, 1117, 9049, 15328, 1142,
	-1000, -1000, -1000, 245, 813, 680, -1000, 17753, 15328, 15328,
	15328, 15328, 15328, -1000, 968, 966, -1000, 964, 958, 990,
	17753, -1000, 753, 644, 754, -1000, 13598, 234, 680, -1000,
	15672, -1000, -1000, 1117, 15328, 797, -1000, 797, -1000, 236,
	-1000, -1000, 829, -107, -43, -1000, -1000, -1000, -1000, 513,
	-1000, 696, 816, 4296, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 881, 668, -1000, 1041, 272, 301, 668, 1026, -1000,
	-1000, -1000, 1019, -1000, 411, -46, -1000, -1000, 555, -8,
	-8, -1000, -1000, 259, 1013, 259, 259, 259, 591, 591,
	-1000, -1000, -1000, -1000, 482, -1000, -1000, -1000, 480, -1000,
	938, 17753, 5038, -1000, -1000, -1000, -1000, 851, 851, 285,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 72, 868, -1000, -1000, -1000, -1000, 27, 55, 117,
	-1000, 5038, -1000, 6522, 476, 510, 880, 476, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 235, 1612, 1160, -1000, 11494, 11494, -1000, -1000, 749,
	749, 9049, 6522, 1099, 1084, -1000, -1000, 161, 674, 161,
	11494, 11494, -1000, 11494, 11494, -1000, -141, 760, 355, -1000,
	10462, 368, -1000, 6522, -1000, 11494, 11494, -1000, -1000, -1000,
	-1000, -1000, 587, -1000, -1000, -1000, -1000, 597, -1000, -1000,
	377, -1000, 679, -1000, 976, 513, 513, -1000, -1000, 17753,
	-1000, -1000, -1000, -1000, 1103, 10462, -1000, 815, -1000, 5409,
	931, 17753, 680, 1150, 13244, 17753, 830, -1000, 376, 1097,
	876, 929, 777, -1000, -1000, -1000, -1000, 965, -1000, 919,
	-1000, -1000, -1000, -1000, -1000, -1000, 754, -1000, 182, 179,
	160, 17753, -1000, 1099, 797, -1000, -1000, 294, -1000, -1000,
	-112, -102, -1000, -1000, -1000, 4667, -1000, 4667, 17753, 89,
	-1000, 668, 668, -1000, -1000, 871, 926, 11494, -1000, -1000,
	-1000, 661, 259, 259, -1000, 348, -1000, -1000, -1000, 746,
	-1000, 740, 789, 738, 17753, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 17753, -1000, -1000, -1000, -1000, -1000,
	17753, -152, 668, 17753, 17753, 17753, 17753, -1000, 231, 510,
	-1000, 510, 17753, 510, -1000, 11494, 1612, 1612, -1000, -1000,
	644, -1000, 1081, -1000, 644, 860, 860, -1000, 860, 863,
	-1000, 860, 16, 860, 15, 644, 644, 1705, 1685, 1578,
	1257, 680, -136, -1000, 513, 10462, -1000, 957, 869, 586,
	-1000, 679, -1000, -1000, -1000, 1090, 1089, 513, -1000, -1000,
	1049, 772, 762, -1000, -1000, 8696, 736, 210, 733, -1000,
	1099, 17753, 10462, -1000, -1000, 10462, 862, -1000, 10462, -1000,
	-1000, -1000, 1099, 680, 680, 680, 733, 1081, -1000, -1000,
	-1000, -1000, 4296, -1000, 715, -1000, 860, -1000, -1000, -1000,
	17753, -32, 1141, 1612, -1000, -1000, -1000, -1000, -1000, -8,
	580, -8, 467, -1000, 458, 5038, -1000, -1000, -1000, -1000,
	1052, -1000, 6522, -1000, -1000, 859, 870, -1000, -1000, 6522,
	-1000, -1000, 713, -1000, -1000, 1612, -1000, 1084, -1000, -1000,
	159, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11494,
	11494, 11494, 11494, 11494, 1081, 564, 513, 11494, 11494, -1000,
	-1000, -1000, 10462, 10462, 1024, -1000, 680, -1000, 857, 17753,
	17753, -1000, 17753, 1081, -1000, 513, 513, 17753, 513, 14984,
	17753, 17753, 12890, -1000, 183, 17753, -1000, 710, 252, -1000,
	-73, 259, -1000, 259, 658, 655, -1000, 680, 780, -1000,
	342, 17753, 17753, -1000, -1000, 17753, -1000, -1000, -1000, 402,
	402, 402, 402, 58, 644, -1000, 402, 402, 513, 779,
	1138, -1000, 680, 1150, 207, -1000, -1000, -1000, 708, 705,
	-1000, 705, 705, 234, 183, -1000, 668, 336, 560, -1000,
	86, 404, 1022, -1000, 1021, -1000, -1000, -1000, -1000, -1000,
	71, 6522, 4667, 695, -1000, -1000, -1000, -1000, -1000, -1000,
	644, 73, -155, -1000, -1000, -1000, 17753, 762, 17753, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 456, -1000, -1000, 17753,
	-1000, 559, -1000, -1000, 691, -1000, 17753, -1000, -1000, 868,
	-1000, 975, -150, -164, 703, -1000, -1000, 852, -1000, -1000,
	71, 989, -152, -1000, 961, -1000, 17753, -1000, 68, -1000,
	-153, 638, 62, -156, 925, 680, -165, 910, -1000, 1122,
	10806, -1000, -1000, 1130, 251, 251, 402, 644, -1000, -1000,
	-1000, 93, 569, -1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1425, 1424, 28, 61, 66, 1420, 1419, 1417, 111,
	110, 101, 1416, 1409, 1408, 1406, 1404, 1402, 1401, 1400,
	1398, 1395, 1391, 1384, 1383, 1382, 1381, 1379, 1378, 1377,
	1376, 1374, 1373, 1156, 1372, 1368, 1355, 80, 1352, 79,
	1351, 1350, 1349, 1348, 1342, 1340, 1339, 1338, 1337, 50,
	224, 49, 55, 1336, 59, 1496, 1334, 58, 64, 69,
	1333, 43, 1332, 1331, 83, 1328, 1327, 57, 1326, 1325,
	2376, 70, 73, 1324, 16, 36, 1323, 1321, 1319, 1318,
	30, 282, 1314, 1313, 19, 1312, 1309, 96, 1308, 67,
	15, 11, 31, 23, 1307, 68, 1304, 6, 1303, 65,
	1302, 1301, 1299, 1297, 20, 1295, 60, 1291, 77, 24,
	1290, 7, 1287, 78, 38, 21, 8, 1285, 1284, 26,
	75, 63, 72, 1282, 1281, 595, 1280, 985, 62, 1279,
	1278, 108, 40, 1277, 102, 597, 1275, 1271, 1258, 1256,
	22, 800, 1826, 12, 81, 1255, 1254, 1251, 2757, 25,
	56, 18, 1247, 1244, 1242, 35, 42, 44, 1241, 1238,
	47, 1228, 1227, 1225, 1224, 1223, 1221, 1219, 192, 1215,
	1211, 1210, 33, 13, 1208, 1206, 71, 27, 1205, 1203,
	1202, 51, 74, 1200, 1199, 54, 1198, 82, 37, 1197,
	1193, 1192, 1191, 1190, 34, 17, 1187, 14, 1182, 10,
	1178, 32, 1174, 5, 1173, 9, 1172, 1, 0, 1171,
	3, 1170, 1169, 46, 4, 1168, 2, 39, 1167, 1166,
	1164, 1160, 1159, 1625, 1655, 86, 1158, 87,
}

var yyR1 = [...]int{
	0, 221, 222, 222, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 208, 208, 208, 211, 212, 20, 3,
	3, 3, 3, 2, 2, 8, 4, 5, 5, 9,
	9, 40, 40, 10, 11, 11, 11, 11, 225, 225,
	64, 64, 65, 65, 113, 113, 12, 13, 13, 122,
	122, 121, 121, 121, 123, 123, 123, 123, 158, 158,
	14, 14, 14, 14, 14, 14, 14, 36, 36, 32,
	32, 32, 32, 35, 35, 48, 48, 48, 210, 210,
	209, 207, 207, 206, 206, 205, 21, 190, 192, 192,
	191, 191, 191, 191, 182, 161, 161, 161, 161, 164,
	164, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	163, 163, 163, 163, 163, 165, 165, 165, 165, 165,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 167, 167, 167, 167, 167,
	167, 167, 167, 181, 181, 168, 168, 176, 176, 177,
	177, 177, 174, 174, 175, 175, 178, 178, 178, 170,
	170, 171, 171, 179, 179, 172, 172, 172, 173, 173,
	173, 180, 180, 180, 180, 180, 169, 169, 183, 183,
	200, 200, 199, 199, 199, 34, 189, 189, 196, 196,
	196, 196, 196, 186, 186, 186, 187, 187, 185, 185,
	188, 188, 198, 198, 197, 184, 184, 201, 201, 201,
	201, 215, 216, 214, 214, 214, 214, 214, 193, 193,
	193, 194, 194, 194, 195, 195, 195, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 204, 202,
	202, 203, 203, 16, 22, 22, 17, 17, 17, 17,
	17, 18, 18, 23, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 129, 129, 131, 131, 127, 127,
	130, 130, 128, 128, 128, 132, 132, 132, 133, 133,
	159, 159, 159, 25, 25, 27, 27, 28, 29, 29,
	153, 153, 154, 154, 30, 31, 41, 41, 41, 41,
	41, 41, 43, 43, 43, 7, 7, 7, 7, 42,
	42, 42, 6, 6, 26, 26, 26, 26, 19, 226,
	37, 38, 38, 39, 39, 39, 45, 45, 45, 44,
	44, 44, 51, 51, 53, 53, 53, 53, 53, 54,
	54, 54, 54, 54, 54, 50, 50, 52, 52, 52,
	52, 145, 145, 145, 144, 144, 56, 56, 57, 57,
	58, 58, 59, 59, 59, 59, 96, 73, 73, 112,
	112, 111, 111, 114, 114, 60, 60, 60, 60, 61,
	61, 62, 62, 63, 63, 152, 152, 151, 151, 151,
	150, 150, 66, 66, 66, 68, 67, 67, 67, 67,
	69, 69, 71, 71, 70, 70, 70, 70, 72, 74,
	74, 74, 74, 74, 75, 75, 55, 55, 55, 55,
	55, 55, 55, 55, 126, 126, 77, 77, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 88, 88,
	88, 88, 88, 88, 78, 78, 78, 78, 78, 78,
	78, 49, 49, 89, 89, 89, 95, 90, 90, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 85, 85, 85, 85, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 227, 227, 87, 86,
	86, 86, 86, 86, 86, 86, 46, 46, 46, 46,
	46, 157, 157, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 100, 100, 47, 47,
	98, 98, 99, 101, 101, 97, 97, 97, 80, 80,
	80, 80, 80, 80, 80, 80, 82, 82, 82, 102,
	102, 103, 103, 104, 104, 105, 105, 106, 107, 107,
	107, 108, 108, 108, 108, 109, 109, 109, 79, 79,
	79, 79, 110, 110, 110, 110, 115, 115, 91, 91,
	93, 93, 92, 94, 116, 116, 119, 117, 117, 117,
	120, 120, 120, 120, 118, 118, 118, 147, 147, 147,
	124, 124, 134, 134, 135, 135, 125, 125, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 137, 137,
	137, 138, 138, 139, 139, 139, 146, 146, 142, 142,
	143, 143, 148, 148, 149, 149, 217, 218, 219, 219,
	220, 220, 220, 33, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 223, 224, 155, 156, 156, 156,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 2, 4,
	6, 6, 7, 4, 6, 5, 8, 1, 3, 7,
	8, 1, 1, 9, 8, 7, 6, 6, 1, 1,
	1, 3, 1, 3, 0, 4, 3, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 2, 8, 4, 6, 5, 5, 0, 1, 4,
	5, 7, 4, 5, 3, 1, 1, 1, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 2, 4,
	1, 3, 3, 3, 8, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 4,
	1, 2, 2, 3, 2, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	7, 7, 4, 5, 4, 4, 7, 5, 5, 5,
	12, 7, 5, 9, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 3, 3, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 3, 4, 4, 4,
	4, 4, 4, 3, 2, 7, 2, 3, 4, 3,
	7, 5, 4, 2, 4, 4, 3, 3, 5, 2,
	6, 4, 3, 7, 1, 1, 0, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 5,
	0, 1, 0, 1, 2, 3, 0, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 5, 3, 2, 2, 3, 3, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 1, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 3, 3, 7, 0,
	3, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 5, 7, 3, 0,
	5, 4, 5, 5, 0, 2, 1, 3, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 5, 6, 4, 4, 6,
	6, 6, 8, 8, 8, 8, 9, 8, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 8, 8, 0, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	5, 4, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 2, 3,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 0, 1,
	0, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -221, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -32, -35, -33,
	-34, -4, -223, 6, 7, -40, 9, 10, 30, -21,
	123, 124, 126, 125, 159, 127, 152, 53, 173, 174,
	176, 177, 178, 179, -43, 157, 158, 31, 32, 129,
	34, -36, 374, 370, 57, 8, 262, 154, 153, 25,
	375, -222, 376, -39, 5, -104, 15, -3, -37, -226,
	-37, -37, -37, -37, -37, -190, -192, 57, 96, -139,
	133, 77, 254, 130, 131, 137, -142, -208, -141, 60,
	61, 62, 272, 145, 304, 305, 364, 173, 187, 181,
	208, 200, 273, 306, 146, 198, 201, 241, 143, 307,
	228, 235, 71, 176, 250, 308, 155, 196, 192, 309,
	281, 190, 27, 310, 237, 213, 311, 374, 277, 239,
	191, 236, 129, 312, 148, 141, 313, 214, 218, 314,
	242, 315, 316, 317, 375, 185, 186, 365, 318, 144,
	244, 212, 142, 33, 274, 37, 163, 245, 216, 319,
	211, 207, 366, 320, 321, 322, 323, 210, 184, 206,
	41, 220, 219, 221, 240, 203, 324, 325, 326, 149,
	327, 193, 18, 328, 329, 330, 331, 332, 248, 158,
	333, 161, 334, 335, 336, 337, 338, 339, 238, 215,
	217, 138, 165, 234, 276, 340, 246, 189, 341, 150,
	162, 157, 249, 151, 342, 343, 344, 345, 346, 347,
	367, 348, 177, 368, 349, 350, 351, 352, 172, 369,
	243, 252, 40, 225, 353, 183, 370, 140, 354, 174,
	169, 230, 204, 164, 355, 356, 194, 195, 209, 182,
	205, 175, 166, 159, 357, 251, 226, 278, 202, 199,
	170, 358, 167, 168, 359, 231, 232, 171, 275, 247,
	197, 227, -125, 133, 254, 130, 232, 135, 131, 131,
	132, 133, 254, 130, 131, -70, -148, -208, -141, 133,
	131, 114, 201, 241, 123, 229, 237, -131, 238, 165,
	-159, 131, -127, 228, 231, 232, 171, 364, 239, 243,
	242, 233, -148, 175, -153, 180, -142, 178, -127, -41,
	360, 127, -155, -155, 230, 230, -155, -90, -55, -76,
	80, -81, 29, 23, -80, -77, -97, -94, -95, 114,
	115, 117, 116, 118, 103, 104, 111, 81, 119, -85,
	-83, -84, -86, 64, 63, 72, 65, 66, 67, 68,
	73, 74, 75, -142, -148, -92, -223, 47, 48, 263,
	264, 265, 266, 271, 267, 83, 36, 253, 261, 260,
	259, 257, 258, 255, 256, 269, 270, 136, 254, 130,
	109, 262, -208, -141, 364, 371, -37, 65, -5, -4,
	-223, 6, 20, 21, -108, 17, 16, -224, 59, -45,
	-53, 42, 43, -54, 21, 35, 46, 44, -38, -52,
	105, -55, -148, -125, -125, 11, -64, -65, -70, -72,
	-148, -117, -158, 175, -120, 243, 242, -143, -118, -142,
	-140, 241, 201, 240, 128, 279, 79, 22, 24, 223,
	82, 114, 16, 83, 113, 263, 123, 51, 280, 255,
	256, 253, 265, 266, 254, 229, 29, 10, 282, 25,
	153, 21, 35, 107, 125, 86, 87, 156, 23, 154,
	75, 285, 19, 54, 11, 13, 286, 287, 14, 136,
	135, 98, 132, 49, 8, 119, 26, 95, 45, 288,
	28, 289, 290, 291, 292, 47, 96, 17, 257, 258,
	31, 293, 271, 160, 109, 52, 38, 80, 294, 295,
	73, 296, 76, 55, 77, 15, 50, 297, 298, 299,
	300, 97, 126, 262, 48, 301, 130, 6, 268, 30,
	152, 46, 302, 131, 85, 269, 270, 134, 74, 5,
	137, 32, 9, 53, 56, 259, 260, 261, 36, 84,
	12, 303, 78, -191, 96, -182, -208, -70, 132, -70,
	262, -135, 136, -135, -135, 131, -70, -208, -208, 123,
	125, 128, 55, -22, -70, -134, 136, -208, -134, -134,
	-134, -70, 120, -70, -208, 30, -132, 96, 12, 254,
	-208, 165, 131, 166, 133, -156, -223, -143, -186, -208,
	8, 132, 33, 144, -156, 169, 170, -156, -130, -129,
	235, 236, 230, 234, 12, 170, 230, 168, -188, -208,
	134, -142, -131, -7, -3, -10, -9, -11, 88, -155,
	-155, 58, 79, 77, 78, 95, -55, -78, 98, 80,
	96, 97, 82, 100, 99, 110, 103, 104, 105, 106,
	107, 108, 109, 101, 102, 113, 88, 89, 90, 91,
	92, 93, 94, -126, -223, -95, -223, 121, 122, -81,
	-81, -81, -81, -81, -81, -81, -81, -81, -81, -223,
	120, -2, -90, -4, -223, -223, -223, -223, -223, -223,
	-223, -223, -100, -55, -223, -227, -87, -223, -227, -87,
	-227, -87, -227, -223, -227, -87, -227, -87, -227, -227,
	-87, -223, -223, -223, -223, -223, -223, -223, 366, 367,
	372, 373, -70, -104, -3, -37, -109, 19, 31, -55,
	-105, -106, -55, -104, 38, -50, -52, -54, 42, 43,
	70, 11, -145, -144, 22, -142, 64, 120, -71, 26,
	-70, -57, -58, -59, -60, -73, -96, -223, -70, -70,
	-64, -225, 58, 11, 56, -225, 58, 120, 58, 175,
	-120, -122, -121, 244, 246, 88, -147, -142, 64, 29,
	30, 59, 58, -70, -161, -164, -166, -165, -167, -162,
	-163, 198, 199, 114, 202, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 30, 155, 194, 195, 196,
	197, 214, 215, 216, 217, 218, 219, 220, 221, 181,
	200, 273, 182, 183, 184, 185, 186, 187, 189, 190,
	191, 192, 193, -208, -156, 133, -208, 80, -208, -70,
	-70, -156, -156, -156, 167, 167, 131, 131, 172, -70,
	58, 134, -64, 23, 55, -70, -208, -208, -149, -148,
	-140, -156, -132, 64, -55, -156, -156, -156, -70, -156,
	-156, -187, 11, 98, -187, -132, -37, -156, -156, 11,
	-128, 11, 98, -55, -133, 96, 55, -154, 178, -70,
	212, 361, 362, 363, -55, -55, -55, -55, -88, 73,
	80, 74, 75, -81, -89, -92, -95, 69, 98, 96,
	97, 82, -81, -81, -81, -81, -81, -81, -81, -81,
	-81, -81, -81, -81, -81, -81, -81, -157, -208, 64,
	-208, -80, -80, -142, -51, 21, 35, -50, -143, -149,
	-140, -39, -224, -224, -104, -50, -50, -55, -55, -97,
	64, -50, -97, 64, -50, -50, -44, 21, 35, -98,
	-99, 84, -97, -142, -148, -224, -81, -142, -142, -50,
	-51, -51, -50, -50, -188, -188, -208, -220, -217, -211,
	61, -108, -224, 9, 98, 58, 18, 58, -107, 24,
	25, -108, -82, -142, 65, 68, -56, 58, 11, -54,
	-70, -144, 105, -149, -113, 161, -70, 30, 58, -66,
	-68, -67, -69, 45, 49, 51, 46, 47, 48, 52,
	-152, 22, -57, -33, -3, 374, -223, -151, 161, -150,
	22, -148, 64, -113, 56, -57, -70, -57, -72, -148,
	105, -120, -122, 58, 245, 247, 248, 55, 76, -55,
	-173, 113, -193, -194, -195, -143, 64, 65, -182, -183,
	-184, -196, 147, -201, 138, 140, 137, -185, 148, 132,
	28, 59, -178, 73, 80, -174, 226, -168, 57, -168,
	-168, -168, -168, -172, 201, -172, -172, -172, 57, 57,
	-168, -168, -168, -176, 57, -176, -176, -177, 57, -177,
	-146, 56, -70, -156, 23, -156, -136, 128, 125, 126,
	-204, 124, 223, 201, 71, 29, 15, 263, 161, 278,
	-208, 162, -70, -70, -70, -70, -70, 128, 125, -70,
	-70, -70, -156, 120, -70, -70, -71, -70, -132, -148,
	-148, 64, -70, -142, -42, -142, 64, 73, 74, 75,
	-89, -81, -81, -81, -49, 156, 79, -224, -224, -50,
	-50, -223, 120, -5, -108, -224, -224, 58, 56, 22,
	11, 11, -224, 11, 11, -224, -224, -50, -101, -99,
	86, -55, -224, 120, -224, 58, 58, -224, -224, -224,
	-224, -224, -48, 365, 369, 368, 69, 58, -219, -218,
	-212, 62, 88, -109, 40, -55, -55, -106, -109, -124,
	19, 11, 36, 36, -75, 12, -52, -57, -54, 120,
	-79, 30, 36, -3, -223, -223, -116, -119, -97, -58,
	-59, -59, -58, -59, 45, 45, 45, 50, 45, 50,
	45, -67, -148, -224, -224, -224, -3, -74, 53, 135,
	54, -223, -150, -75, -57, -75, -75, 120, -121, -123,
	249, 246, 252, -208, 64, 58, -195, 88, 57, -208,
	28, -185, -185, -188, -188, 28, -170, 29, 73, -175,
	227, 65, -172, -172, -173, 30, -173, -173, -173, -181,
	64, -181, 65, 65, 55, -142, -156, -155, -213, 143,
	139, 147, 148, 141, 60, 61, 62, 132, 28, 138,
	140, 161, 137, -213, -137, -138, 134, 22, 132, 28,
	161, -210, 56, 167, 223, 167, 134, -156, -149, -128,
	-132, -112, 57, -128, -49, 79, -81, -81, -224, -224,
	-51, -143, -104, -109, -160, 114, 198, 155, 196, 192,
	212, 203, 225, 194, 226, -157, -160, -81, -81, -81,
	-81, 272, -104, 87, -55, 85, -143, -81, -81, 64,
	-217, 88, -80, 41, -70, -102, 13, -55, 105, -115,
	55, -116, -91, -93, -92, -223, -110, -142, -114, -142,
	-75, 58, 88, -62, -61, 55, 56, -63, 55, -61,
	45, 45, -224, 132, 132, 132, -114, -104, -75, 246,
	250, 251, -194, -195, -198, -197, -142, -201, -188, -188,
	57, -171, 55, -81, 59, -173, -173, -208, 114, 59,
	58, 59, 58, 59, 58, -70, -155, -155, -70, -155,
	-142, -207, 275, -209, -208, -142, -142, -142, -70, 120,
	-132, -132, -111, -142, -132, -81, -224, -108, -224, -168,
	-168, -168, -177, -168, 186, -168, 186, -224, -224, 19,
	19, 19, 19, -223, -47, 268, -55, 58, 58, 64,
	-80, -103, 14, 16, 27, -115, 58, -224, -224, 58,
	120, -224, 58, -104, -119, -55, -55, 57, -55, -223,
	-223, -223, -224, -108, 59, 58, -168, -111, -179, 223,
	9, -172, 64, -172, 65, 65, -156, 26, -206, -205,
	-143, 57, 56, -149, 59, 58, -109, -172, -208, -81,
	-81, -81, -81, -81, -108, 64, -81, -81, -55, -90,
	28, -93, 36, -3, -142, -142, -142, -108, -111, -111,
	-224, -111, -111, -151, -200, -199, 56, 142, 71, -197,
	59, -180, 138, 28, 137, -84, -173, -173, 59, 59,
	-223, 58, 88, -111, -70, -142, -224, -224, -224, -224,
	-46, 98, 275, -224, -224, -224, 9, -91, 120, 59,
	-224, -224, -224, -74, -199, -208, -189, 88, 64, 150,
	-169, 71, 28, 28, -202, -203, 161, -205, -195, 59,
	-224, 273, 52, 276, -116, -142, 65, -70, 64, -224,
	58, -142, -210, 41, 274, 277, 57, -203, 36, -207,
	41, -111, 163, 275, 59, 164, 276, -215, -216, 55,
	-223, 277, -216, 55, 10, 9, -81, 160, -214, 151,
	146, 149, 30, -214, -224, -224, 145, 29, 73,
}

var yyDef = [...]int{
	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 643, 0, 379, 379, 379, 379, 379, 379, 0,
	713, 696, 0, 0, 0, 0, -2, 344, 345, 0,
	347, -2, 0, 0, -2, 1036, 1036, 0, 0, 1036,
	0, 0, 379, 0, 1034, 51, 52, 362, 363, 364,
	88, 1, 3, 0, 383, 651, 0, 0, -2, 381,
	0, 696, 696, 0, 0, 80, 81, 0, 0, 0,
	1023, 0, 694, 694, 694, 714, 715, 718, 719, 33,
	34, 35, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 0, 0, 0, 0, 0, 697, 0, 692,
	0, 692, 692, 692, 0, 292, 464, 722, 723, 1023,
	0, 0, 0, 335, 0, 1037, 304, 0, 306, 1037,
	0, 1037, 0, 313, 0, 0, 319, 220, 327, 341,
	342, 329, 343, 346, 0, 351, 354, 0, 326, 0,
	0, 361, 374, 375, 1036, 1036, 378, 38, 517, 476,
	0, 482, 484, 0, 519, 520, 521, 522, 523, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 551, 552, 628, 629, 630, 631, 632, 633, 634,
	635, 486, 487, 625, 0, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 616, 0, 586, 586, 586,
	586, 586, 586, 586, 586, 0, 0, 0, 0, 0,
	0, 0, -2, -2, 0, 0, 0, 205, 643, 47,
	0, 379, 384, 385, 655, 0, 0, 643, 1035, 0,
	0, -2, -2, 395, 401, 402, 403, 404, 380, 0,
	407, 411, 0, 0, 0, 0, 0, 0, 60, 62,
	464, 66, 0, 1012, 677, -2, -2, 0, 0, 720,
	721, -2, 867, -2, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 0, 0, 110, 0, 108, 0, 1037,
	0, 0, 0, 0, 0, 0, 1037, 1037, 1037, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 293, 1037, 335, 296, 0, 0, 1037,
	1037, 1037, 0, 1037, 1037, 303, 1038, 1039, 0, 335,
	379, 213, 214, 215, 307, 1037, 1037, 309, 0, 332,
	330, 331, 324, 325, 0, 338, 316, 317, 322, 221,
	352, 355, 0, 373, 365, 366, 367, 368, 0, 376,
	377, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 504, 505, 506, 507,
	508, 509, 510, 483, 0, 497, 0, 0, 0, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 0, 392,
	0, 0, 0, 643, 0, 0, 0, 0, 0, 0,
	0, 389, 0, 617, 0, 570, 578, 0, 571, 579,
	572, 580, 573, 0, 574, 581, 575, 582, 576, 577,
	583, 0, 0, 0, 392, 392, 0, 0, 220, 220,
	0, 94, 730, 651, 0, 394, 39, 0, 0, 652,
	644, 645, 648, 651, 0, 416, 405, 396, 399, 400,
	382, 0, 408, 412, 0, 414, 415, 0, 64, 0,
	463, 0, 418, 420, 421, 422, 445, 0, 447, -2,
	0, 0, 0, 58, 59, 0, 0, 0, 0, 1012,
	678, 68, 69, 0, 0, 0, 188, 687, 688, 689,
	685, 238, 0, 0, 176, 172, 116, 117, 118, 165,
	120, 165, 165, 165, 165, 185, 185, 185, 185, 148,
	149, 150, 151, 152, 0, 0, 135, 165, 165, 165,
	139, 155, 156, 157, 158, 159, 160, 161, 162, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 167, 167,
	167, 169, 169, 716, 83, 0, 1037, 0, 1037, 106,
	0, 252, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 693, 0, 1037, 289, 290, 465, 724,
	725, 294, 295, 336, 337, 297, 298, 299, 300, 301,
	302, 0, 216, 217, 0, 321, 0, 308, 312, 0,
	335, 0, 0, 314, 315, 0, 0, 0, 353, 369,
	357, 358, 359, 360, 518, 477, 478, 479, 481, 498,
	0, 500, 502, 488, 489, 513, 514, 515, 0, 0,
	0, 0, 511, 493, 0, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 538, 601, 602,
	0, 536, 537, 548, 0, 0, 0, 393, 626, 0,
	-2, 0, 516, 672, 651, 0, 0, 0, 0, 521,
	628, 0, 521, 628, 0, 0, 0, 390, 391, 623,
	620, 0, 0, 625, 0, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 92, 0, 728, 731, 0,
	36, 655, 48, 656, 0, 0, 0, 0, 647, 649,
	650, 655, 0, 636, 0, 0, 474, 0, 0, 397,
	45, 413, 409, 0, 0, 0, 462, 0, 0, 0,
	0, 0, 0, 452, 0, 0, 455, 0, 0, 0,
	0, 446, 0, 0, 0, -2, 0, 469, 952, 448,
	0, 450, 451, 474, 0, 474, 61, 474, 63, 0,
	468, 679, 67, 0, 0, 72, 73, 680, 681, 682,
	683, 0, 107, 239, 241, 244, 245, 246, 111, 112,
	113, 0, 0, 226, 0, 0, 220, 220, 0, 218,
	219, 109, 179, 177, 0, 174, 173, 119, 0, 185,
	185, 142, 143, 188, 0, 188, 188, 188, 0, 0,
	136, 137, 138, 130, 0, 131, 132, 133, 0, 134,
	0, 0, 1037, 85, 695, 86, 1036, 0, 0, 708,
	253, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 0, 98, 257, 259, 258, 262, 0, 0, 0,
	284, 1037, 288, 0, 332, 335, 429, 332, 311, 333,
	334, 339, 318, 349, 372, 370, 371, 499, 501, 503,
	490, 511, 494, 0, 491, 0, 0, 485, 553, 0,
	0, 392, 0, 643, 655, 557, 558, 0, 0, 0,
	0, 0, 594, 0, 0, 595, 0, 643, 0, 621,
	0, 0, 569, 0, 588, 0, 0, 589, 590, 591,
	592, 593, 90, 95, 96, 97, 93, 0, 733, 729,
	0, 37, 0, 41, 0, 653, 654, 646, 40, 0,
	690, 691, 637, 638, 639, 0, 406, 417, 398, 0,
	666, 0, 0, 659, 0, 0, 474, 674, 0, 419,
	441, 443, 0, 438, 453, 454, 456, 0, 458, 0,
	460, 461, 423, 424, 425, 426, 0, 427, 0, 0,
	0, 0, 449, 643, 474, 56, 57, 0, 70, 71,
	0, 0, 77, 189, 190, 0, 242, 0, 0, 0,
	208, 220, 220, 211, 212, 0, 181, 0, 178, 115,
	175, 0, 188, 188, 144, 0, 145, 146, 147, 0,
	163, 0, 0, 0, 0, 717, 84, 247, 1036, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 1036, 0, 1036, 709, 710, 711, 712,
	0, 101, 0, 0, 0, 0, 0, 287, 466, 335,
	320, 335, 0, 335, 492, 0, 512, 495, 554, 555,
	0, 627, 651, 43, 0, 165, 165, 606, 165, 169,
	609, 165, 611, 165, 614, 0, 0, 0, 0, 0,
	0, 0, 618, 568, 624, 0, 626, 0, 0, 0,
	732, 0, 726, 657, 42, 641, 0, 475, 410, 49,
	0, 666, 658, 668, 670, 0, 0, 662, 0, 433,
	643, 0, 0, 435, 442, 0, 0, 436, 0, 437,
	457, 459, -2, 0, 0, 0, 0, 651, 55, 74,
	75, 76, 240, 243, 0, 222, 165, 225, 209, 210,
	0, 183, 0, 180, 166, 140, 141, 186, 187, 185,
	0, 185, 0, 170, 0, 1037, 248, 249, 250, 251,
	0, 256, 0, 99, 100, 0, 0, 261, 285, 0,
	305, 323, 0, 431, 310, 496, 556, 655, 559, 603,
	185, 607, 608, 610, 612, 613, 615, 561, 560, 0,
	0, 0, 0, 0, 651, 0, 622, 0, 0, 91,
	727, 46, 0, 0, 0, 50, 0, 671, 0, 0,
	0, 65, 0, 651, 675, 676, 439, 0, 444, 0,
	0, 0, 447, 54, 199, 0, 224, 0, 191, 184,
	0, 188, 164, 188, 0, 0, 82, 0, 102, 103,
	0, 0, 0, 467, 430, 0, 44, 604, 605, 0,
	0, 0, 0, 596, 0, 619, 0, 0, 642, 640,
	0, 669, 0, 661, 664, 663, 434, 53, 0, 0,
	471, 0, 0, 469, 198, 200, 0, 206, 0, 223,
	0, 196, 0, 193, 195, 182, 153, 154, 168, 171,
	0, 0, 0, 0, 263, 432, 562, 564, 563, 565,
	0, 0, 0, 567, 584, 585, 0, 660, 0, 440,
	470, 472, 473, 428, 201, 202, 0, 207, 204, 0,
	114, 0, 192, 194, 0, 279, 0, 104, 105, 98,
	566, 0, 0, 0, 667, 665, 203, 0, 197, 278,
	0, 0, 101, 597, 0, 600, 0, 280, 0, 260,
	598, 0, 0, 0, 227, 0, 0, 228, 229, 0,
	0, 599, 230, 0, 0, 0, 0, 0, 231, 233,
	234, 0, 0, 232, 281, 282, 235, 236, 237,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 376,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:359
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:364
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:365
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:400
		{
			setParseTree(yylex, nil)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:406
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:420
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:432
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:438
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:446
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:454
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:477
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:485
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:499
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:505
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:509
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:516
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:528
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = InsertStr
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = ReplaceStr
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:550
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:560
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:564
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:568
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:582
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:588
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:592
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:597
		{
			yyVAL.partitions = nil
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:601
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:607
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:613
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:617
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:623
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:627
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:633
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:637
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:641
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:647
		{
			yyVAL.str = RepeatableRead
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:651
		{
			yyVAL.str = ReadCommitted
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:655
		{
			yyVAL.str = ReadUncommitted
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:659
		{
			yyVAL.str = Serializable
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.str = SessionStr
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:669
		{
			yyVAL.str = GlobalStr
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:675
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 82:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:686
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:691
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:695
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:699
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:703
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:708
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:712
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:718
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:723
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:728
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str, KeyFilePath: string(yyDollar[6].bytes), KeyEnvVar: string(yyDollar[7].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:733
		{
			yyVAL.statement = &AuthRevoke{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:739
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes), ProviderId: yyDollar[4].colIdent.GetRawVal(), ProviderVersion: string(yyDollar[5].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:744
		{
			yyVAL.statement = &Registry{ActionType: string(yyDollar[3].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:750
		{
			yyVAL.str = InteractiveStr
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:754
		{
			yyVAL.str = ServiceAccountStr
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.str = ServiceAccountStr
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:764
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:768
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:779
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:784
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:795
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:801
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:807
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:814
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:821
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:825
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:844
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 114:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:850
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 154:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1050
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1054
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1077
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1082
		{
			yyVAL.sqlVal = nil
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1091
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1095
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1103
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1113
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1121
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1130
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1140
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1148
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1153
		{
			yyVAL.optVal = nil
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1162
		{
			yyVAL.optVal = nil
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1166
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1171
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1193
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1206
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1210
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1218
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1222
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1227
		{
			yyVAL.sqlVal = nil
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1237
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1241
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1251
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1257
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1266
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1272
		{
			yyVAL.statement = &Sleep{Duration: NewIntVal(yyDollar[2].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1282
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1288
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1292
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1296
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1300
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1304
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1325
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1329
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1335
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1339
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1344
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1348
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1354
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1364
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1370
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1374
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 227:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1381
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 228:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1385
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 229:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1389
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 230:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1393
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1399
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1405
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1411
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1415
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1419
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1423
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1427
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1432
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1436
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1440
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1448
		{
			yyVAL.str = yyDollar[1].str
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1452
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1456
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1466
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1470
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1476
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1480
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1488
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1493
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1498
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1557
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1600
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1606
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1610
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1616
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 282:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1620
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1632
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1636
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1644
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1652
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1657
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1669
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1679
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &OtherRead{}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1695
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1700
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1705
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1718
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1722
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1726
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1734
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1738
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1743
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1747
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1759
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1764
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1774
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1778
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1782
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1786
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1795
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1799
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1807
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1824
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), ShowTablesOpt: showTablesOpt}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1829
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: yyDollar[3].str}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1834
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Comments: Comments(yyDollar[4].bytes2), Type: string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt, Columns: yyDollar[6].columns}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1845
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = "extended "
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1861
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.str = "full "
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1871
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1881
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1885
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1889
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1895
		{
			yyVAL.showFilter = nil
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1899
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1903
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1909
		{
			yyVAL.showFilter = nil
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1913
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1919
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1923
		{
			yyVAL.str = SessionStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.str = GlobalStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1933
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = &Begin{}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &Begin{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &Commit{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.statement = &Rollback{}
		}
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1963
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1968
		{
			yyVAL.empty = struct{}{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.empty = struct{}{}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1973
		{
			yyVAL.empty = struct{}{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1975
		{
			yyVAL.empty = struct{}{}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1980
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1986
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1991
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.str = JSONStr
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1999
		{
			yyVAL.str = TreeStr
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2003
		{
			yyVAL.str = VitessStr
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2007
		{
			yyVAL.str = TraditionalStr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.str = AnalyzeStr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2017
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2039
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2043
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2062
		{
			yyVAL.statement = &DescribeTable{Full: string(yyDollar[2].str), Extended: string(yyDollar[3].str), Table: yyDollar[4].tableName}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2066
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2072
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2080
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2084
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2094
		{
			setAllowComments(yylex, true)
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2098
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2104
		{
			yyVAL.bytes2 = nil
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = UnionStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = UnionAllStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2122
		{
			yyVAL.str = UnionDistinctStr
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = ""
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2135
		{
			yyVAL.str = SQLCacheStr
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2144
		{
			yyVAL.str = DistinctStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = DistinctStr
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2153
		{
			yyVAL.selectExprs = nil
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2157
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2162
		{
			yyVAL.strs = nil
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2170
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2174
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2178
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = SQLCacheStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = DistinctStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.str = DistinctStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.str = StraightJoinHint
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2204
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2224
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2232
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2237
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2241
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2245
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2257
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2261
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2271
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2281
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2285
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2289
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2293
		{
			exec := yyDollar[2].statement.(*Exec)
			yyVAL.tableExpr = &ExecSubquery{Exec: exec}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 428:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2310
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2315
		{
			yyVAL.columns = nil
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2319
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2326
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2330
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2336
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2353
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2357
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2361
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2365
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2373
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2377
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2379
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2383
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2385
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2388
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2390
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2393
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2397
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2408
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2414
		{
			yyVAL.str = JoinStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.str = JoinStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2422
		{
			yyVAL.str = JoinStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2428
		{
			yyVAL.str = StraightJoinStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2434
		{
			yyVAL.str = LeftJoinStr
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			yyVAL.str = LeftJoinStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2442
		{
			yyVAL.str = RightJoinStr
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2446
		{
			yyVAL.str = RightJoinStr
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			yyVAL.str = NaturalJoinStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2456
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2466
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2470
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2476
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2480
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2484
		{
			yyVAL.tableName = TableName{QualifierSecond: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2488
		{
			yyVAL.tableName = TableName{QualifierThird: yyDollar[1].tableIdent, QualifierSecond: yyDollar[3].tableIdent, Qualifier: yyDollar[5].tableIdent, Name: yyDollar[7].tableIdent}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2494
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2499
		{
			yyVAL.indexHints = nil
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2503
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2507
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2511
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2515
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = nil
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2564
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2568
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2592
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2626
		{
			yyVAL.str = IsNullStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2630
		{
			yyVAL.str = IsNotNullStr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2634
		{
			yyVAL.str = IsTrueStr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2638
		{
			yyVAL.str = IsNotTrueStr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2642
		{
			yyVAL.str = IsFalseStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			yyVAL.str = IsNotFalseStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2652
		{
			yyVAL.str = EqualStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2656
		{
			yyVAL.str = LessThanStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2660
		{
			yyVAL.str = GreaterThanStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2664
		{
			yyVAL.str = LessEqualStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2668
		{
			yyVAL.str = GreaterEqualStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2672
		{
			yyVAL.str = NotEqualStr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2676
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = nil
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2685
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2695
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2699
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2705
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2715
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2729
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2733
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2741
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2789
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2805
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2809
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2813
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2817
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2851
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 559:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 560:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 561:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 563:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 564:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2923
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 566:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 567:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2931
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2962
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2972
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2988
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2992
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 585:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3029
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3051
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3055
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3059
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3063
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3069
		{
			yyVAL.str = ""
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3073
		{
			yyVAL.str = BooleanModeStr
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3077
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 599:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3081
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3085
		{
			yyVAL.str = QueryExpansionStr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3091
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3101
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3105
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3109
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3117
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3121
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3131
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3139
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3143
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3151
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3156
		{
			yyVAL.expr = nil
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3165
		{
			yyVAL.str = string("")
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3169
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3175
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3179
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3185
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3190
		{
			yyVAL.expr = nil
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3194
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3204
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3208
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3226
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3230
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3234
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3238
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3242
		{
			yyVAL.expr = &NullVal{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3257
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3261
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3266
		{
			yyVAL.exprs = nil
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3270
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3275
		{
			yyVAL.expr = nil
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3279
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3284
		{
			yyVAL.orderBy = nil
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3288
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3298
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3304
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3309
		{
			yyVAL.str = AscScr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3313
		{
			yyVAL.str = AscScr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3317
		{
			yyVAL.str = DescScr
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3322
		{
			yyVAL.limit = nil
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3326
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3330
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3334
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3339
		{
			yyVAL.str = ""
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3343
		{
			yyVAL.str = ForUpdateStr
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3347
		{
			yyVAL.str = ShareModeStr
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3360
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3364
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3368
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3372
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3378
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3382
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3386
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3390
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3395
		{
			yyVAL.updateExprs = nil
		}
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3399
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3409
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3415
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3419
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3425
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3431
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3441
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3445
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3451
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3457
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3461
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3466
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3472
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3476
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3480
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3484
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3491
		{
			yyVAL.bytes = []byte("charset")
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3498
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3502
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3506
		{
			yyVAL.expr = &Default{}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3515
		{
			yyVAL.byt = 0
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3517
		{
			yyVAL.byt = 1
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3520
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3522
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3525
		{
			yyVAL.str = ""
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3527
		{
			yyVAL.str = IgnoreStr
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3531
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3533
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3535
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3537
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3539
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3541
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3543
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3545
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3547
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3549
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3552
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3554
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3556
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3560
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3562
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3565
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3572
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3574
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3578
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3582
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3589
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3595
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3599
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3606
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3612
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3618
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3624
		{
			yyVAL.execVarDefOpt = nil
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3626
		{
			rv := yyDollar[1].execVarDef
			yyVAL.execVarDefOpt = &rv
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3632
		{
			yyVAL.execVarDefs = nil
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3634
		{
			yyVAL.execVarDefs = []ExecVarDef{yyDollar[1].execVarDef}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3638
		{
			yyVAL.execVarDefs = append(yyDollar[1].execVarDefs, yyDollar[3].execVarDef)
		}
	case 733:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3645
		{
			yyVAL.statement = NewExec(yyDollar[2].bytes2, yyDollar[3].tableName, yyDollar[4].execVarDefs, yyDollar[5].execVarDefOpt)
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3972
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3981
		{
			decNesting(yylex)
		}
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3986
		{
			skipToEnd(yylex)
		}
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3991
		{
			skipToEnd(yylex)
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3995
		{
			skipToEnd(yylex)
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3999
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
